import {
  AgendaView,
  AjaxHelper,
  Button,
  ButtonGroup,
  CSSHelper,
  Calendar,
  CalendarDatePicker,
  Checkbox,
  CheckboxGroup,
  ChecklistFilterCombo,
  ChipView,
  CodeEditor,
  ColorField,
  Combo,
  Container,
  DateField,
  DatePicker,
  DateRangeField,
  DateTimeField,
  DayAgendaView,
  DayResourceView,
  DayView,
  DemoCodeEditor,
  DisplayField,
  DurationField,
  Editor,
  EventColorField,
  FieldFilterPicker,
  FieldFilterPickerGroup,
  FieldSet,
  FileField,
  FilePicker,
  FilterField,
  Fullscreen,
  Grid,
  GridBase,
  GridFieldFilterPicker,
  GridFieldFilterPickerGroup,
  GroupBar,
  Hint,
  Label,
  List,
  Menu,
  ModeSelector,
  MonthAgendaView,
  MonthPicker,
  MonthView,
  NumberField,
  PagingToolbar,
  Panel,
  PasswordField,
  ProjectCombo,
  ProjectModel2,
  Radio,
  RadioGroup,
  RangeMenu,
  ResourceCombo,
  ResourceFilter,
  ResourceView,
  Scheduler,
  SchedulerBase,
  SchedulerDatePicker,
  SlideToggle,
  Slider,
  Splitter,
  TabPanel,
  TextAreaField,
  TextAreaPickerField,
  TextField,
  TimeField,
  TimePicker,
  TimelineHistogram,
  Toolbar,
  TreeCombo,
  TreeGrid,
  UndoRedo,
  ViewPresetCombo,
  WeekView,
  Widget,
  YearPicker,
  YearView
} from "./chunk-7SMYL6A5.js";
import {
  Fragment,
  Teleport,
  computed,
  createBaseVNode,
  createBlock,
  createElementBlock,
  createVNode,
  defineComponent,
  getCurrentInstance,
  mergeProps,
  nextTick,
  onBeforeUnmount,
  onMounted,
  openBlock,
  provide,
  ref,
  renderList,
  renderSlot,
  resolveDynamicComponent,
  toDisplayString,
  toHandlers,
  toRaw,
  unref,
  watch
} from "./chunk-U3LI7FBV.js";

// node_modules/@bryntum/calendar-vue-3/lib/chunks/05YhxvzA.js
var d = defineComponent({
  __name: "BryntumFullscreenButton",
  setup(f) {
    const n = ref(null), o = ref(null);
    return onMounted(() => {
      Fullscreen.enabled && (n.value = new Button({
        appendTo: o.value,
        icon: "b-icon b-icon-fullscreen",
        tooltip: "Fullscreen",
        onClick() {
          Fullscreen.enabled && (Fullscreen.isFullscreen ? Fullscreen.exit() : Fullscreen.request(document.body));
        }
      }));
    }), onBeforeUnmount(() => {
      n.value && n.value.destroy();
    }), (a2, m) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: o
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/helper/WrapperHelper.js
var l = class _l {
  /**
   * Development warning. Showed when environment is set to 'development'
   * @param {String} clsName vue component instance
   * @param {String} msg console message
   */
  static devWarning(t, e) {
    var s;
    ((s = window.bryntum) != null && s.isTestEnv || true) && console.warn(
      `Bryntum${t}Component development warning!
${e}
Please check Vue integration guide: https://bryntum.com/products/grid/docs/guide/Grid/integration/vue/guide`
    );
  }
  static devWarningContainer(t, e) {
    _l.devWarning(
      t,
      `Using "${e}" parameter for configuration is not recommended.
Widget is placed automatically inside it's container element.
Solution: remove "${e}" parameter from configuration.`
    );
  }
  static devWarningConfigProp(t, e) {
    _l.devWarning(
      t,
      `Using "${e}" parameter for configuration is not recommended.
Solution: Use separate parameter for each "${e}" value to enable reactive updates of the API instance`
    );
  }
  static devWarningUpdateProp(t, e) {
    _l.devWarning(
      t,
      `"${e}" is a static config option for component constructor only. No runtime changes are supported!`
    );
  }
  static camelize(t) {
    return t.replace(/-./g, (e) => e[1].toUpperCase());
  }
  static capitalize(t) {
    return t.charAt(0).toUpperCase() + t.slice(1);
  }
  /**
   * Returns `true` if the provided configuration object is valid for Vue processing.
   * @param {*} config
   * @returns {Boolean}
   */
  static isVueConfig(t) {
    return !!(t != null && t.vue);
  }
  /**
   * Creates bryntum component config from vue component
   * @param {Object} context
   * @param {Object} context.me vue component instance
   * @param {Object} context.widgetData reference to data
   * @param {Function} context.emit reference to emit
   * @param {Object} context.element HTML element
   * @param {Function} context.processCellContent cell renderer method
   * @param {Function} context.processEventContent event renderer method
   * @param {Function} context.processWidgetContent widget renderer method
   * @param {Function} context.hasFrameworkRenderer checks presence of vue renderer
   * @param {Function} context.toRaw Vue fn to unwrap reactive object
   * @returns {Object} config object
   */
  static createConfig({
    me: t,
    widgetData: e,
    emit: s,
    element: i,
    processCellContent: n,
    processEventContent: o,
    processWidgetContent: r,
    hasFrameworkRenderer: a2,
    toRaw: u
  }) {
    const f = {}, d2 = t.vnode.props || {};
    for (const c of Object.keys(d2))
      f[this.camelize(c)] = d2[c];
    const {
      instanceClass: m,
      instanceName: b
    } = e, y = (c) => f[c] !== void 0, $ = (e.configNames || []).filter(y), v4 = (e.propertyConfigNames || []).filter(y), h = (e.propertyNames || []).filter(y), N2 = (e.featureNames || []).filter(y), V = e.eventNames.filter((c) => !y(c) && !f[`on${this.capitalize(c)}`]), p = {
      vueComponent: t,
      listeners: {},
      features: {},
      processCellContent: n,
      processEventContent: o,
      processWidgetContent: r,
      hasFrameworkRenderer: a2
    };
    V.forEach((c) => p.listeners[c] = (P5) => s(c, P5)), [
      ...$,
      ...v4,
      ...N2
    ].forEach((c) => {
      _l.applyPropValue(p, c, f[c], true, u), ["features", "config"].includes(c) && _l.devWarningConfigProp(m.$name, c);
    }), p.cls = (p.cls || "") + ` b-vue-${m.$name.toLowerCase()}-container`, e.configNames = $, e.propertyNames = [
      ...$,
      ...h,
      ...v4,
      ...N2
    ], e.eventNames = [], e.propertyConfigNames = [], e.featureNames = [];
    const g = [
      "adopt",
      "appendTo",
      "insertAfter",
      "insertBefore"
    ].find((c) => p[c]);
    return g ? _l.devWarningContainer(m.$name, g) : b === "Button" ? p.appendTo = i : p.adopt = i, p;
  }
  /**
   * Setup store events relay
   * @param {Object} data reference to data
   * @param {Object} instance bryntum widget instance
   */
  static relayStores(t, e) {
    const { dataStores: s, projectStores: i } = t;
    s && (Object.keys(s).forEach((n) => {
      const o = i ? e.project[n] : e[n];
      o && (o.syncDataOnLoad = o.syncDataOnLoad == null ? true : o.syncDataOnLoad, e && e.relayStoreEvents && o.relayAll(e, s[n]));
    }), delete t.dataStores);
  }
  /**
   * Creates bryntum Widget from vue component
   * @param {Object} config
   * @param {Object} config.me vue component instance
   * @param {Object} config.widgetData reference to data
   * @param {Function} config.emit reference to emit
   * @param {Object} config.element HTML element
   * @param {Function} config.processCellContent cell renderer method
   * @param {Function} config.hasFrameworkRenderer check the presence of vue renderer
   * @param {Function} config.toRaw Vue fn to unwrap reactive object
   * @returns {Object} widget object
   */
  static createWidget(t) {
    const { instanceClass: e } = t.widgetData, s = _l.createConfig(t);
    return e.$name === "Widget" ? Widget.create(s) : new e(s);
  }
  /**
   * Applies property value to Bryntum config or instance.
   * @param {Object} configOrInstance target object
   * @param {String} prop property name
   * @param {Object} value value
   * @param {Boolean} [isConfig] config setting mode
   * @param {Function} [toRaw] Vue fn to unwrap reactive object
   */
  static applyPropValue(t, e, s, i = true, n) {
    if (e === "project")
      s && typeof s == "object" && (t[e] = s.instance ? s.instance.value || s.instance : s);
    else if (e === "features" && typeof s == "object")
      Object.keys(s).forEach((o) => _l.applyPropValue(t, `${o}Feature`, s[o], i, n));
    else if (e === "config" && typeof s == "object")
      Object.keys(s).forEach((o) => _l.applyPropValue(t, o, s[o], i, n));
    else if (e === "columns" && !i)
      t.columns.data = s;
    else if (e.endsWith("Feature")) {
      const o = t.features, r = e.replace("Feature", "");
      if (i)
        o[r] = s;
      else {
        const a2 = o[r];
        a2 && a2.setConfig(s);
      }
    } else
      t[e] = n ? n(s) : s;
  }
  /**
   * Creates watches for vue component properties
   * @param {Object} me vue component instance
   * @param {Object} instance bryntum widget instance
   * @param {Object} props reference to props
   * @param {Object} data reference to data
   * @param {Function} watcher watch method reference (Accepts: prop and newValue)
   */
  static watchProps(t, e, s) {
    const {
      configNames: i,
      propertyNames: n,
      instanceClass: o
    } = e;
    n.forEach((r) => s(r, (a2) => {
      const u = Array.isArray(a2) ? a2.slice() : a2;
      _l.applyPropValue(t, r, u, false), i.includes(r) && _l.devWarningUpdateProp(o.$name, r);
    })), e.configNames = [], e.propertyNames = [];
  }
  /**
   * Called from Widget.js to add the Vue component to teleports
   * @param {Object} context
   * @param {Widget} context.widget Widget which content is rendered by the Vue component
   * @param {Object} context.html Object containing the Vue component properties and event listeners
   */
  static processWidgetContent({ widget: t, html: e }) {
    const { is: s, bind: i = {}, vue: n, on: o = {} } = e, { vueComponent: r } = this, { teleports: { value: a2 } } = r.provides, { contentElement: u, id: f } = t;
    if (n) {
      const d2 = `key-${f}`;
      a2.has(d2) && a2.delete(d2), nextTick(() => {
        a2.set(d2, { bind: i, on: o, key: d2, is: s, to: u });
      });
    }
  }
  /**
   * Handles the content provided by a Vue component for the widget.
   * @param {Widget} widget Owner widget
   * @param {String} html The HTML content to be processed
   */
  static handleVueContent(t, e) {
    var o;
    const s = (r) => {
      var a2, u;
      return !!((u = (a2 = r.vueComponent) == null ? void 0 : a2.provides) != null && u.teleports);
    }, i = t.closest(s), n = i != null && i.vueComponent ? i : Widget.query(s);
    (o = n == null ? void 0 : n.processWidgetContent) == null || o.call(n, { widget: t, html: e });
  }
  /**
   * Event renderer method
   * @param {Object} context
   * @param {*} context.jsx
   * @param {DomConfig} context.domConfig
   * @param {HTMLElement} context.targetElement
   * @param {Boolean} context.isRelease
   * @returns {Boolean}
   */
  static processEventContent({
    // Core passes it as jsx for React wrappers.
    // Let's rename it to a more appropriate name.
    jsx: t,
    domConfig: e,
    targetElement: s,
    isRelease: i
  }) {
    var a2, u;
    let n = s, o = false;
    const r = this.isVertical ? (a2 = e == null ? void 0 : e.elementData) == null ? void 0 : a2.renderData : e == null ? void 0 : e.elementData;
    if (_l.isVueConfig(t) && (t != null && t.is)) {
      (u = e == null ? void 0 : e.dataset) != null && u.isMilestone ? n = s.parentElement.parentElement.parentElement : n = s.parentElement.parentElement;
      const f = this.isVertical ? n.elementData.renderData : n.elementData, { assignmentRecord: d2 } = i ? r : f, { eventRecord: m } = f, { vueComponent: b } = this, { teleports: { value: y } } = b.provides, $ = m.isRecurring || m.isOccurrence, v4 = `assignment-${d2 == null ? void 0 : d2.id}${$ ? "-" + m.id : ""}`;
      n.vueKey && y.delete(n.vueKey);
      const h = { ...t }, { is: N2, on: V = {} } = h;
      delete h.is, delete h.on, nextTick(() => {
        y.set(v4, {
          bind: h,
          key: v4,
          is: N2,
          on: V,
          to: s,
          generation: d2.generation
        });
      }), n.vueKey = v4, o = true;
    }
    return o;
  }
  /**
   * Cell renderer method
   * @param {Object} context
   * @param {RenderData} context.rendererData
   * @param {*} context.rendererHtml
   * @returns {Boolean}
   */
  static processCellContent({ rendererData: t, rendererHtml: e }) {
    var r;
    const { record: s, column: i, cellElement: n, row: o } = t;
    if (_l.isVueConfig(i.data) && ((r = i.data) != null && r.renderer)) {
      const { vueComponent: a2 } = this, { teleports: { value: u } } = a2.provides, f = `${i.id}-${s.id}`, d2 = i.tree ? n.querySelector(".b-tree-cell-value") : n;
      n.vueKey && u.delete(n.vueKey);
      const m = { ...e }, { is: b, on: y = {} } = m;
      delete m.is, delete m.on, nextTick(() => {
        o.id === s.id && u.set(f, {
          bind: m,
          key: f,
          is: b,
          on: y,
          to: d2,
          generation: s.generation
        });
      }), n.vueKey = f;
    }
  }
  /**
   *
   * @param {Object} context
   * @param {*} context.cellContent Content to be rendered in cell (set by renderer)
   * @param {*} context.column Column being rendered
   * @returns {Boolean} `true` if there is a Vue Renderer in this cell, `false` otherwise
   */
  static hasFrameworkRenderer({ cellContent: t, column: e }) {
    return t && typeof t == "object" && _l.isVueConfig(e == null ? void 0 : e.data);
  }
};
window.bryntum = window.bryntum || {};
window.bryntum.vue = {
  isVueConfig: l.isVueConfig,
  handleVueContent: l.handleVueContent
};

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DzgX-pfP.js
var T = defineComponent({
  __name: "BryntumButton",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    badge: {},
    behaviorType: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    color: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    href: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    icon: {},
    iconAlign: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    menu: {},
    menuIcon: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    owner: {},
    positioned: {},
    pressed: {},
    pressedCls: {},
    pressedIcon: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    split: {},
    supportsPressedClick: {},
    tab: {},
    tabIndex: {},
    tag: {},
    target: {},
    text: {},
    textAlign: {},
    title: {},
    toggleable: {},
    toggleGroup: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "beforeShowMenu", "beforeToggle", "catchAll", "click", "destroy", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "toggle"],
  setup(k3, { expose: s, emit: c }) {
    const p = c, i = {
      instanceClass: Button,
      instanceName: "Button",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "htmlCls",
        "ignoreParentReadOnly",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "supportsPressedClick",
        "tab",
        "tag",
        "textAlign",
        "title",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "behaviorType",
        "cls",
        "color",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "href",
        "html",
        "icon",
        "iconAlign",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "menu",
        "menuIcon",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onBeforeShowMenu",
        "onBeforeToggle",
        "onCatchAll",
        "onClick",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToggle",
        "pressed",
        "pressedCls",
        "pressedIcon",
        "readOnly",
        "rtl",
        "scrollable",
        "split",
        "tabIndex",
        "target",
        "text",
        "toggleable",
        "toggleGroup",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "parent"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "beforeShowMenu",
        "beforeToggle",
        "catchAll",
        "click",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toggle"
      ]
    }, t = {}, n = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      t.value = l.createWidget({
        me: e,
        widgetData: i,
        emit: p,
        element: n.value,
        toRaw
      });
      const o = (d2, m) => watch(() => e.props[d2], m);
      l.watchProps(t.value, i, o);
    }), onBeforeUnmount(() => {
      var e, o;
      (o = (e = t.value) == null ? void 0 : e.destroy) == null || o.call(e);
    }), s({
      instance: t,
      refElement: n,
      teleports: r
    }), (e, o) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/6ta0Ddnm.js
var j = { class: "demo-header" };
var z = { id: "title-container" };
var H = ["href"];
var P = { id: "tools" };
var a = "../";
var F = defineComponent({
  __name: "BryntumDemoHeader",
  props: {
    title: {}
  },
  setup(T11, { expose: b }) {
    var h;
    const l2 = ref(null), c = ref(null), s = document.title.split(" - ")[1] || document.title, x3 = document.location.search.includes("test"), p = `https://bryntum.com/download/?product=${((h = document.location.href.match(/\/(\w+)(-trial)?\/[-\w]*examples\//)) == null ? void 0 : h[1].toLowerCase()) || "calendar"}`, n = !DemoCodeEditor.monacoCodePath;
    let m;
    const u = computed(() => {
      const e = /(.*?\/)(examples.*?\/frameworks\/.*?)\/dist/.exec(document.location.href);
      return e ? `${e[1]}examples/#example-${e[2].replace(/\//gm, "-").replace("examples-frameworks", "frameworks")}` : "#";
    }), f = async () => {
      m = await DemoCodeEditor.toggleCodeEditor(
        m,
        l2.value.instance.value,
        {
          appFolder: a,
          preferredSources: [
            /App\.vue/,
            /\w+Config\.[tj]s/
          ]
        }
      );
    }, g = async () => {
      const e = (await AjaxHelper.get(`${a}app.config.json`, { parseJson: true })).parsedJson;
      if (e.zip || x3) {
        const r = c.value.instance.value;
        r.hidden = false, r.href = `${a}${e.zip}`;
      }
    };
    return onMounted(() => {
      n || (CSSHelper.insertRule("body { flex-direction : row !important }"), CSSHelper.insertRule("#__nuxt, #container, #app { flex : 1 !important; overflow : hidden !important }"), CSSHelper.insertRule(".b-codeeditor-header { padding : 0.5em !important }"), g());
    }), b({
      link: u,
      headerTitle: s,
      hiddenEditor: n,
      downloadLink: p,
      toggleCodeEditor: f
    }), (e, r) => (openBlock(), createElementBlock("header", j, [
      createBaseVNode("div", z, [
        createBaseVNode("a", {
          id: "title",
          href: u.value
        }, [
          createBaseVNode("h1", null, toDisplayString(unref(s)), 1)
        ], 8, H)
      ]),
      renderSlot(e.$slots, "default"),
      createBaseVNode("div", P, [
        createVNode(T, {
          text: "Download Trial",
          href: p,
          cls: "b-green b-raised"
        }),
        createVNode(T, {
          ref_key: "codeButtonRef",
          ref: l2,
          icon: "b-icon-code",
          tooltip: "Click to show the code viewer",
          cls: "b-raised b-blue b-code-button",
          hidden: n,
          onClick: f
        }, null, 512),
        createVNode(T, {
          ref_key: "downloadButtonRef",
          ref: c,
          icon: "b-icon-download",
          tooltip: "Download this demo zip archive",
          cls: "b-raised b-blue",
          href: "#",
          hidden: true
        }, null, 512),
        createVNode(d)
      ])
    ]));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/YreYuYOq.js
var M = defineComponent({
  __name: "BryntumAgendaView",
  props: {
    activationKey: {},
    adopt: {},
    alignSelf: {},
    allowDragCreate: {},
    allowDragMove: {},
    allowDragResize: {},
    alwaysShowCurrentDate: {},
    animateFilterRemovals: {},
    animateRemovingRows: {},
    animateTimeShift: {},
    animateTreeNodeToggle: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCreate: {},
    autoHeight: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cellEllipsis: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnLines: {},
    columns: {},
    config: {},
    contentElementCls: {},
    contextMenuTriggerEvent: {},
    data: {},
    dataset: {},
    date: {},
    dateFilter: { type: [Function, String] },
    dateFormat: {},
    dateSeparator: {},
    defaultRegion: {},
    defaultScrollOptions: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    destroyStore: {},
    disabled: {},
    disableGridColumnIdWarning: {},
    disableGridRowModelWarning: {},
    dock: {},
    dragUnit: {},
    drawer: {},
    elementAttributes: {},
    emptyText: {},
    enableSticky: {},
    enableTextSelection: {},
    enableUndoRedoKeys: {},
    endDate: {},
    eventFilter: { type: [Function, String] },
    eventHeaderRenderer: { type: [Function, String] },
    eventHeight: {},
    eventListTimeFormat: {},
    eventRenderer: { type: [Function, String] },
    eventRowSpacing: {},
    eventSorter: { type: Function },
    eventTimeRenderer: { type: [Function, String] },
    extendAllDayEndDay: {},
    extraData: {},
    fillLastColumn: {},
    filterEventResources: {},
    fixedRowHeight: {},
    flex: {},
    footer: {},
    formulaProviders: {},
    fullRowRefresh: {},
    getPrimaryResource: { type: [Function, String] },
    getRowHeight: { type: Function },
    header: {},
    height: {},
    hidden: {},
    hideEventOverflow: {},
    hideFooters: {},
    hideHeaders: {},
    hideHorizontalScrollbar: {},
    hideNonWorkingDays: {},
    hoverCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    listeners: {},
    listRangeMenu: {},
    loadMask: {},
    loadMaskDefaults: {},
    loadMaskError: {},
    localizable: {},
    longPressTime: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxHeight: {},
    maxWidth: {},
    minDate: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    nonWorkingDays: {},
    offsetStartsBeforeEvents: {},
    owner: {},
    pastEventCls: {},
    plugins: {},
    preserveFocusOnDatasetChange: {},
    preserveScroll: {},
    preserveScrollOnDatasetChange: {},
    preventTooltipOnTouch: {},
    range: {},
    readOnly: {},
    relayStoreEvents: {},
    resizable: {},
    resizeToFitIncludesHeader: {},
    resourceImagePath: {},
    responsive: {},
    responsiveLevels: {},
    responsiveRoot: {},
    responsiveState: {},
    responsiveTarget: {},
    ripple: {},
    rootElement: {},
    rowHeight: {},
    rowLines: {},
    rtl: {},
    scrollable: {},
    scrollerClass: {},
    scrollManager: {},
    selectionMode: {},
    selectorButton: {},
    selectorMenuItem: {},
    settingsButton: {},
    shiftIncrement: {},
    shortDateFormat: {},
    shortDateTimeFormat: {},
    shortEventCls: {},
    shortEventDuration: {},
    showBullet: {},
    showDirty: {},
    showEmptyDates: {},
    showResourceAvatars: {},
    stackMultiDayEvents: {},
    startDate: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    stateSettings: {},
    store: {},
    strips: {},
    subGridConfigs: {},
    syncCalendarDate: {},
    syncMask: {},
    syncViewDate: {},
    tab: {},
    tabBarItems: {},
    tbar: {},
    timeFormat: {},
    title: {},
    tools: {},
    transitionDuration: {},
    type: {},
    ui: {},
    weekStartDay: {},
    weight: {},
    width: {},
    cellCopyPasteFeature: {},
    cellEditFeature: {},
    cellMenuFeature: {},
    cellTooltipFeature: {},
    columnAutoWidthFeature: {},
    columnDragToolbarFeature: {},
    columnPickerFeature: {},
    columnRenameFeature: {},
    columnReorderFeature: {},
    columnResizeFeature: {},
    excelExporterFeature: {},
    fileDropFeature: {},
    fillHandleFeature: {},
    filterFeature: {},
    filterBarFeature: {},
    groupFeature: {},
    groupSummaryFeature: {},
    headerMenuFeature: {},
    lockRowsFeature: {},
    mergeCellsFeature: {},
    pdfExportFeature: {},
    printFeature: {},
    quickFindFeature: {},
    regionResizeFeature: {},
    rowCopyPasteFeature: {},
    rowEditFeature: {},
    rowExpanderFeature: {},
    rowReorderFeature: {},
    rowResizeFeature: {},
    searchFeature: {},
    sortFeature: {},
    splitFeature: {},
    stickyCellsFeature: {},
    stripeFeature: {},
    summaryFeature: {},
    treeFeature: {},
    treeGroupFeature: {}
  },
  emits: ["beforeAutoCreate", "beforeCancelCellEdit", "beforeCancelRowEdit", "beforeCellDelete", "beforeCellEditStart", "beforeChangeDate", "beforeColumnDragStart", "beforeColumnDropFinalize", "beforeColumnResize", "beforeCopy", "beforeCSVExport", "beforeDestroy", "beforeExcelExport", "beforeFillHandleDragStart", "beforeFinishCellEdit", "beforeFinishRowEdit", "beforeHide", "beforePaste", "beforePdfExport", "beforeRenderRow", "beforeRenderRows", "beforeResponsiveStateChange", "beforeRowCollapse", "beforeRowExpand", "beforeSelectionChange", "beforeSetRecord", "beforeShow", "beforeStartRowEdit", "beforeStateApply", "beforeStateSave", "beforeToggleGroup", "beforeToggleNode", "cancelCellEdit", "catchAll", "cellClick", "cellContextMenu", "cellDblClick", "cellMapPopulated", "cellMenuBeforeShow", "cellMenuItem", "cellMenuShow", "cellMenuToggleItem", "cellMouseEnter", "cellMouseLeave", "cellMouseOut", "cellMouseOver", "collapse", "collapseNode", "columnDrag", "columnDragStart", "columnDrop", "columnResize", "columnResizeStart", "contextMenuItem", "contextMenuToggleItem", "copy", "dataChange", "dayCellPopulated", "destroy", "dirtyStateChange", "dragSelecting", "eventAutoCreated", "eventPropagate", "expand", "expandNode", "fileDrop", "fillHandleBeforeDragFinalize", "fillHandleDrag", "fillHandleDragAbort", "fillHandleDragEnd", "fillHandleDragStart", "finishCellEdit", "finishRowEdit", "focusIn", "focusOut", "gridRowBeforeDragStart", "gridRowBeforeDropFinalize", "gridRowDrag", "gridRowDragAbort", "gridRowDragStart", "gridRowDrop", "headerClick", "headerMenuBeforeShow", "headerMenuItem", "headerMenuShow", "headerMenuToggleItem", "hide", "lockRows", "mouseOut", "mouseOver", "paint", "paste", "pdfExport", "rangeChange", "readOnly", "recompose", "refresh", "renderRow", "renderRows", "resize", "responsive", "responsiveStateChange", "rowCollapse", "rowExpand", "rowMouseEnter", "rowMouseLeave", "scroll", "selectionChange", "selectionModeChange", "shiftIncrementChange", "show", "split", "splitterCollapseClick", "splitterDragEnd", "splitterDragStart", "splitterExpandClick", "startCellEdit", "startRowEdit", "subGridCollapse", "subGridExpand", "toggleGroup", "toggleNode", "toolClick", "topDateChange", "unlockRows", "unsplit"],
  setup(E9, { expose: s, emit: d2 }) {
    const u = d2, n = {
      instanceClass: AgendaView,
      instanceName: "AgendaView",
      configNames: [
        "activationKey",
        "adopt",
        "animateFilterRemovals",
        "animateRemovingRows",
        "ariaDescription",
        "ariaLabel",
        "autoHeight",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "collapsible",
        "config",
        "contentElementCls",
        "contextMenuTriggerEvent",
        "defaultRegion",
        "descriptionRenderer",
        "destroyStore",
        "disableGridColumnIdWarning",
        "disableGridRowModelWarning",
        "dock",
        "drawer",
        "elementAttributes",
        "enableSticky",
        "enableTextSelection",
        "endDate",
        "eventFilter",
        "eventHeaderRenderer",
        "eventHeight",
        "eventListTimeFormat",
        "eventRenderer",
        "eventRowSpacing",
        "eventSorter",
        "fillLastColumn",
        "fixedRowHeight",
        "footer",
        "formulaProviders",
        "fullRowRefresh",
        "getPrimaryResource",
        "getRowHeight",
        "header",
        "hideEventOverflow",
        "hideHorizontalScrollbar",
        "hoverCls",
        "ignoreParentReadOnly",
        "listeners",
        "listRangeMenu",
        "loadMask",
        "loadMaskDefaults",
        "loadMaskError",
        "localizable",
        "maskDefaults",
        "masked",
        "monitorResize",
        "nonWorkingDays",
        "owner",
        "plugins",
        "preserveFocusOnDatasetChange",
        "preserveScrollOnDatasetChange",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resizable",
        "resizeToFitIncludesHeader",
        "resourceImagePath",
        "responsive",
        "responsiveLevels",
        "responsiveRoot",
        "responsiveState",
        "responsiveTarget",
        "ripple",
        "rootElement",
        "scrollerClass",
        "scrollManager",
        "selectorButton",
        "selectorMenuItem",
        "shortEventCls",
        "shortEventDuration",
        "showBullet",
        "showDirty",
        "showResourceAvatars",
        "startDate",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "subGridConfigs",
        "syncMask",
        "tab",
        "tabBarItems",
        "tbar",
        "timeFormat",
        "type",
        "ui",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDragCreate",
        "allowDragMove",
        "allowDragResize",
        "alwaysShowCurrentDate",
        "animateTimeShift",
        "animateTreeNodeToggle",
        "appendTo",
        "ariaLive",
        "autoCreate",
        "cellEllipsis",
        "cls",
        "collapsed",
        "columnLines",
        "columns",
        "data",
        "dataset",
        "date",
        "dateFilter",
        "dateFormat",
        "dateSeparator",
        "defaultScrollOptions",
        "descriptionFormat",
        "disabled",
        "dragUnit",
        "emptyText",
        "enableUndoRedoKeys",
        "eventTimeRenderer",
        "extendAllDayEndDay",
        "extraData",
        "filterEventResources",
        "flex",
        "height",
        "hidden",
        "hideFooters",
        "hideHeaders",
        "hideNonWorkingDays",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "longPressTime",
        "margin",
        "maxDate",
        "maxHeight",
        "maxWidth",
        "minDate",
        "minHeight",
        "minWidth",
        "offsetStartsBeforeEvents",
        "onBeforeAutoCreate",
        "onBeforeCancelCellEdit",
        "onBeforeCancelRowEdit",
        "onBeforeCellDelete",
        "onBeforeCellEditStart",
        "onBeforeChangeDate",
        "onBeforeColumnDragStart",
        "onBeforeColumnDropFinalize",
        "onBeforeColumnResize",
        "onBeforeCopy",
        "onBeforeCSVExport",
        "onBeforeDestroy",
        "onBeforeExcelExport",
        "onBeforeFillHandleDragStart",
        "onBeforeFinishCellEdit",
        "onBeforeFinishRowEdit",
        "onBeforeHide",
        "onBeforePaste",
        "onBeforePdfExport",
        "onBeforeRenderRow",
        "onBeforeRenderRows",
        "onBeforeResponsiveStateChange",
        "onBeforeRowCollapse",
        "onBeforeRowExpand",
        "onBeforeSelectionChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStartRowEdit",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onBeforeToggleGroup",
        "onBeforeToggleNode",
        "onCancelCellEdit",
        "onCatchAll",
        "onCellClick",
        "onCellContextMenu",
        "onCellDblClick",
        "onCellMapPopulated",
        "onCellMenuBeforeShow",
        "onCellMenuItem",
        "onCellMenuShow",
        "onCellMenuToggleItem",
        "onCellMouseEnter",
        "onCellMouseLeave",
        "onCellMouseOut",
        "onCellMouseOver",
        "onCollapse",
        "onCollapseNode",
        "onColumnDrag",
        "onColumnDragStart",
        "onColumnDrop",
        "onColumnResize",
        "onColumnResizeStart",
        "onContextMenuItem",
        "onContextMenuToggleItem",
        "onCopy",
        "onDataChange",
        "onDayCellPopulated",
        "onDestroy",
        "onDirtyStateChange",
        "onDragSelecting",
        "onEventAutoCreated",
        "onEventPropagate",
        "onExpand",
        "onExpandNode",
        "onFileDrop",
        "onFillHandleBeforeDragFinalize",
        "onFillHandleDrag",
        "onFillHandleDragAbort",
        "onFillHandleDragEnd",
        "onFillHandleDragStart",
        "onFinishCellEdit",
        "onFinishRowEdit",
        "onFocusIn",
        "onFocusOut",
        "onGridRowBeforeDragStart",
        "onGridRowBeforeDropFinalize",
        "onGridRowDrag",
        "onGridRowDragAbort",
        "onGridRowDragStart",
        "onGridRowDrop",
        "onHeaderClick",
        "onHeaderMenuBeforeShow",
        "onHeaderMenuItem",
        "onHeaderMenuShow",
        "onHeaderMenuToggleItem",
        "onHide",
        "onLockRows",
        "onMouseOut",
        "onMouseOver",
        "onPaint",
        "onPaste",
        "onPdfExport",
        "onRangeChange",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onRenderRow",
        "onRenderRows",
        "onResize",
        "onResponsive",
        "onResponsiveStateChange",
        "onRowCollapse",
        "onRowExpand",
        "onRowMouseEnter",
        "onRowMouseLeave",
        "onScroll",
        "onSelectionChange",
        "onSelectionModeChange",
        "onShiftIncrementChange",
        "onShow",
        "onSplit",
        "onSplitterCollapseClick",
        "onSplitterDragEnd",
        "onSplitterDragStart",
        "onSplitterExpandClick",
        "onStartCellEdit",
        "onStartRowEdit",
        "onSubGridCollapse",
        "onSubGridExpand",
        "onToggleGroup",
        "onToggleNode",
        "onToolClick",
        "onTopDateChange",
        "onUnlockRows",
        "onUnsplit",
        "pastEventCls",
        "preserveScroll",
        "range",
        "readOnly",
        "rowHeight",
        "rowLines",
        "rtl",
        "scrollable",
        "selectionMode",
        "settingsButton",
        "shiftIncrement",
        "shortDateFormat",
        "shortDateTimeFormat",
        "showEmptyDates",
        "stackMultiDayEvents",
        "stateSettings",
        "store",
        "syncCalendarDate",
        "syncViewDate",
        "title",
        "tools",
        "transitionDuration",
        "width"
      ],
      propertyNames: [
        "dayCellCls",
        "firstVisibleCell",
        "firstVisibleDate",
        "focusVisible",
        "hasChanges",
        "lastVisibleCell",
        "lastVisibleDate",
        "originalStore",
        "parent",
        "selectedCell",
        "selectedCells",
        "selectedRecord",
        "selectedRecords",
        "selectedRows",
        "state",
        "tooltip"
      ],
      eventNames: [
        "beforeAutoCreate",
        "beforeCancelCellEdit",
        "beforeCancelRowEdit",
        "beforeCellDelete",
        "beforeCellEditStart",
        "beforeChangeDate",
        "beforeColumnDragStart",
        "beforeColumnDropFinalize",
        "beforeColumnResize",
        "beforeCopy",
        "beforeCSVExport",
        "beforeDestroy",
        "beforeExcelExport",
        "beforeFillHandleDragStart",
        "beforeFinishCellEdit",
        "beforeFinishRowEdit",
        "beforeHide",
        "beforePaste",
        "beforePdfExport",
        "beforeRenderRow",
        "beforeRenderRows",
        "beforeResponsiveStateChange",
        "beforeRowCollapse",
        "beforeRowExpand",
        "beforeSelectionChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStartRowEdit",
        "beforeStateApply",
        "beforeStateSave",
        "beforeToggleGroup",
        "beforeToggleNode",
        "cancelCellEdit",
        "catchAll",
        "cellClick",
        "cellContextMenu",
        "cellDblClick",
        "cellMapPopulated",
        "cellMenuBeforeShow",
        "cellMenuItem",
        "cellMenuShow",
        "cellMenuToggleItem",
        "cellMouseEnter",
        "cellMouseLeave",
        "cellMouseOut",
        "cellMouseOver",
        "collapse",
        "collapseNode",
        "columnDrag",
        "columnDragStart",
        "columnDrop",
        "columnResize",
        "columnResizeStart",
        "contextMenuItem",
        "contextMenuToggleItem",
        "copy",
        "dataChange",
        "dayCellPopulated",
        "destroy",
        "dirtyStateChange",
        "dragSelecting",
        "eventAutoCreated",
        "eventPropagate",
        "expand",
        "expandNode",
        "fileDrop",
        "fillHandleBeforeDragFinalize",
        "fillHandleDrag",
        "fillHandleDragAbort",
        "fillHandleDragEnd",
        "fillHandleDragStart",
        "finishCellEdit",
        "finishRowEdit",
        "focusIn",
        "focusOut",
        "gridRowBeforeDragStart",
        "gridRowBeforeDropFinalize",
        "gridRowDrag",
        "gridRowDragAbort",
        "gridRowDragStart",
        "gridRowDrop",
        "headerClick",
        "headerMenuBeforeShow",
        "headerMenuItem",
        "headerMenuShow",
        "headerMenuToggleItem",
        "hide",
        "lockRows",
        "mouseOut",
        "mouseOver",
        "paint",
        "paste",
        "pdfExport",
        "rangeChange",
        "readOnly",
        "recompose",
        "refresh",
        "renderRow",
        "renderRows",
        "resize",
        "responsive",
        "responsiveStateChange",
        "rowCollapse",
        "rowExpand",
        "rowMouseEnter",
        "rowMouseLeave",
        "scroll",
        "selectionChange",
        "selectionModeChange",
        "shiftIncrementChange",
        "show",
        "split",
        "splitterCollapseClick",
        "splitterDragEnd",
        "splitterDragStart",
        "splitterExpandClick",
        "startCellEdit",
        "startRowEdit",
        "subGridCollapse",
        "subGridExpand",
        "toggleGroup",
        "toggleNode",
        "toolClick",
        "topDateChange",
        "unlockRows",
        "unsplit"
      ]
    }, t = {}, r = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      t.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: u,
        element: r.value,
        toRaw
      });
      const o = (c, g) => watch(() => e.props[c], g);
      l.watchProps(t.value, n, o);
    }), onBeforeUnmount(() => {
      var e, o;
      (o = (e = t.value) == null ? void 0 : e.destroy) == null || o.call(e);
    }), s({
      instance: t,
      refElement: r,
      teleports: a2
    }), (e, o) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: r
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/LMlo1aiy.js
var R = defineComponent({
  __name: "BryntumButtonGroup",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    color: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    toggleable: {},
    toggleGroup: {},
    tooltip: {},
    type: {},
    ui: {},
    useGap: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "catchAll", "click", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "toggle"],
  setup(B7, { expose: s, emit: c }) {
    const d2 = c, a2 = {
      instanceClass: ButtonGroup,
      instanceName: "ButtonGroup",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "color",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "toggleGroup",
        "type",
        "ui",
        "useGap",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onClick",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToggle",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "toggleable",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "click",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toggle"
      ]
    }, o = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CUIWBIi_.js
var O = {
  ref: "teleportsHolder",
  style: { display: "none" }
};
var N = defineComponent({
  __name: "BryntumCalendar",
  props: {
    activeDateCls: {},
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    assignments: {},
    assignmentStore: {},
    autoCreate: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    contentElementCls: {},
    contextMenuTriggerEvent: {},
    crudManager: {},
    crudManagerClass: {},
    dataset: {},
    date: {},
    dateFormat: {},
    datePicker: {},
    defaultBindProperty: {},
    defaultCalendar: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    deselectAllOnScheduleClick: {},
    deselectOnClick: {},
    destroyStores: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    enableDeleteKey: {},
    enableRecurringEvents: {},
    enableUndoRedoKeys: {},
    events: {},
    eventSelectionDisabled: {},
    eventStore: {},
    extraData: {},
    filterEventResources: {},
    flex: {},
    floating: {},
    footer: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideNonWorkingDays: {},
    hideWhenEmpty: {},
    highlightDate: { type: Function },
    highlightPredecessors: {},
    highlightSuccessors: {},
    id: {},
    ignoreParentReadOnly: {},
    includeWeekendsButton: {},
    insertBefore: {},
    insertFirst: {},
    isEventSelectable: { type: Function },
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    loadMask: {},
    loadMaskDefaults: {},
    loadMaskError: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    maintainSelectionOnDatasetChange: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minDate: {},
    minHeight: {},
    minWidth: {},
    mode: {},
    modeDefaults: {},
    modes: {},
    monitorResize: {},
    multiEventSelect: {},
    namedItems: {},
    navigatorPlacement: {},
    nonWorkingDays: {},
    overlaySidebar: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    project: {},
    readOnly: {},
    recurrenceConfirmationPopup: {},
    relayStoreEvents: {},
    resourceImagePath: {},
    resources: {},
    resourceStore: {},
    resourceTimeRanges: {},
    resourceTimeRangeStore: {},
    responsive: {},
    responsiveRoot: {},
    responsiveState: {},
    responsiveTarget: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectResourceOnEventNavigate: {},
    selectResourceOnScheduleClick: {},
    showAnimation: {},
    showRecurringUI: {},
    showTooltipWhenDisabled: {},
    sidebar: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    syncMask: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    timeRanges: {},
    timeRangeStore: {},
    timeZone: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    triggerSelectionChangeOnRemove: {},
    type: {},
    ui: {},
    useContextualRecurrenceRules: {},
    viewContainer: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {},
    dragFeature: {},
    eventBufferFeature: {},
    eventCopyPasteFeature: {},
    eventEditFeature: {},
    eventMenuFeature: {},
    eventTooltipFeature: {},
    excelExporterFeature: {},
    externalEventSourceFeature: {},
    loadOnDemandFeature: {},
    printFeature: {},
    scheduleMenuFeature: {},
    scheduleTooltipFeature: {},
    timeRangesFeature: {},
    weekExpanderFeature: {}
  },
  emits: ["activeItemChange", "afterEventEdit", "afterEventSave", "beforeActiveItemChange", "beforeAssignmentDelete", "beforeAssignmentSelectionChange", "beforeAutoCreate", "beforeCopy", "beforeCreateMode", "beforeCSVExport", "beforeDestroy", "beforeDragCreate", "beforeDragCreateEnd", "beforeDragMove", "beforeDragMoveEnd", "beforeDragResize", "beforeDragResizeEnd", "beforeDropExternal", "beforeEventDelete", "beforeEventEdit", "beforeEventEditShow", "beforeEventSave", "beforeEventSelectionChange", "beforeExcelExport", "beforeHide", "beforePaste", "beforePrint", "beforeResponsiveStateChange", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "cellOverflowClick", "collapse", "contextMenuItem", "contextMenuToggleItem", "copy", "currentTimelineUpdate", "dataChange", "dateChange", "dateRangeChange", "dateRangeLoad", "dateRangeRequested", "dayCellPopulated", "dayNumberClick", "destroy", "dirtyStateChange", "dragCreateEnd", "dragMoveEnd", "dragMoveExternal", "dragResizeEnd", "dropExternal", "emptyCellClick", "eventAutoCreated", "eventClick", "eventContextMenu", "eventDblClick", "eventEditBeforeSetRecord", "eventKeyDown", "eventMenuBeforeShow", "eventMenuItem", "eventMenuShow", "eventMouseDown", "eventMouseEnter", "eventMouseLeave", "eventMouseOut", "eventMouseOver", "eventMouseUp", "eventPropagate", "expand", "focusIn", "focusOut", "hide", "loadOnDemandFail", "monthNameClick", "navigate", "paint", "paste", "pasteNotAllowed", "readOnly", "recompose", "refresh", "resize", "responsiveStateChange", "scheduleClick", "scheduleContextMenu", "scheduleDblClick", "scheduleMenuBeforeShow", "scheduleMenuItem", "scheduleMenuShow", "scheduleMouseDown", "scheduleMouseOut", "scheduleMouseOver", "scheduleMouseUp", "selectionChange", "show", "sidebarCollapse", "sidebarExpand", "timeRangeHeaderClick", "timeRangeHeaderContextMenu", "timeRangeHeaderDblClick", "toolClick", "viewPaint", "weekNumberClick"],
  setup(P5, { expose: g, emit: v4 }) {
    const p = v4, i = {
      instanceClass: Calendar,
      instanceName: "Calendar",
      isView: true,
      dataStores: {
        assignmentStore: "assignments",
        dependencyStore: "dependencies",
        eventStore: "events",
        resourceStore: "resources",
        resourceTimeRangeStore: "resourceTimeRanges",
        timeRangeStore: "timeRanges"
      },
      projectStores: true,
      featureNames: [
        "dragFeature",
        "eventBufferFeature",
        "eventCopyPasteFeature",
        "eventEditFeature",
        "eventMenuFeature",
        "eventTooltipFeature",
        "excelExporterFeature",
        "externalEventSourceFeature",
        "loadOnDemandFeature",
        "printFeature",
        "scheduleMenuFeature",
        "scheduleTooltipFeature",
        "timeRangesFeature",
        "weekExpanderFeature"
      ],
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "assignmentStore",
        "autoCreate",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "contextMenuTriggerEvent",
        "crudManagerClass",
        "datePicker",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "deselectOnClick",
        "destroyStores",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "enableDeleteKey",
        "enableRecurringEvents",
        "enableUndoRedoKeys",
        "eventSelectionDisabled",
        "eventStore",
        "filterEventResources",
        "floating",
        "footer",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "highlightDate",
        "highlightPredecessors",
        "highlightSuccessors",
        "ignoreParentReadOnly",
        "includeWeekendsButton",
        "itemCls",
        "lazyItems",
        "listeners",
        "loadMask",
        "loadMaskDefaults",
        "loadMaskError",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maintainSelectionOnDatasetChange",
        "maskDefaults",
        "masked",
        "monitorResize",
        "multiEventSelect",
        "namedItems",
        "navigatorPlacement",
        "overlaySidebar",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resourceImagePath",
        "resourceStore",
        "resourceTimeRangeStore",
        "responsive",
        "responsiveRoot",
        "responsiveState",
        "responsiveTarget",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showRecurringUI",
        "showTooltipWhenDisabled",
        "sidebar",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "syncMask",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "timeRangeStore",
        "timeZone",
        "trapFocus",
        "triggerSelectionChangeOnRemove",
        "type",
        "ui",
        "viewContainer",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "activeDateCls",
        "alignSelf",
        "appendTo",
        "ariaLive",
        "assignments",
        "cls",
        "collapsed",
        "crudManager",
        "dataset",
        "date",
        "dateFormat",
        "defaultCalendar",
        "deselectAllOnScheduleClick",
        "disabled",
        "events",
        "extraData",
        "flex",
        "height",
        "hidden",
        "hideNonWorkingDays",
        "id",
        "insertBefore",
        "insertFirst",
        "isEventSelectable",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDate",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minDate",
        "minHeight",
        "minWidth",
        "mode",
        "modeDefaults",
        "modes",
        "nonWorkingDays",
        "onActiveItemChange",
        "onAfterEventEdit",
        "onAfterEventSave",
        "onBeforeActiveItemChange",
        "onBeforeAssignmentDelete",
        "onBeforeAssignmentSelectionChange",
        "onBeforeAutoCreate",
        "onBeforeCopy",
        "onBeforeCreateMode",
        "onBeforeCSVExport",
        "onBeforeDestroy",
        "onBeforeDragCreate",
        "onBeforeDragCreateEnd",
        "onBeforeDragMove",
        "onBeforeDragMoveEnd",
        "onBeforeDragResize",
        "onBeforeDragResizeEnd",
        "onBeforeDropExternal",
        "onBeforeEventDelete",
        "onBeforeEventEdit",
        "onBeforeEventEditShow",
        "onBeforeEventSave",
        "onBeforeEventSelectionChange",
        "onBeforeExcelExport",
        "onBeforeHide",
        "onBeforePaste",
        "onBeforePrint",
        "onBeforeResponsiveStateChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCellOverflowClick",
        "onCollapse",
        "onContextMenuItem",
        "onContextMenuToggleItem",
        "onCopy",
        "onCurrentTimelineUpdate",
        "onDataChange",
        "onDateChange",
        "onDateRangeChange",
        "onDateRangeLoad",
        "onDateRangeRequested",
        "onDayCellPopulated",
        "onDayNumberClick",
        "onDestroy",
        "onDirtyStateChange",
        "onDragCreateEnd",
        "onDragMoveEnd",
        "onDragMoveExternal",
        "onDragResizeEnd",
        "onDropExternal",
        "onEmptyCellClick",
        "onEventAutoCreated",
        "onEventClick",
        "onEventContextMenu",
        "onEventDblClick",
        "onEventEditBeforeSetRecord",
        "onEventKeyDown",
        "onEventMenuBeforeShow",
        "onEventMenuItem",
        "onEventMenuShow",
        "onEventMouseDown",
        "onEventMouseEnter",
        "onEventMouseLeave",
        "onEventMouseOut",
        "onEventMouseOver",
        "onEventMouseUp",
        "onEventPropagate",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onLoadOnDemandFail",
        "onMonthNameClick",
        "onNavigate",
        "onPaint",
        "onPaste",
        "onPasteNotAllowed",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onResponsiveStateChange",
        "onScheduleClick",
        "onScheduleContextMenu",
        "onScheduleDblClick",
        "onScheduleMenuBeforeShow",
        "onScheduleMenuItem",
        "onScheduleMenuShow",
        "onScheduleMouseDown",
        "onScheduleMouseOut",
        "onScheduleMouseOver",
        "onScheduleMouseUp",
        "onSelectionChange",
        "onShow",
        "onSidebarCollapse",
        "onSidebarExpand",
        "onTimeRangeHeaderClick",
        "onTimeRangeHeaderContextMenu",
        "onTimeRangeHeaderDblClick",
        "onToolClick",
        "onViewPaint",
        "onWeekNumberClick",
        "project",
        "readOnly",
        "recurrenceConfirmationPopup",
        "resources",
        "resourceTimeRanges",
        "rtl",
        "scrollable",
        "selectResourceOnEventNavigate",
        "selectResourceOnScheduleClick",
        "strictRecordMapping",
        "timeRanges",
        "title",
        "tools",
        "tooltip",
        "useContextualRecurrenceRules",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "activeSubView",
        "activeView",
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isEngineReady",
        "isSettingValues",
        "isValid",
        "parent",
        "record",
        "selectedEvents",
        "state",
        "values",
        "views"
      ],
      eventNames: [
        "activeItemChange",
        "afterEventEdit",
        "afterEventSave",
        "beforeActiveItemChange",
        "beforeAssignmentDelete",
        "beforeAssignmentSelectionChange",
        "beforeAutoCreate",
        "beforeCopy",
        "beforeCreateMode",
        "beforeCSVExport",
        "beforeDestroy",
        "beforeDragCreate",
        "beforeDragCreateEnd",
        "beforeDragMove",
        "beforeDragMoveEnd",
        "beforeDragResize",
        "beforeDragResizeEnd",
        "beforeDropExternal",
        "beforeEventDelete",
        "beforeEventEdit",
        "beforeEventEditShow",
        "beforeEventSave",
        "beforeEventSelectionChange",
        "beforeExcelExport",
        "beforeHide",
        "beforePaste",
        "beforePrint",
        "beforeResponsiveStateChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "cellOverflowClick",
        "collapse",
        "contextMenuItem",
        "contextMenuToggleItem",
        "copy",
        "currentTimelineUpdate",
        "dataChange",
        "dateChange",
        "dateRangeChange",
        "dateRangeLoad",
        "dateRangeRequested",
        "dayCellPopulated",
        "dayNumberClick",
        "destroy",
        "dirtyStateChange",
        "dragCreateEnd",
        "dragMoveEnd",
        "dragMoveExternal",
        "dragResizeEnd",
        "dropExternal",
        "emptyCellClick",
        "eventAutoCreated",
        "eventClick",
        "eventContextMenu",
        "eventDblClick",
        "eventEditBeforeSetRecord",
        "eventKeyDown",
        "eventMenuBeforeShow",
        "eventMenuItem",
        "eventMenuShow",
        "eventMouseDown",
        "eventMouseEnter",
        "eventMouseLeave",
        "eventMouseOut",
        "eventMouseOver",
        "eventMouseUp",
        "eventPropagate",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "loadOnDemandFail",
        "monthNameClick",
        "navigate",
        "paint",
        "paste",
        "pasteNotAllowed",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "responsiveStateChange",
        "scheduleClick",
        "scheduleContextMenu",
        "scheduleDblClick",
        "scheduleMenuBeforeShow",
        "scheduleMenuItem",
        "scheduleMenuShow",
        "scheduleMouseDown",
        "scheduleMouseOut",
        "scheduleMouseOver",
        "scheduleMouseUp",
        "selectionChange",
        "show",
        "sidebarCollapse",
        "sidebarExpand",
        "timeRangeHeaderClick",
        "timeRangeHeaderContextMenu",
        "timeRangeHeaderDblClick",
        "toolClick",
        "viewPaint",
        "weekNumberClick"
      ]
    }, o = {}, s = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const t = getCurrentInstance();
      o.value = l.createWidget({
        me: t,
        widgetData: i,
        emit: p,
        element: s.value,
        processCellContent: l.processCellContent,
        processEventContent: l.processEventContent,
        processWidgetContent: l.processWidgetContent,
        hasFrameworkRenderer: l.hasFrameworkRenderer,
        toRaw
      }), l.relayStores(t.data, o.value);
      const a2 = (e, h) => watch(() => t.props[e], h);
      l.watchProps(o.value, i, a2);
    }), onBeforeUnmount(() => {
      var t, a2;
      (a2 = (t = o.value) == null ? void 0 : t.destroy) == null || a2.call(t);
    }), g({
      instance: o,
      refElement: s,
      teleports: l2
    }), (t, a2) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: s
    }, [
      createBaseVNode("div", O, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(l2.value.values(), (e) => (openBlock(), createBlock(Teleport, {
          key: e.key,
          to: e.to
        }, [
          (openBlock(), createBlock(resolveDynamicComponent(e.is), mergeProps({
            ref_for: true,
            ref: e.key,
            "data-key": e.key,
            "data-generation": e.generation
          }, e.bind, { "data-vue": "" }, toHandlers(e.on)), null, 16, ["data-key", "data-generation"]))
        ], 8, ["to"]))), 128))
      ], 512)
    ], 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/BlylzWae.js
var W = defineComponent({
  __name: "BryntumCalendarDatePicker",
  props: {
    activeDate: {},
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cellRenderer: { type: [Function, String] },
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    date: {},
    dayNameFormat: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    disabledCls: {},
    disabledDates: { type: [Function, String, Array] },
    disableNonWorkingDays: {},
    disableOtherMonthCells: {},
    disableWeekends: {},
    dock: {},
    draggable: {},
    drawer: {},
    editMonth: {},
    elementAttributes: {},
    eventCountTip: {},
    eventDots: {},
    eventFilter: { type: [Function, String] },
    eventHeaderRenderer: { type: [Function, String] },
    eventRenderer: { type: [Function, String] },
    eventStore: {},
    extraData: {},
    filterEventResources: {},
    flex: {},
    floating: {},
    focusDisabledDates: {},
    footer: {},
    getPrimaryResource: { type: [Function, String] },
    header: {},
    headerRenderer: { type: [Function, String] },
    height: {},
    hidden: {},
    hideAnimation: {},
    hideOtherMonthCells: {},
    hideWhenEmpty: {},
    highlightSelectedWeek: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    includeYear: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxDots: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minColumnWidth: {},
    minDate: {},
    minHeight: {},
    minRowHeight: {},
    minWidth: {},
    monitorResize: {},
    month: {},
    multiSelect: {},
    namedItems: {},
    nonWorkingDayCls: {},
    nonWorkingDays: {},
    otherMonthCls: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selection: {},
    showAnimation: {},
    showEvents: {},
    showTooltipWhenDisabled: {},
    showWeekColumn: {},
    sixWeeks: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    tip: {},
    title: {},
    todayCls: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weekendCls: {},
    weekRenderer: { type: [Function, String] },
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeRefresh", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "dateChange", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "refresh", "resize", "selectionChange", "show", "toolClick"],
  setup(k3, { expose: s, emit: d2 }) {
    const c = d2, a2 = {
      instanceClass: CalendarDatePicker,
      instanceName: "CalendarDatePicker",
      configNames: [
        "activeDate",
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "cellRenderer",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "dayNameFormat",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "disabledCls",
        "disabledDates",
        "disableNonWorkingDays",
        "disableOtherMonthCells",
        "disableWeekends",
        "dock",
        "draggable",
        "drawer",
        "editMonth",
        "elementAttributes",
        "eventFilter",
        "eventHeaderRenderer",
        "eventRenderer",
        "eventStore",
        "floating",
        "focusDisabledDates",
        "footer",
        "getPrimaryResource",
        "header",
        "headerRenderer",
        "hideAnimation",
        "hideOtherMonthCells",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "includeYear",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxDate",
        "minColumnWidth",
        "minDate",
        "minRowHeight",
        "monitorResize",
        "month",
        "multiSelect",
        "namedItems",
        "nonWorkingDayCls",
        "nonWorkingDays",
        "otherMonthCls",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "showWeekColumn",
        "sixWeeks",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "tip",
        "todayCls",
        "trapFocus",
        "type",
        "ui",
        "weekendCls",
        "weekRenderer",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "date",
        "disabled",
        "eventCountTip",
        "eventDots",
        "extraData",
        "filterEventResources",
        "flex",
        "height",
        "hidden",
        "highlightSelectedWeek",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDots",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeRefresh",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDateChange",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onSelectionChange",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "selection",
        "showEvents",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeRefresh",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "dateChange",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "selectionChange",
        "show",
        "toolClick"
      ]
    }, o = {}, n = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: c,
        element: n.value,
        toRaw
      });
      const t = (h, p) => watch(() => e.props[h], p);
      l.watchProps(o.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DyJOCbne.js
var D = defineComponent({
  __name: "BryntumCheckbox",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCollapse: { type: Function },
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    checked: {},
    checkedValue: {},
    cls: {},
    color: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    text: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    uncheckedValue: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeChange", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "click", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(v4, { expose: s, emit: c }) {
    const p = c, i = {
      instanceClass: Checkbox,
      instanceName: "Checkbox",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoCollapse",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "checkedValue",
        "color",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "text",
        "textAlign",
        "title",
        "type",
        "ui",
        "uncheckedValue",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "checked",
        "cls",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "name",
        "onAction",
        "onBeforeChange",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onClick",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "editable",
        "focusVisible",
        "html",
        "input",
        "parent",
        "placeholder",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeChange",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "click",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, o = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: i,
        emit: p,
        element: o.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, i, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: o,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: o
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CFhC91BF.js
var B = defineComponent({
  __name: "BryntumCheckboxGroup",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    footer: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labelWidth: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxSelectedOptions: {},
    maxWidth: {},
    minHeight: {},
    minSelectedOptions: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    namedItems: {},
    options: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    requiredSelectedOptions: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeChange", "beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "change", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "toolClick"],
  setup(w3, { expose: s, emit: c }) {
    const d2 = c, n = {
      instanceClass: CheckboxGroup,
      instanceName: "CheckboxGroup",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "floating",
        "footer",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "labelCls",
        "labelPosition",
        "labelWidth",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "name",
        "namedItems",
        "options",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "inline",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "label",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxSelectedOptions",
        "maxWidth",
        "minHeight",
        "minSelectedOptions",
        "minWidth",
        "onBeforeChange",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onChange",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "requiredSelectedOptions",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeChange",
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "change",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: d2,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: l2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/BYjnA5s3.js
var w = defineComponent({
  __name: "BryntumChecklistFilterCombo",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    caseSensitive: {},
    centered: {},
    chipView: {},
    clearable: {},
    clearTextOnPickerHide: {},
    clearTextOnSelection: {},
    clearWhenInputEmpty: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    createOnUnmatched: { type: [Function, String] },
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    displayField: {},
    displayValueRenderer: { type: Function },
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    emptyText: {},
    encodeFilterParams: { type: Function },
    extraData: {},
    filterOnEnter: {},
    filterOperator: {},
    filterParamName: {},
    filterSelected: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hidePickerOnSelect: {},
    hideTrigger: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inlinePicker: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    items: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    keyStrokeFilterDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listCls: {},
    listeners: {},
    listItemPillTpl: { type: Function },
    listItemTpl: { type: Function },
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minChars: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    multiValueSeparator: {},
    name: {},
    overlayAnchor: {},
    owner: {},
    picker: {},
    pickerAlignElement: {},
    pickerWidth: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    primaryFilter: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    searchText: {},
    showAnimation: {},
    showApplyButton: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    store: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggerAction: {},
    triggers: {},
    type: {},
    ui: {},
    validateFilter: {},
    validateOnInput: {},
    value: {},
    valueField: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "select", "show", "trigger"],
  setup(F7, { expose: s, emit: c }) {
    const p = c, l2 = {
      instanceClass: ChecklistFilterCombo,
      instanceName: "ChecklistFilterCombo",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "caseSensitive",
        "centered",
        "chipView",
        "clearable",
        "clearTextOnPickerHide",
        "clearTextOnSelection",
        "clearWhenInputEmpty",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "createOnUnmatched",
        "dataField",
        "defaultBindProperty",
        "displayField",
        "displayValueRenderer",
        "dock",
        "draggable",
        "elementAttributes",
        "emptyText",
        "encodeFilterParams",
        "filterOnEnter",
        "filterParamName",
        "filterSelected",
        "floating",
        "hideAnimation",
        "hidePickerOnSelect",
        "hideTrigger",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inlinePicker",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "items",
        "keyStrokeChangeDelay",
        "keyStrokeFilterDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listCls",
        "listeners",
        "listItemTpl",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minChars",
        "minLength",
        "monitorResize",
        "multiValueSeparator",
        "name",
        "overlayAnchor",
        "owner",
        "pickerAlignElement",
        "pickerWidth",
        "positioned",
        "preventTooltipOnTouch",
        "primaryFilter",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "triggerAction",
        "type",
        "ui",
        "validateFilter",
        "validateOnInput",
        "valueField",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "filterOperator",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "listItemPillTpl",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelect",
        "onShow",
        "onTrigger",
        "picker",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "searchText",
        "showApplyButton",
        "showRequiredIndicator",
        "store",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "multiSelect",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "select",
        "show",
        "trigger"
      ]
    }, i = {}, n = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      i.value = l.createWidget({
        me: e,
        widgetData: l2,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(i.value, l2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = i.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: i,
      refElement: n,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DCwfRl_W.js
var F2 = defineComponent({
  __name: "BryntumChipView",
  props: {
    activateOnMouseover: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allowGroupSelect: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearSelectionOnEmptySpaceClick: {},
    closable: {},
    closeHandler: { type: [String, Function] },
    cls: {},
    collapsibleGroups: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    displayField: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    getItemCls: { type: [Function, String] },
    getItemStyle: { type: [Function, String] },
    groupHeaderTpl: { type: Function },
    height: {},
    hidden: {},
    hideAnimation: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    iconTpl: { type: Function },
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    isSelectable: { type: [Function, String] },
    items: {},
    itemTpl: { type: [Function, String] },
    keyMap: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    multiSelect: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectAllItem: {},
    selected: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    store: {},
    tab: {},
    tag: {},
    textAlign: {},
    title: {},
    toggleAllIfCtrlPressed: {},
    tooltip: {},
    tooltipTemplate: { type: Function },
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeItem", "beforeShow", "catchAll", "destroy", "focusIn", "focusOut", "hide", "item", "paint", "readOnly", "recompose", "resize", "selectionChange", "show", "toggleGroup", "toggleNode"],
  setup(T11, { expose: s, emit: c }) {
    const p = c, l2 = {
      instanceClass: ChipView,
      instanceName: "ChipView",
      configNames: [
        "activateOnMouseover",
        "adopt",
        "align",
        "allowGroupSelect",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearSelectionOnEmptySpaceClick",
        "closable",
        "closeHandler",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "displayField",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "getItemCls",
        "getItemStyle",
        "groupHeaderTpl",
        "hideAnimation",
        "htmlCls",
        "iconTpl",
        "ignoreParentReadOnly",
        "isSelectable",
        "itemTpl",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectAllItem",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tag",
        "textAlign",
        "tooltipTemplate",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsibleGroups",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "multiSelect",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeItem",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onItem",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelectionChange",
        "onShow",
        "onToggleGroup",
        "onToggleNode",
        "readOnly",
        "rtl",
        "scrollable",
        "selected",
        "store",
        "title",
        "toggleAllIfCtrlPressed",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "parent"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeItem",
        "beforeShow",
        "catchAll",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "item",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "selectionChange",
        "show",
        "toggleGroup",
        "toggleNode"
      ]
    }, o = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: l2,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (m, d2) => watch(() => e.props[m], d2);
      l.watchProps(o.value, l2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/vkRnCJD3.js
var O2 = defineComponent({
  __name: "BryntumCodeEditor",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    codePath: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    editor: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    footer: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    language: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    status: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    text: {},
    textAlign: {},
    textContent: {},
    theme: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "toolClick"],
  setup(v4, { expose: s, emit: d2 }) {
    const c = d2, n = {
      instanceClass: CodeEditor,
      instanceName: "CodeEditor",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "codePath",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "editor",
        "elementAttributes",
        "floating",
        "footer",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "language",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "status",
        "strictRecordMapping",
        "text",
        "theme",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/rWLak502.js
var S = defineComponent({
  __name: "BryntumColorField",
  props: {
    addNoColorItem: {},
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    colors: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    pickerAlignElement: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(v4, { expose: s, emit: c }) {
    const p = c, o = {
      instanceClass: ColorField,
      instanceName: "ColorField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "dataField",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minLength",
        "monitorResize",
        "name",
        "owner",
        "pickerAlignElement",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "addNoColorItem",
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "colors",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "editable",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: o,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, o, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/hcHljKBz.js
var T2 = defineComponent({
  __name: "BryntumCombo",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    caseSensitive: {},
    centered: {},
    chipView: {},
    clearable: {},
    clearTextOnPickerHide: {},
    clearTextOnSelection: {},
    clearWhenInputEmpty: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    createOnUnmatched: { type: [Function, String] },
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    displayField: {},
    displayValueRenderer: { type: Function },
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    emptyText: {},
    encodeFilterParams: { type: Function },
    extraData: {},
    filterOnEnter: {},
    filterOperator: {},
    filterParamName: {},
    filterSelected: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hidePickerOnSelect: {},
    hideTrigger: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inlinePicker: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    items: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    keyStrokeFilterDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listCls: {},
    listeners: {},
    listItemTpl: { type: Function },
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minChars: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    multiSelect: {},
    multiValueSeparator: {},
    name: {},
    overlayAnchor: {},
    owner: {},
    picker: {},
    pickerAlignElement: {},
    pickerWidth: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    primaryFilter: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    store: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggerAction: {},
    triggers: {},
    type: {},
    ui: {},
    validateFilter: {},
    validateOnInput: {},
    value: {},
    valueField: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "select", "show", "trigger"],
  setup(v4, { expose: s, emit: c }) {
    const p = c, a2 = {
      instanceClass: Combo,
      instanceName: "Combo",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "caseSensitive",
        "centered",
        "chipView",
        "clearable",
        "clearTextOnPickerHide",
        "clearTextOnSelection",
        "clearWhenInputEmpty",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "createOnUnmatched",
        "dataField",
        "defaultBindProperty",
        "displayField",
        "displayValueRenderer",
        "dock",
        "draggable",
        "elementAttributes",
        "emptyText",
        "encodeFilterParams",
        "filterOnEnter",
        "filterParamName",
        "filterSelected",
        "floating",
        "hideAnimation",
        "hidePickerOnSelect",
        "hideTrigger",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inlinePicker",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "items",
        "keyStrokeChangeDelay",
        "keyStrokeFilterDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listCls",
        "listeners",
        "listItemTpl",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minChars",
        "minLength",
        "monitorResize",
        "multiValueSeparator",
        "name",
        "overlayAnchor",
        "owner",
        "pickerAlignElement",
        "pickerWidth",
        "positioned",
        "preventTooltipOnTouch",
        "primaryFilter",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "triggerAction",
        "type",
        "ui",
        "validateFilter",
        "validateOnInput",
        "valueField",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "filterOperator",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "multiSelect",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelect",
        "onShow",
        "onTrigger",
        "picker",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "store",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "select",
        "show",
        "trigger"
      ]
    }, i = {}, n = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const e = getCurrentInstance();
      i.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (d2, m) => watch(() => e.props[d2], m);
      l.watchProps(i.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = i.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: i,
      refElement: n,
      teleports: l2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/FbWMkHpG.js
var A = defineComponent({
  __name: "BryntumContainer",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "catchAll", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(v4, { expose: s, emit: c }) {
    const d2 = c, a2 = {
      instanceClass: Container,
      instanceName: "Container",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (m, p) => watch(() => e.props[m], p);
      l.watchProps(o.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/Cmz9diZ7.js
var E = defineComponent({
  __name: "BryntumDateField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    format: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keepTime: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    max: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    min: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    picker: {},
    pickerAlignElement: {},
    pickerFormat: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    step: {},
    stepTriggers: {},
    strictParsing: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(C, { expose: s, emit: c }) {
    const p = c, a2 = {
      instanceClass: DateField,
      instanceName: "DateField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "dataField",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keepTime",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minLength",
        "monitorResize",
        "name",
        "owner",
        "picker",
        "pickerAlignElement",
        "pickerFormat",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "stepTriggers",
        "strictParsing",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "format",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "max",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "min",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "step",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), o = ref(/* @__PURE__ */ new Map());
    return provide("teleports", o), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, m) => watch(() => e.props[d2], m);
      l.watchProps(n.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: o
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/gNrhH-2q.js
var v = defineComponent({
  __name: "BryntumDatePicker",
  props: {
    activeDate: {},
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cellRenderer: { type: [Function, String] },
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    date: {},
    dayNameFormat: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    disabledCls: {},
    disabledDates: { type: [Function, String, Array] },
    disableNonWorkingDays: {},
    disableOtherMonthCells: {},
    disableWeekends: {},
    dock: {},
    draggable: {},
    drawer: {},
    editMonth: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    focusDisabledDates: {},
    footer: {},
    header: {},
    headerRenderer: { type: [Function, String] },
    height: {},
    hidden: {},
    hideAnimation: {},
    hideOtherMonthCells: {},
    hideWhenEmpty: {},
    highlightSelectedWeek: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    includeYear: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minColumnWidth: {},
    minDate: {},
    minHeight: {},
    minRowHeight: {},
    minWidth: {},
    monitorResize: {},
    month: {},
    multiSelect: {},
    namedItems: {},
    nonWorkingDayCls: {},
    nonWorkingDays: {},
    otherMonthCls: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selection: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    showWeekColumn: {},
    sixWeeks: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    tip: {},
    title: {},
    todayCls: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weekendCls: {},
    weekRenderer: { type: [Function, String] },
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeRefresh", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "dateChange", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "refresh", "resize", "selectionChange", "show", "toolClick"],
  setup(w3, { expose: s, emit: d2 }) {
    const c = d2, n = {
      instanceClass: DatePicker,
      instanceName: "DatePicker",
      configNames: [
        "activeDate",
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "cellRenderer",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "dayNameFormat",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "disabledCls",
        "disabledDates",
        "disableNonWorkingDays",
        "disableOtherMonthCells",
        "disableWeekends",
        "dock",
        "draggable",
        "drawer",
        "editMonth",
        "elementAttributes",
        "floating",
        "focusDisabledDates",
        "footer",
        "header",
        "headerRenderer",
        "hideAnimation",
        "hideOtherMonthCells",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "includeYear",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxDate",
        "minColumnWidth",
        "minDate",
        "minRowHeight",
        "monitorResize",
        "month",
        "multiSelect",
        "namedItems",
        "nonWorkingDayCls",
        "nonWorkingDays",
        "otherMonthCls",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "showWeekColumn",
        "sixWeeks",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "tip",
        "todayCls",
        "trapFocus",
        "type",
        "ui",
        "weekendCls",
        "weekRenderer",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "date",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "highlightSelectedWeek",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeRefresh",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDateChange",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onSelectionChange",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "selection",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeRefresh",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "dateChange",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "selectionChange",
        "show",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: a2.value,
        toRaw
      });
      const t = (h, m) => watch(() => e.props[h], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/Cbgn-YJL.js
var A2 = defineComponent({
  __name: "BryntumDateRangeField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    confirmable: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataField: {},
    dataset: {},
    dateFieldDefaults: {},
    dateStepTriggers: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    fieldEndDate: {},
    fieldStartDate: {},
    flex: {},
    floating: {},
    format: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keepTime: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    max: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    min: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    picker: {},
    pickerAlignElement: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(S9, { expose: s, emit: c }) {
    const d2 = c, a2 = {
      instanceClass: DateRangeField,
      instanceName: "DateRangeField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "dataField",
        "dateFieldDefaults",
        "dateStepTriggers",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keepTime",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minLength",
        "monitorResize",
        "name",
        "owner",
        "picker",
        "pickerAlignElement",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "confirmable",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "fieldEndDate",
        "fieldStartDate",
        "flex",
        "format",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "max",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "min",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), o = ref(/* @__PURE__ */ new Map());
    return provide("teleports", o), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: d2,
        element: i.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(n.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: o
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/Bl7mNA0k.js
var S2 = defineComponent({
  __name: "BryntumDateTimeField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataset: {},
    dateField: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    timeField: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(C, { expose: s, emit: c }) {
    const d2 = c, a2 = {
      instanceClass: DateTimeField,
      instanceName: "DateTimeField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "dateField",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "name",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "timeField",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), o = ref(/* @__PURE__ */ new Map());
    return provide("teleports", o), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: d2,
        element: i.value,
        toRaw
      });
      const t = (p, h) => watch(() => e.props[p], h);
      l.watchProps(n.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: o
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DtnDKHwS.js
var H2 = defineComponent({
  __name: "BryntumDayAgendaView",
  props: {
    actionButtons: {},
    activationKey: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allDayEvents: {},
    allowDragCreate: {},
    allowDragMove: {},
    allowDragResize: {},
    allowZoomUnderflow: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCreate: {},
    bbar: {},
    bodyCls: {},
    borderColor: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnHeaderRenderer: { type: [Function, String] },
    config: {},
    constrainTo: {},
    contentElementCls: {},
    coreHours: { type: [Object, Function, String] },
    currentTimeIndicatorRenderer: { type: [Function, String] },
    dashedSubticks: {},
    dataset: {},
    date: {},
    dateFilter: { type: [Function, String] },
    dateFormat: {},
    dateSeparator: {},
    dayCellRenderer: { type: [Function, String] },
    dayEndTime: {},
    dayHeaderRenderer: { type: [Function, String] },
    dayStartShift: {},
    dayStartTime: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    defaultScrollOptions: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    disabled: {},
    dock: {},
    draggable: {},
    dragUnit: {},
    drawer: {},
    elementAttributes: {},
    endDate: {},
    eventFilter: { type: [Function, String] },
    eventFlowDirection: {},
    eventHeaderRenderer: { type: [Function, String] },
    eventRenderer: { type: [Function, String] },
    eventSorter: { type: Function },
    eventSpacing: {},
    extendAllDayEndDay: {},
    extraData: {},
    filterEventResources: {},
    fixedDuration: {},
    flex: {},
    floating: {},
    footer: {},
    getPrimaryResource: { type: [Function, String] },
    gutterWidth: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideBorders: {},
    hideEmptyDays: {},
    hideEmptyHours: {},
    hideNonWorkingDays: {},
    hideTimeAxis: {},
    hideWhenEmpty: {},
    hourHeight: {},
    hourHeightBreakpoints: {},
    hourSpacing: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    interDayDrag: {},
    interDayResize: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxAllDayHeight: {},
    maxDate: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minDate: {},
    minDayWidth: {},
    minEventHeight: {},
    minEventWidth: {},
    minHeight: {},
    minHourHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    noMatchingDates: {},
    nonWorkingDays: {},
    overflowPopup: {},
    owner: {},
    pastEventCls: {},
    positioned: {},
    preventTooltipOnTouch: {},
    range: {},
    readOnly: {},
    relayStoreEvents: {},
    resourceImagePath: {},
    responsive: {},
    responsiveRoot: {},
    responsiveState: {},
    responsiveTarget: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectorButton: {},
    selectorMenuItem: {},
    shiftIncrement: {},
    shortDateFormat: {},
    shortDateTimeFormat: {},
    showAllDayHeader: {},
    showAnimation: {},
    showBullet: {},
    showResourceAvatars: {},
    showTime: {},
    showTooltipWhenDisabled: {},
    snapRelativeToEventStartDate: {},
    stackMultiDayEvents: {},
    startDate: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    syncCalendarDate: {},
    syncHourHeights: {},
    syncViewDate: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    tickRenderer: { type: [Function, String] },
    timeAxisTimeFormat: {},
    timeFormat: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    visibleStartTime: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeAutoCreate", "beforeChangeDate", "beforeDestroy", "beforeHide", "beforeResponsiveStateChange", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "cellMapPopulated", "collapse", "dayCellPopulated", "destroy", "dirtyStateChange", "eventAutoCreated", "eventPropagate", "expand", "focusIn", "focusOut", "hide", "layoutUpdate", "paint", "rangeChange", "readOnly", "recompose", "refresh", "resize", "responsiveStateChange", "shiftIncrementChange", "show", "tickChange", "toolClick"],
  setup(w3, { expose: l2, emit: d2 }) {
    const c = d2, n = {
      instanceClass: DayAgendaView,
      instanceName: "DayAgendaView",
      configNames: [
        "actionButtons",
        "activationKey",
        "adopt",
        "align",
        "allDayEvents",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "columnHeaderRenderer",
        "config",
        "constrainTo",
        "contentElementCls",
        "currentTimeIndicatorRenderer",
        "dayCellRenderer",
        "dayHeaderRenderer",
        "dayStartShift",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "descriptionRenderer",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "endDate",
        "eventFilter",
        "eventHeaderRenderer",
        "eventRenderer",
        "eventSorter",
        "fixedDuration",
        "floating",
        "footer",
        "getPrimaryResource",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxAllDayHeight",
        "monitorResize",
        "namedItems",
        "nonWorkingDays",
        "overflowPopup",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resourceImagePath",
        "responsive",
        "responsiveRoot",
        "responsiveState",
        "responsiveTarget",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectorButton",
        "selectorMenuItem",
        "showAllDayHeader",
        "showAnimation",
        "showBullet",
        "showResourceAvatars",
        "showTooltipWhenDisabled",
        "startDate",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "tickRenderer",
        "timeAxisTimeFormat",
        "timeFormat",
        "trapFocus",
        "type",
        "ui",
        "visibleStartTime",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDragCreate",
        "allowDragMove",
        "allowDragResize",
        "allowZoomUnderflow",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "autoCreate",
        "borderColor",
        "cls",
        "collapsed",
        "coreHours",
        "dashedSubticks",
        "dataset",
        "date",
        "dateFilter",
        "dateFormat",
        "dateSeparator",
        "dayEndTime",
        "dayStartTime",
        "defaultScrollOptions",
        "descriptionFormat",
        "disabled",
        "dragUnit",
        "eventFlowDirection",
        "eventSpacing",
        "extendAllDayEndDay",
        "extraData",
        "filterEventResources",
        "flex",
        "gutterWidth",
        "height",
        "hidden",
        "hideBorders",
        "hideEmptyDays",
        "hideEmptyHours",
        "hideNonWorkingDays",
        "hideTimeAxis",
        "hourHeight",
        "hourHeightBreakpoints",
        "hourSpacing",
        "id",
        "insertBefore",
        "insertFirst",
        "interDayDrag",
        "interDayResize",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDate",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minDate",
        "minDayWidth",
        "minEventHeight",
        "minEventWidth",
        "minHeight",
        "minHourHeight",
        "minWidth",
        "noMatchingDates",
        "onBeforeAutoCreate",
        "onBeforeChangeDate",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeResponsiveStateChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCellMapPopulated",
        "onCollapse",
        "onDayCellPopulated",
        "onDestroy",
        "onDirtyStateChange",
        "onEventAutoCreated",
        "onEventPropagate",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onLayoutUpdate",
        "onPaint",
        "onRangeChange",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onResponsiveStateChange",
        "onShiftIncrementChange",
        "onShow",
        "onTickChange",
        "onToolClick",
        "pastEventCls",
        "range",
        "readOnly",
        "rtl",
        "scrollable",
        "shiftIncrement",
        "shortDateFormat",
        "shortDateTimeFormat",
        "showTime",
        "snapRelativeToEventStartDate",
        "stackMultiDayEvents",
        "strictRecordMapping",
        "syncCalendarDate",
        "syncHourHeights",
        "syncViewDate",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "dayCellCls",
        "firstVisibleCell",
        "firstVisibleDate",
        "fitHours",
        "focusVisible",
        "hasChanges",
        "horizontalScroller",
        "increment",
        "isSettingValues",
        "isValid",
        "lastVisibleCell",
        "lastVisibleDate",
        "parent",
        "record",
        "showCurrentTime",
        "sixMinuteTicks",
        "state",
        "timeSnapType",
        "values"
      ],
      eventNames: [
        "beforeAutoCreate",
        "beforeChangeDate",
        "beforeDestroy",
        "beforeHide",
        "beforeResponsiveStateChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "cellMapPopulated",
        "collapse",
        "dayCellPopulated",
        "destroy",
        "dirtyStateChange",
        "eventAutoCreated",
        "eventPropagate",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "layoutUpdate",
        "paint",
        "rangeChange",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "responsiveStateChange",
        "shiftIncrementChange",
        "show",
        "tickChange",
        "toolClick"
      ]
    }, a2 = {}, o = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      a2.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: o.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(a2.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = a2.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), l2({
      instance: a2,
      refElement: o,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: o
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/D0esj7xd.js
var T3 = defineComponent({
  __name: "BryntumDayResourceView",
  props: {
    actionButtons: {},
    activationKey: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allDayEvents: {},
    allowDragCreate: {},
    allowDragMove: {},
    allowDragResize: {},
    allowZoomUnderflow: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCreate: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnHeaderRenderer: { type: [Function, String] },
    config: {},
    constrainTo: {},
    contentElementCls: {},
    coreHours: { type: [Object, Function, String] },
    currentTimeIndicatorRenderer: { type: [Function, String] },
    dashedSubticks: {},
    dataset: {},
    date: {},
    dateFilter: { type: [Function, String] },
    dateFormat: {},
    dateSeparator: {},
    dayCellRenderer: { type: [Function, String] },
    dayEndTime: {},
    dayHeaderRenderer: { type: [Function, String] },
    dayStartShift: {},
    dayStartTime: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    defaultScrollOptions: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    disabled: {},
    dock: {},
    draggable: {},
    dragUnit: {},
    drawer: {},
    elementAttributes: {},
    endDate: {},
    eventFilter: { type: [Function, String] },
    eventHeaderRenderer: { type: [Function, String] },
    eventLayout: {},
    eventRenderer: { type: [Function, String] },
    eventSorter: { type: Function },
    eventSpacing: {},
    extendAllDayEndDay: {},
    extraData: {},
    filterEventResources: {},
    fitHours: {},
    fixedDuration: {},
    flex: {},
    floating: {},
    footer: {},
    getPrimaryResource: { type: [Function, String] },
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideEmptyDays: {},
    hideEmptyResources: {},
    hideNonWorkingDays: {},
    hideResourceNameWhenNarrow: {},
    hideWhenEmpty: {},
    hourHeight: {},
    hourHeightBreakpoints: {},
    id: {},
    ignoreParentReadOnly: {},
    increment: {},
    insertBefore: {},
    insertFirst: {},
    interDayDrag: {},
    interDayResize: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxAllDayHeight: {},
    maxDate: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minDate: {},
    minDayWidth: {},
    minEventHeight: {},
    minHeight: {},
    minHourHeight: {},
    minResourceWidth: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    noMatchingDates: {},
    nonWorkingDays: {},
    overflowPopup: {},
    owner: {},
    pastEventCls: {},
    positioned: {},
    preventTooltipOnTouch: {},
    range: {},
    readOnly: {},
    relayStoreEvents: {},
    resourceDateFilter: { type: [Function, String] },
    resourceImagePath: {},
    responsive: {},
    responsiveRoot: {},
    responsiveState: {},
    responsiveTarget: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectorButton: {},
    selectorMenuItem: {},
    shiftIncrement: {},
    shortDateFormat: {},
    shortDateTimeFormat: {},
    shortEventCls: {},
    shortEventDuration: {},
    showAllDayHeader: {},
    showAnimation: {},
    showAvatars: {},
    showBullet: {},
    showCurrentTime: {},
    showHeaderAvatars: {},
    showResourceAvatars: {},
    showTime: {},
    showTooltipWhenDisabled: {},
    sixMinuteTicks: {},
    snapRelativeToEventStartDate: {},
    stackMultiDayEvents: {},
    startDate: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    syncCalendarDate: {},
    syncViewDate: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    tickRenderer: { type: [Function, String] },
    timeAxisTimeFormat: {},
    timeFormat: {},
    timeSnapType: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    visibleStartTime: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {},
    zoomOnMouseWheel: {}
  },
  emits: ["beforeAutoCreate", "beforeChangeDate", "beforeDestroy", "beforeHide", "beforeResponsiveStateChange", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "cellMapPopulated", "collapse", "dayCellPopulated", "destroy", "dirtyStateChange", "eventAutoCreated", "eventPropagate", "expand", "focusIn", "focusOut", "hide", "layoutUpdate", "paint", "rangeChange", "readOnly", "recompose", "refresh", "resize", "responsiveStateChange", "shiftIncrementChange", "show", "tickChange", "toolClick"],
  setup(w3, { expose: l2, emit: d2 }) {
    const c = d2, r = {
      instanceClass: DayResourceView,
      instanceName: "DayResourceView",
      configNames: [
        "actionButtons",
        "activationKey",
        "adopt",
        "align",
        "allDayEvents",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "columnHeaderRenderer",
        "config",
        "constrainTo",
        "contentElementCls",
        "currentTimeIndicatorRenderer",
        "dayCellRenderer",
        "dayHeaderRenderer",
        "dayStartShift",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "descriptionRenderer",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "endDate",
        "eventFilter",
        "eventHeaderRenderer",
        "eventLayout",
        "eventRenderer",
        "eventSorter",
        "eventSpacing",
        "fixedDuration",
        "floating",
        "footer",
        "getPrimaryResource",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxAllDayHeight",
        "monitorResize",
        "namedItems",
        "nonWorkingDays",
        "overflowPopup",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resourceImagePath",
        "responsive",
        "responsiveRoot",
        "responsiveState",
        "responsiveTarget",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectorButton",
        "selectorMenuItem",
        "shortEventCls",
        "shortEventDuration",
        "showAllDayHeader",
        "showAnimation",
        "showBullet",
        "showHeaderAvatars",
        "showResourceAvatars",
        "showTooltipWhenDisabled",
        "startDate",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "tickRenderer",
        "timeAxisTimeFormat",
        "timeFormat",
        "trapFocus",
        "type",
        "ui",
        "visibleStartTime",
        "weekStartDay",
        "weight",
        "zoomOnMouseWheel"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDragCreate",
        "allowDragMove",
        "allowDragResize",
        "allowZoomUnderflow",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "autoCreate",
        "cls",
        "collapsed",
        "coreHours",
        "dashedSubticks",
        "dataset",
        "date",
        "dateFilter",
        "dateFormat",
        "dateSeparator",
        "dayEndTime",
        "dayStartTime",
        "defaultScrollOptions",
        "descriptionFormat",
        "disabled",
        "dragUnit",
        "extendAllDayEndDay",
        "extraData",
        "filterEventResources",
        "fitHours",
        "flex",
        "height",
        "hidden",
        "hideEmptyDays",
        "hideEmptyResources",
        "hideNonWorkingDays",
        "hideResourceNameWhenNarrow",
        "hourHeight",
        "hourHeightBreakpoints",
        "id",
        "increment",
        "insertBefore",
        "insertFirst",
        "interDayDrag",
        "interDayResize",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDate",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minDate",
        "minDayWidth",
        "minEventHeight",
        "minHeight",
        "minHourHeight",
        "minResourceWidth",
        "minWidth",
        "noMatchingDates",
        "onBeforeAutoCreate",
        "onBeforeChangeDate",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeResponsiveStateChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCellMapPopulated",
        "onCollapse",
        "onDayCellPopulated",
        "onDestroy",
        "onDirtyStateChange",
        "onEventAutoCreated",
        "onEventPropagate",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onLayoutUpdate",
        "onPaint",
        "onRangeChange",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onResponsiveStateChange",
        "onShiftIncrementChange",
        "onShow",
        "onTickChange",
        "onToolClick",
        "pastEventCls",
        "range",
        "readOnly",
        "resourceDateFilter",
        "rtl",
        "scrollable",
        "shiftIncrement",
        "shortDateFormat",
        "shortDateTimeFormat",
        "showAvatars",
        "showCurrentTime",
        "showTime",
        "sixMinuteTicks",
        "snapRelativeToEventStartDate",
        "stackMultiDayEvents",
        "strictRecordMapping",
        "syncCalendarDate",
        "syncViewDate",
        "timeSnapType",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "dayCellCls",
        "firstVisibleCell",
        "firstVisibleDate",
        "focusVisible",
        "hasChanges",
        "horizontalScroller",
        "isSettingValues",
        "isValid",
        "lastVisibleCell",
        "lastVisibleDate",
        "parent",
        "record",
        "state",
        "values"
      ],
      eventNames: [
        "beforeAutoCreate",
        "beforeChangeDate",
        "beforeDestroy",
        "beforeHide",
        "beforeResponsiveStateChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "cellMapPopulated",
        "collapse",
        "dayCellPopulated",
        "destroy",
        "dirtyStateChange",
        "eventAutoCreated",
        "eventPropagate",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "layoutUpdate",
        "paint",
        "rangeChange",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "responsiveStateChange",
        "shiftIncrementChange",
        "show",
        "tickChange",
        "toolClick"
      ]
    }, a2 = {}, o = ref(), n = ref(/* @__PURE__ */ new Map());
    return provide("teleports", n), onMounted(() => {
      const e = getCurrentInstance();
      a2.value = l.createWidget({
        me: e,
        widgetData: r,
        emit: c,
        element: o.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(a2.value, r, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = a2.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), l2({
      instance: a2,
      refElement: o,
      teleports: n
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: o
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/FIb_Q8Dj.js
var T4 = defineComponent({
  __name: "BryntumDayView",
  props: {
    actionButtons: {},
    activationKey: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allDayEvents: {},
    allowDragCreate: {},
    allowDragMove: {},
    allowDragResize: {},
    allowZoomUnderflow: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCreate: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnHeaderRenderer: { type: [Function, String] },
    config: {},
    constrainTo: {},
    contentElementCls: {},
    coreHours: { type: [Object, Function, String] },
    currentTimeIndicatorRenderer: { type: [Function, String] },
    dashedSubticks: {},
    dataset: {},
    date: {},
    dateFilter: { type: [Function, String] },
    dateFormat: {},
    dateSeparator: {},
    dayCellRenderer: { type: [Function, String] },
    dayEndTime: {},
    dayHeaderRenderer: { type: [Function, String] },
    dayStartShift: {},
    dayStartTime: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    defaultScrollOptions: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    disabled: {},
    dock: {},
    draggable: {},
    dragUnit: {},
    drawer: {},
    elementAttributes: {},
    endDate: {},
    eventFilter: { type: [Function, String] },
    eventHeaderRenderer: { type: [Function, String] },
    eventLayout: {},
    eventRenderer: { type: [Function, String] },
    eventSorter: { type: Function },
    eventSpacing: {},
    extendAllDayEndDay: {},
    extraData: {},
    filterEventResources: {},
    fitHours: {},
    fixedDuration: {},
    flex: {},
    floating: {},
    footer: {},
    getPrimaryResource: { type: [Function, String] },
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideEmptyDays: {},
    hideNonWorkingDays: {},
    hideWhenEmpty: {},
    hourHeight: {},
    hourHeightBreakpoints: {},
    id: {},
    ignoreParentReadOnly: {},
    increment: {},
    insertBefore: {},
    insertFirst: {},
    interDayDrag: {},
    interDayResize: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxAllDayHeight: {},
    maxDate: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minDate: {},
    minDayWidth: {},
    minEventHeight: {},
    minHeight: {},
    minHourHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    noMatchingDates: {},
    nonWorkingDays: {},
    overflowPopup: {},
    owner: {},
    pastEventCls: {},
    positioned: {},
    preventTooltipOnTouch: {},
    range: {},
    readOnly: {},
    relayStoreEvents: {},
    resourceImagePath: {},
    responsive: {},
    responsiveRoot: {},
    responsiveState: {},
    responsiveTarget: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectorButton: {},
    selectorMenuItem: {},
    shiftIncrement: {},
    shortDateFormat: {},
    shortDateTimeFormat: {},
    shortEventCls: {},
    shortEventDuration: {},
    showAllDayHeader: {},
    showAnimation: {},
    showBullet: {},
    showCurrentTime: {},
    showResourceAvatars: {},
    showTime: {},
    showTooltipWhenDisabled: {},
    sixMinuteTicks: {},
    snapRelativeToEventStartDate: {},
    stackMultiDayEvents: {},
    startDate: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    syncCalendarDate: {},
    syncViewDate: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    tickRenderer: { type: [Function, String] },
    timeAxisTimeFormat: {},
    timeFormat: {},
    timeSnapType: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    visibleStartTime: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {},
    zoomOnMouseWheel: {}
  },
  emits: ["beforeAutoCreate", "beforeChangeDate", "beforeDestroy", "beforeHide", "beforeResponsiveStateChange", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "cellMapPopulated", "collapse", "dayCellPopulated", "destroy", "dirtyStateChange", "eventAutoCreated", "eventPropagate", "expand", "focusIn", "focusOut", "hide", "layoutUpdate", "paint", "rangeChange", "readOnly", "recompose", "refresh", "resize", "responsiveStateChange", "shiftIncrementChange", "show", "tickChange", "toolClick"],
  setup(w3, { expose: l2, emit: d2 }) {
    const c = d2, n = {
      instanceClass: DayView,
      instanceName: "DayView",
      configNames: [
        "actionButtons",
        "activationKey",
        "adopt",
        "align",
        "allDayEvents",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "columnHeaderRenderer",
        "config",
        "constrainTo",
        "contentElementCls",
        "currentTimeIndicatorRenderer",
        "dayCellRenderer",
        "dayHeaderRenderer",
        "dayStartShift",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "descriptionRenderer",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "endDate",
        "eventFilter",
        "eventHeaderRenderer",
        "eventLayout",
        "eventRenderer",
        "eventSorter",
        "eventSpacing",
        "fixedDuration",
        "floating",
        "footer",
        "getPrimaryResource",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxAllDayHeight",
        "monitorResize",
        "namedItems",
        "nonWorkingDays",
        "overflowPopup",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resourceImagePath",
        "responsive",
        "responsiveRoot",
        "responsiveState",
        "responsiveTarget",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectorButton",
        "selectorMenuItem",
        "shortEventCls",
        "shortEventDuration",
        "showAllDayHeader",
        "showAnimation",
        "showBullet",
        "showResourceAvatars",
        "showTooltipWhenDisabled",
        "startDate",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "tickRenderer",
        "timeAxisTimeFormat",
        "timeFormat",
        "trapFocus",
        "type",
        "ui",
        "visibleStartTime",
        "weekStartDay",
        "weight",
        "zoomOnMouseWheel"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDragCreate",
        "allowDragMove",
        "allowDragResize",
        "allowZoomUnderflow",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "autoCreate",
        "cls",
        "collapsed",
        "coreHours",
        "dashedSubticks",
        "dataset",
        "date",
        "dateFilter",
        "dateFormat",
        "dateSeparator",
        "dayEndTime",
        "dayStartTime",
        "defaultScrollOptions",
        "descriptionFormat",
        "disabled",
        "dragUnit",
        "extendAllDayEndDay",
        "extraData",
        "filterEventResources",
        "fitHours",
        "flex",
        "height",
        "hidden",
        "hideEmptyDays",
        "hideNonWorkingDays",
        "hourHeight",
        "hourHeightBreakpoints",
        "id",
        "increment",
        "insertBefore",
        "insertFirst",
        "interDayDrag",
        "interDayResize",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDate",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minDate",
        "minDayWidth",
        "minEventHeight",
        "minHeight",
        "minHourHeight",
        "minWidth",
        "noMatchingDates",
        "onBeforeAutoCreate",
        "onBeforeChangeDate",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeResponsiveStateChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCellMapPopulated",
        "onCollapse",
        "onDayCellPopulated",
        "onDestroy",
        "onDirtyStateChange",
        "onEventAutoCreated",
        "onEventPropagate",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onLayoutUpdate",
        "onPaint",
        "onRangeChange",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onResponsiveStateChange",
        "onShiftIncrementChange",
        "onShow",
        "onTickChange",
        "onToolClick",
        "pastEventCls",
        "range",
        "readOnly",
        "rtl",
        "scrollable",
        "shiftIncrement",
        "shortDateFormat",
        "shortDateTimeFormat",
        "showCurrentTime",
        "showTime",
        "sixMinuteTicks",
        "snapRelativeToEventStartDate",
        "stackMultiDayEvents",
        "strictRecordMapping",
        "syncCalendarDate",
        "syncViewDate",
        "timeSnapType",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "dayCellCls",
        "firstVisibleCell",
        "firstVisibleDate",
        "focusVisible",
        "hasChanges",
        "horizontalScroller",
        "isSettingValues",
        "isValid",
        "lastVisibleCell",
        "lastVisibleDate",
        "parent",
        "record",
        "state",
        "values"
      ],
      eventNames: [
        "beforeAutoCreate",
        "beforeChangeDate",
        "beforeDestroy",
        "beforeHide",
        "beforeResponsiveStateChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "cellMapPopulated",
        "collapse",
        "dayCellPopulated",
        "destroy",
        "dirtyStateChange",
        "eventAutoCreated",
        "eventPropagate",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "layoutUpdate",
        "paint",
        "rangeChange",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "responsiveStateChange",
        "shiftIncrementChange",
        "show",
        "tickChange",
        "toolClick"
      ]
    }, a2 = {}, o = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      a2.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: o.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(a2.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = a2.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), l2({
      instance: a2,
      refElement: o,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: o
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/BI4hwaXc.js
var B2 = defineComponent({
  __name: "BryntumDemoCodeEditor",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    appFolder: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    codePath: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    editor: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    footer: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    language: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    mode: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preferredSources: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    status: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    text: {},
    textAlign: {},
    textContent: {},
    theme: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "toolClick"],
  setup(v4, { expose: s, emit: d2 }) {
    const c = d2, n = {
      instanceClass: DemoCodeEditor,
      instanceName: "DemoCodeEditor",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "appFolder",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "codePath",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "editor",
        "elementAttributes",
        "floating",
        "footer",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "mode",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preferredSources",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "language",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "status",
        "strictRecordMapping",
        "text",
        "theme",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/C86EwvJx.js
var S3 = defineComponent({
  __name: "BryntumDisplayField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    template: { type: Function },
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(O6, { expose: s, emit: c }) {
    const p = c, o = {
      instanceClass: DisplayField,
      instanceName: "DisplayField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "name",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "template",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: o,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, o, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CliNwyQ0.js
var S4 = defineComponent({
  __name: "BryntumDurationField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    allowedUnits: {},
    allowNegative: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataField: {},
    dataset: {},
    decimalPrecision: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    magnitude: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    max: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    min: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    step: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    unit: {},
    useAbbreviation: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(A6, { expose: s, emit: c }) {
    const d2 = c, a2 = {
      instanceClass: DurationField,
      instanceName: "DurationField",
      configNames: [
        "adopt",
        "align",
        "allowNegative",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "dataField",
        "decimalPrecision",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minLength",
        "monitorResize",
        "name",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "step",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "useAbbreviation",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowedUnits",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "magnitude",
        "margin",
        "max",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "min",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "unit",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), o = ref(/* @__PURE__ */ new Map());
    return provide("teleports", o), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: d2,
        element: i.value,
        toRaw
      });
      const t = (p, u) => watch(() => e.props[p], u);
      l.watchProps(n.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: o
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/C3X17UXb.js
var T5 = defineComponent({
  __name: "BryntumEditor",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    appendToTargetParent: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    blurAction: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cancelKey: {},
    centered: {},
    cls: {},
    completeKey: {},
    completeOnChange: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    fitTargetContent: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideTarget: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    inputField: {},
    insertBefore: {},
    insertFirst: {},
    invalidAction: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    matchFont: {},
    matchSize: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["afterEdit", "beforeCancel", "beforeComplete", "beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStart", "cancel", "catchAll", "complete", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "keyDown", "paint", "readOnly", "recompose", "resize", "show", "start"],
  setup(A6, { expose: s, emit: c }) {
    const d2 = c, a2 = {
      instanceClass: Editor,
      instanceName: "Editor",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "appendToTargetParent",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "blurAction",
        "bubbleEvents",
        "callOnFunctions",
        "cancelKey",
        "centered",
        "completeKey",
        "completeOnChange",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "fitTargetContent",
        "floating",
        "hideAnimation",
        "hideTarget",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "invalidAction",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "matchFont",
        "matchSize",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "inputField",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAfterEdit",
        "onBeforeCancel",
        "onBeforeComplete",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStart",
        "onCancel",
        "onCatchAll",
        "onComplete",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onKeyDown",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onStart",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "afterEdit",
        "beforeCancel",
        "beforeComplete",
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStart",
        "cancel",
        "catchAll",
        "complete",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "keyDown",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "start"
      ]
    }, o = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (m, p) => watch(() => e.props[m], p);
      l.watchProps(o.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/K0HHseJT.js
var S5 = defineComponent({
  __name: "BryntumEventColorField",
  props: {
    addNoColorItem: {},
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    colors: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    pickerAlignElement: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(E9, { expose: s, emit: c }) {
    const p = c, o = {
      instanceClass: EventColorField,
      instanceName: "EventColorField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "dataField",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minLength",
        "monitorResize",
        "name",
        "owner",
        "pickerAlignElement",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "addNoColorItem",
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "colors",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "editable",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: o,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, o, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/C7m8e_Is.js
var R2 = defineComponent({
  __name: "BryntumFieldFilterPicker",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    dateFormat: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    fields: {},
    filter: {},
    flex: {},
    floating: {},
    getValueFieldConfig: { type: Function },
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    operatorLocked: {},
    operators: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    propertyFieldConfig: {},
    propertyLocked: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    store: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tooltip: {},
    triggerChangeOnInput: {},
    type: {},
    ui: {},
    valueFieldPlaceholders: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "catchAll", "change", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(x3, { expose: s, emit: c }) {
    const d2 = c, i = {
      instanceClass: FieldFilterPicker,
      instanceName: "FieldFilterPicker",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "dateFormat",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "fields",
        "filter",
        "floating",
        "getValueFieldConfig",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "operatorLocked",
        "operators",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "propertyFieldConfig",
        "propertyLocked",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "store",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "triggerChangeOnInput",
        "type",
        "ui",
        "valueFieldPlaceholders",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "change",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: i,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, i, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/Cyo_zcnZ.js
var v2 = defineComponent({
  __name: "BryntumFieldFilterPickerGroup",
  props: {
    addFilterButtonText: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allowedFieldNames: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    callOnFunctions: {},
    canDeleteFilter: { type: Function },
    canManageFilter: { type: Function },
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    dateFormat: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    fields: {},
    filters: {},
    flex: {},
    floating: {},
    getFieldFilterPickerConfig: { type: Function },
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    limitToProperty: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    operators: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAddFilterButton: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    store: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tooltip: {},
    triggerChangeOnInput: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeAddFilter", "beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "catchAll", "change", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(S9, { expose: s, emit: d2 }) {
    const c = d2, i = {
      instanceClass: FieldFilterPickerGroup,
      instanceName: "FieldFilterPickerGroup",
      configNames: [
        "addFilterButtonText",
        "adopt",
        "align",
        "allowedFieldNames",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "callOnFunctions",
        "canDeleteFilter",
        "canManageFilter",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "dateFormat",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "fields",
        "filters",
        "floating",
        "getFieldFilterPickerConfig",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "limitToProperty",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "operators",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAddFilterButton",
        "showAnimation",
        "showTooltipWhenDisabled",
        "store",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "triggerChangeOnInput",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeAddFilter",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "value",
        "values"
      ],
      eventNames: [
        "beforeAddFilter",
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "change",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: i,
        emit: c,
        element: n.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, i, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DIhO2gCy.js
var O3 = defineComponent({
  __name: "BryntumFieldSet",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    footer: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labelWidth: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "toolClick"],
  setup(x3, { expose: s, emit: d2 }) {
    const c = d2, n = {
      instanceClass: FieldSet,
      instanceName: "FieldSet",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "floating",
        "footer",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "labelCls",
        "labelPosition",
        "labelWidth",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "inline",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "label",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: l2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/7iO8Q3nH.js
var D2 = defineComponent({
  __name: "BryntumFileField",
  props: {
    accept: {},
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    multiple: {},
    name: {},
    owner: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(O6, { expose: s, emit: c }) {
    const p = c, o = {
      instanceClass: FileField,
      instanceName: "FileField",
      configNames: [
        "accept",
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "multiple",
        "name",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: o,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, o, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/C4sgBBBd.js
var R3 = defineComponent({
  __name: "BryntumFilePicker",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    buttonConfig: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    fileFieldConfig: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showBadge: {},
    showTooltipWhenDisabled: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "catchAll", "change", "clear", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(v4, { expose: s, emit: c }) {
    const d2 = c, i = {
      instanceClass: FilePicker,
      instanceName: "FilePicker",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "buttonConfig",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "fileFieldConfig",
        "floating",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "showBadge",
        "strictRecordMapping",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: i,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (m, p) => watch(() => e.props[m], p);
      l.watchProps(o.value, i, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/GfPgF8-8.js
var S6 = defineComponent({
  __name: "BryntumFilterField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    field: {},
    filterFunction: { type: Function },
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    store: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(F7, { expose: s, emit: c }) {
    const p = c, o = {
      instanceClass: FilterField,
      instanceName: "FilterField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "dataField",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "field",
        "filterFunction",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minLength",
        "monitorResize",
        "name",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "store",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: o,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, o, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/B2mW7dzm.js
var H3 = {
  ref: "teleportsHolder",
  style: { display: "none" }
};
var G = defineComponent({
  __name: "BryntumGrid",
  props: {
    adopt: {},
    alignSelf: {},
    animateFilterRemovals: {},
    animateRemovingRows: {},
    animateTreeNodeToggle: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoHeight: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cellEllipsis: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnLines: {},
    columns: {},
    config: {},
    contentElementCls: {},
    contextMenuTriggerEvent: {},
    data: {},
    dataset: {},
    defaultRegion: {},
    destroyStore: {},
    disabled: {},
    disableGridColumnIdWarning: {},
    disableGridRowModelWarning: {},
    dock: {},
    drawer: {},
    elementAttributes: {},
    emptyText: {},
    enableSticky: {},
    enableTextSelection: {},
    enableUndoRedoKeys: {},
    extraData: {},
    fillLastColumn: {},
    fixedRowHeight: {},
    flex: {},
    footer: {},
    formulaProviders: {},
    fullRowRefresh: {},
    getRowHeight: { type: Function },
    header: {},
    height: {},
    hidden: {},
    hideFooters: {},
    hideHeaders: {},
    hideHorizontalScrollbar: {},
    hoverCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    listeners: {},
    loadMask: {},
    loadMaskDefaults: {},
    loadMaskError: {},
    localizable: {},
    longPressTime: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    owner: {},
    plugins: {},
    preserveFocusOnDatasetChange: {},
    preserveScroll: {},
    preserveScrollOnDatasetChange: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    resizable: {},
    resizeToFitIncludesHeader: {},
    responsiveLevels: {},
    ripple: {},
    rootElement: {},
    rowHeight: {},
    rowLines: {},
    rtl: {},
    scrollable: {},
    scrollerClass: {},
    scrollManager: {},
    selectionMode: {},
    showDirty: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    stateSettings: {},
    store: {},
    strips: {},
    subGridConfigs: {},
    syncMask: {},
    tab: {},
    tabBarItems: {},
    tbar: {},
    title: {},
    tools: {},
    transitionDuration: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    cellCopyPasteFeature: {},
    cellEditFeature: {},
    cellMenuFeature: {},
    cellTooltipFeature: {},
    columnAutoWidthFeature: {},
    columnDragToolbarFeature: {},
    columnPickerFeature: {},
    columnRenameFeature: {},
    columnReorderFeature: {},
    columnResizeFeature: {},
    excelExporterFeature: {},
    fileDropFeature: {},
    fillHandleFeature: {},
    filterFeature: {},
    filterBarFeature: {},
    groupFeature: {},
    groupSummaryFeature: {},
    headerMenuFeature: {},
    lockRowsFeature: {},
    mergeCellsFeature: {},
    pdfExportFeature: {},
    printFeature: {},
    quickFindFeature: {},
    regionResizeFeature: {},
    rowCopyPasteFeature: {},
    rowEditFeature: {},
    rowExpanderFeature: {},
    rowReorderFeature: {},
    rowResizeFeature: {},
    searchFeature: {},
    sortFeature: {},
    splitFeature: {},
    stickyCellsFeature: {},
    stripeFeature: {},
    summaryFeature: {},
    treeFeature: {},
    treeGroupFeature: {}
  },
  emits: ["beforeCancelCellEdit", "beforeCancelRowEdit", "beforeCellDelete", "beforeCellEditStart", "beforeColumnDragStart", "beforeColumnDropFinalize", "beforeColumnResize", "beforeCopy", "beforeCSVExport", "beforeDestroy", "beforeExcelExport", "beforeFillHandleDragStart", "beforeFinishCellEdit", "beforeFinishRowEdit", "beforeHide", "beforePaste", "beforePdfExport", "beforeRenderRow", "beforeRenderRows", "beforeRowCollapse", "beforeRowExpand", "beforeSelectionChange", "beforeSetRecord", "beforeShow", "beforeStartRowEdit", "beforeStateApply", "beforeStateSave", "beforeToggleGroup", "beforeToggleNode", "cancelCellEdit", "catchAll", "cellClick", "cellContextMenu", "cellDblClick", "cellMenuBeforeShow", "cellMenuItem", "cellMenuShow", "cellMenuToggleItem", "cellMouseEnter", "cellMouseLeave", "cellMouseOut", "cellMouseOver", "collapse", "collapseNode", "columnDrag", "columnDragStart", "columnDrop", "columnResize", "columnResizeStart", "contextMenuItem", "contextMenuToggleItem", "copy", "dataChange", "destroy", "dirtyStateChange", "dragSelecting", "expand", "expandNode", "fileDrop", "fillHandleBeforeDragFinalize", "fillHandleDrag", "fillHandleDragAbort", "fillHandleDragEnd", "fillHandleDragStart", "finishCellEdit", "finishRowEdit", "focusIn", "focusOut", "gridRowBeforeDragStart", "gridRowBeforeDropFinalize", "gridRowDrag", "gridRowDragAbort", "gridRowDragStart", "gridRowDrop", "headerClick", "headerMenuBeforeShow", "headerMenuItem", "headerMenuShow", "headerMenuToggleItem", "hide", "lockRows", "mouseOut", "mouseOver", "paint", "paste", "pdfExport", "readOnly", "recompose", "renderRow", "renderRows", "resize", "responsive", "rowCollapse", "rowExpand", "rowMouseEnter", "rowMouseLeave", "scroll", "selectionChange", "selectionModeChange", "show", "split", "splitterCollapseClick", "splitterDragEnd", "splitterDragStart", "splitterExpandClick", "startCellEdit", "startRowEdit", "subGridCollapse", "subGridExpand", "toggleGroup", "toggleNode", "toolClick", "unlockRows", "unsplit"],
  setup(T11, { expose: p, emit: g }) {
    const f = g, s = {
      instanceClass: Grid,
      instanceName: "Grid",
      isView: true,
      dataStores: {
        originalStore: "originals",
        store: "data"
      },
      projectStores: false,
      featureNames: [
        "cellCopyPasteFeature",
        "cellEditFeature",
        "cellMenuFeature",
        "cellTooltipFeature",
        "columnAutoWidthFeature",
        "columnDragToolbarFeature",
        "columnPickerFeature",
        "columnRenameFeature",
        "columnReorderFeature",
        "columnResizeFeature",
        "excelExporterFeature",
        "fileDropFeature",
        "fillHandleFeature",
        "filterFeature",
        "filterBarFeature",
        "groupFeature",
        "groupSummaryFeature",
        "headerMenuFeature",
        "lockRowsFeature",
        "mergeCellsFeature",
        "pdfExportFeature",
        "printFeature",
        "quickFindFeature",
        "regionResizeFeature",
        "rowCopyPasteFeature",
        "rowEditFeature",
        "rowExpanderFeature",
        "rowReorderFeature",
        "rowResizeFeature",
        "searchFeature",
        "sortFeature",
        "splitFeature",
        "stickyCellsFeature",
        "stripeFeature",
        "summaryFeature",
        "treeFeature",
        "treeGroupFeature"
      ],
      configNames: [
        "adopt",
        "animateFilterRemovals",
        "animateRemovingRows",
        "ariaDescription",
        "ariaLabel",
        "autoHeight",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "collapsible",
        "config",
        "contentElementCls",
        "contextMenuTriggerEvent",
        "defaultRegion",
        "destroyStore",
        "disableGridColumnIdWarning",
        "disableGridRowModelWarning",
        "dock",
        "drawer",
        "elementAttributes",
        "enableSticky",
        "enableTextSelection",
        "fillLastColumn",
        "fixedRowHeight",
        "footer",
        "formulaProviders",
        "fullRowRefresh",
        "getRowHeight",
        "header",
        "hideHorizontalScrollbar",
        "hoverCls",
        "ignoreParentReadOnly",
        "listeners",
        "loadMask",
        "loadMaskDefaults",
        "loadMaskError",
        "localizable",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "plugins",
        "preserveFocusOnDatasetChange",
        "preserveScrollOnDatasetChange",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resizable",
        "resizeToFitIncludesHeader",
        "responsiveLevels",
        "ripple",
        "rootElement",
        "scrollerClass",
        "scrollManager",
        "showDirty",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "subGridConfigs",
        "syncMask",
        "tab",
        "tabBarItems",
        "tbar",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "animateTreeNodeToggle",
        "appendTo",
        "ariaLive",
        "cellEllipsis",
        "cls",
        "collapsed",
        "columnLines",
        "columns",
        "data",
        "dataset",
        "disabled",
        "emptyText",
        "enableUndoRedoKeys",
        "extraData",
        "flex",
        "height",
        "hidden",
        "hideFooters",
        "hideHeaders",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "longPressTime",
        "margin",
        "maxHeight",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeCancelCellEdit",
        "onBeforeCancelRowEdit",
        "onBeforeCellDelete",
        "onBeforeCellEditStart",
        "onBeforeColumnDragStart",
        "onBeforeColumnDropFinalize",
        "onBeforeColumnResize",
        "onBeforeCopy",
        "onBeforeCSVExport",
        "onBeforeDestroy",
        "onBeforeExcelExport",
        "onBeforeFillHandleDragStart",
        "onBeforeFinishCellEdit",
        "onBeforeFinishRowEdit",
        "onBeforeHide",
        "onBeforePaste",
        "onBeforePdfExport",
        "onBeforeRenderRow",
        "onBeforeRenderRows",
        "onBeforeRowCollapse",
        "onBeforeRowExpand",
        "onBeforeSelectionChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStartRowEdit",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onBeforeToggleGroup",
        "onBeforeToggleNode",
        "onCancelCellEdit",
        "onCatchAll",
        "onCellClick",
        "onCellContextMenu",
        "onCellDblClick",
        "onCellMenuBeforeShow",
        "onCellMenuItem",
        "onCellMenuShow",
        "onCellMenuToggleItem",
        "onCellMouseEnter",
        "onCellMouseLeave",
        "onCellMouseOut",
        "onCellMouseOver",
        "onCollapse",
        "onCollapseNode",
        "onColumnDrag",
        "onColumnDragStart",
        "onColumnDrop",
        "onColumnResize",
        "onColumnResizeStart",
        "onContextMenuItem",
        "onContextMenuToggleItem",
        "onCopy",
        "onDataChange",
        "onDestroy",
        "onDirtyStateChange",
        "onDragSelecting",
        "onExpand",
        "onExpandNode",
        "onFileDrop",
        "onFillHandleBeforeDragFinalize",
        "onFillHandleDrag",
        "onFillHandleDragAbort",
        "onFillHandleDragEnd",
        "onFillHandleDragStart",
        "onFinishCellEdit",
        "onFinishRowEdit",
        "onFocusIn",
        "onFocusOut",
        "onGridRowBeforeDragStart",
        "onGridRowBeforeDropFinalize",
        "onGridRowDrag",
        "onGridRowDragAbort",
        "onGridRowDragStart",
        "onGridRowDrop",
        "onHeaderClick",
        "onHeaderMenuBeforeShow",
        "onHeaderMenuItem",
        "onHeaderMenuShow",
        "onHeaderMenuToggleItem",
        "onHide",
        "onLockRows",
        "onMouseOut",
        "onMouseOver",
        "onPaint",
        "onPaste",
        "onPdfExport",
        "onReadOnly",
        "onRecompose",
        "onRenderRow",
        "onRenderRows",
        "onResize",
        "onResponsive",
        "onRowCollapse",
        "onRowExpand",
        "onRowMouseEnter",
        "onRowMouseLeave",
        "onScroll",
        "onSelectionChange",
        "onSelectionModeChange",
        "onShow",
        "onSplit",
        "onSplitterCollapseClick",
        "onSplitterDragEnd",
        "onSplitterDragStart",
        "onSplitterExpandClick",
        "onStartCellEdit",
        "onStartRowEdit",
        "onSubGridCollapse",
        "onSubGridExpand",
        "onToggleGroup",
        "onToggleNode",
        "onToolClick",
        "onUnlockRows",
        "onUnsplit",
        "preserveScroll",
        "readOnly",
        "rowHeight",
        "rowLines",
        "rtl",
        "scrollable",
        "selectionMode",
        "stateSettings",
        "store",
        "title",
        "tools",
        "transitionDuration",
        "width"
      ],
      propertyNames: [
        "focusVisible",
        "hasChanges",
        "originalStore",
        "parent",
        "selectedCell",
        "selectedCells",
        "selectedRecord",
        "selectedRecords",
        "selectedRows",
        "state",
        "tooltip"
      ],
      eventNames: [
        "beforeCancelCellEdit",
        "beforeCancelRowEdit",
        "beforeCellDelete",
        "beforeCellEditStart",
        "beforeColumnDragStart",
        "beforeColumnDropFinalize",
        "beforeColumnResize",
        "beforeCopy",
        "beforeCSVExport",
        "beforeDestroy",
        "beforeExcelExport",
        "beforeFillHandleDragStart",
        "beforeFinishCellEdit",
        "beforeFinishRowEdit",
        "beforeHide",
        "beforePaste",
        "beforePdfExport",
        "beforeRenderRow",
        "beforeRenderRows",
        "beforeRowCollapse",
        "beforeRowExpand",
        "beforeSelectionChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStartRowEdit",
        "beforeStateApply",
        "beforeStateSave",
        "beforeToggleGroup",
        "beforeToggleNode",
        "cancelCellEdit",
        "catchAll",
        "cellClick",
        "cellContextMenu",
        "cellDblClick",
        "cellMenuBeforeShow",
        "cellMenuItem",
        "cellMenuShow",
        "cellMenuToggleItem",
        "cellMouseEnter",
        "cellMouseLeave",
        "cellMouseOut",
        "cellMouseOver",
        "collapse",
        "collapseNode",
        "columnDrag",
        "columnDragStart",
        "columnDrop",
        "columnResize",
        "columnResizeStart",
        "contextMenuItem",
        "contextMenuToggleItem",
        "copy",
        "dataChange",
        "destroy",
        "dirtyStateChange",
        "dragSelecting",
        "expand",
        "expandNode",
        "fileDrop",
        "fillHandleBeforeDragFinalize",
        "fillHandleDrag",
        "fillHandleDragAbort",
        "fillHandleDragEnd",
        "fillHandleDragStart",
        "finishCellEdit",
        "finishRowEdit",
        "focusIn",
        "focusOut",
        "gridRowBeforeDragStart",
        "gridRowBeforeDropFinalize",
        "gridRowDrag",
        "gridRowDragAbort",
        "gridRowDragStart",
        "gridRowDrop",
        "headerClick",
        "headerMenuBeforeShow",
        "headerMenuItem",
        "headerMenuShow",
        "headerMenuToggleItem",
        "hide",
        "lockRows",
        "mouseOut",
        "mouseOver",
        "paint",
        "paste",
        "pdfExport",
        "readOnly",
        "recompose",
        "renderRow",
        "renderRows",
        "resize",
        "responsive",
        "rowCollapse",
        "rowExpand",
        "rowMouseEnter",
        "rowMouseLeave",
        "scroll",
        "selectionChange",
        "selectionModeChange",
        "show",
        "split",
        "splitterCollapseClick",
        "splitterDragEnd",
        "splitterDragStart",
        "splitterExpandClick",
        "startCellEdit",
        "startRowEdit",
        "subGridCollapse",
        "subGridExpand",
        "toggleGroup",
        "toggleNode",
        "toolClick",
        "unlockRows",
        "unsplit"
      ]
    }, t = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const o = getCurrentInstance();
      t.value = l.createWidget({
        me: o,
        widgetData: s,
        emit: f,
        element: n.value,
        processCellContent: l.processCellContent,
        processEventContent: l.processEventContent,
        processWidgetContent: l.processWidgetContent,
        hasFrameworkRenderer: l.hasFrameworkRenderer,
        toRaw
      }), l.relayStores(o.data, t.value);
      const l2 = (e, C) => watch(() => o.props[e], C);
      l.watchProps(t.value, s, l2);
    }), onBeforeUnmount(() => {
      var o, l2;
      (l2 = (o = t.value) == null ? void 0 : o.destroy) == null || l2.call(o);
    }), p({
      instance: t,
      refElement: n,
      teleports: i
    }), (o, l2) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, [
      createBaseVNode("div", H3, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(i.value.values(), (e) => (openBlock(), createBlock(Teleport, {
          key: e.key,
          to: e.to
        }, [
          (openBlock(), createBlock(resolveDynamicComponent(e.is), mergeProps({
            ref_for: true,
            ref: e.key,
            "data-key": e.key,
            "data-generation": e.generation
          }, e.bind, { "data-vue": "" }, toHandlers(e.on)), null, 16, ["data-key", "data-generation"]))
        ], 8, ["to"]))), 128))
      ], 512)
    ], 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CWlbpSod.js
var H4 = {
  ref: "teleportsHolder",
  style: { display: "none" }
};
var G2 = defineComponent({
  __name: "BryntumGridBase",
  props: {
    adopt: {},
    alignSelf: {},
    animateFilterRemovals: {},
    animateRemovingRows: {},
    animateTreeNodeToggle: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoHeight: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cellEllipsis: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnLines: {},
    columns: {},
    config: {},
    contentElementCls: {},
    contextMenuTriggerEvent: {},
    data: {},
    dataset: {},
    defaultRegion: {},
    destroyStore: {},
    disabled: {},
    disableGridColumnIdWarning: {},
    disableGridRowModelWarning: {},
    dock: {},
    drawer: {},
    elementAttributes: {},
    emptyText: {},
    enableSticky: {},
    enableTextSelection: {},
    enableUndoRedoKeys: {},
    extraData: {},
    fillLastColumn: {},
    fixedRowHeight: {},
    flex: {},
    footer: {},
    formulaProviders: {},
    fullRowRefresh: {},
    getRowHeight: { type: Function },
    header: {},
    height: {},
    hidden: {},
    hideFooters: {},
    hideHeaders: {},
    hideHorizontalScrollbar: {},
    hoverCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    listeners: {},
    loadMask: {},
    loadMaskDefaults: {},
    loadMaskError: {},
    localizable: {},
    longPressTime: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    owner: {},
    plugins: {},
    preserveFocusOnDatasetChange: {},
    preserveScroll: {},
    preserveScrollOnDatasetChange: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    resizable: {},
    resizeToFitIncludesHeader: {},
    responsiveLevels: {},
    ripple: {},
    rootElement: {},
    rowHeight: {},
    rowLines: {},
    rtl: {},
    scrollable: {},
    scrollerClass: {},
    scrollManager: {},
    selectionMode: {},
    showDirty: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    stateSettings: {},
    store: {},
    strips: {},
    subGridConfigs: {},
    syncMask: {},
    tab: {},
    tabBarItems: {},
    tbar: {},
    title: {},
    tools: {},
    transitionDuration: {},
    ui: {},
    weight: {},
    width: {},
    cellCopyPasteFeature: {},
    cellEditFeature: {},
    cellMenuFeature: {},
    cellTooltipFeature: {},
    columnAutoWidthFeature: {},
    columnDragToolbarFeature: {},
    columnPickerFeature: {},
    columnRenameFeature: {},
    columnReorderFeature: {},
    columnResizeFeature: {},
    excelExporterFeature: {},
    fileDropFeature: {},
    fillHandleFeature: {},
    filterFeature: {},
    filterBarFeature: {},
    groupFeature: {},
    groupSummaryFeature: {},
    headerMenuFeature: {},
    lockRowsFeature: {},
    mergeCellsFeature: {},
    pdfExportFeature: {},
    printFeature: {},
    quickFindFeature: {},
    regionResizeFeature: {},
    rowCopyPasteFeature: {},
    rowEditFeature: {},
    rowExpanderFeature: {},
    rowReorderFeature: {},
    rowResizeFeature: {},
    searchFeature: {},
    sortFeature: {},
    splitFeature: {},
    stickyCellsFeature: {},
    stripeFeature: {},
    summaryFeature: {},
    treeFeature: {},
    treeGroupFeature: {}
  },
  emits: ["beforeCancelCellEdit", "beforeCancelRowEdit", "beforeCellDelete", "beforeCellEditStart", "beforeColumnDragStart", "beforeColumnDropFinalize", "beforeColumnResize", "beforeCopy", "beforeCSVExport", "beforeDestroy", "beforeExcelExport", "beforeFillHandleDragStart", "beforeFinishCellEdit", "beforeFinishRowEdit", "beforeHide", "beforePaste", "beforePdfExport", "beforeRenderRow", "beforeRenderRows", "beforeRowCollapse", "beforeRowExpand", "beforeSelectionChange", "beforeSetRecord", "beforeShow", "beforeStartRowEdit", "beforeStateApply", "beforeStateSave", "beforeToggleGroup", "beforeToggleNode", "cancelCellEdit", "catchAll", "cellClick", "cellContextMenu", "cellDblClick", "cellMenuBeforeShow", "cellMenuItem", "cellMenuShow", "cellMenuToggleItem", "cellMouseEnter", "cellMouseLeave", "cellMouseOut", "cellMouseOver", "collapse", "collapseNode", "columnDrag", "columnDragStart", "columnDrop", "columnResize", "columnResizeStart", "contextMenuItem", "contextMenuToggleItem", "copy", "dataChange", "destroy", "dirtyStateChange", "dragSelecting", "expand", "expandNode", "fileDrop", "fillHandleBeforeDragFinalize", "fillHandleDrag", "fillHandleDragAbort", "fillHandleDragEnd", "fillHandleDragStart", "finishCellEdit", "finishRowEdit", "focusIn", "focusOut", "gridRowBeforeDragStart", "gridRowBeforeDropFinalize", "gridRowDrag", "gridRowDragAbort", "gridRowDragStart", "gridRowDrop", "headerClick", "headerMenuBeforeShow", "headerMenuItem", "headerMenuShow", "headerMenuToggleItem", "hide", "lockRows", "mouseOut", "mouseOver", "paint", "paste", "pdfExport", "readOnly", "recompose", "renderRow", "renderRows", "resize", "responsive", "rowCollapse", "rowExpand", "rowMouseEnter", "rowMouseLeave", "scroll", "selectionChange", "selectionModeChange", "show", "split", "splitterCollapseClick", "splitterDragEnd", "splitterDragStart", "splitterExpandClick", "startCellEdit", "startRowEdit", "subGridCollapse", "subGridExpand", "toggleGroup", "toggleNode", "toolClick", "unlockRows", "unsplit"],
  setup(T11, { expose: p, emit: g }) {
    const f = g, s = {
      instanceClass: GridBase,
      instanceName: "GridBase",
      isView: true,
      dataStores: {
        originalStore: "originals"
      },
      projectStores: false,
      featureNames: [
        "cellCopyPasteFeature",
        "cellEditFeature",
        "cellMenuFeature",
        "cellTooltipFeature",
        "columnAutoWidthFeature",
        "columnDragToolbarFeature",
        "columnPickerFeature",
        "columnRenameFeature",
        "columnReorderFeature",
        "columnResizeFeature",
        "excelExporterFeature",
        "fileDropFeature",
        "fillHandleFeature",
        "filterFeature",
        "filterBarFeature",
        "groupFeature",
        "groupSummaryFeature",
        "headerMenuFeature",
        "lockRowsFeature",
        "mergeCellsFeature",
        "pdfExportFeature",
        "printFeature",
        "quickFindFeature",
        "regionResizeFeature",
        "rowCopyPasteFeature",
        "rowEditFeature",
        "rowExpanderFeature",
        "rowReorderFeature",
        "rowResizeFeature",
        "searchFeature",
        "sortFeature",
        "splitFeature",
        "stickyCellsFeature",
        "stripeFeature",
        "summaryFeature",
        "treeFeature",
        "treeGroupFeature"
      ],
      configNames: [
        "adopt",
        "animateFilterRemovals",
        "animateRemovingRows",
        "ariaDescription",
        "ariaLabel",
        "autoHeight",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "collapsible",
        "config",
        "contentElementCls",
        "contextMenuTriggerEvent",
        "defaultRegion",
        "destroyStore",
        "disableGridColumnIdWarning",
        "disableGridRowModelWarning",
        "dock",
        "drawer",
        "elementAttributes",
        "enableSticky",
        "enableTextSelection",
        "fillLastColumn",
        "fixedRowHeight",
        "footer",
        "formulaProviders",
        "fullRowRefresh",
        "getRowHeight",
        "header",
        "hideHorizontalScrollbar",
        "hoverCls",
        "ignoreParentReadOnly",
        "listeners",
        "loadMask",
        "loadMaskDefaults",
        "loadMaskError",
        "localizable",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "plugins",
        "preserveFocusOnDatasetChange",
        "preserveScrollOnDatasetChange",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resizable",
        "resizeToFitIncludesHeader",
        "responsiveLevels",
        "ripple",
        "rootElement",
        "scrollerClass",
        "scrollManager",
        "showDirty",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "subGridConfigs",
        "syncMask",
        "tab",
        "tabBarItems",
        "tbar",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "animateTreeNodeToggle",
        "appendTo",
        "ariaLive",
        "cellEllipsis",
        "cls",
        "collapsed",
        "columnLines",
        "columns",
        "data",
        "dataset",
        "disabled",
        "emptyText",
        "enableUndoRedoKeys",
        "extraData",
        "flex",
        "height",
        "hidden",
        "hideFooters",
        "hideHeaders",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "longPressTime",
        "margin",
        "maxHeight",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeCancelCellEdit",
        "onBeforeCancelRowEdit",
        "onBeforeCellDelete",
        "onBeforeCellEditStart",
        "onBeforeColumnDragStart",
        "onBeforeColumnDropFinalize",
        "onBeforeColumnResize",
        "onBeforeCopy",
        "onBeforeCSVExport",
        "onBeforeDestroy",
        "onBeforeExcelExport",
        "onBeforeFillHandleDragStart",
        "onBeforeFinishCellEdit",
        "onBeforeFinishRowEdit",
        "onBeforeHide",
        "onBeforePaste",
        "onBeforePdfExport",
        "onBeforeRenderRow",
        "onBeforeRenderRows",
        "onBeforeRowCollapse",
        "onBeforeRowExpand",
        "onBeforeSelectionChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStartRowEdit",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onBeforeToggleGroup",
        "onBeforeToggleNode",
        "onCancelCellEdit",
        "onCatchAll",
        "onCellClick",
        "onCellContextMenu",
        "onCellDblClick",
        "onCellMenuBeforeShow",
        "onCellMenuItem",
        "onCellMenuShow",
        "onCellMenuToggleItem",
        "onCellMouseEnter",
        "onCellMouseLeave",
        "onCellMouseOut",
        "onCellMouseOver",
        "onCollapse",
        "onCollapseNode",
        "onColumnDrag",
        "onColumnDragStart",
        "onColumnDrop",
        "onColumnResize",
        "onColumnResizeStart",
        "onContextMenuItem",
        "onContextMenuToggleItem",
        "onCopy",
        "onDataChange",
        "onDestroy",
        "onDirtyStateChange",
        "onDragSelecting",
        "onExpand",
        "onExpandNode",
        "onFileDrop",
        "onFillHandleBeforeDragFinalize",
        "onFillHandleDrag",
        "onFillHandleDragAbort",
        "onFillHandleDragEnd",
        "onFillHandleDragStart",
        "onFinishCellEdit",
        "onFinishRowEdit",
        "onFocusIn",
        "onFocusOut",
        "onGridRowBeforeDragStart",
        "onGridRowBeforeDropFinalize",
        "onGridRowDrag",
        "onGridRowDragAbort",
        "onGridRowDragStart",
        "onGridRowDrop",
        "onHeaderClick",
        "onHeaderMenuBeforeShow",
        "onHeaderMenuItem",
        "onHeaderMenuShow",
        "onHeaderMenuToggleItem",
        "onHide",
        "onLockRows",
        "onMouseOut",
        "onMouseOver",
        "onPaint",
        "onPaste",
        "onPdfExport",
        "onReadOnly",
        "onRecompose",
        "onRenderRow",
        "onRenderRows",
        "onResize",
        "onResponsive",
        "onRowCollapse",
        "onRowExpand",
        "onRowMouseEnter",
        "onRowMouseLeave",
        "onScroll",
        "onSelectionChange",
        "onSelectionModeChange",
        "onShow",
        "onSplit",
        "onSplitterCollapseClick",
        "onSplitterDragEnd",
        "onSplitterDragStart",
        "onSplitterExpandClick",
        "onStartCellEdit",
        "onStartRowEdit",
        "onSubGridCollapse",
        "onSubGridExpand",
        "onToggleGroup",
        "onToggleNode",
        "onToolClick",
        "onUnlockRows",
        "onUnsplit",
        "preserveScroll",
        "readOnly",
        "rowHeight",
        "rowLines",
        "rtl",
        "scrollable",
        "selectionMode",
        "stateSettings",
        "store",
        "title",
        "tools",
        "transitionDuration",
        "width"
      ],
      propertyNames: [
        "focusVisible",
        "hasChanges",
        "originalStore",
        "parent",
        "selectedCell",
        "selectedCells",
        "selectedRecord",
        "selectedRecords",
        "selectedRows",
        "state",
        "tooltip"
      ],
      eventNames: [
        "beforeCancelCellEdit",
        "beforeCancelRowEdit",
        "beforeCellDelete",
        "beforeCellEditStart",
        "beforeColumnDragStart",
        "beforeColumnDropFinalize",
        "beforeColumnResize",
        "beforeCopy",
        "beforeCSVExport",
        "beforeDestroy",
        "beforeExcelExport",
        "beforeFillHandleDragStart",
        "beforeFinishCellEdit",
        "beforeFinishRowEdit",
        "beforeHide",
        "beforePaste",
        "beforePdfExport",
        "beforeRenderRow",
        "beforeRenderRows",
        "beforeRowCollapse",
        "beforeRowExpand",
        "beforeSelectionChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStartRowEdit",
        "beforeStateApply",
        "beforeStateSave",
        "beforeToggleGroup",
        "beforeToggleNode",
        "cancelCellEdit",
        "catchAll",
        "cellClick",
        "cellContextMenu",
        "cellDblClick",
        "cellMenuBeforeShow",
        "cellMenuItem",
        "cellMenuShow",
        "cellMenuToggleItem",
        "cellMouseEnter",
        "cellMouseLeave",
        "cellMouseOut",
        "cellMouseOver",
        "collapse",
        "collapseNode",
        "columnDrag",
        "columnDragStart",
        "columnDrop",
        "columnResize",
        "columnResizeStart",
        "contextMenuItem",
        "contextMenuToggleItem",
        "copy",
        "dataChange",
        "destroy",
        "dirtyStateChange",
        "dragSelecting",
        "expand",
        "expandNode",
        "fileDrop",
        "fillHandleBeforeDragFinalize",
        "fillHandleDrag",
        "fillHandleDragAbort",
        "fillHandleDragEnd",
        "fillHandleDragStart",
        "finishCellEdit",
        "finishRowEdit",
        "focusIn",
        "focusOut",
        "gridRowBeforeDragStart",
        "gridRowBeforeDropFinalize",
        "gridRowDrag",
        "gridRowDragAbort",
        "gridRowDragStart",
        "gridRowDrop",
        "headerClick",
        "headerMenuBeforeShow",
        "headerMenuItem",
        "headerMenuShow",
        "headerMenuToggleItem",
        "hide",
        "lockRows",
        "mouseOut",
        "mouseOver",
        "paint",
        "paste",
        "pdfExport",
        "readOnly",
        "recompose",
        "renderRow",
        "renderRows",
        "resize",
        "responsive",
        "rowCollapse",
        "rowExpand",
        "rowMouseEnter",
        "rowMouseLeave",
        "scroll",
        "selectionChange",
        "selectionModeChange",
        "show",
        "split",
        "splitterCollapseClick",
        "splitterDragEnd",
        "splitterDragStart",
        "splitterExpandClick",
        "startCellEdit",
        "startRowEdit",
        "subGridCollapse",
        "subGridExpand",
        "toggleGroup",
        "toggleNode",
        "toolClick",
        "unlockRows",
        "unsplit"
      ]
    }, t = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const o = getCurrentInstance();
      t.value = l.createWidget({
        me: o,
        widgetData: s,
        emit: f,
        element: n.value,
        processCellContent: l.processCellContent,
        processEventContent: l.processEventContent,
        processWidgetContent: l.processWidgetContent,
        hasFrameworkRenderer: l.hasFrameworkRenderer,
        toRaw
      }), l.relayStores(o.data, t.value);
      const l2 = (e, C) => watch(() => o.props[e], C);
      l.watchProps(t.value, s, l2);
    }), onBeforeUnmount(() => {
      var o, l2;
      (l2 = (o = t.value) == null ? void 0 : o.destroy) == null || l2.call(o);
    }), p({
      instance: t,
      refElement: n,
      teleports: i
    }), (o, l2) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, [
      createBaseVNode("div", H4, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(i.value.values(), (e) => (openBlock(), createBlock(Teleport, {
          key: e.key,
          to: e.to
        }, [
          (openBlock(), createBlock(resolveDynamicComponent(e.is), mergeProps({
            ref_for: true,
            ref: e.key,
            "data-key": e.key,
            "data-generation": e.generation
          }, e.bind, { "data-vue": "" }, toHandlers(e.on)), null, 16, ["data-key", "data-generation"]))
        ], 8, ["to"]))), 128))
      ], 512)
    ], 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CRo6Jtlu.js
var R4 = defineComponent({
  __name: "BryntumGridFieldFilterPicker",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    allowedFieldNames: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    dateFormat: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    fields: {},
    filter: {},
    flex: {},
    floating: {},
    getValueFieldConfig: { type: Function },
    grid: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    operatorLocked: {},
    operators: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    propertyFieldConfig: {},
    propertyLocked: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tooltip: {},
    triggerChangeOnInput: {},
    type: {},
    ui: {},
    valueFieldPlaceholders: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "catchAll", "change", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(x3, { expose: s, emit: d2 }) {
    const c = d2, n = {
      instanceClass: GridFieldFilterPicker,
      instanceName: "GridFieldFilterPicker",
      configNames: [
        "adopt",
        "align",
        "allowedFieldNames",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "dateFormat",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "fields",
        "filter",
        "floating",
        "getValueFieldConfig",
        "grid",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "operatorLocked",
        "operators",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "propertyFieldConfig",
        "propertyLocked",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "triggerChangeOnInput",
        "type",
        "ui",
        "valueFieldPlaceholders",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "change",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, i = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: i.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: i,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/D6oxvt-D.js
var v3 = defineComponent({
  __name: "BryntumGridFieldFilterPickerGroup",
  props: {
    addFilterButtonText: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allowedFieldNames: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    callOnFunctions: {},
    canDeleteFilter: { type: Function },
    canManageFilter: { type: Function },
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    dateFormat: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    filters: {},
    flex: {},
    floating: {},
    getFieldFilterPickerConfig: { type: Function },
    grid: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    limitToProperty: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    operators: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAddFilterButton: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tooltip: {},
    triggerChangeOnInput: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeAddFilter", "beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "catchAll", "change", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(S9, { expose: s, emit: d2 }) {
    const c = d2, n = {
      instanceClass: GridFieldFilterPickerGroup,
      instanceName: "GridFieldFilterPickerGroup",
      configNames: [
        "addFilterButtonText",
        "adopt",
        "align",
        "allowedFieldNames",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "callOnFunctions",
        "canDeleteFilter",
        "canManageFilter",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "dateFormat",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "filters",
        "floating",
        "getFieldFilterPickerConfig",
        "grid",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "limitToProperty",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "operators",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAddFilterButton",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "triggerChangeOnInput",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeAddFilter",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "value",
        "values"
      ],
      eventNames: [
        "beforeAddFilter",
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "change",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, i = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: i.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: i,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DSvBHgDg.js
var F3 = defineComponent({
  __name: "BryntumGroupBar",
  props: {
    activateOnMouseover: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allowGroupSelect: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearSelectionOnEmptySpaceClick: {},
    closable: {},
    closeHandler: { type: [String, Function] },
    cls: {},
    collapsibleGroups: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    displayField: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    getItemCls: { type: [Function, String] },
    getItemStyle: { type: [Function, String] },
    groupHeaderTpl: { type: Function },
    height: {},
    hidden: {},
    hideAnimation: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    iconTpl: { type: Function },
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    isSelectable: { type: [Function, String] },
    items: {},
    itemTpl: { type: [Function, String] },
    keyMap: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    multiSelect: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectAllItem: {},
    selected: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    store: {},
    tab: {},
    tag: {},
    textAlign: {},
    title: {},
    toggleAllIfCtrlPressed: {},
    tooltip: {},
    tooltipTemplate: { type: Function },
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeItem", "beforeShow", "catchAll", "destroy", "focusIn", "focusOut", "hide", "item", "paint", "readOnly", "recompose", "resize", "selectionChange", "show", "toggleGroup", "toggleNode"],
  setup(T11, { expose: s, emit: c }) {
    const p = c, l2 = {
      instanceClass: GroupBar,
      instanceName: "GroupBar",
      configNames: [
        "activateOnMouseover",
        "adopt",
        "align",
        "allowGroupSelect",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearSelectionOnEmptySpaceClick",
        "closable",
        "closeHandler",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "displayField",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "getItemCls",
        "getItemStyle",
        "groupHeaderTpl",
        "hideAnimation",
        "htmlCls",
        "iconTpl",
        "ignoreParentReadOnly",
        "isSelectable",
        "itemTpl",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectAllItem",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tag",
        "textAlign",
        "tooltipTemplate",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsibleGroups",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "multiSelect",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeItem",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onItem",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelectionChange",
        "onShow",
        "onToggleGroup",
        "onToggleNode",
        "readOnly",
        "rtl",
        "scrollable",
        "selected",
        "store",
        "title",
        "toggleAllIfCtrlPressed",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "parent"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeItem",
        "beforeShow",
        "catchAll",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "item",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "selectionChange",
        "show",
        "toggleGroup",
        "toggleNode"
      ]
    }, o = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: l2,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (m, d2) => watch(() => e.props[m], d2);
      l.watchProps(o.value, l2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/D6iKZx4f.js
var E2 = defineComponent({
  __name: "BryntumHint",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoNext: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    buttons: {},
    callOnFunctions: {},
    closeOnEscape: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    focusOnToFront: {},
    footer: {},
    forElement: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    highlightTarget: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizable: {},
    maximized: {},
    maximizeOnMobile: {},
    maxWait: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    modal: {},
    monitorResize: {},
    namedItems: {},
    nextAction: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    previousAction: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    resizable: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showOnClick: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    target: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeClose", "beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "toolClick"],
  setup(v4, { expose: s, emit: c }) {
    const d2 = c, n = {
      instanceClass: Hint,
      instanceName: "Hint",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoNext",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "buttons",
        "callOnFunctions",
        "closeOnEscape",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "floating",
        "focusOnToFront",
        "footer",
        "forElement",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "highlightTarget",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maximizable",
        "maxWait",
        "modal",
        "monitorResize",
        "namedItems",
        "nextAction",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "previousAction",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showOnClick",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "target",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximized",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeClose",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "resizable",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeClose",
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: d2,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DjXbhAwh.js
var B3 = defineComponent({
  __name: "BryntumLabel",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    tab: {},
    tag: {},
    text: {},
    textAlign: {},
    title: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeShow", "catchAll", "destroy", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(A6, { expose: s, emit: c }) {
    const p = c, i = {
      instanceClass: Label,
      instanceName: "Label",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "htmlCls",
        "ignoreParentReadOnly",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tag",
        "textAlign",
        "title",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "rtl",
        "scrollable",
        "text",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "parent"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: i,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (d2, m) => watch(() => e.props[d2], m);
      l.watchProps(o.value, i, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/uOAdP59J.js
var I = defineComponent({
  __name: "BryntumList",
  props: {
    activateOnMouseover: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allowGroupSelect: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearSelectionOnEmptySpaceClick: {},
    cls: {},
    collapsibleGroups: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    displayField: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    getItemCls: { type: [Function, String] },
    getItemStyle: { type: [Function, String] },
    groupHeaderTpl: { type: Function },
    height: {},
    hidden: {},
    hideAnimation: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    isSelectable: { type: [Function, String] },
    items: {},
    itemTpl: { type: [Function, String] },
    keyMap: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    multiSelect: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectAllItem: {},
    selected: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    store: {},
    tab: {},
    tag: {},
    textAlign: {},
    title: {},
    toggleAllIfCtrlPressed: {},
    tooltip: {},
    tooltipTemplate: { type: Function },
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeItem", "beforeShow", "catchAll", "destroy", "focusIn", "focusOut", "hide", "item", "paint", "readOnly", "recompose", "resize", "selectionChange", "show", "toggleGroup", "toggleNode"],
  setup(v4, { expose: s, emit: c }) {
    const p = c, l2 = {
      instanceClass: List,
      instanceName: "List",
      configNames: [
        "activateOnMouseover",
        "adopt",
        "align",
        "allowGroupSelect",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearSelectionOnEmptySpaceClick",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "displayField",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "getItemCls",
        "getItemStyle",
        "groupHeaderTpl",
        "hideAnimation",
        "htmlCls",
        "ignoreParentReadOnly",
        "isSelectable",
        "itemTpl",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectAllItem",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tag",
        "textAlign",
        "tooltipTemplate",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsibleGroups",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "multiSelect",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeItem",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onItem",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelectionChange",
        "onShow",
        "onToggleGroup",
        "onToggleNode",
        "readOnly",
        "rtl",
        "scrollable",
        "selected",
        "store",
        "title",
        "toggleAllIfCtrlPressed",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "parent"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeItem",
        "beforeShow",
        "catchAll",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "item",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "selectionChange",
        "show",
        "toggleGroup",
        "toggleNode"
      ]
    }, o = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: l2,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (m, d2) => watch(() => e.props[m], d2);
      l.watchProps(o.value, l2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/ZoauudLx.js
var A3 = defineComponent({
  __name: "BryntumMenu",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoClose: {},
    autoShow: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    closable: {},
    closeAction: {},
    closeOnEscape: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    focusOnHover: {},
    focusOnToFront: {},
    footer: {},
    forElement: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizable: {},
    maximized: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    modal: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    resizable: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showOnClick: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeClose", "beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "item", "paint", "readOnly", "recompose", "resize", "show", "toggle", "toolClick"],
  setup(v4, { expose: s, emit: c }) {
    const d2 = c, n = {
      instanceClass: Menu,
      instanceName: "Menu",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoClose",
        "autoShow",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "closable",
        "closeAction",
        "closeOnEscape",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "floating",
        "focusOnHover",
        "focusOnToFront",
        "footer",
        "forElement",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maximizable",
        "modal",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showOnClick",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximized",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeClose",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onItem",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToggle",
        "onToolClick",
        "readOnly",
        "record",
        "resizable",
        "rtl",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "parentMenu",
        "selectedElement",
        "state",
        "values"
      ],
      eventNames: [
        "beforeClose",
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "item",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toggle",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: d2,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: l2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CP_h2EIG.js
var z2 = defineComponent({
  __name: "BryntumModeSelector",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    button: {},
    buttonBar: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minifiable: {},
    minified: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    titleProperty: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "catchAll", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(v4, { expose: s, emit: c }) {
    const d2 = c, i = {
      instanceClass: ModeSelector,
      instanceName: "ModeSelector",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "button",
        "buttonBar",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "minifiable",
        "minified",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "titleProperty",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: i,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (m, p) => watch(() => e.props[m], p);
      l.watchProps(o.value, i, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/D0lMC7WA.js
var A4 = defineComponent({
  __name: "BryntumMonthAgendaView",
  props: {
    activationKey: {},
    activeDate: {},
    adopt: {},
    agenda: {},
    agendaDateFormat: {},
    agendHeaderRenderer: { type: [Function, String] },
    align: {},
    alignSelf: {},
    allowDragCreate: {},
    allowDragMove: {},
    allowDragResize: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCreate: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cellRenderer: { type: [Function, String] },
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    contentElementCls: {},
    dataset: {},
    date: {},
    dateFormat: {},
    dateSeparator: {},
    dayNameFormat: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    defaultScrollOptions: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    disabled: {},
    disabledCls: {},
    disabledDates: { type: [Function, String, Array] },
    disableNonWorkingDays: {},
    disableOtherMonthCells: {},
    disableWeekends: {},
    dock: {},
    draggable: {},
    dragUnit: {},
    drawer: {},
    editMonth: {},
    elementAttributes: {},
    eventCountTip: {},
    eventDots: {},
    eventFilter: { type: [Function, String] },
    eventHeaderRenderer: { type: [Function, String] },
    eventRenderer: { type: [Function, String] },
    eventSorter: { type: Function },
    eventStore: {},
    extendAllDayEndDay: {},
    extraData: {},
    filterEventResources: {},
    flex: {},
    floating: {},
    focusDisabledDates: {},
    footer: {},
    getPrimaryResource: { type: [Function, String] },
    header: {},
    headerRenderer: { type: [Function, String] },
    height: {},
    hidden: {},
    hideAnimation: {},
    hideNonWorkingDays: {},
    hideOtherMonthCells: {},
    hideWhenEmpty: {},
    highlightSelectedWeek: {},
    id: {},
    ignoreParentReadOnly: {},
    includeYear: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxDots: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minColumnWidth: {},
    minDate: {},
    minHeight: {},
    minRowHeight: {},
    minWidth: {},
    monitorResize: {},
    month: {},
    multiSelect: {},
    namedItems: {},
    nonWorkingDayCls: {},
    nonWorkingDays: {},
    otherMonthCls: {},
    owner: {},
    pastEventCls: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    resourceImagePath: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selection: {},
    selectorButton: {},
    selectorMenuItem: {},
    shiftIncrement: {},
    shortDateFormat: {},
    shortDateTimeFormat: {},
    shortEventCls: {},
    showAnimation: {},
    showBullet: {},
    showEvents: {},
    showResourceAvatars: {},
    showTooltipWhenDisabled: {},
    showWeekColumn: {},
    sixWeeks: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    syncCalendarDate: {},
    syncViewDate: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    timeFormat: {},
    tip: {},
    title: {},
    todayCls: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weekendCls: {},
    weekRenderer: { type: [Function, String] },
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeAutoCreate", "beforeChangeDate", "beforeDestroy", "beforeHide", "beforeRefresh", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "dateChange", "destroy", "dirtyStateChange", "eventAutoCreated", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "refresh", "resize", "selectionChange", "show", "toolClick"],
  setup(w3, { expose: l2, emit: d2 }) {
    const c = d2, n = {
      instanceClass: MonthAgendaView,
      instanceName: "MonthAgendaView",
      configNames: [
        "activationKey",
        "activeDate",
        "adopt",
        "agendaDateFormat",
        "agendHeaderRenderer",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "cellRenderer",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "dayNameFormat",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "descriptionRenderer",
        "disabledCls",
        "disabledDates",
        "disableNonWorkingDays",
        "disableOtherMonthCells",
        "disableWeekends",
        "dock",
        "draggable",
        "drawer",
        "editMonth",
        "elementAttributes",
        "eventFilter",
        "eventHeaderRenderer",
        "eventRenderer",
        "eventSorter",
        "eventStore",
        "floating",
        "focusDisabledDates",
        "footer",
        "getPrimaryResource",
        "header",
        "headerRenderer",
        "hideAnimation",
        "hideOtherMonthCells",
        "hideWhenEmpty",
        "ignoreParentReadOnly",
        "includeYear",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "minColumnWidth",
        "minRowHeight",
        "monitorResize",
        "month",
        "multiSelect",
        "namedItems",
        "nonWorkingDayCls",
        "nonWorkingDays",
        "otherMonthCls",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resourceImagePath",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectorButton",
        "selectorMenuItem",
        "shortEventCls",
        "showAnimation",
        "showBullet",
        "showResourceAvatars",
        "showTooltipWhenDisabled",
        "showWeekColumn",
        "sixWeeks",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "timeFormat",
        "tip",
        "todayCls",
        "trapFocus",
        "type",
        "ui",
        "weekendCls",
        "weekRenderer",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "agenda",
        "alignSelf",
        "allowDragCreate",
        "allowDragMove",
        "allowDragResize",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "autoCreate",
        "cls",
        "collapsed",
        "dataset",
        "date",
        "dateFormat",
        "dateSeparator",
        "defaultScrollOptions",
        "descriptionFormat",
        "disabled",
        "dragUnit",
        "eventCountTip",
        "eventDots",
        "extendAllDayEndDay",
        "extraData",
        "filterEventResources",
        "flex",
        "height",
        "hidden",
        "hideNonWorkingDays",
        "highlightSelectedWeek",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDate",
        "maxDots",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minDate",
        "minHeight",
        "minWidth",
        "onBeforeAutoCreate",
        "onBeforeChangeDate",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeRefresh",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDateChange",
        "onDestroy",
        "onDirtyStateChange",
        "onEventAutoCreated",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onSelectionChange",
        "onShow",
        "onToolClick",
        "pastEventCls",
        "readOnly",
        "rtl",
        "scrollable",
        "selection",
        "shiftIncrement",
        "shortDateFormat",
        "shortDateTimeFormat",
        "showEvents",
        "strictRecordMapping",
        "syncCalendarDate",
        "syncViewDate",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "dayCellCls",
        "firstVisibleCell",
        "firstVisibleDate",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "lastVisibleCell",
        "lastVisibleDate",
        "parent",
        "record",
        "state",
        "values"
      ],
      eventNames: [
        "beforeAutoCreate",
        "beforeChangeDate",
        "beforeDestroy",
        "beforeHide",
        "beforeRefresh",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "dateChange",
        "destroy",
        "dirtyStateChange",
        "eventAutoCreated",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "selectionChange",
        "show",
        "toolClick"
      ]
    }, a2 = {}, o = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      a2.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: o.value,
        toRaw
      });
      const t = (h, m) => watch(() => e.props[h], m);
      l.watchProps(a2.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = a2.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), l2({
      instance: a2,
      refElement: o,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: o
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DXKZEl7l.js
var E3 = defineComponent({
  __name: "BryntumMonthPicker",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    footer: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    month: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "select", "show", "titleClick", "toolClick"],
  setup(x3, { expose: s, emit: c }) {
    const d2 = c, n = {
      instanceClass: MonthPicker,
      instanceName: "MonthPicker",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "floating",
        "footer",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "month",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelect",
        "onShow",
        "onTitleClick",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "select",
        "show",
        "titleClick",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: d2,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/C4nZmdju.js
var P2 = defineComponent({
  __name: "BryntumMonthView",
  props: {
    activationKey: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allowDragCreate: {},
    allowDragMove: {},
    allowDragResize: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCreate: {},
    autoRowHeight: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cellRenderer: { type: [Function, String] },
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    contentElementCls: {},
    dataset: {},
    date: {},
    dateFormat: {},
    dateSeparator: {},
    dayCellNameFormat: {},
    dayCellRenderer: { type: Function },
    dayNameFormat: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    defaultScrollOptions: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    disabled: {},
    disabledCls: {},
    disabledDates: { type: [Function, String, Array] },
    disableNonWorkingDays: {},
    disableOtherMonthCells: {},
    disableWeekends: {},
    dock: {},
    draggable: {},
    dragUnit: {},
    drawer: {},
    elementAttributes: {},
    emptyCellRenderer: { type: [Function, Object, String] },
    eventFilter: { type: [Function, String] },
    eventHeaderRenderer: { type: [Function, String] },
    eventHeight: {},
    eventRenderer: { type: [Function, String] },
    eventSorter: { type: Function },
    eventSpacing: {},
    extendAllDayEndDay: {},
    extraData: {},
    filterEventResources: {},
    flex: {},
    floating: {},
    footer: {},
    getPrimaryResource: { type: [Function, String] },
    header: {},
    headerRenderer: { type: [Function, String] },
    height: {},
    hidden: {},
    hideAnimation: {},
    hideNonWorkingDays: {},
    hideOtherMonthCells: {},
    hideWhenEmpty: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxEventsPerCell: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minColumnWidth: {},
    minDate: {},
    minHeight: {},
    minRowHeight: {},
    minWidth: {},
    monitorResize: {},
    month: {},
    namedItems: {},
    nonWorkingDayCls: {},
    nonWorkingDays: {},
    otherMonthCls: {},
    overflowButtonRenderer: { type: Function },
    overflowClickAction: {},
    overflowPopup: {},
    overflowPopupTrigger: {},
    owner: {},
    pastEventCls: {},
    persistShrinkWrappedRows: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    resourceImagePath: {},
    responsive: {},
    responsiveRoot: {},
    responsiveState: {},
    responsiveTarget: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectorButton: {},
    selectorMenuItem: {},
    shortDateFormat: {},
    shortDateTimeFormat: {},
    shortEventCls: {},
    shortEventDuration: {},
    showAnimation: {},
    showBullet: {},
    showResourceAvatars: {},
    showTooltipWhenDisabled: {},
    showWeekColumn: {},
    showWeekNumber: {},
    sixWeeks: {},
    stackMultiDayEvents: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    syncCalendarDate: {},
    syncViewDate: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    timeFormat: {},
    tip: {},
    title: {},
    todayCls: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weekendCls: {},
    weekRenderer: { type: [Function, String] },
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeAutoCreate", "beforeChangeDate", "beforeDestroy", "beforeHide", "beforeRefresh", "beforeResponsiveStateChange", "beforeSetRecord", "beforeShow", "beforeShowOverflowPopup", "beforeStateApply", "beforeStateSave", "catchAll", "cellMapPopulated", "collapse", "dateChange", "dayCellPopulated", "destroy", "dirtyStateChange", "emptyCellClick", "eventAutoCreated", "eventPropagate", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "refresh", "resize", "responsiveStateChange", "show", "showOverflowPopup", "toolClick", "weekFlex", "weekShrinkwrap"],
  setup(D6, { expose: s, emit: d2 }) {
    const p = d2, r = {
      instanceClass: MonthView,
      instanceName: "MonthView",
      configNames: [
        "activationKey",
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "cellRenderer",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "dayCellNameFormat",
        "dayCellRenderer",
        "dayNameFormat",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "descriptionRenderer",
        "disabledCls",
        "disabledDates",
        "disableNonWorkingDays",
        "disableOtherMonthCells",
        "disableWeekends",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "emptyCellRenderer",
        "eventFilter",
        "eventHeaderRenderer",
        "eventRenderer",
        "eventSorter",
        "floating",
        "footer",
        "getPrimaryResource",
        "header",
        "headerRenderer",
        "hideAnimation",
        "hideOtherMonthCells",
        "hideWhenEmpty",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxEventsPerCell",
        "minColumnWidth",
        "minRowHeight",
        "monitorResize",
        "month",
        "namedItems",
        "nonWorkingDayCls",
        "nonWorkingDays",
        "otherMonthCls",
        "overflowButtonRenderer",
        "overflowClickAction",
        "overflowPopup",
        "overflowPopupTrigger",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resourceImagePath",
        "responsive",
        "responsiveRoot",
        "responsiveState",
        "responsiveTarget",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectorButton",
        "selectorMenuItem",
        "shortEventCls",
        "shortEventDuration",
        "showAnimation",
        "showBullet",
        "showResourceAvatars",
        "showTooltipWhenDisabled",
        "showWeekColumn",
        "sixWeeks",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "timeFormat",
        "tip",
        "todayCls",
        "trapFocus",
        "type",
        "ui",
        "weekendCls",
        "weekRenderer",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDragCreate",
        "allowDragMove",
        "allowDragResize",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "autoCreate",
        "autoRowHeight",
        "cls",
        "collapsed",
        "dataset",
        "date",
        "dateFormat",
        "dateSeparator",
        "defaultScrollOptions",
        "descriptionFormat",
        "disabled",
        "dragUnit",
        "eventHeight",
        "eventSpacing",
        "extendAllDayEndDay",
        "extraData",
        "filterEventResources",
        "flex",
        "height",
        "hidden",
        "hideNonWorkingDays",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDate",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minDate",
        "minHeight",
        "minWidth",
        "onBeforeAutoCreate",
        "onBeforeChangeDate",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeRefresh",
        "onBeforeResponsiveStateChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeShowOverflowPopup",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCellMapPopulated",
        "onCollapse",
        "onDateChange",
        "onDayCellPopulated",
        "onDestroy",
        "onDirtyStateChange",
        "onEmptyCellClick",
        "onEventAutoCreated",
        "onEventPropagate",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onResponsiveStateChange",
        "onShow",
        "onShowOverflowPopup",
        "onToolClick",
        "onWeekFlex",
        "onWeekShrinkwrap",
        "pastEventCls",
        "persistShrinkWrappedRows",
        "readOnly",
        "rtl",
        "scrollable",
        "shortDateFormat",
        "shortDateTimeFormat",
        "showWeekNumber",
        "stackMultiDayEvents",
        "strictRecordMapping",
        "syncCalendarDate",
        "syncViewDate",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "dayCellCls",
        "firstVisibleCell",
        "firstVisibleDate",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "lastVisibleCell",
        "lastVisibleDate",
        "parent",
        "record",
        "state",
        "values"
      ],
      eventNames: [
        "beforeAutoCreate",
        "beforeChangeDate",
        "beforeDestroy",
        "beforeHide",
        "beforeRefresh",
        "beforeResponsiveStateChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeShowOverflowPopup",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "cellMapPopulated",
        "collapse",
        "dateChange",
        "dayCellPopulated",
        "destroy",
        "dirtyStateChange",
        "emptyCellClick",
        "eventAutoCreated",
        "eventPropagate",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "responsiveStateChange",
        "show",
        "showOverflowPopup",
        "toolClick",
        "weekFlex",
        "weekShrinkwrap"
      ]
    }, o = {}, a2 = ref(), n = ref(/* @__PURE__ */ new Map());
    return provide("teleports", n), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: r,
        emit: p,
        element: a2.value,
        toRaw
      });
      const t = (c, h) => watch(() => e.props[c], h);
      l.watchProps(o.value, r, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: n
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/BiwsILd5.js
var D3 = defineComponent({
  __name: "BryntumNumberField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    changeOnSpin: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    format: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    largeStep: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    max: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    min: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    step: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    wrapAround: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(C, { expose: s, emit: c }) {
    const p = c, a2 = {
      instanceClass: NumberField,
      instanceName: "NumberField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "changeOnSpin",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "format",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "largeStep",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "max",
        "min",
        "monitorResize",
        "name",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight",
        "wrapAround"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "step",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), o = ref(/* @__PURE__ */ new Map());
    return provide("teleports", o), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: o
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/BbpMRO3C.js
var B4 = defineComponent({
  __name: "BryntumPagingToolbar",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    enableReordering: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    overflow: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    store: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    widgetCls: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeItemDragStart", "beforeSetRecord", "beforeShow", "catchAll", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "itemDragStart", "itemDrop", "paint", "readOnly", "recompose", "resize", "show"],
  setup(x3, { expose: s, emit: c }) {
    const d2 = c, a2 = {
      instanceClass: PagingToolbar,
      instanceName: "PagingToolbar",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "overflow",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "store",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "type",
        "ui",
        "weight",
        "widgetCls"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "enableReordering",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeItemDragStart",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onItemDragStart",
        "onItemDrop",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeItemDragStart",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "itemDragStart",
        "itemDrop",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (m, p) => watch(() => e.props[m], p);
      l.watchProps(o.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CkJMoDI-.js
var O4 = defineComponent({
  __name: "BryntumPanel",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    footer: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "toolClick"],
  setup(x3, { expose: s, emit: c }) {
    const d2 = c, n = {
      instanceClass: Panel,
      instanceName: "Panel",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "floating",
        "footer",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: d2,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/B3hEjIPU.js
var D4 = defineComponent({
  __name: "BryntumPasswordField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(O6, { expose: s, emit: c }) {
    const p = c, o = {
      instanceClass: PasswordField,
      instanceName: "PasswordField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "name",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: o,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, o, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/BrbYXBuI.js
var T6 = defineComponent({
  __name: "BryntumProjectCombo",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    caseSensitive: {},
    centered: {},
    chipView: {},
    clearable: {},
    clearTextOnPickerHide: {},
    clearTextOnSelection: {},
    clearWhenInputEmpty: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    createOnUnmatched: { type: [Function, String] },
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    displayField: {},
    displayValueRenderer: { type: Function },
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    emptyText: {},
    encodeFilterParams: { type: Function },
    extraData: {},
    filterOnEnter: {},
    filterOperator: {},
    filterParamName: {},
    filterSelected: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hidePickerOnSelect: {},
    hideTrigger: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inlinePicker: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    items: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    keyStrokeFilterDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listCls: {},
    listeners: {},
    listItemTpl: { type: Function },
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minChars: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    multiSelect: {},
    multiValueSeparator: {},
    name: {},
    overlayAnchor: {},
    owner: {},
    picker: {},
    pickerAlignElement: {},
    pickerWidth: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    primaryFilter: {},
    project: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    store: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggerAction: {},
    triggers: {},
    type: {},
    ui: {},
    validateFilter: {},
    validateOnInput: {},
    value: {},
    valueField: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "select", "show", "trigger"],
  setup(v4, { expose: c, emit: s }) {
    const p = s, a2 = {
      instanceClass: ProjectCombo,
      instanceName: "ProjectCombo",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "caseSensitive",
        "centered",
        "chipView",
        "clearable",
        "clearTextOnPickerHide",
        "clearTextOnSelection",
        "clearWhenInputEmpty",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "createOnUnmatched",
        "dataField",
        "defaultBindProperty",
        "displayField",
        "displayValueRenderer",
        "dock",
        "draggable",
        "elementAttributes",
        "emptyText",
        "encodeFilterParams",
        "filterOnEnter",
        "filterParamName",
        "filterSelected",
        "floating",
        "hideAnimation",
        "hidePickerOnSelect",
        "hideTrigger",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inlinePicker",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "items",
        "keyStrokeChangeDelay",
        "keyStrokeFilterDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listCls",
        "listeners",
        "listItemTpl",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minChars",
        "minLength",
        "monitorResize",
        "multiValueSeparator",
        "name",
        "overlayAnchor",
        "owner",
        "pickerAlignElement",
        "pickerWidth",
        "positioned",
        "preventTooltipOnTouch",
        "primaryFilter",
        "project",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "triggerAction",
        "type",
        "ui",
        "validateFilter",
        "validateOnInput",
        "valueField",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "filterOperator",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "multiSelect",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelect",
        "onShow",
        "onTrigger",
        "picker",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "store",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "select",
        "show",
        "trigger"
      ]
    }, i = {}, n = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const e = getCurrentInstance();
      i.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (d2, m) => watch(() => e.props[d2], m);
      l.watchProps(i.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = i.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), c({
      instance: i,
      refElement: n,
      teleports: l2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/5nlcMhGz.js
var x = defineComponent({
  __name: "BryntumCalendarProjectModel",
  props: {
    adjustDurationToDST: {},
    assignmentModelClass: {},
    assignments: {},
    assignmentsData: {},
    assignmentStore: {},
    assignmentStoreClass: {},
    children: {},
    dependencies: {},
    dependenciesData: {},
    dependencyModelClass: {},
    dependencyStore: {},
    dependencyStoreClass: {},
    eventModelClass: {},
    events: {},
    eventsData: {},
    eventStore: {},
    eventStoreClass: {},
    expanded: {},
    id: {},
    json: {},
    orderedParentIndex: {},
    parentId: {},
    parentIndex: {},
    readOnly: {},
    remoteChildCount: {},
    resourceModelClass: {},
    resources: {},
    resourcesData: {},
    resourceStore: {},
    resourceStoreClass: {},
    resourceTimeRanges: {},
    resourceTimeRangesData: {},
    resourceTimeRangeStore: {},
    resourceTimeRangeStoreClass: {},
    shouldSyncDataOnLoad: { type: Function },
    silenceInitialCommit: {},
    stm: {},
    timeRangeModelClass: {},
    timeRanges: {},
    timeRangesData: {},
    timeRangeStore: {},
    timeRangeStoreClass: {},
    timeZone: {},
    toJSONResultFormat: {},
    useRawData: {}
  },
  emits: ["change", "dataReady"],
  setup(f, { expose: d2, emit: l2 }) {
    const c = l2, a2 = {
      instanceClass: ProjectModel2,
      instanceName: "ProjectModel",
      configNames: [
        "adjustDurationToDST",
        "assignmentModelClass",
        "assignmentsData",
        "assignmentStoreClass",
        "children",
        "dependenciesData",
        "dependencyModelClass",
        "dependencyStoreClass",
        "eventModelClass",
        "eventsData",
        "eventStoreClass",
        "expanded",
        "orderedParentIndex",
        "parentId",
        "parentIndex",
        "resourceModelClass",
        "resourcesData",
        "resourceStoreClass",
        "resourceTimeRangesData",
        "resourceTimeRangeStoreClass",
        "silenceInitialCommit",
        "timeRangeModelClass",
        "timeRangesData",
        "timeRangeStoreClass",
        "toJSONResultFormat",
        "useRawData"
      ],
      propertyConfigNames: [
        "assignments",
        "assignmentStore",
        "dependencies",
        "dependencyStore",
        "events",
        "eventStore",
        "id",
        "json",
        "onChange",
        "onDataReady",
        "readOnly",
        "remoteChildCount",
        "resources",
        "resourceStore",
        "resourceTimeRanges",
        "resourceTimeRangeStore",
        "shouldSyncDataOnLoad",
        "stm",
        "timeRanges",
        "timeRangeStore",
        "timeZone"
      ],
      propertyNames: [
        "allChildren",
        "allUnfilteredChildren",
        "descendantCount",
        "hasGeneratedId",
        "inlineData",
        "internalId",
        "isCommitting",
        "isCreating",
        "isValid",
        "previousSiblingsTotalCount",
        "visibleDescendantCount"
      ],
      eventNames: [
        "change",
        "dataReady"
      ]
    }, n = {}, s = ref(), o = ref(/* @__PURE__ */ new Map());
    return provide("teleports", o), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: c,
        element: s.value,
        toRaw
      });
      const t = (m, u) => watch(() => e.props[m], u);
      l.watchProps(n.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), d2({
      instance: n,
      refElement: s,
      teleports: o
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: s
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DKW6uWZQ.js
var D5 = defineComponent({
  __name: "BryntumRadio",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCollapse: { type: Function },
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    checked: {},
    checkedValue: {},
    cls: {},
    color: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    text: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    uncheckedValue: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeChange", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "click", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(v4, { expose: s, emit: c }) {
    const p = c, o = {
      instanceClass: Radio,
      instanceName: "Radio",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoCollapse",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "checkedValue",
        "color",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "text",
        "textAlign",
        "title",
        "type",
        "ui",
        "uncheckedValue",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "checked",
        "cls",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "name",
        "onAction",
        "onBeforeChange",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onClick",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "editable",
        "focusVisible",
        "html",
        "input",
        "parent",
        "placeholder",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeChange",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "click",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: o,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, o, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/D5q0-riV.js
var E4 = defineComponent({
  __name: "BryntumRadioGroup",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    footer: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labelWidth: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    namedItems: {},
    options: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "toolClick"],
  setup(x3, { expose: s, emit: c }) {
    const d2 = c, n = {
      instanceClass: RadioGroup,
      instanceName: "RadioGroup",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "floating",
        "footer",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "labelCls",
        "labelPosition",
        "labelWidth",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "name",
        "namedItems",
        "options",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "inline",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "label",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: d2,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: l2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/C95k-hsn.js
var A5 = defineComponent({
  __name: "BryntumRangeMenu",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoClose: {},
    autoShow: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    closable: {},
    closeAction: {},
    closeOnEscape: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    focusOnHover: {},
    focusOnToFront: {},
    footer: {},
    forElement: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizable: {},
    maximized: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    modal: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    resizable: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showOnClick: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeClose", "beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "item", "paint", "readOnly", "recompose", "resize", "show", "toggle", "toolClick"],
  setup(v4, { expose: s, emit: c }) {
    const d2 = c, n = {
      instanceClass: RangeMenu,
      instanceName: "RangeMenu",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoClose",
        "autoShow",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "closable",
        "closeAction",
        "closeOnEscape",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "floating",
        "focusOnHover",
        "focusOnToFront",
        "footer",
        "forElement",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maximizable",
        "modal",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showOnClick",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximized",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeClose",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onItem",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onToggle",
        "onToolClick",
        "readOnly",
        "record",
        "resizable",
        "rtl",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "parentMenu",
        "selectedElement",
        "state",
        "values"
      ],
      eventNames: [
        "beforeClose",
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "item",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "toggle",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: d2,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: l2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/cHEfWw-e.js
var E5 = defineComponent({
  __name: "BryntumResourceCombo",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    caseSensitive: {},
    centered: {},
    chipView: {},
    clearable: {},
    clearTextOnPickerHide: {},
    clearTextOnSelection: {},
    clearWhenInputEmpty: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    createOnUnmatched: { type: [Function, String] },
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    displayField: {},
    displayValueRenderer: { type: Function },
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    emptyText: {},
    encodeFilterParams: { type: Function },
    extraData: {},
    filterOnEnter: {},
    filterOperator: {},
    filterParamName: {},
    filterSelected: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hidePickerOnSelect: {},
    hideTrigger: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inlinePicker: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    items: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    keyStrokeFilterDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listCls: {},
    listeners: {},
    listItemTpl: { type: Function },
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minChars: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    multiSelect: {},
    multiValueSeparator: {},
    name: {},
    overlayAnchor: {},
    owner: {},
    picker: {},
    pickerAlignElement: {},
    pickerWidth: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    primaryFilter: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showEventColor: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    store: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggerAction: {},
    triggers: {},
    type: {},
    ui: {},
    validateFilter: {},
    validateOnInput: {},
    value: {},
    valueField: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "select", "show", "trigger"],
  setup(x3, { expose: s, emit: c }) {
    const p = c, a2 = {
      instanceClass: ResourceCombo,
      instanceName: "ResourceCombo",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "caseSensitive",
        "centered",
        "chipView",
        "clearable",
        "clearTextOnPickerHide",
        "clearTextOnSelection",
        "clearWhenInputEmpty",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "createOnUnmatched",
        "dataField",
        "defaultBindProperty",
        "displayField",
        "displayValueRenderer",
        "dock",
        "draggable",
        "elementAttributes",
        "emptyText",
        "encodeFilterParams",
        "filterOnEnter",
        "filterParamName",
        "filterSelected",
        "floating",
        "hideAnimation",
        "hidePickerOnSelect",
        "hideTrigger",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inlinePicker",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "items",
        "keyStrokeChangeDelay",
        "keyStrokeFilterDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listCls",
        "listeners",
        "listItemTpl",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minChars",
        "minLength",
        "monitorResize",
        "multiValueSeparator",
        "name",
        "overlayAnchor",
        "owner",
        "pickerAlignElement",
        "pickerWidth",
        "positioned",
        "preventTooltipOnTouch",
        "primaryFilter",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showEventColor",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "triggerAction",
        "type",
        "ui",
        "validateFilter",
        "validateOnInput",
        "valueField",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "filterOperator",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "multiSelect",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelect",
        "onShow",
        "onTrigger",
        "picker",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "store",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "select",
        "show",
        "trigger"
      ]
    }, i = {}, n = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const e = getCurrentInstance();
      i.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (d2, m) => watch(() => e.props[d2], m);
      l.watchProps(i.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = i.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: i,
      refElement: n,
      teleports: l2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/BmUkV3Wj.js
var x2 = defineComponent({
  __name: "BryntumResourceFilter",
  props: {
    activateOnMouseover: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allowGroupSelect: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearSelectionOnEmptySpaceClick: {},
    cls: {},
    collapsibleGroups: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    displayField: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    eventStore: {},
    extraData: {},
    filterResources: {},
    flex: {},
    floating: {},
    getItemCls: { type: [Function, String] },
    getItemStyle: { type: [Function, String] },
    groupHeaderTpl: { type: Function },
    height: {},
    hidden: {},
    hideAnimation: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    isSelectable: { type: [Function, String] },
    items: {},
    itemTpl: { type: [Function, String] },
    keyMap: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    masterFilter: { type: [Function, String] },
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    multiSelect: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectAllItem: {},
    selected: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    store: {},
    tab: {},
    tag: {},
    textAlign: {},
    title: {},
    toggleAllIfCtrlPressed: {},
    tooltip: {},
    tooltipTemplate: { type: Function },
    type: {},
    ui: {},
    useResourceColor: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeItem", "beforeShow", "catchAll", "change", "destroy", "focusIn", "focusOut", "hide", "item", "paint", "readOnly", "recompose", "resize", "selectionChange", "show", "toggleGroup", "toggleNode"],
  setup(F7, { expose: s, emit: c }) {
    const p = c, l2 = {
      instanceClass: ResourceFilter,
      instanceName: "ResourceFilter",
      configNames: [
        "activateOnMouseover",
        "adopt",
        "align",
        "allowGroupSelect",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearSelectionOnEmptySpaceClick",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "displayField",
        "dock",
        "draggable",
        "elementAttributes",
        "eventStore",
        "filterResources",
        "floating",
        "getItemCls",
        "getItemStyle",
        "groupHeaderTpl",
        "hideAnimation",
        "htmlCls",
        "ignoreParentReadOnly",
        "isSelectable",
        "itemTpl",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "masterFilter",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectAllItem",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tag",
        "textAlign",
        "tooltipTemplate",
        "type",
        "ui",
        "useResourceColor",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsibleGroups",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "multiSelect",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeItem",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onItem",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelectionChange",
        "onShow",
        "onToggleGroup",
        "onToggleNode",
        "readOnly",
        "rtl",
        "scrollable",
        "selected",
        "store",
        "title",
        "toggleAllIfCtrlPressed",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "parent"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeItem",
        "beforeShow",
        "catchAll",
        "change",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "item",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "selectionChange",
        "show",
        "toggleGroup",
        "toggleNode"
      ]
    }, o = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: l2,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (m, d2) => watch(() => e.props[m], d2);
      l.watchProps(o.value, l2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CcSS6EBU.js
var F4 = defineComponent({
  __name: "BryntumResourceView",
  props: {
    activationKey: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allowDragCreate: {},
    allowDragMove: {},
    allowDragResize: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCreate: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    contentElementCls: {},
    dataset: {},
    dateFormat: {},
    dateSeparator: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    defaultScrollOptions: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    disabled: {},
    dock: {},
    draggable: {},
    dragUnit: {},
    drawer: {},
    elementAttributes: {},
    eventHeaderRenderer: { type: [Function, String] },
    eventHeight: {},
    eventRenderer: { type: [Function, String] },
    eventSorter: { type: Function },
    extendAllDayEndDay: {},
    extraData: {},
    filterEventResources: {},
    flex: {},
    floating: {},
    footer: {},
    getPrimaryResource: { type: [Function, String] },
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideNonWorkingDays: {},
    hideWhenEmpty: {},
    id: {},
    ignoreParentReadOnly: {},
    includeTimeRanges: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    meta: { type: [String, Function] },
    minDate: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    nonWorkingDays: {},
    owner: {},
    pastEventCls: {},
    positioned: {},
    preventTooltipOnTouch: {},
    range: {},
    readOnly: {},
    relayStoreEvents: {},
    resourceImagePath: {},
    resourceWidth: {},
    responsive: {},
    responsiveRoot: {},
    responsiveState: {},
    responsiveTarget: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectorButton: {},
    selectorMenuItem: {},
    shortDateFormat: {},
    shortDateTimeFormat: {},
    shortEventCls: {},
    shortEventDuration: {},
    showAnimation: {},
    showAvatars: {},
    showBullet: {},
    showResourceAvatars: {},
    showTooltipWhenDisabled: {},
    stableResourceOrder: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    syncCalendarDate: {},
    syncViewDate: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    timeFormat: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    view: {},
    viewGap: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeAutoCreate", "beforeChangeDate", "beforeDestroy", "beforeHide", "beforeResponsiveStateChange", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "eventAutoCreated", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "refresh", "resize", "responsiveStateChange", "show", "toolClick", "viewCreate"],
  setup(D6, { expose: l2, emit: c }) {
    const d2 = c, r = {
      instanceClass: ResourceView,
      instanceName: "ResourceView",
      configNames: [
        "activationKey",
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "descriptionRenderer",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "eventHeaderRenderer",
        "eventHeight",
        "eventRenderer",
        "eventSorter",
        "floating",
        "footer",
        "getPrimaryResource",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "ignoreParentReadOnly",
        "includeTimeRanges",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "meta",
        "monitorResize",
        "namedItems",
        "nonWorkingDays",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resourceImagePath",
        "responsive",
        "responsiveRoot",
        "responsiveState",
        "responsiveTarget",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectorButton",
        "selectorMenuItem",
        "shortEventCls",
        "shortEventDuration",
        "showAnimation",
        "showAvatars",
        "showBullet",
        "showResourceAvatars",
        "showTooltipWhenDisabled",
        "stableResourceOrder",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "timeFormat",
        "trapFocus",
        "type",
        "ui",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDragCreate",
        "allowDragMove",
        "allowDragResize",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "autoCreate",
        "cls",
        "collapsed",
        "dataset",
        "dateFormat",
        "dateSeparator",
        "defaultScrollOptions",
        "descriptionFormat",
        "disabled",
        "dragUnit",
        "extendAllDayEndDay",
        "extraData",
        "filterEventResources",
        "flex",
        "height",
        "hidden",
        "hideNonWorkingDays",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDate",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minDate",
        "minHeight",
        "minWidth",
        "onBeforeAutoCreate",
        "onBeforeChangeDate",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeResponsiveStateChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onEventAutoCreated",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onResponsiveStateChange",
        "onShow",
        "onToolClick",
        "onViewCreate",
        "pastEventCls",
        "range",
        "readOnly",
        "resourceWidth",
        "rtl",
        "scrollable",
        "shortDateFormat",
        "shortDateTimeFormat",
        "strictRecordMapping",
        "syncCalendarDate",
        "syncViewDate",
        "title",
        "tools",
        "tooltip",
        "view",
        "viewGap",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "dayCellCls",
        "firstVisibleCell",
        "firstVisibleDate",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "lastVisibleCell",
        "lastVisibleDate",
        "parent",
        "record",
        "state",
        "values"
      ],
      eventNames: [
        "beforeAutoCreate",
        "beforeChangeDate",
        "beforeDestroy",
        "beforeHide",
        "beforeResponsiveStateChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "eventAutoCreated",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "responsiveStateChange",
        "show",
        "toolClick",
        "viewCreate"
      ]
    }, o = {}, a2 = ref(), n = ref(/* @__PURE__ */ new Map());
    return provide("teleports", n), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: r,
        emit: d2,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, r, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), l2({
      instance: o,
      refElement: a2,
      teleports: n
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CO62JEmH.js
var F5 = defineComponent({
  __name: "BryntumScheduler",
  props: {
    adopt: {},
    alignSelf: {},
    allowCreate: {},
    allowCreateOnlyParent: {},
    allowDropOnEventBar: {},
    allowOverlap: {},
    animateFilterRemovals: {},
    animateRemovingRows: {},
    animateTreeNodeToggle: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    assignments: {},
    assignmentStore: {},
    autoAdjustTimeAxis: {},
    autoCreate: {},
    autoHeight: {},
    barMargin: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    bufferCoef: {},
    bufferThreshold: {},
    callOnFunctions: {},
    cellEllipsis: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnLines: {},
    columns: {},
    config: {},
    contentElementCls: {},
    contextMenuTriggerEvent: {},
    createEventOnDblClick: {},
    creationTooltip: {},
    creationTooltipTemplate: { type: Function },
    crudManager: {},
    crudManagerClass: {},
    data: {},
    dataset: {},
    date: {},
    dateFormat: {},
    dateSeparator: {},
    defaultRegion: {},
    defaultResourceImageName: {},
    dependencies: {},
    dependencyStore: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    deselectAllOnScheduleClick: {},
    deselectOnClick: {},
    destroyStore: {},
    destroyStores: {},
    disabled: {},
    disableGridColumnIdWarning: {},
    disableGridRowModelWarning: {},
    displayDateFormat: {},
    dock: {},
    drawer: {},
    durationDisplayPrecision: {},
    elementAttributes: {},
    emptyText: {},
    enableDeleteKey: {},
    enableEventAnimations: {},
    enableRecurringEvents: {},
    enableSticky: {},
    enableTextSelection: {},
    enableTransactionalFeatures: {},
    enableUndoRedoKeys: {},
    endDate: {},
    endParamName: {},
    eventBarTextField: {},
    eventColor: {},
    eventLayout: {},
    eventReleaseThreshold: {},
    eventRenderer: { type: Function },
    eventRendererThisObj: {},
    events: {},
    eventSelectionDisabled: {},
    eventStore: {},
    eventStyle: {},
    extraData: {},
    fillLastColumn: {},
    fillTicks: {},
    fixedRowHeight: {},
    flex: {},
    footer: {},
    forceFit: {},
    formulaProviders: {},
    fullRowRefresh: {},
    getDateConstraints: { type: Function },
    getRowHeight: { type: Function },
    header: {},
    height: {},
    hidden: {},
    hideFooters: {},
    hideHeaders: {},
    hideHorizontalScrollbar: {},
    hideRowHover: {},
    highlightPredecessors: {},
    highlightSuccessors: {},
    hoverCls: {},
    id: {},
    ignoreDomEventsWhileScrolling: {},
    ignoreParentReadOnly: {},
    infiniteScroll: {},
    insertBefore: {},
    insertFirst: {},
    isEventSelectable: { type: Function },
    keyMap: {},
    listeners: {},
    listRangeMenu: {},
    loadMask: {},
    loadMaskDefaults: {},
    loadMaskError: {},
    localizable: {},
    longPressTime: {},
    maintainSelectionOnDatasetChange: {},
    managedEventSizing: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxHeight: {},
    maxTimeAxisUnit: {},
    maxWidth: {},
    maxZoomLevel: {},
    milestoneAlign: {},
    milestoneCharWidth: {},
    milestoneLayoutMode: {},
    milestoneTextPosition: {},
    minDate: {},
    minHeight: {},
    minWidth: {},
    minZoomLevel: {},
    mode: {},
    monitorResize: {},
    multiEventSelect: {},
    narrowEventWidth: {},
    overlappingEventSorter: { type: Function },
    owner: {},
    partner: {},
    passStartEndParameters: {},
    plugins: {},
    preCalculateHeightLimit: {},
    preserveFocusOnDatasetChange: {},
    preserveScroll: {},
    preserveScrollOnDatasetChange: {},
    presets: {},
    preventTooltipOnTouch: {},
    project: {},
    range: {},
    readOnly: {},
    recurrenceConfirmationPopup: {},
    relayStoreEvents: {},
    resizable: {},
    resizeToFitIncludesHeader: {},
    resourceColumns: {},
    resourceImageExtension: {},
    resourceImagePath: {},
    resourceMargin: {},
    resources: {},
    resourceStore: {},
    resourceTimeRangeRenderer: { type: Function },
    resourceTimeRanges: {},
    resourceTimeRangeStore: {},
    responsiveLevels: {},
    ripple: {},
    rootElement: {},
    rowHeight: {},
    rowLines: {},
    rtl: {},
    scrollable: {},
    scrollerClass: {},
    scrollExtensionThreshold: {},
    scrollManager: {},
    selectionMode: {},
    selectResourceOnEventNavigate: {},
    selectResourceOnScheduleClick: {},
    shiftIncrement: {},
    showCreationTooltip: {},
    showDirty: {},
    showEventColorPickers: {},
    showLagInTooltip: {},
    showRecurringUI: {},
    showTooltip: {},
    snap: {},
    snapRelativeToEventStartDate: {},
    startDate: {},
    startParamName: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    stateSettings: {},
    stepUnit: {},
    stickyHeaders: {},
    store: {},
    strips: {},
    subGridConfigs: {},
    suppressFit: {},
    syncMask: {},
    tab: {},
    tabBarItems: {},
    tbar: {},
    terminalCls: {},
    terminalHideDelay: {},
    terminalOffset: {},
    terminalShowDelay: {},
    terminalSides: {},
    terminalSize: {},
    tickSize: {},
    timeAxis: {},
    timeRanges: {},
    timeRangeStore: {},
    timeResolution: {},
    timeZone: {},
    title: {},
    tools: {},
    tooltipTemplate: { type: Function },
    transitionDuration: {},
    triggerSelectionChangeOnRemove: {},
    type: {},
    ui: {},
    updateTimelineContextOnScroll: {},
    useContextualRecurrenceRules: {},
    useInitialAnimation: {},
    verticalTimeAxisColumn: {},
    viewPreset: {},
    visibleDate: {},
    visibleZoomFactor: {},
    weekStartDay: {},
    weight: {},
    width: {},
    workingTime: {},
    zoomKeepsOriginalTimespan: {},
    zoomOnMouseWheel: {},
    zoomOnTimeAxisDoubleClick: {},
    cellCopyPasteFeature: {},
    cellEditFeature: {},
    cellMenuFeature: {},
    cellTooltipFeature: {},
    columnAutoWidthFeature: {},
    columnDragToolbarFeature: {},
    columnLinesFeature: {},
    columnPickerFeature: {},
    columnRenameFeature: {},
    columnReorderFeature: {},
    columnResizeFeature: {},
    dependenciesFeature: {},
    dependencyEditFeature: {},
    dependencyMenuFeature: {},
    eventCopyPasteFeature: {},
    eventDragFeature: {},
    eventDragCreateFeature: {},
    eventDragSelectFeature: {},
    eventEditFeature: {},
    eventFilterFeature: {},
    eventMenuFeature: {},
    eventNonWorkingTimeFeature: {},
    eventResizeFeature: {},
    eventTooltipFeature: {},
    excelExporterFeature: {},
    fileDropFeature: {},
    fillHandleFeature: {},
    filterFeature: {},
    filterBarFeature: {},
    groupFeature: {},
    groupSummaryFeature: {},
    headerMenuFeature: {},
    headerZoomFeature: {},
    labelsFeature: {},
    lockRowsFeature: {},
    mergeCellsFeature: {},
    nonWorkingTimeFeature: {},
    panFeature: {},
    pdfExportFeature: {},
    printFeature: {},
    quickFindFeature: {},
    regionResizeFeature: {},
    resourceMenuFeature: {},
    resourceTimeRangesFeature: {},
    rowCopyPasteFeature: {},
    rowEditFeature: {},
    rowExpanderFeature: {},
    rowReorderFeature: {},
    rowResizeFeature: {},
    scheduleContextFeature: {},
    scheduleMenuFeature: {},
    scheduleTooltipFeature: {},
    scrollButtonsFeature: {},
    searchFeature: {},
    simpleEventEditFeature: {},
    sortFeature: {},
    splitFeature: {},
    stickyCellsFeature: {},
    stickyEventsFeature: {},
    stripeFeature: {},
    summaryFeature: {},
    timeAxisHeaderMenuFeature: {},
    timeRangesFeature: {},
    timeSelectionFeature: {},
    treeFeature: {},
    treeGroupFeature: {},
    treeSummaryFeature: {}
  },
  emits: ["afterDependencyCreateDrop", "afterDependencySave", "afterDragCreate", "afterEventDragSelect", "afterEventDrop", "afterEventEdit", "afterEventSave", "assignmentSelectionChange", "beforeAssignmentDelete", "beforeAssignmentSelectionChange", "beforeAutoCreate", "beforeCancelCellEdit", "beforeCancelRowEdit", "beforeCellDelete", "beforeCellEditStart", "beforeColumnDragStart", "beforeColumnDropFinalize", "beforeColumnResize", "beforeCopy", "beforeCSVExport", "beforeDependencyAdd", "beforeDependencyCreateDrag", "beforeDependencyCreateFinalize", "beforeDependencyDelete", "beforeDependencyEdit", "beforeDependencyEditShow", "beforeDependencySave", "beforeDestroy", "beforeDragCreate", "beforeDragCreateFinalize", "beforeEventAdd", "beforeEventDelete", "beforeEventDrag", "beforeEventDragSelect", "beforeEventDropFinalize", "beforeEventEdit", "beforeEventEditShow", "beforeEventResize", "beforeEventResizeFinalize", "beforeEventSave", "beforeEventSelectionChange", "beforeExcelExport", "beforeFillHandleDragStart", "beforeFinishCellEdit", "beforeFinishRowEdit", "beforeHide", "beforePan", "beforePaste", "beforePdfExport", "beforePresetChange", "beforeRenderRow", "beforeRenderRows", "beforeRowCollapse", "beforeRowExpand", "beforeSelectionChange", "beforeSetRecord", "beforeShow", "beforeShowTerminals", "beforeStartRowEdit", "beforeStateApply", "beforeStateSave", "beforeToggleGroup", "beforeToggleNode", "cancelCellEdit", "catchAll", "cellClick", "cellContextMenu", "cellDblClick", "cellMenuBeforeShow", "cellMenuItem", "cellMenuShow", "cellMenuToggleItem", "cellMouseEnter", "cellMouseLeave", "cellMouseOut", "cellMouseOver", "collapse", "collapseNode", "columnDrag", "columnDragStart", "columnDrop", "columnResize", "columnResizeStart", "contextMenuItem", "contextMenuToggleItem", "copy", "currentTimelineUpdate", "dataChange", "dateRangeChange", "dependenciesDrawn", "dependencyClick", "dependencyContextMenu", "dependencyCreateDragStart", "dependencyCreateDrop", "dependencyDblClick", "dependencyMenuBeforeShow", "dependencyMenuItem", "dependencyMenuShow", "dependencyMouseOut", "dependencyMouseOver", "dependencyValidationComplete", "dependencyValidationStart", "destroy", "dirtyStateChange", "dragCreateEnd", "dragCreateStart", "dragSelecting", "eventAutoCreated", "eventClick", "eventContextMenu", "eventDblClick", "eventDrag", "eventDragAbort", "eventDragModeChange", "eventDragReset", "eventDragSelect", "eventDragStart", "eventDrop", "eventEditBeforeSetRecord", "eventKeyDown", "eventKeyUp", "eventMenuBeforeShow", "eventMenuItem", "eventMenuShow", "eventMouseDown", "eventMouseEnter", "eventMouseLeave", "eventMouseOut", "eventMouseOver", "eventMouseUp", "eventPartialResize", "eventResizeEnd", "eventResizeStart", "eventSelectionChange", "expand", "expandNode", "fileDrop", "fillHandleBeforeDragFinalize", "fillHandleDrag", "fillHandleDragAbort", "fillHandleDragEnd", "fillHandleDragStart", "finishCellEdit", "finishRowEdit", "focusIn", "focusOut", "gridRowBeforeDragStart", "gridRowBeforeDropFinalize", "gridRowDrag", "gridRowDragAbort", "gridRowDragStart", "gridRowDrop", "headerClick", "headerMenuBeforeShow", "headerMenuItem", "headerMenuShow", "headerMenuToggleItem", "hide", "lockRows", "mouseOut", "mouseOver", "navigate", "paint", "paste", "pasteNotAllowed", "pdfExport", "presetChange", "readOnly", "recompose", "releaseEvent", "renderEvent", "renderRow", "renderRows", "resize", "resourceHeaderClick", "resourceHeaderContextmenu", "resourceHeaderDblclick", "resourceMenuBeforeShow", "resourceMenuItem", "resourceMenuShow", "resourceMenuToggleItem", "resourceTimeRangeClick", "resourceTimeRangeContextMenu", "resourceTimeRangeDblClick", "resourceTimeRangeMouseDown", "resourceTimeRangeMouseOut", "resourceTimeRangeMouseOver", "resourceTimeRangeMouseUp", "responsive", "rowCollapse", "rowExpand", "rowMouseEnter", "rowMouseLeave", "scheduleClick", "scheduleContextMenu", "scheduleDblClick", "scheduleMenuBeforeShow", "scheduleMenuItem", "scheduleMenuShow", "scheduleMouseDown", "scheduleMouseEnter", "scheduleMouseLeave", "scheduleMouseMove", "scheduleMouseUp", "scroll", "scrollButtonClick", "selectionChange", "selectionModeChange", "shiftIncrementChange", "show", "split", "splitterCollapseClick", "splitterDragEnd", "splitterDragStart", "splitterExpandClick", "startCellEdit", "startRowEdit", "subGridCollapse", "subGridExpand", "tickSizeChange", "timeAxisChange", "timeAxisHeaderClick", "timeAxisHeaderContextMenu", "timeAxisHeaderDblClick", "timeAxisHeaderMenuBeforeShow", "timeAxisHeaderMenuItem", "timeAxisHeaderMenuShow", "timelineContextChange", "timelineViewportResize", "timeRangeHeaderClick", "timeRangeHeaderContextMenu", "timeRangeHeaderDblClick", "timeSelectionChange", "timeSelectionElementClick", "toggleGroup", "toggleNode", "toolClick", "unlockRows", "unsplit", "visibleDateRangeChange"],
  setup(b, { expose: s, emit: d2 }) {
    const c = d2, r = {
      instanceClass: Scheduler,
      instanceName: "Scheduler",
      configNames: [
        "adopt",
        "allowCreate",
        "allowCreateOnlyParent",
        "animateFilterRemovals",
        "animateRemovingRows",
        "animateTreeNodeToggle",
        "ariaDescription",
        "ariaLabel",
        "autoAdjustTimeAxis",
        "autoHeight",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "bufferCoef",
        "bufferThreshold",
        "callOnFunctions",
        "collapsible",
        "config",
        "contentElementCls",
        "contextMenuTriggerEvent",
        "createEventOnDblClick",
        "creationTooltip",
        "crudManagerClass",
        "defaultRegion",
        "defaultResourceImageName",
        "descriptionRenderer",
        "deselectAllOnScheduleClick",
        "deselectOnClick",
        "destroyStore",
        "destroyStores",
        "disableGridColumnIdWarning",
        "disableGridRowModelWarning",
        "dock",
        "drawer",
        "durationDisplayPrecision",
        "elementAttributes",
        "enableDeleteKey",
        "enableRecurringEvents",
        "enableSticky",
        "enableTextSelection",
        "enableTransactionalFeatures",
        "endParamName",
        "eventBarTextField",
        "eventRenderer",
        "eventRendererThisObj",
        "eventSelectionDisabled",
        "fillLastColumn",
        "fixedRowHeight",
        "footer",
        "formulaProviders",
        "fullRowRefresh",
        "getDateConstraints",
        "getRowHeight",
        "header",
        "hideHorizontalScrollbar",
        "highlightPredecessors",
        "highlightSuccessors",
        "hoverCls",
        "ignoreDomEventsWhileScrolling",
        "ignoreParentReadOnly",
        "listeners",
        "listRangeMenu",
        "loadMask",
        "loadMaskDefaults",
        "loadMaskError",
        "localizable",
        "maintainSelectionOnDatasetChange",
        "managedEventSizing",
        "maskDefaults",
        "masked",
        "maxDate",
        "maxTimeAxisUnit",
        "minDate",
        "mode",
        "monitorResize",
        "multiEventSelect",
        "narrowEventWidth",
        "owner",
        "partner",
        "passStartEndParameters",
        "plugins",
        "preCalculateHeightLimit",
        "preserveFocusOnDatasetChange",
        "preserveScrollOnDatasetChange",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resizable",
        "resizeToFitIncludesHeader",
        "resourceColumns",
        "resourceImageExtension",
        "resourceImagePath",
        "resourceTimeRangeRenderer",
        "responsiveLevels",
        "ripple",
        "rootElement",
        "scrollerClass",
        "scrollExtensionThreshold",
        "scrollManager",
        "showCreationTooltip",
        "showDirty",
        "showEventColorPickers",
        "showLagInTooltip",
        "showRecurringUI",
        "snapRelativeToEventStartDate",
        "startParamName",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "stepUnit",
        "stickyHeaders",
        "strips",
        "subGridConfigs",
        "syncMask",
        "tab",
        "tabBarItems",
        "tbar",
        "terminalCls",
        "terminalSides",
        "timeAxis",
        "triggerSelectionChangeOnRemove",
        "type",
        "ui",
        "verticalTimeAxisColumn",
        "visibleZoomFactor",
        "weekStartDay",
        "weight",
        "zoomKeepsOriginalTimespan",
        "zoomOnMouseWheel",
        "zoomOnTimeAxisDoubleClick"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDropOnEventBar",
        "allowOverlap",
        "appendTo",
        "ariaLive",
        "assignments",
        "assignmentStore",
        "autoCreate",
        "barMargin",
        "cellEllipsis",
        "cls",
        "collapsed",
        "columnLines",
        "columns",
        "creationTooltipTemplate",
        "crudManager",
        "data",
        "dataset",
        "date",
        "dateFormat",
        "dateSeparator",
        "dependencies",
        "dependencyStore",
        "descriptionFormat",
        "disabled",
        "displayDateFormat",
        "emptyText",
        "enableEventAnimations",
        "enableUndoRedoKeys",
        "endDate",
        "eventColor",
        "eventLayout",
        "eventReleaseThreshold",
        "events",
        "eventStore",
        "eventStyle",
        "extraData",
        "fillTicks",
        "flex",
        "forceFit",
        "height",
        "hidden",
        "hideFooters",
        "hideHeaders",
        "hideRowHover",
        "id",
        "infiniteScroll",
        "insertBefore",
        "insertFirst",
        "isEventSelectable",
        "keyMap",
        "longPressTime",
        "margin",
        "maxHeight",
        "maxWidth",
        "maxZoomLevel",
        "milestoneAlign",
        "milestoneCharWidth",
        "milestoneLayoutMode",
        "milestoneTextPosition",
        "minHeight",
        "minWidth",
        "minZoomLevel",
        "onAfterDependencyCreateDrop",
        "onAfterDependencySave",
        "onAfterDragCreate",
        "onAfterEventDragSelect",
        "onAfterEventDrop",
        "onAfterEventEdit",
        "onAfterEventSave",
        "onAssignmentSelectionChange",
        "onBeforeAssignmentDelete",
        "onBeforeAssignmentSelectionChange",
        "onBeforeAutoCreate",
        "onBeforeCancelCellEdit",
        "onBeforeCancelRowEdit",
        "onBeforeCellDelete",
        "onBeforeCellEditStart",
        "onBeforeColumnDragStart",
        "onBeforeColumnDropFinalize",
        "onBeforeColumnResize",
        "onBeforeCopy",
        "onBeforeCSVExport",
        "onBeforeDependencyAdd",
        "onBeforeDependencyCreateDrag",
        "onBeforeDependencyCreateFinalize",
        "onBeforeDependencyDelete",
        "onBeforeDependencyEdit",
        "onBeforeDependencyEditShow",
        "onBeforeDependencySave",
        "onBeforeDestroy",
        "onBeforeDragCreate",
        "onBeforeDragCreateFinalize",
        "onBeforeEventAdd",
        "onBeforeEventDelete",
        "onBeforeEventDrag",
        "onBeforeEventDragSelect",
        "onBeforeEventDropFinalize",
        "onBeforeEventEdit",
        "onBeforeEventEditShow",
        "onBeforeEventResize",
        "onBeforeEventResizeFinalize",
        "onBeforeEventSave",
        "onBeforeEventSelectionChange",
        "onBeforeExcelExport",
        "onBeforeFillHandleDragStart",
        "onBeforeFinishCellEdit",
        "onBeforeFinishRowEdit",
        "onBeforeHide",
        "onBeforePan",
        "onBeforePaste",
        "onBeforePdfExport",
        "onBeforePresetChange",
        "onBeforeRenderRow",
        "onBeforeRenderRows",
        "onBeforeRowCollapse",
        "onBeforeRowExpand",
        "onBeforeSelectionChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeShowTerminals",
        "onBeforeStartRowEdit",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onBeforeToggleGroup",
        "onBeforeToggleNode",
        "onCancelCellEdit",
        "onCatchAll",
        "onCellClick",
        "onCellContextMenu",
        "onCellDblClick",
        "onCellMenuBeforeShow",
        "onCellMenuItem",
        "onCellMenuShow",
        "onCellMenuToggleItem",
        "onCellMouseEnter",
        "onCellMouseLeave",
        "onCellMouseOut",
        "onCellMouseOver",
        "onCollapse",
        "onCollapseNode",
        "onColumnDrag",
        "onColumnDragStart",
        "onColumnDrop",
        "onColumnResize",
        "onColumnResizeStart",
        "onContextMenuItem",
        "onContextMenuToggleItem",
        "onCopy",
        "onCurrentTimelineUpdate",
        "onDataChange",
        "onDateRangeChange",
        "onDependenciesDrawn",
        "onDependencyClick",
        "onDependencyContextMenu",
        "onDependencyCreateDragStart",
        "onDependencyCreateDrop",
        "onDependencyDblClick",
        "onDependencyMenuBeforeShow",
        "onDependencyMenuItem",
        "onDependencyMenuShow",
        "onDependencyMouseOut",
        "onDependencyMouseOver",
        "onDependencyValidationComplete",
        "onDependencyValidationStart",
        "onDestroy",
        "onDirtyStateChange",
        "onDragCreateEnd",
        "onDragCreateStart",
        "onDragSelecting",
        "onEventAutoCreated",
        "onEventClick",
        "onEventContextMenu",
        "onEventDblClick",
        "onEventDrag",
        "onEventDragAbort",
        "onEventDragModeChange",
        "onEventDragReset",
        "onEventDragSelect",
        "onEventDragStart",
        "onEventDrop",
        "onEventEditBeforeSetRecord",
        "onEventKeyDown",
        "onEventKeyUp",
        "onEventMenuBeforeShow",
        "onEventMenuItem",
        "onEventMenuShow",
        "onEventMouseDown",
        "onEventMouseEnter",
        "onEventMouseLeave",
        "onEventMouseOut",
        "onEventMouseOver",
        "onEventMouseUp",
        "onEventPartialResize",
        "onEventResizeEnd",
        "onEventResizeStart",
        "onEventSelectionChange",
        "onExpand",
        "onExpandNode",
        "onFileDrop",
        "onFillHandleBeforeDragFinalize",
        "onFillHandleDrag",
        "onFillHandleDragAbort",
        "onFillHandleDragEnd",
        "onFillHandleDragStart",
        "onFinishCellEdit",
        "onFinishRowEdit",
        "onFocusIn",
        "onFocusOut",
        "onGridRowBeforeDragStart",
        "onGridRowBeforeDropFinalize",
        "onGridRowDrag",
        "onGridRowDragAbort",
        "onGridRowDragStart",
        "onGridRowDrop",
        "onHeaderClick",
        "onHeaderMenuBeforeShow",
        "onHeaderMenuItem",
        "onHeaderMenuShow",
        "onHeaderMenuToggleItem",
        "onHide",
        "onLockRows",
        "onMouseOut",
        "onMouseOver",
        "onNavigate",
        "onPaint",
        "onPaste",
        "onPasteNotAllowed",
        "onPdfExport",
        "onPresetChange",
        "onReadOnly",
        "onRecompose",
        "onReleaseEvent",
        "onRenderEvent",
        "onRenderRow",
        "onRenderRows",
        "onResize",
        "onResourceHeaderClick",
        "onResourceHeaderContextmenu",
        "onResourceHeaderDblclick",
        "onResourceMenuBeforeShow",
        "onResourceMenuItem",
        "onResourceMenuShow",
        "onResourceMenuToggleItem",
        "onResourceTimeRangeClick",
        "onResourceTimeRangeContextMenu",
        "onResourceTimeRangeDblClick",
        "onResourceTimeRangeMouseDown",
        "onResourceTimeRangeMouseOut",
        "onResourceTimeRangeMouseOver",
        "onResourceTimeRangeMouseUp",
        "onResponsive",
        "onRowCollapse",
        "onRowExpand",
        "onRowMouseEnter",
        "onRowMouseLeave",
        "onScheduleClick",
        "onScheduleContextMenu",
        "onScheduleDblClick",
        "onScheduleMenuBeforeShow",
        "onScheduleMenuItem",
        "onScheduleMenuShow",
        "onScheduleMouseDown",
        "onScheduleMouseEnter",
        "onScheduleMouseLeave",
        "onScheduleMouseMove",
        "onScheduleMouseUp",
        "onScroll",
        "onScrollButtonClick",
        "onSelectionChange",
        "onSelectionModeChange",
        "onShiftIncrementChange",
        "onShow",
        "onSplit",
        "onSplitterCollapseClick",
        "onSplitterDragEnd",
        "onSplitterDragStart",
        "onSplitterExpandClick",
        "onStartCellEdit",
        "onStartRowEdit",
        "onSubGridCollapse",
        "onSubGridExpand",
        "onTickSizeChange",
        "onTimeAxisChange",
        "onTimeAxisHeaderClick",
        "onTimeAxisHeaderContextMenu",
        "onTimeAxisHeaderDblClick",
        "onTimeAxisHeaderMenuBeforeShow",
        "onTimeAxisHeaderMenuItem",
        "onTimeAxisHeaderMenuShow",
        "onTimelineContextChange",
        "onTimelineViewportResize",
        "onTimeRangeHeaderClick",
        "onTimeRangeHeaderContextMenu",
        "onTimeRangeHeaderDblClick",
        "onTimeSelectionChange",
        "onTimeSelectionElementClick",
        "onToggleGroup",
        "onToggleNode",
        "onToolClick",
        "onUnlockRows",
        "onUnsplit",
        "onVisibleDateRangeChange",
        "overlappingEventSorter",
        "preserveScroll",
        "presets",
        "project",
        "range",
        "readOnly",
        "recurrenceConfirmationPopup",
        "resourceMargin",
        "resources",
        "resourceStore",
        "resourceTimeRanges",
        "resourceTimeRangeStore",
        "rowHeight",
        "rowLines",
        "rtl",
        "scrollable",
        "selectionMode",
        "selectResourceOnEventNavigate",
        "selectResourceOnScheduleClick",
        "shiftIncrement",
        "showTooltip",
        "snap",
        "startDate",
        "stateSettings",
        "store",
        "suppressFit",
        "terminalHideDelay",
        "terminalOffset",
        "terminalShowDelay",
        "terminalSize",
        "tickSize",
        "timeRanges",
        "timeRangeStore",
        "timeResolution",
        "timeZone",
        "title",
        "tools",
        "tooltipTemplate",
        "transitionDuration",
        "updateTimelineContextOnScroll",
        "useContextualRecurrenceRules",
        "useInitialAnimation",
        "viewPreset",
        "visibleDate",
        "width",
        "workingTime"
      ],
      propertyNames: [
        "focusVisible",
        "hasChanges",
        "isEngineReady",
        "originalStore",
        "parent",
        "scrollLeft",
        "scrollTop",
        "scrollX",
        "selectedAssignments",
        "selectedCell",
        "selectedCells",
        "selectedEvents",
        "selectedRecord",
        "selectedRecords",
        "selectedRows",
        "state",
        "tooltip",
        "zoomLevel"
      ],
      eventNames: [
        "afterDependencyCreateDrop",
        "afterDependencySave",
        "afterDragCreate",
        "afterEventDragSelect",
        "afterEventDrop",
        "afterEventEdit",
        "afterEventSave",
        "assignmentSelectionChange",
        "beforeAssignmentDelete",
        "beforeAssignmentSelectionChange",
        "beforeAutoCreate",
        "beforeCancelCellEdit",
        "beforeCancelRowEdit",
        "beforeCellDelete",
        "beforeCellEditStart",
        "beforeColumnDragStart",
        "beforeColumnDropFinalize",
        "beforeColumnResize",
        "beforeCopy",
        "beforeCSVExport",
        "beforeDependencyAdd",
        "beforeDependencyCreateDrag",
        "beforeDependencyCreateFinalize",
        "beforeDependencyDelete",
        "beforeDependencyEdit",
        "beforeDependencyEditShow",
        "beforeDependencySave",
        "beforeDestroy",
        "beforeDragCreate",
        "beforeDragCreateFinalize",
        "beforeEventAdd",
        "beforeEventDelete",
        "beforeEventDrag",
        "beforeEventDragSelect",
        "beforeEventDropFinalize",
        "beforeEventEdit",
        "beforeEventEditShow",
        "beforeEventResize",
        "beforeEventResizeFinalize",
        "beforeEventSave",
        "beforeEventSelectionChange",
        "beforeExcelExport",
        "beforeFillHandleDragStart",
        "beforeFinishCellEdit",
        "beforeFinishRowEdit",
        "beforeHide",
        "beforePan",
        "beforePaste",
        "beforePdfExport",
        "beforePresetChange",
        "beforeRenderRow",
        "beforeRenderRows",
        "beforeRowCollapse",
        "beforeRowExpand",
        "beforeSelectionChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeShowTerminals",
        "beforeStartRowEdit",
        "beforeStateApply",
        "beforeStateSave",
        "beforeToggleGroup",
        "beforeToggleNode",
        "cancelCellEdit",
        "catchAll",
        "cellClick",
        "cellContextMenu",
        "cellDblClick",
        "cellMenuBeforeShow",
        "cellMenuItem",
        "cellMenuShow",
        "cellMenuToggleItem",
        "cellMouseEnter",
        "cellMouseLeave",
        "cellMouseOut",
        "cellMouseOver",
        "collapse",
        "collapseNode",
        "columnDrag",
        "columnDragStart",
        "columnDrop",
        "columnResize",
        "columnResizeStart",
        "contextMenuItem",
        "contextMenuToggleItem",
        "copy",
        "currentTimelineUpdate",
        "dataChange",
        "dateRangeChange",
        "dependenciesDrawn",
        "dependencyClick",
        "dependencyContextMenu",
        "dependencyCreateDragStart",
        "dependencyCreateDrop",
        "dependencyDblClick",
        "dependencyMenuBeforeShow",
        "dependencyMenuItem",
        "dependencyMenuShow",
        "dependencyMouseOut",
        "dependencyMouseOver",
        "dependencyValidationComplete",
        "dependencyValidationStart",
        "destroy",
        "dirtyStateChange",
        "dragCreateEnd",
        "dragCreateStart",
        "dragSelecting",
        "eventAutoCreated",
        "eventClick",
        "eventContextMenu",
        "eventDblClick",
        "eventDrag",
        "eventDragAbort",
        "eventDragModeChange",
        "eventDragReset",
        "eventDragSelect",
        "eventDragStart",
        "eventDrop",
        "eventEditBeforeSetRecord",
        "eventKeyDown",
        "eventKeyUp",
        "eventMenuBeforeShow",
        "eventMenuItem",
        "eventMenuShow",
        "eventMouseDown",
        "eventMouseEnter",
        "eventMouseLeave",
        "eventMouseOut",
        "eventMouseOver",
        "eventMouseUp",
        "eventPartialResize",
        "eventResizeEnd",
        "eventResizeStart",
        "eventSelectionChange",
        "expand",
        "expandNode",
        "fileDrop",
        "fillHandleBeforeDragFinalize",
        "fillHandleDrag",
        "fillHandleDragAbort",
        "fillHandleDragEnd",
        "fillHandleDragStart",
        "finishCellEdit",
        "finishRowEdit",
        "focusIn",
        "focusOut",
        "gridRowBeforeDragStart",
        "gridRowBeforeDropFinalize",
        "gridRowDrag",
        "gridRowDragAbort",
        "gridRowDragStart",
        "gridRowDrop",
        "headerClick",
        "headerMenuBeforeShow",
        "headerMenuItem",
        "headerMenuShow",
        "headerMenuToggleItem",
        "hide",
        "lockRows",
        "mouseOut",
        "mouseOver",
        "navigate",
        "paint",
        "paste",
        "pasteNotAllowed",
        "pdfExport",
        "presetChange",
        "readOnly",
        "recompose",
        "releaseEvent",
        "renderEvent",
        "renderRow",
        "renderRows",
        "resize",
        "resourceHeaderClick",
        "resourceHeaderContextmenu",
        "resourceHeaderDblclick",
        "resourceMenuBeforeShow",
        "resourceMenuItem",
        "resourceMenuShow",
        "resourceMenuToggleItem",
        "resourceTimeRangeClick",
        "resourceTimeRangeContextMenu",
        "resourceTimeRangeDblClick",
        "resourceTimeRangeMouseDown",
        "resourceTimeRangeMouseOut",
        "resourceTimeRangeMouseOver",
        "resourceTimeRangeMouseUp",
        "responsive",
        "rowCollapse",
        "rowExpand",
        "rowMouseEnter",
        "rowMouseLeave",
        "scheduleClick",
        "scheduleContextMenu",
        "scheduleDblClick",
        "scheduleMenuBeforeShow",
        "scheduleMenuItem",
        "scheduleMenuShow",
        "scheduleMouseDown",
        "scheduleMouseEnter",
        "scheduleMouseLeave",
        "scheduleMouseMove",
        "scheduleMouseUp",
        "scroll",
        "scrollButtonClick",
        "selectionChange",
        "selectionModeChange",
        "shiftIncrementChange",
        "show",
        "split",
        "splitterCollapseClick",
        "splitterDragEnd",
        "splitterDragStart",
        "splitterExpandClick",
        "startCellEdit",
        "startRowEdit",
        "subGridCollapse",
        "subGridExpand",
        "tickSizeChange",
        "timeAxisChange",
        "timeAxisHeaderClick",
        "timeAxisHeaderContextMenu",
        "timeAxisHeaderDblClick",
        "timeAxisHeaderMenuBeforeShow",
        "timeAxisHeaderMenuItem",
        "timeAxisHeaderMenuShow",
        "timelineContextChange",
        "timelineViewportResize",
        "timeRangeHeaderClick",
        "timeRangeHeaderContextMenu",
        "timeRangeHeaderDblClick",
        "timeSelectionChange",
        "timeSelectionElementClick",
        "toggleGroup",
        "toggleNode",
        "toolClick",
        "unlockRows",
        "unsplit",
        "visibleDateRangeChange"
      ]
    }, o = {}, t = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: r,
        emit: c,
        element: t.value,
        toRaw
      });
      const n = (u, g) => watch(() => e.props[u], g);
      l.watchProps(o.value, r, n);
    }), onBeforeUnmount(() => {
      var e, n;
      (n = (e = o.value) == null ? void 0 : e.destroy) == null || n.call(e);
    }), s({
      instance: o,
      refElement: t,
      teleports: a2
    }), (e, n) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: t
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/B4GkI0MK.js
var F6 = defineComponent({
  __name: "BryntumSchedulerBase",
  props: {
    adopt: {},
    alignSelf: {},
    allowCreate: {},
    allowCreateOnlyParent: {},
    allowDropOnEventBar: {},
    allowOverlap: {},
    animateFilterRemovals: {},
    animateRemovingRows: {},
    animateTreeNodeToggle: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    assignments: {},
    assignmentStore: {},
    autoAdjustTimeAxis: {},
    autoCreate: {},
    autoHeight: {},
    barMargin: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    bufferCoef: {},
    bufferThreshold: {},
    callOnFunctions: {},
    cellEllipsis: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnLines: {},
    columns: {},
    config: {},
    contentElementCls: {},
    contextMenuTriggerEvent: {},
    createEventOnDblClick: {},
    creationTooltip: {},
    creationTooltipTemplate: { type: Function },
    crudManager: {},
    crudManagerClass: {},
    data: {},
    dataset: {},
    date: {},
    dateFormat: {},
    dateSeparator: {},
    defaultRegion: {},
    defaultResourceImageName: {},
    dependencies: {},
    dependencyStore: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    deselectAllOnScheduleClick: {},
    deselectOnClick: {},
    destroyStore: {},
    destroyStores: {},
    disabled: {},
    disableGridColumnIdWarning: {},
    disableGridRowModelWarning: {},
    displayDateFormat: {},
    dock: {},
    drawer: {},
    durationDisplayPrecision: {},
    elementAttributes: {},
    emptyText: {},
    enableDeleteKey: {},
    enableEventAnimations: {},
    enableRecurringEvents: {},
    enableSticky: {},
    enableTextSelection: {},
    enableTransactionalFeatures: {},
    enableUndoRedoKeys: {},
    endDate: {},
    endParamName: {},
    eventBarTextField: {},
    eventColor: {},
    eventLayout: {},
    eventReleaseThreshold: {},
    eventRenderer: { type: Function },
    eventRendererThisObj: {},
    events: {},
    eventSelectionDisabled: {},
    eventStore: {},
    eventStyle: {},
    extraData: {},
    fillLastColumn: {},
    fillTicks: {},
    fixedRowHeight: {},
    flex: {},
    footer: {},
    forceFit: {},
    formulaProviders: {},
    fullRowRefresh: {},
    getDateConstraints: { type: Function },
    getRowHeight: { type: Function },
    header: {},
    height: {},
    hidden: {},
    hideFooters: {},
    hideHeaders: {},
    hideHorizontalScrollbar: {},
    hideRowHover: {},
    highlightPredecessors: {},
    highlightSuccessors: {},
    hoverCls: {},
    id: {},
    ignoreDomEventsWhileScrolling: {},
    ignoreParentReadOnly: {},
    infiniteScroll: {},
    insertBefore: {},
    insertFirst: {},
    isEventSelectable: { type: Function },
    keyMap: {},
    listeners: {},
    listRangeMenu: {},
    loadMask: {},
    loadMaskDefaults: {},
    loadMaskError: {},
    localizable: {},
    longPressTime: {},
    maintainSelectionOnDatasetChange: {},
    managedEventSizing: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxHeight: {},
    maxTimeAxisUnit: {},
    maxWidth: {},
    maxZoomLevel: {},
    milestoneAlign: {},
    milestoneCharWidth: {},
    milestoneLayoutMode: {},
    milestoneTextPosition: {},
    minDate: {},
    minHeight: {},
    minWidth: {},
    minZoomLevel: {},
    mode: {},
    monitorResize: {},
    multiEventSelect: {},
    narrowEventWidth: {},
    overlappingEventSorter: { type: Function },
    owner: {},
    partner: {},
    passStartEndParameters: {},
    plugins: {},
    preCalculateHeightLimit: {},
    preserveFocusOnDatasetChange: {},
    preserveScroll: {},
    preserveScrollOnDatasetChange: {},
    presets: {},
    preventTooltipOnTouch: {},
    project: {},
    range: {},
    readOnly: {},
    recurrenceConfirmationPopup: {},
    relayStoreEvents: {},
    resizable: {},
    resizeToFitIncludesHeader: {},
    resourceColumns: {},
    resourceImageExtension: {},
    resourceImagePath: {},
    resourceMargin: {},
    resources: {},
    resourceStore: {},
    resourceTimeRangeRenderer: { type: Function },
    resourceTimeRanges: {},
    resourceTimeRangeStore: {},
    responsiveLevels: {},
    ripple: {},
    rootElement: {},
    rowHeight: {},
    rowLines: {},
    rtl: {},
    scrollable: {},
    scrollerClass: {},
    scrollExtensionThreshold: {},
    scrollManager: {},
    selectionMode: {},
    selectResourceOnEventNavigate: {},
    selectResourceOnScheduleClick: {},
    shiftIncrement: {},
    showCreationTooltip: {},
    showDirty: {},
    showEventColorPickers: {},
    showLagInTooltip: {},
    showRecurringUI: {},
    showTooltip: {},
    snap: {},
    snapRelativeToEventStartDate: {},
    startDate: {},
    startParamName: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    stateSettings: {},
    stepUnit: {},
    stickyHeaders: {},
    store: {},
    strips: {},
    subGridConfigs: {},
    suppressFit: {},
    syncMask: {},
    tab: {},
    tabBarItems: {},
    tbar: {},
    terminalCls: {},
    terminalHideDelay: {},
    terminalOffset: {},
    terminalShowDelay: {},
    terminalSides: {},
    terminalSize: {},
    tickSize: {},
    timeAxis: {},
    timeRanges: {},
    timeRangeStore: {},
    timeResolution: {},
    timeZone: {},
    title: {},
    tools: {},
    tooltipTemplate: { type: Function },
    transitionDuration: {},
    triggerSelectionChangeOnRemove: {},
    ui: {},
    updateTimelineContextOnScroll: {},
    useContextualRecurrenceRules: {},
    useInitialAnimation: {},
    verticalTimeAxisColumn: {},
    viewPreset: {},
    visibleDate: {},
    visibleZoomFactor: {},
    weekStartDay: {},
    weight: {},
    width: {},
    workingTime: {},
    zoomKeepsOriginalTimespan: {},
    zoomOnMouseWheel: {},
    zoomOnTimeAxisDoubleClick: {},
    cellCopyPasteFeature: {},
    cellEditFeature: {},
    cellMenuFeature: {},
    cellTooltipFeature: {},
    columnAutoWidthFeature: {},
    columnDragToolbarFeature: {},
    columnLinesFeature: {},
    columnPickerFeature: {},
    columnRenameFeature: {},
    columnReorderFeature: {},
    columnResizeFeature: {},
    dependenciesFeature: {},
    dependencyEditFeature: {},
    dependencyMenuFeature: {},
    eventCopyPasteFeature: {},
    eventDragFeature: {},
    eventDragCreateFeature: {},
    eventDragSelectFeature: {},
    eventEditFeature: {},
    eventFilterFeature: {},
    eventMenuFeature: {},
    eventNonWorkingTimeFeature: {},
    eventResizeFeature: {},
    eventTooltipFeature: {},
    excelExporterFeature: {},
    fileDropFeature: {},
    fillHandleFeature: {},
    filterFeature: {},
    filterBarFeature: {},
    groupFeature: {},
    groupSummaryFeature: {},
    headerMenuFeature: {},
    headerZoomFeature: {},
    labelsFeature: {},
    lockRowsFeature: {},
    mergeCellsFeature: {},
    nonWorkingTimeFeature: {},
    panFeature: {},
    pdfExportFeature: {},
    printFeature: {},
    quickFindFeature: {},
    regionResizeFeature: {},
    resourceMenuFeature: {},
    resourceTimeRangesFeature: {},
    rowCopyPasteFeature: {},
    rowEditFeature: {},
    rowExpanderFeature: {},
    rowReorderFeature: {},
    rowResizeFeature: {},
    scheduleContextFeature: {},
    scheduleMenuFeature: {},
    scheduleTooltipFeature: {},
    scrollButtonsFeature: {},
    searchFeature: {},
    simpleEventEditFeature: {},
    sortFeature: {},
    splitFeature: {},
    stickyCellsFeature: {},
    stickyEventsFeature: {},
    stripeFeature: {},
    summaryFeature: {},
    timeAxisHeaderMenuFeature: {},
    timeRangesFeature: {},
    timeSelectionFeature: {},
    treeFeature: {},
    treeGroupFeature: {},
    treeSummaryFeature: {}
  },
  emits: ["afterDependencyCreateDrop", "afterDependencySave", "afterDragCreate", "afterEventDragSelect", "afterEventDrop", "afterEventEdit", "afterEventSave", "assignmentSelectionChange", "beforeAssignmentDelete", "beforeAssignmentSelectionChange", "beforeAutoCreate", "beforeCancelCellEdit", "beforeCancelRowEdit", "beforeCellDelete", "beforeCellEditStart", "beforeColumnDragStart", "beforeColumnDropFinalize", "beforeColumnResize", "beforeCopy", "beforeCSVExport", "beforeDependencyAdd", "beforeDependencyCreateDrag", "beforeDependencyCreateFinalize", "beforeDependencyDelete", "beforeDependencyEdit", "beforeDependencyEditShow", "beforeDependencySave", "beforeDestroy", "beforeDragCreate", "beforeDragCreateFinalize", "beforeEventAdd", "beforeEventDelete", "beforeEventDrag", "beforeEventDragSelect", "beforeEventDropFinalize", "beforeEventEdit", "beforeEventEditShow", "beforeEventResize", "beforeEventResizeFinalize", "beforeEventSave", "beforeEventSelectionChange", "beforeExcelExport", "beforeFillHandleDragStart", "beforeFinishCellEdit", "beforeFinishRowEdit", "beforeHide", "beforePan", "beforePaste", "beforePdfExport", "beforePresetChange", "beforeRenderRow", "beforeRenderRows", "beforeRowCollapse", "beforeRowExpand", "beforeSelectionChange", "beforeSetRecord", "beforeShow", "beforeShowTerminals", "beforeStartRowEdit", "beforeStateApply", "beforeStateSave", "beforeToggleGroup", "beforeToggleNode", "cancelCellEdit", "catchAll", "cellClick", "cellContextMenu", "cellDblClick", "cellMenuBeforeShow", "cellMenuItem", "cellMenuShow", "cellMenuToggleItem", "cellMouseEnter", "cellMouseLeave", "cellMouseOut", "cellMouseOver", "collapse", "collapseNode", "columnDrag", "columnDragStart", "columnDrop", "columnResize", "columnResizeStart", "contextMenuItem", "contextMenuToggleItem", "copy", "currentTimelineUpdate", "dataChange", "dateRangeChange", "dependenciesDrawn", "dependencyClick", "dependencyContextMenu", "dependencyCreateDragStart", "dependencyCreateDrop", "dependencyDblClick", "dependencyMenuBeforeShow", "dependencyMenuItem", "dependencyMenuShow", "dependencyMouseOut", "dependencyMouseOver", "dependencyValidationComplete", "dependencyValidationStart", "destroy", "dirtyStateChange", "dragCreateEnd", "dragCreateStart", "dragSelecting", "eventAutoCreated", "eventClick", "eventContextMenu", "eventDblClick", "eventDrag", "eventDragAbort", "eventDragModeChange", "eventDragReset", "eventDragSelect", "eventDragStart", "eventDrop", "eventEditBeforeSetRecord", "eventKeyDown", "eventKeyUp", "eventMenuBeforeShow", "eventMenuItem", "eventMenuShow", "eventMouseDown", "eventMouseEnter", "eventMouseLeave", "eventMouseOut", "eventMouseOver", "eventMouseUp", "eventPartialResize", "eventResizeEnd", "eventResizeStart", "eventSelectionChange", "expand", "expandNode", "fileDrop", "fillHandleBeforeDragFinalize", "fillHandleDrag", "fillHandleDragAbort", "fillHandleDragEnd", "fillHandleDragStart", "finishCellEdit", "finishRowEdit", "focusIn", "focusOut", "gridRowBeforeDragStart", "gridRowBeforeDropFinalize", "gridRowDrag", "gridRowDragAbort", "gridRowDragStart", "gridRowDrop", "headerClick", "headerMenuBeforeShow", "headerMenuItem", "headerMenuShow", "headerMenuToggleItem", "hide", "lockRows", "mouseOut", "mouseOver", "navigate", "paint", "paste", "pasteNotAllowed", "pdfExport", "presetChange", "readOnly", "recompose", "releaseEvent", "renderEvent", "renderRow", "renderRows", "resize", "resourceHeaderClick", "resourceHeaderContextmenu", "resourceHeaderDblclick", "resourceMenuBeforeShow", "resourceMenuItem", "resourceMenuShow", "resourceMenuToggleItem", "resourceTimeRangeClick", "resourceTimeRangeContextMenu", "resourceTimeRangeDblClick", "resourceTimeRangeMouseDown", "resourceTimeRangeMouseOut", "resourceTimeRangeMouseOver", "resourceTimeRangeMouseUp", "responsive", "rowCollapse", "rowExpand", "rowMouseEnter", "rowMouseLeave", "scheduleClick", "scheduleContextMenu", "scheduleDblClick", "scheduleMenuBeforeShow", "scheduleMenuItem", "scheduleMenuShow", "scheduleMouseDown", "scheduleMouseEnter", "scheduleMouseLeave", "scheduleMouseMove", "scheduleMouseUp", "scroll", "scrollButtonClick", "selectionChange", "selectionModeChange", "shiftIncrementChange", "show", "split", "splitterCollapseClick", "splitterDragEnd", "splitterDragStart", "splitterExpandClick", "startCellEdit", "startRowEdit", "subGridCollapse", "subGridExpand", "tickSizeChange", "timeAxisChange", "timeAxisHeaderClick", "timeAxisHeaderContextMenu", "timeAxisHeaderDblClick", "timeAxisHeaderMenuBeforeShow", "timeAxisHeaderMenuItem", "timeAxisHeaderMenuShow", "timelineContextChange", "timelineViewportResize", "timeRangeHeaderClick", "timeRangeHeaderContextMenu", "timeRangeHeaderDblClick", "timeSelectionChange", "timeSelectionElementClick", "toggleGroup", "toggleNode", "toolClick", "unlockRows", "unsplit", "visibleDateRangeChange"],
  setup(b, { expose: s, emit: d2 }) {
    const c = d2, r = {
      instanceClass: SchedulerBase,
      instanceName: "SchedulerBase",
      configNames: [
        "adopt",
        "allowCreate",
        "allowCreateOnlyParent",
        "animateFilterRemovals",
        "animateRemovingRows",
        "animateTreeNodeToggle",
        "ariaDescription",
        "ariaLabel",
        "autoAdjustTimeAxis",
        "autoHeight",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "bufferCoef",
        "bufferThreshold",
        "callOnFunctions",
        "collapsible",
        "config",
        "contentElementCls",
        "contextMenuTriggerEvent",
        "createEventOnDblClick",
        "creationTooltip",
        "crudManagerClass",
        "defaultRegion",
        "defaultResourceImageName",
        "descriptionRenderer",
        "deselectAllOnScheduleClick",
        "deselectOnClick",
        "destroyStore",
        "destroyStores",
        "disableGridColumnIdWarning",
        "disableGridRowModelWarning",
        "dock",
        "drawer",
        "durationDisplayPrecision",
        "elementAttributes",
        "enableDeleteKey",
        "enableRecurringEvents",
        "enableSticky",
        "enableTextSelection",
        "enableTransactionalFeatures",
        "endParamName",
        "eventBarTextField",
        "eventRenderer",
        "eventRendererThisObj",
        "eventSelectionDisabled",
        "fillLastColumn",
        "fixedRowHeight",
        "footer",
        "formulaProviders",
        "fullRowRefresh",
        "getDateConstraints",
        "getRowHeight",
        "header",
        "hideHorizontalScrollbar",
        "highlightPredecessors",
        "highlightSuccessors",
        "hoverCls",
        "ignoreDomEventsWhileScrolling",
        "ignoreParentReadOnly",
        "listeners",
        "listRangeMenu",
        "loadMask",
        "loadMaskDefaults",
        "loadMaskError",
        "localizable",
        "maintainSelectionOnDatasetChange",
        "managedEventSizing",
        "maskDefaults",
        "masked",
        "maxDate",
        "maxTimeAxisUnit",
        "minDate",
        "mode",
        "monitorResize",
        "multiEventSelect",
        "narrowEventWidth",
        "owner",
        "partner",
        "passStartEndParameters",
        "plugins",
        "preCalculateHeightLimit",
        "preserveFocusOnDatasetChange",
        "preserveScrollOnDatasetChange",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resizable",
        "resizeToFitIncludesHeader",
        "resourceColumns",
        "resourceImageExtension",
        "resourceImagePath",
        "resourceTimeRangeRenderer",
        "responsiveLevels",
        "ripple",
        "rootElement",
        "scrollerClass",
        "scrollExtensionThreshold",
        "scrollManager",
        "showCreationTooltip",
        "showDirty",
        "showEventColorPickers",
        "showLagInTooltip",
        "showRecurringUI",
        "snapRelativeToEventStartDate",
        "startParamName",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "stepUnit",
        "stickyHeaders",
        "strips",
        "subGridConfigs",
        "syncMask",
        "tab",
        "tabBarItems",
        "tbar",
        "terminalCls",
        "terminalSides",
        "timeAxis",
        "triggerSelectionChangeOnRemove",
        "ui",
        "verticalTimeAxisColumn",
        "visibleZoomFactor",
        "weekStartDay",
        "weight",
        "zoomKeepsOriginalTimespan",
        "zoomOnMouseWheel",
        "zoomOnTimeAxisDoubleClick"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDropOnEventBar",
        "allowOverlap",
        "appendTo",
        "ariaLive",
        "assignments",
        "assignmentStore",
        "autoCreate",
        "barMargin",
        "cellEllipsis",
        "cls",
        "collapsed",
        "columnLines",
        "columns",
        "creationTooltipTemplate",
        "crudManager",
        "data",
        "dataset",
        "date",
        "dateFormat",
        "dateSeparator",
        "dependencies",
        "dependencyStore",
        "descriptionFormat",
        "disabled",
        "displayDateFormat",
        "emptyText",
        "enableEventAnimations",
        "enableUndoRedoKeys",
        "endDate",
        "eventColor",
        "eventLayout",
        "eventReleaseThreshold",
        "events",
        "eventStore",
        "eventStyle",
        "extraData",
        "fillTicks",
        "flex",
        "forceFit",
        "height",
        "hidden",
        "hideFooters",
        "hideHeaders",
        "hideRowHover",
        "id",
        "infiniteScroll",
        "insertBefore",
        "insertFirst",
        "isEventSelectable",
        "keyMap",
        "longPressTime",
        "margin",
        "maxHeight",
        "maxWidth",
        "maxZoomLevel",
        "milestoneAlign",
        "milestoneCharWidth",
        "milestoneLayoutMode",
        "milestoneTextPosition",
        "minHeight",
        "minWidth",
        "minZoomLevel",
        "onAfterDependencyCreateDrop",
        "onAfterDependencySave",
        "onAfterDragCreate",
        "onAfterEventDragSelect",
        "onAfterEventDrop",
        "onAfterEventEdit",
        "onAfterEventSave",
        "onAssignmentSelectionChange",
        "onBeforeAssignmentDelete",
        "onBeforeAssignmentSelectionChange",
        "onBeforeAutoCreate",
        "onBeforeCancelCellEdit",
        "onBeforeCancelRowEdit",
        "onBeforeCellDelete",
        "onBeforeCellEditStart",
        "onBeforeColumnDragStart",
        "onBeforeColumnDropFinalize",
        "onBeforeColumnResize",
        "onBeforeCopy",
        "onBeforeCSVExport",
        "onBeforeDependencyAdd",
        "onBeforeDependencyCreateDrag",
        "onBeforeDependencyCreateFinalize",
        "onBeforeDependencyDelete",
        "onBeforeDependencyEdit",
        "onBeforeDependencyEditShow",
        "onBeforeDependencySave",
        "onBeforeDestroy",
        "onBeforeDragCreate",
        "onBeforeDragCreateFinalize",
        "onBeforeEventAdd",
        "onBeforeEventDelete",
        "onBeforeEventDrag",
        "onBeforeEventDragSelect",
        "onBeforeEventDropFinalize",
        "onBeforeEventEdit",
        "onBeforeEventEditShow",
        "onBeforeEventResize",
        "onBeforeEventResizeFinalize",
        "onBeforeEventSave",
        "onBeforeEventSelectionChange",
        "onBeforeExcelExport",
        "onBeforeFillHandleDragStart",
        "onBeforeFinishCellEdit",
        "onBeforeFinishRowEdit",
        "onBeforeHide",
        "onBeforePan",
        "onBeforePaste",
        "onBeforePdfExport",
        "onBeforePresetChange",
        "onBeforeRenderRow",
        "onBeforeRenderRows",
        "onBeforeRowCollapse",
        "onBeforeRowExpand",
        "onBeforeSelectionChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeShowTerminals",
        "onBeforeStartRowEdit",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onBeforeToggleGroup",
        "onBeforeToggleNode",
        "onCancelCellEdit",
        "onCatchAll",
        "onCellClick",
        "onCellContextMenu",
        "onCellDblClick",
        "onCellMenuBeforeShow",
        "onCellMenuItem",
        "onCellMenuShow",
        "onCellMenuToggleItem",
        "onCellMouseEnter",
        "onCellMouseLeave",
        "onCellMouseOut",
        "onCellMouseOver",
        "onCollapse",
        "onCollapseNode",
        "onColumnDrag",
        "onColumnDragStart",
        "onColumnDrop",
        "onColumnResize",
        "onColumnResizeStart",
        "onContextMenuItem",
        "onContextMenuToggleItem",
        "onCopy",
        "onCurrentTimelineUpdate",
        "onDataChange",
        "onDateRangeChange",
        "onDependenciesDrawn",
        "onDependencyClick",
        "onDependencyContextMenu",
        "onDependencyCreateDragStart",
        "onDependencyCreateDrop",
        "onDependencyDblClick",
        "onDependencyMenuBeforeShow",
        "onDependencyMenuItem",
        "onDependencyMenuShow",
        "onDependencyMouseOut",
        "onDependencyMouseOver",
        "onDependencyValidationComplete",
        "onDependencyValidationStart",
        "onDestroy",
        "onDirtyStateChange",
        "onDragCreateEnd",
        "onDragCreateStart",
        "onDragSelecting",
        "onEventAutoCreated",
        "onEventClick",
        "onEventContextMenu",
        "onEventDblClick",
        "onEventDrag",
        "onEventDragAbort",
        "onEventDragModeChange",
        "onEventDragReset",
        "onEventDragSelect",
        "onEventDragStart",
        "onEventDrop",
        "onEventEditBeforeSetRecord",
        "onEventKeyDown",
        "onEventKeyUp",
        "onEventMenuBeforeShow",
        "onEventMenuItem",
        "onEventMenuShow",
        "onEventMouseDown",
        "onEventMouseEnter",
        "onEventMouseLeave",
        "onEventMouseOut",
        "onEventMouseOver",
        "onEventMouseUp",
        "onEventPartialResize",
        "onEventResizeEnd",
        "onEventResizeStart",
        "onEventSelectionChange",
        "onExpand",
        "onExpandNode",
        "onFileDrop",
        "onFillHandleBeforeDragFinalize",
        "onFillHandleDrag",
        "onFillHandleDragAbort",
        "onFillHandleDragEnd",
        "onFillHandleDragStart",
        "onFinishCellEdit",
        "onFinishRowEdit",
        "onFocusIn",
        "onFocusOut",
        "onGridRowBeforeDragStart",
        "onGridRowBeforeDropFinalize",
        "onGridRowDrag",
        "onGridRowDragAbort",
        "onGridRowDragStart",
        "onGridRowDrop",
        "onHeaderClick",
        "onHeaderMenuBeforeShow",
        "onHeaderMenuItem",
        "onHeaderMenuShow",
        "onHeaderMenuToggleItem",
        "onHide",
        "onLockRows",
        "onMouseOut",
        "onMouseOver",
        "onNavigate",
        "onPaint",
        "onPaste",
        "onPasteNotAllowed",
        "onPdfExport",
        "onPresetChange",
        "onReadOnly",
        "onRecompose",
        "onReleaseEvent",
        "onRenderEvent",
        "onRenderRow",
        "onRenderRows",
        "onResize",
        "onResourceHeaderClick",
        "onResourceHeaderContextmenu",
        "onResourceHeaderDblclick",
        "onResourceMenuBeforeShow",
        "onResourceMenuItem",
        "onResourceMenuShow",
        "onResourceMenuToggleItem",
        "onResourceTimeRangeClick",
        "onResourceTimeRangeContextMenu",
        "onResourceTimeRangeDblClick",
        "onResourceTimeRangeMouseDown",
        "onResourceTimeRangeMouseOut",
        "onResourceTimeRangeMouseOver",
        "onResourceTimeRangeMouseUp",
        "onResponsive",
        "onRowCollapse",
        "onRowExpand",
        "onRowMouseEnter",
        "onRowMouseLeave",
        "onScheduleClick",
        "onScheduleContextMenu",
        "onScheduleDblClick",
        "onScheduleMenuBeforeShow",
        "onScheduleMenuItem",
        "onScheduleMenuShow",
        "onScheduleMouseDown",
        "onScheduleMouseEnter",
        "onScheduleMouseLeave",
        "onScheduleMouseMove",
        "onScheduleMouseUp",
        "onScroll",
        "onScrollButtonClick",
        "onSelectionChange",
        "onSelectionModeChange",
        "onShiftIncrementChange",
        "onShow",
        "onSplit",
        "onSplitterCollapseClick",
        "onSplitterDragEnd",
        "onSplitterDragStart",
        "onSplitterExpandClick",
        "onStartCellEdit",
        "onStartRowEdit",
        "onSubGridCollapse",
        "onSubGridExpand",
        "onTickSizeChange",
        "onTimeAxisChange",
        "onTimeAxisHeaderClick",
        "onTimeAxisHeaderContextMenu",
        "onTimeAxisHeaderDblClick",
        "onTimeAxisHeaderMenuBeforeShow",
        "onTimeAxisHeaderMenuItem",
        "onTimeAxisHeaderMenuShow",
        "onTimelineContextChange",
        "onTimelineViewportResize",
        "onTimeRangeHeaderClick",
        "onTimeRangeHeaderContextMenu",
        "onTimeRangeHeaderDblClick",
        "onTimeSelectionChange",
        "onTimeSelectionElementClick",
        "onToggleGroup",
        "onToggleNode",
        "onToolClick",
        "onUnlockRows",
        "onUnsplit",
        "onVisibleDateRangeChange",
        "overlappingEventSorter",
        "preserveScroll",
        "presets",
        "project",
        "range",
        "readOnly",
        "recurrenceConfirmationPopup",
        "resourceMargin",
        "resources",
        "resourceStore",
        "resourceTimeRanges",
        "resourceTimeRangeStore",
        "rowHeight",
        "rowLines",
        "rtl",
        "scrollable",
        "selectionMode",
        "selectResourceOnEventNavigate",
        "selectResourceOnScheduleClick",
        "shiftIncrement",
        "showTooltip",
        "snap",
        "startDate",
        "stateSettings",
        "store",
        "suppressFit",
        "terminalHideDelay",
        "terminalOffset",
        "terminalShowDelay",
        "terminalSize",
        "tickSize",
        "timeRanges",
        "timeRangeStore",
        "timeResolution",
        "timeZone",
        "title",
        "tools",
        "tooltipTemplate",
        "transitionDuration",
        "updateTimelineContextOnScroll",
        "useContextualRecurrenceRules",
        "useInitialAnimation",
        "viewPreset",
        "visibleDate",
        "width",
        "workingTime"
      ],
      propertyNames: [
        "focusVisible",
        "hasChanges",
        "isEngineReady",
        "originalStore",
        "parent",
        "scrollLeft",
        "scrollTop",
        "scrollX",
        "selectedAssignments",
        "selectedCell",
        "selectedCells",
        "selectedEvents",
        "selectedRecord",
        "selectedRecords",
        "selectedRows",
        "state",
        "tooltip",
        "zoomLevel"
      ],
      eventNames: [
        "afterDependencyCreateDrop",
        "afterDependencySave",
        "afterDragCreate",
        "afterEventDragSelect",
        "afterEventDrop",
        "afterEventEdit",
        "afterEventSave",
        "assignmentSelectionChange",
        "beforeAssignmentDelete",
        "beforeAssignmentSelectionChange",
        "beforeAutoCreate",
        "beforeCancelCellEdit",
        "beforeCancelRowEdit",
        "beforeCellDelete",
        "beforeCellEditStart",
        "beforeColumnDragStart",
        "beforeColumnDropFinalize",
        "beforeColumnResize",
        "beforeCopy",
        "beforeCSVExport",
        "beforeDependencyAdd",
        "beforeDependencyCreateDrag",
        "beforeDependencyCreateFinalize",
        "beforeDependencyDelete",
        "beforeDependencyEdit",
        "beforeDependencyEditShow",
        "beforeDependencySave",
        "beforeDestroy",
        "beforeDragCreate",
        "beforeDragCreateFinalize",
        "beforeEventAdd",
        "beforeEventDelete",
        "beforeEventDrag",
        "beforeEventDragSelect",
        "beforeEventDropFinalize",
        "beforeEventEdit",
        "beforeEventEditShow",
        "beforeEventResize",
        "beforeEventResizeFinalize",
        "beforeEventSave",
        "beforeEventSelectionChange",
        "beforeExcelExport",
        "beforeFillHandleDragStart",
        "beforeFinishCellEdit",
        "beforeFinishRowEdit",
        "beforeHide",
        "beforePan",
        "beforePaste",
        "beforePdfExport",
        "beforePresetChange",
        "beforeRenderRow",
        "beforeRenderRows",
        "beforeRowCollapse",
        "beforeRowExpand",
        "beforeSelectionChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeShowTerminals",
        "beforeStartRowEdit",
        "beforeStateApply",
        "beforeStateSave",
        "beforeToggleGroup",
        "beforeToggleNode",
        "cancelCellEdit",
        "catchAll",
        "cellClick",
        "cellContextMenu",
        "cellDblClick",
        "cellMenuBeforeShow",
        "cellMenuItem",
        "cellMenuShow",
        "cellMenuToggleItem",
        "cellMouseEnter",
        "cellMouseLeave",
        "cellMouseOut",
        "cellMouseOver",
        "collapse",
        "collapseNode",
        "columnDrag",
        "columnDragStart",
        "columnDrop",
        "columnResize",
        "columnResizeStart",
        "contextMenuItem",
        "contextMenuToggleItem",
        "copy",
        "currentTimelineUpdate",
        "dataChange",
        "dateRangeChange",
        "dependenciesDrawn",
        "dependencyClick",
        "dependencyContextMenu",
        "dependencyCreateDragStart",
        "dependencyCreateDrop",
        "dependencyDblClick",
        "dependencyMenuBeforeShow",
        "dependencyMenuItem",
        "dependencyMenuShow",
        "dependencyMouseOut",
        "dependencyMouseOver",
        "dependencyValidationComplete",
        "dependencyValidationStart",
        "destroy",
        "dirtyStateChange",
        "dragCreateEnd",
        "dragCreateStart",
        "dragSelecting",
        "eventAutoCreated",
        "eventClick",
        "eventContextMenu",
        "eventDblClick",
        "eventDrag",
        "eventDragAbort",
        "eventDragModeChange",
        "eventDragReset",
        "eventDragSelect",
        "eventDragStart",
        "eventDrop",
        "eventEditBeforeSetRecord",
        "eventKeyDown",
        "eventKeyUp",
        "eventMenuBeforeShow",
        "eventMenuItem",
        "eventMenuShow",
        "eventMouseDown",
        "eventMouseEnter",
        "eventMouseLeave",
        "eventMouseOut",
        "eventMouseOver",
        "eventMouseUp",
        "eventPartialResize",
        "eventResizeEnd",
        "eventResizeStart",
        "eventSelectionChange",
        "expand",
        "expandNode",
        "fileDrop",
        "fillHandleBeforeDragFinalize",
        "fillHandleDrag",
        "fillHandleDragAbort",
        "fillHandleDragEnd",
        "fillHandleDragStart",
        "finishCellEdit",
        "finishRowEdit",
        "focusIn",
        "focusOut",
        "gridRowBeforeDragStart",
        "gridRowBeforeDropFinalize",
        "gridRowDrag",
        "gridRowDragAbort",
        "gridRowDragStart",
        "gridRowDrop",
        "headerClick",
        "headerMenuBeforeShow",
        "headerMenuItem",
        "headerMenuShow",
        "headerMenuToggleItem",
        "hide",
        "lockRows",
        "mouseOut",
        "mouseOver",
        "navigate",
        "paint",
        "paste",
        "pasteNotAllowed",
        "pdfExport",
        "presetChange",
        "readOnly",
        "recompose",
        "releaseEvent",
        "renderEvent",
        "renderRow",
        "renderRows",
        "resize",
        "resourceHeaderClick",
        "resourceHeaderContextmenu",
        "resourceHeaderDblclick",
        "resourceMenuBeforeShow",
        "resourceMenuItem",
        "resourceMenuShow",
        "resourceMenuToggleItem",
        "resourceTimeRangeClick",
        "resourceTimeRangeContextMenu",
        "resourceTimeRangeDblClick",
        "resourceTimeRangeMouseDown",
        "resourceTimeRangeMouseOut",
        "resourceTimeRangeMouseOver",
        "resourceTimeRangeMouseUp",
        "responsive",
        "rowCollapse",
        "rowExpand",
        "rowMouseEnter",
        "rowMouseLeave",
        "scheduleClick",
        "scheduleContextMenu",
        "scheduleDblClick",
        "scheduleMenuBeforeShow",
        "scheduleMenuItem",
        "scheduleMenuShow",
        "scheduleMouseDown",
        "scheduleMouseEnter",
        "scheduleMouseLeave",
        "scheduleMouseMove",
        "scheduleMouseUp",
        "scroll",
        "scrollButtonClick",
        "selectionChange",
        "selectionModeChange",
        "shiftIncrementChange",
        "show",
        "split",
        "splitterCollapseClick",
        "splitterDragEnd",
        "splitterDragStart",
        "splitterExpandClick",
        "startCellEdit",
        "startRowEdit",
        "subGridCollapse",
        "subGridExpand",
        "tickSizeChange",
        "timeAxisChange",
        "timeAxisHeaderClick",
        "timeAxisHeaderContextMenu",
        "timeAxisHeaderDblClick",
        "timeAxisHeaderMenuBeforeShow",
        "timeAxisHeaderMenuItem",
        "timeAxisHeaderMenuShow",
        "timelineContextChange",
        "timelineViewportResize",
        "timeRangeHeaderClick",
        "timeRangeHeaderContextMenu",
        "timeRangeHeaderDblClick",
        "timeSelectionChange",
        "timeSelectionElementClick",
        "toggleGroup",
        "toggleNode",
        "toolClick",
        "unlockRows",
        "unsplit",
        "visibleDateRangeChange"
      ]
    }, o = {}, t = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: r,
        emit: c,
        element: t.value,
        toRaw
      });
      const n = (u, g) => watch(() => e.props[u], g);
      l.watchProps(o.value, r, n);
    }), onBeforeUnmount(() => {
      var e, n;
      (n = (e = o.value) == null ? void 0 : e.destroy) == null || n.call(e);
    }), s({
      instance: o,
      refElement: t,
      teleports: a2
    }), (e, n) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: t
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/D0h5veOL.js
var W2 = defineComponent({
  __name: "BryntumSchedulerDatePicker",
  props: {
    activeDate: {},
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cellRenderer: { type: [Function, String] },
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    date: {},
    dayNameFormat: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    disabledCls: {},
    disabledDates: { type: [Function, String, Array] },
    disableNonWorkingDays: {},
    disableOtherMonthCells: {},
    disableWeekends: {},
    dock: {},
    draggable: {},
    drawer: {},
    editMonth: {},
    elementAttributes: {},
    eventFilter: { type: [Function, String] },
    eventStore: {},
    extraData: {},
    flex: {},
    floating: {},
    focusDisabledDates: {},
    footer: {},
    header: {},
    headerRenderer: { type: [Function, String] },
    height: {},
    hidden: {},
    hideAnimation: {},
    hideOtherMonthCells: {},
    hideWhenEmpty: {},
    highlightSelectedWeek: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    includeYear: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minColumnWidth: {},
    minDate: {},
    minHeight: {},
    minRowHeight: {},
    minWidth: {},
    monitorResize: {},
    month: {},
    multiSelect: {},
    namedItems: {},
    nonWorkingDayCls: {},
    nonWorkingDays: {},
    otherMonthCls: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selection: {},
    showAnimation: {},
    showEvents: {},
    showTooltipWhenDisabled: {},
    showWeekColumn: {},
    sixWeeks: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    tip: {},
    title: {},
    todayCls: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weekendCls: {},
    weekRenderer: { type: [Function, String] },
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeRefresh", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "dateChange", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "refresh", "resize", "selectionChange", "show", "toolClick"],
  setup(w3, { expose: s, emit: d2 }) {
    const c = d2, a2 = {
      instanceClass: SchedulerDatePicker,
      instanceName: "SchedulerDatePicker",
      configNames: [
        "activeDate",
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "cellRenderer",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "dayNameFormat",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "disabledCls",
        "disabledDates",
        "disableNonWorkingDays",
        "disableOtherMonthCells",
        "disableWeekends",
        "dock",
        "draggable",
        "drawer",
        "editMonth",
        "elementAttributes",
        "eventFilter",
        "eventStore",
        "floating",
        "focusDisabledDates",
        "footer",
        "header",
        "headerRenderer",
        "hideAnimation",
        "hideOtherMonthCells",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "includeYear",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxDate",
        "minColumnWidth",
        "minDate",
        "minRowHeight",
        "monitorResize",
        "month",
        "multiSelect",
        "namedItems",
        "nonWorkingDayCls",
        "nonWorkingDays",
        "otherMonthCls",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showEvents",
        "showTooltipWhenDisabled",
        "showWeekColumn",
        "sixWeeks",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "tip",
        "todayCls",
        "trapFocus",
        "type",
        "ui",
        "weekendCls",
        "weekRenderer",
        "weekStartDay",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "date",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "highlightSelectedWeek",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeRefresh",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDateChange",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onSelectionChange",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "selection",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeRefresh",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "dateChange",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "selectionChange",
        "show",
        "toolClick"
      ]
    }, o = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: c,
        element: n.value,
        toRaw
      });
      const t = (h, m) => watch(() => e.props[h], m);
      l.watchProps(o.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DSNZLJ-_.js
var z3 = defineComponent({
  __name: "BryntumSlider",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    label: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    max: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    min: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltip: {},
    showTooltipWhenDisabled: {},
    showValue: {},
    step: {},
    tab: {},
    tag: {},
    text: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggerChangeOnInput: {},
    type: {},
    ui: {},
    unit: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show"],
  setup(A6, { expose: s, emit: c }) {
    const p = c, i = {
      instanceClass: Slider,
      instanceName: "Slider",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "htmlCls",
        "ignoreParentReadOnly",
        "label",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltip",
        "showTooltipWhenDisabled",
        "showValue",
        "tab",
        "tag",
        "textAlign",
        "title",
        "type",
        "ui",
        "unit",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "margin",
        "max",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "min",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "rtl",
        "scrollable",
        "step",
        "text",
        "tooltip",
        "triggerChangeOnInput",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "parent"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: i,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (d2, m) => watch(() => e.props[d2], m);
      l.watchProps(o.value, i, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/C-KTd5bE.js
var T7 = defineComponent({
  __name: "BryntumSlideToggle",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCollapse: { type: Function },
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    checked: {},
    checkedValue: {},
    cls: {},
    color: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    text: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    uncheckedValue: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeChange", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "click", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(v4, { expose: s, emit: c }) {
    const p = c, o = {
      instanceClass: SlideToggle,
      instanceName: "SlideToggle",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoCollapse",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "checkedValue",
        "color",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "text",
        "textAlign",
        "title",
        "type",
        "ui",
        "uncheckedValue",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "checked",
        "cls",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "name",
        "onAction",
        "onBeforeChange",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onClick",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "editable",
        "focusVisible",
        "html",
        "input",
        "parent",
        "placeholder",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeChange",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "click",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: o,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, o, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/D_3Jijuz.js
var k = defineComponent({
  __name: "BryntumSplitter",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    orientation: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    tab: {},
    tag: {},
    textAlign: {},
    title: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeShow", "catchAll", "destroy", "drag", "dragStart", "drop", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(S9, { expose: s, emit: c }) {
    const p = c, i = {
      instanceClass: Splitter,
      instanceName: "Splitter",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "htmlCls",
        "ignoreParentReadOnly",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "orientation",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tag",
        "textAlign",
        "title",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onDrag",
        "onDragStart",
        "onDrop",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "rtl",
        "scrollable",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "parent"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "destroy",
        "drag",
        "dragStart",
        "drop",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: i,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (d2, m) => watch(() => e.props[d2], m);
      l.watchProps(o.value, i, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/DFWND0e_.js
var E6 = defineComponent({
  __name: "BryntumTabPanel",
  props: {
    activeTab: {},
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    animateTabChange: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoHeight: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    footer: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBar: {},
    tabBarItems: {},
    tabMaxWidth: {},
    tabMinWidth: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "beforeTabChange", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "tabChange", "toolClick"],
  setup(x3, { expose: s, emit: c }) {
    const d2 = c, n = {
      instanceClass: TabPanel,
      instanceName: "TabPanel",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "animateTabChange",
        "ariaDescription",
        "ariaLabel",
        "autoHeight",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "floating",
        "footer",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBar",
        "tabBarItems",
        "tabMaxWidth",
        "tabMinWidth",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "activeTab",
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onBeforeTabChange",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTabChange",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "beforeTabChange",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "tabChange",
        "toolClick"
      ]
    }, a2 = {}, o = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      a2.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: d2,
        element: o.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(a2.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = a2.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: a2,
      refElement: o,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: o
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/Bn_H-KIk.js
var S7 = defineComponent({
  __name: "BryntumTextAreaField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    resize: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(C, { expose: s, emit: c }) {
    const p = c, o = {
      instanceClass: TextAreaField,
      instanceName: "TextAreaField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "name",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resize",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: o,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, o, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/D8stjqVb.js
var T8 = defineComponent({
  __name: "BryntumTextAreaPickerField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    picker: {},
    pickerAlignElement: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    resize: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(v4, { expose: s, emit: c }) {
    const p = c, a2 = {
      instanceClass: TextAreaPickerField,
      instanceName: "TextAreaPickerField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "dataField",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minLength",
        "monitorResize",
        "name",
        "owner",
        "picker",
        "pickerAlignElement",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resize",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "editable",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), o = ref(/* @__PURE__ */ new Map());
    return provide("teleports", o), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: o
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/Dem5-ckz.js
var S8 = defineComponent({
  __name: "BryntumTextField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(O6, { expose: s, emit: c }) {
    const p = c, a2 = {
      instanceClass: TextField,
      instanceName: "TextField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "dataField",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minLength",
        "monitorResize",
        "name",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), o = ref(/* @__PURE__ */ new Map());
    return provide("teleports", o), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: p,
        element: i.value,
        toRaw
      });
      const t = (d2, h) => watch(() => e.props[d2], h);
      l.watchProps(n.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: o
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/anXiA-wZ.js
var E7 = defineComponent({
  __name: "BryntumTimeField",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearable: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    format: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keepDate: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    max: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    min: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    owner: {},
    picker: {},
    pickerAlignElement: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    step: {},
    stepTriggers: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggers: {},
    type: {},
    ui: {},
    validateOnInput: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "show", "trigger"],
  setup(C, { expose: s, emit: p }) {
    const c = p, a2 = {
      instanceClass: TimeField,
      instanceName: "TimeField",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearable",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "dataField",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "keyStrokeChangeDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minLength",
        "monitorResize",
        "name",
        "owner",
        "picker",
        "pickerAlignElement",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "stepTriggers",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "type",
        "ui",
        "validateOnInput",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "format",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keepDate",
        "keyMap",
        "label",
        "margin",
        "max",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "min",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTrigger",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "step",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "trigger"
      ]
    }, n = {}, i = ref(), o = ref(/* @__PURE__ */ new Map());
    return provide("teleports", o), onMounted(() => {
      const e = getCurrentInstance();
      n.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: c,
        element: i.value,
        toRaw
      });
      const t = (d2, m) => watch(() => e.props[d2], m);
      l.watchProps(n.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: n,
      refElement: i,
      teleports: o
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CSUHdc3F.js
var k2 = {
  ref: "teleportsHolder",
  style: { display: "none" }
};
var P3 = defineComponent({
  __name: "BryntumTimelineHistogram",
  props: {
    adopt: {},
    aggregateDataEntry: { type: [Function, String] },
    aggregateHistogramDataForGroups: {},
    alignSelf: {},
    animateFilterRemovals: {},
    animateRemovingRows: {},
    animateTreeNodeToggle: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoAdjustTimeAxis: {},
    autoHeight: {},
    barMargin: {},
    barTooltipTemplate: { type: Function },
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    bufferCoef: {},
    bufferThreshold: {},
    callOnFunctions: {},
    cellEllipsis: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnLines: {},
    columns: {},
    config: {},
    contentElementCls: {},
    contextMenuTriggerEvent: {},
    data: {},
    dataModelField: {},
    dataset: {},
    defaultRegion: {},
    destroyStore: {},
    disabled: {},
    disableGridColumnIdWarning: {},
    disableGridRowModelWarning: {},
    displayDateFormat: {},
    dock: {},
    drawer: {},
    durationDisplayPrecision: {},
    elementAttributes: {},
    emptyText: {},
    enableEventAnimations: {},
    enableRecurringEvents: {},
    enableSticky: {},
    enableTextSelection: {},
    enableUndoRedoKeys: {},
    endDate: {},
    eventColor: {},
    eventStyle: {},
    extraData: {},
    fillLastColumn: {},
    fillTicks: {},
    fixedRowHeight: {},
    flex: {},
    footer: {},
    forceFit: {},
    formulaProviders: {},
    fullRowRefresh: {},
    getBarClass: { type: Function },
    getBarDOMConfig: { type: Function },
    getBarText: { type: Function },
    getBarTextDOMConfig: { type: Function },
    getDataEntryForAggregating: { type: [Function, String] },
    getOutlineClass: { type: Function },
    getOutlineDOMConfig: { type: Function },
    getRecordData: { type: [Function, String] },
    getRowHeight: { type: Function },
    hardRefreshOnTimeAxisReconfigure: {},
    header: {},
    height: {},
    hidden: {},
    hideFooters: {},
    hideHeaders: {},
    hideHorizontalScrollbar: {},
    hideRowHover: {},
    histogramWidget: {},
    histogramWidgetClass: {},
    hoverCls: {},
    id: {},
    ignoreDomEventsWhileScrolling: {},
    ignoreParentReadOnly: {},
    infiniteScroll: {},
    initAggregatedDataEntry: { type: [Function, String] },
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    listeners: {},
    loadMask: {},
    loadMaskDefaults: {},
    loadMaskError: {},
    localizable: {},
    longPressTime: {},
    managedEventSizing: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxHeight: {},
    maxTimeAxisUnit: {},
    maxWidth: {},
    maxZoomLevel: {},
    minDate: {},
    minHeight: {},
    minWidth: {},
    minZoomLevel: {},
    monitorResize: {},
    owner: {},
    partner: {},
    plugins: {},
    preserveFocusOnDatasetChange: {},
    preserveScroll: {},
    preserveScrollOnDatasetChange: {},
    presets: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    recurrenceConfirmationPopup: {},
    relayStoreEvents: {},
    resizable: {},
    resizeToFitIncludesHeader: {},
    resourceTimeRangeRenderer: { type: Function },
    responsiveLevels: {},
    ripple: {},
    rootElement: {},
    rowHeight: {},
    rowLines: {},
    rtl: {},
    scaleColumn: {},
    scalePoints: {},
    scrollable: {},
    scrollerClass: {},
    scrollManager: {},
    selectionMode: {},
    series: {},
    showBarTip: {},
    showDirty: {},
    snap: {},
    snapRelativeToEventStartDate: {},
    startDate: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    stateSettings: {},
    stickyHeaders: {},
    store: {},
    strips: {},
    subGridConfigs: {},
    suppressFit: {},
    syncMask: {},
    tab: {},
    tabBarItems: {},
    tbar: {},
    tickSize: {},
    timeAxis: {},
    timeResolution: {},
    timeZone: {},
    title: {},
    tools: {},
    transitionDuration: {},
    type: {},
    ui: {},
    viewPreset: {},
    visibleDate: {},
    visibleZoomFactor: {},
    weekStartDay: {},
    weight: {},
    width: {},
    workingTime: {},
    zoomKeepsOriginalTimespan: {},
    zoomOnMouseWheel: {},
    zoomOnTimeAxisDoubleClick: {},
    cellCopyPasteFeature: {},
    cellEditFeature: {},
    cellMenuFeature: {},
    cellTooltipFeature: {},
    columnAutoWidthFeature: {},
    columnDragToolbarFeature: {},
    columnLinesFeature: {},
    columnPickerFeature: {},
    columnRenameFeature: {},
    columnReorderFeature: {},
    columnResizeFeature: {},
    excelExporterFeature: {},
    fileDropFeature: {},
    fillHandleFeature: {},
    filterFeature: {},
    filterBarFeature: {},
    groupFeature: {},
    groupSummaryFeature: {},
    headerMenuFeature: {},
    headerZoomFeature: {},
    lockRowsFeature: {},
    mergeCellsFeature: {},
    nonWorkingTimeFeature: {},
    panFeature: {},
    pdfExportFeature: {},
    printFeature: {},
    quickFindFeature: {},
    regionResizeFeature: {},
    resourceMenuFeature: {},
    resourceTimeRangesFeature: {},
    rowCopyPasteFeature: {},
    rowEditFeature: {},
    rowExpanderFeature: {},
    rowReorderFeature: {},
    rowResizeFeature: {},
    scheduleTooltipFeature: {},
    searchFeature: {},
    sortFeature: {},
    splitFeature: {},
    stickyCellsFeature: {},
    stripeFeature: {},
    summaryFeature: {},
    timeAxisHeaderMenuFeature: {},
    timeRangesFeature: {},
    treeFeature: {},
    treeGroupFeature: {}
  },
  emits: ["beforeAssignmentDelete", "beforeCancelCellEdit", "beforeCancelRowEdit", "beforeCellDelete", "beforeCellEditStart", "beforeColumnDragStart", "beforeColumnDropFinalize", "beforeColumnResize", "beforeCopy", "beforeCSVExport", "beforeDestroy", "beforeEventDelete", "beforeExcelExport", "beforeFillHandleDragStart", "beforeFinishCellEdit", "beforeFinishRowEdit", "beforeHide", "beforeHistogramDataCacheSet", "beforePan", "beforePaste", "beforePdfExport", "beforePresetChange", "beforeRenderHistogramRow", "beforeRenderRecordHistogram", "beforeRenderRow", "beforeRenderRows", "beforeRowCollapse", "beforeRowExpand", "beforeSelectionChange", "beforeSetRecord", "beforeShow", "beforeStartRowEdit", "beforeStateApply", "beforeStateSave", "beforeToggleGroup", "beforeToggleNode", "cancelCellEdit", "catchAll", "cellClick", "cellContextMenu", "cellDblClick", "cellMenuBeforeShow", "cellMenuItem", "cellMenuShow", "cellMenuToggleItem", "cellMouseEnter", "cellMouseLeave", "cellMouseOut", "cellMouseOver", "collapse", "collapseNode", "columnDrag", "columnDragStart", "columnDrop", "columnResize", "columnResizeStart", "contextMenuItem", "contextMenuToggleItem", "copy", "currentTimelineUpdate", "dataChange", "dateRangeChange", "destroy", "dirtyStateChange", "dragSelecting", "expand", "expandNode", "fileDrop", "fillHandleBeforeDragFinalize", "fillHandleDrag", "fillHandleDragAbort", "fillHandleDragEnd", "fillHandleDragStart", "finishCellEdit", "finishRowEdit", "focusIn", "focusOut", "gridRowBeforeDragStart", "gridRowBeforeDropFinalize", "gridRowDrag", "gridRowDragAbort", "gridRowDragStart", "gridRowDrop", "headerClick", "headerMenuBeforeShow", "headerMenuItem", "headerMenuShow", "headerMenuToggleItem", "hide", "histogramDataCacheSet", "lockRows", "mouseOut", "mouseOver", "paint", "paste", "pdfExport", "presetChange", "readOnly", "recompose", "renderRow", "renderRows", "resize", "resourceMenuBeforeShow", "resourceMenuItem", "resourceMenuShow", "resourceMenuToggleItem", "resourceTimeRangeClick", "resourceTimeRangeContextMenu", "resourceTimeRangeDblClick", "resourceTimeRangeMouseDown", "resourceTimeRangeMouseOut", "resourceTimeRangeMouseOver", "resourceTimeRangeMouseUp", "responsive", "rowCollapse", "rowExpand", "rowMouseEnter", "rowMouseLeave", "scroll", "selectionChange", "selectionModeChange", "show", "split", "splitterCollapseClick", "splitterDragEnd", "splitterDragStart", "splitterExpandClick", "startCellEdit", "startRowEdit", "subGridCollapse", "subGridExpand", "tickSizeChange", "timeAxisChange", "timeAxisHeaderClick", "timeAxisHeaderContextMenu", "timeAxisHeaderDblClick", "timeAxisHeaderMenuBeforeShow", "timeAxisHeaderMenuItem", "timeAxisHeaderMenuShow", "timelineContextChange", "timelineViewportResize", "timeRangeHeaderClick", "timeRangeHeaderContextMenu", "timeRangeHeaderDblClick", "toggleGroup", "toggleNode", "toolClick", "unlockRows", "unsplit", "visibleDateRangeChange"],
  setup(B7, { expose: c, emit: m }) {
    const p = m, s = {
      instanceClass: TimelineHistogram,
      instanceName: "TimelineHistogram",
      isView: true,
      dataStores: {
        originalStore: "originals"
      },
      projectStores: false,
      featureNames: [
        "cellCopyPasteFeature",
        "cellEditFeature",
        "cellMenuFeature",
        "cellTooltipFeature",
        "columnAutoWidthFeature",
        "columnDragToolbarFeature",
        "columnLinesFeature",
        "columnPickerFeature",
        "columnRenameFeature",
        "columnReorderFeature",
        "columnResizeFeature",
        "excelExporterFeature",
        "fileDropFeature",
        "fillHandleFeature",
        "filterFeature",
        "filterBarFeature",
        "groupFeature",
        "groupSummaryFeature",
        "headerMenuFeature",
        "headerZoomFeature",
        "lockRowsFeature",
        "mergeCellsFeature",
        "nonWorkingTimeFeature",
        "panFeature",
        "pdfExportFeature",
        "printFeature",
        "quickFindFeature",
        "regionResizeFeature",
        "resourceMenuFeature",
        "resourceTimeRangesFeature",
        "rowCopyPasteFeature",
        "rowEditFeature",
        "rowExpanderFeature",
        "rowReorderFeature",
        "rowResizeFeature",
        "scheduleTooltipFeature",
        "searchFeature",
        "sortFeature",
        "splitFeature",
        "stickyCellsFeature",
        "stripeFeature",
        "summaryFeature",
        "timeAxisHeaderMenuFeature",
        "timeRangesFeature",
        "treeFeature",
        "treeGroupFeature"
      ],
      configNames: [
        "adopt",
        "aggregateDataEntry",
        "aggregateHistogramDataForGroups",
        "animateFilterRemovals",
        "animateRemovingRows",
        "animateTreeNodeToggle",
        "ariaDescription",
        "ariaLabel",
        "autoAdjustTimeAxis",
        "autoHeight",
        "barTooltipTemplate",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "bufferCoef",
        "bufferThreshold",
        "callOnFunctions",
        "collapsible",
        "config",
        "contentElementCls",
        "contextMenuTriggerEvent",
        "dataModelField",
        "defaultRegion",
        "destroyStore",
        "disableGridColumnIdWarning",
        "disableGridRowModelWarning",
        "dock",
        "drawer",
        "durationDisplayPrecision",
        "elementAttributes",
        "enableRecurringEvents",
        "enableSticky",
        "enableTextSelection",
        "fillLastColumn",
        "fixedRowHeight",
        "footer",
        "formulaProviders",
        "fullRowRefresh",
        "getBarClass",
        "getBarDOMConfig",
        "getBarText",
        "getBarTextDOMConfig",
        "getDataEntryForAggregating",
        "getOutlineClass",
        "getOutlineDOMConfig",
        "getRecordData",
        "getRowHeight",
        "hardRefreshOnTimeAxisReconfigure",
        "header",
        "hideHorizontalScrollbar",
        "histogramWidgetClass",
        "hoverCls",
        "ignoreDomEventsWhileScrolling",
        "ignoreParentReadOnly",
        "initAggregatedDataEntry",
        "listeners",
        "loadMask",
        "loadMaskDefaults",
        "loadMaskError",
        "localizable",
        "managedEventSizing",
        "maskDefaults",
        "masked",
        "maxDate",
        "maxTimeAxisUnit",
        "minDate",
        "monitorResize",
        "owner",
        "partner",
        "plugins",
        "preserveFocusOnDatasetChange",
        "preserveScrollOnDatasetChange",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resizable",
        "resizeToFitIncludesHeader",
        "resourceTimeRangeRenderer",
        "responsiveLevels",
        "ripple",
        "rootElement",
        "scaleColumn",
        "scalePoints",
        "scrollerClass",
        "scrollManager",
        "series",
        "showDirty",
        "snapRelativeToEventStartDate",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "stickyHeaders",
        "strips",
        "subGridConfigs",
        "syncMask",
        "tab",
        "tabBarItems",
        "tbar",
        "timeAxis",
        "type",
        "ui",
        "visibleZoomFactor",
        "weekStartDay",
        "weight",
        "zoomKeepsOriginalTimespan",
        "zoomOnMouseWheel",
        "zoomOnTimeAxisDoubleClick"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "barMargin",
        "cellEllipsis",
        "cls",
        "collapsed",
        "columnLines",
        "columns",
        "data",
        "dataset",
        "disabled",
        "displayDateFormat",
        "emptyText",
        "enableEventAnimations",
        "enableUndoRedoKeys",
        "endDate",
        "eventColor",
        "eventStyle",
        "extraData",
        "fillTicks",
        "flex",
        "forceFit",
        "height",
        "hidden",
        "hideFooters",
        "hideHeaders",
        "hideRowHover",
        "histogramWidget",
        "id",
        "infiniteScroll",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "longPressTime",
        "margin",
        "maxHeight",
        "maxWidth",
        "maxZoomLevel",
        "minHeight",
        "minWidth",
        "minZoomLevel",
        "onBeforeAssignmentDelete",
        "onBeforeCancelCellEdit",
        "onBeforeCancelRowEdit",
        "onBeforeCellDelete",
        "onBeforeCellEditStart",
        "onBeforeColumnDragStart",
        "onBeforeColumnDropFinalize",
        "onBeforeColumnResize",
        "onBeforeCopy",
        "onBeforeCSVExport",
        "onBeforeDestroy",
        "onBeforeEventDelete",
        "onBeforeExcelExport",
        "onBeforeFillHandleDragStart",
        "onBeforeFinishCellEdit",
        "onBeforeFinishRowEdit",
        "onBeforeHide",
        "onBeforeHistogramDataCacheSet",
        "onBeforePan",
        "onBeforePaste",
        "onBeforePdfExport",
        "onBeforePresetChange",
        "onBeforeRenderHistogramRow",
        "onBeforeRenderRecordHistogram",
        "onBeforeRenderRow",
        "onBeforeRenderRows",
        "onBeforeRowCollapse",
        "onBeforeRowExpand",
        "onBeforeSelectionChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStartRowEdit",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onBeforeToggleGroup",
        "onBeforeToggleNode",
        "onCancelCellEdit",
        "onCatchAll",
        "onCellClick",
        "onCellContextMenu",
        "onCellDblClick",
        "onCellMenuBeforeShow",
        "onCellMenuItem",
        "onCellMenuShow",
        "onCellMenuToggleItem",
        "onCellMouseEnter",
        "onCellMouseLeave",
        "onCellMouseOut",
        "onCellMouseOver",
        "onCollapse",
        "onCollapseNode",
        "onColumnDrag",
        "onColumnDragStart",
        "onColumnDrop",
        "onColumnResize",
        "onColumnResizeStart",
        "onContextMenuItem",
        "onContextMenuToggleItem",
        "onCopy",
        "onCurrentTimelineUpdate",
        "onDataChange",
        "onDateRangeChange",
        "onDestroy",
        "onDirtyStateChange",
        "onDragSelecting",
        "onExpand",
        "onExpandNode",
        "onFileDrop",
        "onFillHandleBeforeDragFinalize",
        "onFillHandleDrag",
        "onFillHandleDragAbort",
        "onFillHandleDragEnd",
        "onFillHandleDragStart",
        "onFinishCellEdit",
        "onFinishRowEdit",
        "onFocusIn",
        "onFocusOut",
        "onGridRowBeforeDragStart",
        "onGridRowBeforeDropFinalize",
        "onGridRowDrag",
        "onGridRowDragAbort",
        "onGridRowDragStart",
        "onGridRowDrop",
        "onHeaderClick",
        "onHeaderMenuBeforeShow",
        "onHeaderMenuItem",
        "onHeaderMenuShow",
        "onHeaderMenuToggleItem",
        "onHide",
        "onHistogramDataCacheSet",
        "onLockRows",
        "onMouseOut",
        "onMouseOver",
        "onPaint",
        "onPaste",
        "onPdfExport",
        "onPresetChange",
        "onReadOnly",
        "onRecompose",
        "onRenderRow",
        "onRenderRows",
        "onResize",
        "onResourceMenuBeforeShow",
        "onResourceMenuItem",
        "onResourceMenuShow",
        "onResourceMenuToggleItem",
        "onResourceTimeRangeClick",
        "onResourceTimeRangeContextMenu",
        "onResourceTimeRangeDblClick",
        "onResourceTimeRangeMouseDown",
        "onResourceTimeRangeMouseOut",
        "onResourceTimeRangeMouseOver",
        "onResourceTimeRangeMouseUp",
        "onResponsive",
        "onRowCollapse",
        "onRowExpand",
        "onRowMouseEnter",
        "onRowMouseLeave",
        "onScroll",
        "onSelectionChange",
        "onSelectionModeChange",
        "onShow",
        "onSplit",
        "onSplitterCollapseClick",
        "onSplitterDragEnd",
        "onSplitterDragStart",
        "onSplitterExpandClick",
        "onStartCellEdit",
        "onStartRowEdit",
        "onSubGridCollapse",
        "onSubGridExpand",
        "onTickSizeChange",
        "onTimeAxisChange",
        "onTimeAxisHeaderClick",
        "onTimeAxisHeaderContextMenu",
        "onTimeAxisHeaderDblClick",
        "onTimeAxisHeaderMenuBeforeShow",
        "onTimeAxisHeaderMenuItem",
        "onTimeAxisHeaderMenuShow",
        "onTimelineContextChange",
        "onTimelineViewportResize",
        "onTimeRangeHeaderClick",
        "onTimeRangeHeaderContextMenu",
        "onTimeRangeHeaderDblClick",
        "onToggleGroup",
        "onToggleNode",
        "onToolClick",
        "onUnlockRows",
        "onUnsplit",
        "onVisibleDateRangeChange",
        "preserveScroll",
        "presets",
        "readOnly",
        "recurrenceConfirmationPopup",
        "rowHeight",
        "rowLines",
        "rtl",
        "scrollable",
        "selectionMode",
        "showBarTip",
        "snap",
        "startDate",
        "stateSettings",
        "store",
        "suppressFit",
        "tickSize",
        "timeResolution",
        "timeZone",
        "title",
        "tools",
        "transitionDuration",
        "viewPreset",
        "visibleDate",
        "width",
        "workingTime"
      ],
      propertyNames: [
        "focusVisible",
        "hasChanges",
        "originalStore",
        "parent",
        "scrollLeft",
        "scrollTop",
        "scrollX",
        "selectedCell",
        "selectedCells",
        "selectedRecord",
        "selectedRecords",
        "selectedRows",
        "state",
        "tooltip",
        "zoomLevel"
      ],
      eventNames: [
        "beforeAssignmentDelete",
        "beforeCancelCellEdit",
        "beforeCancelRowEdit",
        "beforeCellDelete",
        "beforeCellEditStart",
        "beforeColumnDragStart",
        "beforeColumnDropFinalize",
        "beforeColumnResize",
        "beforeCopy",
        "beforeCSVExport",
        "beforeDestroy",
        "beforeEventDelete",
        "beforeExcelExport",
        "beforeFillHandleDragStart",
        "beforeFinishCellEdit",
        "beforeFinishRowEdit",
        "beforeHide",
        "beforeHistogramDataCacheSet",
        "beforePan",
        "beforePaste",
        "beforePdfExport",
        "beforePresetChange",
        "beforeRenderHistogramRow",
        "beforeRenderRecordHistogram",
        "beforeRenderRow",
        "beforeRenderRows",
        "beforeRowCollapse",
        "beforeRowExpand",
        "beforeSelectionChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStartRowEdit",
        "beforeStateApply",
        "beforeStateSave",
        "beforeToggleGroup",
        "beforeToggleNode",
        "cancelCellEdit",
        "catchAll",
        "cellClick",
        "cellContextMenu",
        "cellDblClick",
        "cellMenuBeforeShow",
        "cellMenuItem",
        "cellMenuShow",
        "cellMenuToggleItem",
        "cellMouseEnter",
        "cellMouseLeave",
        "cellMouseOut",
        "cellMouseOver",
        "collapse",
        "collapseNode",
        "columnDrag",
        "columnDragStart",
        "columnDrop",
        "columnResize",
        "columnResizeStart",
        "contextMenuItem",
        "contextMenuToggleItem",
        "copy",
        "currentTimelineUpdate",
        "dataChange",
        "dateRangeChange",
        "destroy",
        "dirtyStateChange",
        "dragSelecting",
        "expand",
        "expandNode",
        "fileDrop",
        "fillHandleBeforeDragFinalize",
        "fillHandleDrag",
        "fillHandleDragAbort",
        "fillHandleDragEnd",
        "fillHandleDragStart",
        "finishCellEdit",
        "finishRowEdit",
        "focusIn",
        "focusOut",
        "gridRowBeforeDragStart",
        "gridRowBeforeDropFinalize",
        "gridRowDrag",
        "gridRowDragAbort",
        "gridRowDragStart",
        "gridRowDrop",
        "headerClick",
        "headerMenuBeforeShow",
        "headerMenuItem",
        "headerMenuShow",
        "headerMenuToggleItem",
        "hide",
        "histogramDataCacheSet",
        "lockRows",
        "mouseOut",
        "mouseOver",
        "paint",
        "paste",
        "pdfExport",
        "presetChange",
        "readOnly",
        "recompose",
        "renderRow",
        "renderRows",
        "resize",
        "resourceMenuBeforeShow",
        "resourceMenuItem",
        "resourceMenuShow",
        "resourceMenuToggleItem",
        "resourceTimeRangeClick",
        "resourceTimeRangeContextMenu",
        "resourceTimeRangeDblClick",
        "resourceTimeRangeMouseDown",
        "resourceTimeRangeMouseOut",
        "resourceTimeRangeMouseOver",
        "resourceTimeRangeMouseUp",
        "responsive",
        "rowCollapse",
        "rowExpand",
        "rowMouseEnter",
        "rowMouseLeave",
        "scroll",
        "selectionChange",
        "selectionModeChange",
        "show",
        "split",
        "splitterCollapseClick",
        "splitterDragEnd",
        "splitterDragStart",
        "splitterExpandClick",
        "startCellEdit",
        "startRowEdit",
        "subGridCollapse",
        "subGridExpand",
        "tickSizeChange",
        "timeAxisChange",
        "timeAxisHeaderClick",
        "timeAxisHeaderContextMenu",
        "timeAxisHeaderDblClick",
        "timeAxisHeaderMenuBeforeShow",
        "timeAxisHeaderMenuItem",
        "timeAxisHeaderMenuShow",
        "timelineContextChange",
        "timelineViewportResize",
        "timeRangeHeaderClick",
        "timeRangeHeaderContextMenu",
        "timeRangeHeaderDblClick",
        "toggleGroup",
        "toggleNode",
        "toolClick",
        "unlockRows",
        "unsplit",
        "visibleDateRangeChange"
      ]
    }, t = {}, i = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const o = getCurrentInstance();
      t.value = l.createWidget({
        me: o,
        widgetData: s,
        emit: p,
        element: i.value,
        processCellContent: l.processCellContent,
        processEventContent: l.processEventContent,
        processWidgetContent: l.processWidgetContent,
        hasFrameworkRenderer: l.hasFrameworkRenderer,
        toRaw
      }), l.relayStores(o.data, t.value);
      const n = (e, f) => watch(() => o.props[e], f);
      l.watchProps(t.value, s, n);
    }), onBeforeUnmount(() => {
      var o, n;
      (n = (o = t.value) == null ? void 0 : o.destroy) == null || n.call(o);
    }), c({
      instance: t,
      refElement: i,
      teleports: l2
    }), (o, n) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: i
    }, [
      createBaseVNode("div", k2, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(l2.value.values(), (e) => (openBlock(), createBlock(Teleport, {
          key: e.key,
          to: e.to
        }, [
          (openBlock(), createBlock(resolveDynamicComponent(e.is), mergeProps({
            ref_for: true,
            ref: e.key,
            "data-key": e.key,
            "data-generation": e.generation
          }, e.bind, { "data-vue": "" }, toHandlers(e.on)), null, 16, ["data-key", "data-generation"]))
        ], 8, ["to"]))), 128))
      ], 512)
    ], 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/C02fQ43N.js
var z4 = defineComponent({
  __name: "BryntumTimePicker",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    format: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    max: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    min: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tooltip: {},
    type: {},
    ui: {},
    value: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "catchAll", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show", "timeChange"],
  setup(v4, { expose: s, emit: c }) {
    const m = c, a2 = {
      instanceClass: TimePicker,
      instanceName: "TimePicker",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "format",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "max",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "min",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onTimeChange",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tooltip",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "initialValue",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "timeChange"
      ]
    }, o = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: m,
        element: n.value,
        toRaw
      });
      const t = (d2, p) => watch(() => e.props[d2], p);
      l.watchProps(o.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/lbCFi_Zh.js
var B5 = defineComponent({
  __name: "BryntumToolbar",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    enableReordering: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    overflow: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    widgetCls: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeItemDragStart", "beforeSetRecord", "beforeShow", "catchAll", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "itemDragStart", "itemDrop", "paint", "readOnly", "recompose", "resize", "show"],
  setup(x3, { expose: s, emit: c }) {
    const d2 = c, a2 = {
      instanceClass: Toolbar,
      instanceName: "Toolbar",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "overflow",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "type",
        "ui",
        "weight",
        "widgetCls"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "enableReordering",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeItemDragStart",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onItemDragStart",
        "onItemDrop",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeItemDragStart",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "itemDragStart",
        "itemDrop",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (m, p) => watch(() => e.props[m], p);
      l.watchProps(o.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/IbM2NwaV.js
var w2 = defineComponent({
  __name: "BryntumTreeCombo",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoComplete: {},
    autoExpand: {},
    autoSelect: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    caseSensitive: {},
    centered: {},
    chipView: {},
    clearable: {},
    clearTextOnPickerHide: {},
    clearTextOnSelection: {},
    clearWhenInputEmpty: {},
    cls: {},
    config: {},
    constrainTo: {},
    container: {},
    containValues: { type: [String, Function] },
    contentElementCls: {},
    createOnUnmatched: { type: [Function, String] },
    dataField: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    displayField: {},
    displayValueRenderer: { type: Function },
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    emptyText: {},
    encodeFilterParams: { type: Function },
    extraData: {},
    filterOnEnter: {},
    filterOperator: {},
    filterParamName: {},
    filterSelected: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hidePickerOnSelect: {},
    hideTrigger: {},
    highlightExternalChange: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inline: {},
    inlinePicker: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputType: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    items: {},
    keyMap: {},
    keyStrokeChangeDelay: {},
    keyStrokeFilterDelay: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listCls: {},
    listeners: {},
    listItemTpl: { type: Function },
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxLength: {},
    maxWidth: {},
    minChars: {},
    minHeight: {},
    minLength: {},
    minWidth: {},
    monitorResize: {},
    multiSelect: {},
    multiValueSeparator: {},
    name: {},
    overlayAnchor: {},
    owner: {},
    picker: {},
    pickerAlignElement: {},
    pickerWidth: {},
    placeholder: {},
    positioned: {},
    preventTooltipOnTouch: {},
    primaryFilter: {},
    readOnly: {},
    relayStoreEvents: {},
    required: {},
    revertOnEscape: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    spellCheck: {},
    store: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    title: {},
    tooltip: {},
    triggerAction: {},
    triggers: {},
    type: {},
    ui: {},
    validateFilter: {},
    validateOnInput: {},
    value: {},
    valueField: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "input", "paint", "readOnly", "recompose", "resize", "select", "show", "trigger"],
  setup(v4, { expose: s, emit: c }) {
    const p = c, a2 = {
      instanceClass: TreeCombo,
      instanceName: "TreeCombo",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoComplete",
        "autoExpand",
        "autoSelect",
        "bubbleEvents",
        "callOnFunctions",
        "caseSensitive",
        "centered",
        "chipView",
        "clearable",
        "clearTextOnPickerHide",
        "clearTextOnSelection",
        "clearWhenInputEmpty",
        "config",
        "constrainTo",
        "container",
        "containValues",
        "contentElementCls",
        "createOnUnmatched",
        "dataField",
        "defaultBindProperty",
        "displayField",
        "displayValueRenderer",
        "dock",
        "draggable",
        "elementAttributes",
        "emptyText",
        "encodeFilterParams",
        "filterOnEnter",
        "filterParamName",
        "filterSelected",
        "floating",
        "hideAnimation",
        "hidePickerOnSelect",
        "hideTrigger",
        "highlightExternalChange",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inline",
        "inlinePicker",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputType",
        "inputWidth",
        "items",
        "keyStrokeChangeDelay",
        "keyStrokeFilterDelay",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listCls",
        "listeners",
        "listItemTpl",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxLength",
        "minChars",
        "minLength",
        "monitorResize",
        "multiValueSeparator",
        "name",
        "overlayAnchor",
        "owner",
        "pickerAlignElement",
        "pickerWidth",
        "positioned",
        "preventTooltipOnTouch",
        "primaryFilter",
        "relayStoreEvents",
        "revertOnEscape",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "spellCheck",
        "tab",
        "tabIndex",
        "textAlign",
        "title",
        "triggerAction",
        "type",
        "ui",
        "validateFilter",
        "validateOnInput",
        "valueField",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "dataset",
        "disabled",
        "editable",
        "extraData",
        "filterOperator",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "multiSelect",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onInput",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelect",
        "onShow",
        "onTrigger",
        "picker",
        "placeholder",
        "readOnly",
        "required",
        "rtl",
        "showRequiredIndicator",
        "store",
        "tooltip",
        "triggers",
        "value",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "content",
        "focusVisible",
        "formula",
        "html",
        "input",
        "parent",
        "scrollable"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "input",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "select",
        "show",
        "trigger"
      ]
    }, i = {}, n = ref(), l2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", l2), onMounted(() => {
      const e = getCurrentInstance();
      i.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: p,
        element: n.value,
        toRaw
      });
      const t = (d2, m) => watch(() => e.props[d2], m);
      l.watchProps(i.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = i.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: i,
      refElement: n,
      teleports: l2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CoQvmNkl.js
var H5 = {
  ref: "teleportsHolder",
  style: { display: "none" }
};
var G3 = defineComponent({
  __name: "BryntumTreeGrid",
  props: {
    adopt: {},
    alignSelf: {},
    animateFilterRemovals: {},
    animateRemovingRows: {},
    animateTreeNodeToggle: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoHeight: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cellEllipsis: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnLines: {},
    columns: {},
    config: {},
    contentElementCls: {},
    contextMenuTriggerEvent: {},
    data: {},
    dataset: {},
    defaultRegion: {},
    destroyStore: {},
    disabled: {},
    disableGridColumnIdWarning: {},
    disableGridRowModelWarning: {},
    dock: {},
    drawer: {},
    elementAttributes: {},
    emptyText: {},
    enableSticky: {},
    enableTextSelection: {},
    enableUndoRedoKeys: {},
    extraData: {},
    fillLastColumn: {},
    fixedRowHeight: {},
    flex: {},
    footer: {},
    formulaProviders: {},
    fullRowRefresh: {},
    getRowHeight: { type: Function },
    header: {},
    height: {},
    hidden: {},
    hideFooters: {},
    hideHeaders: {},
    hideHorizontalScrollbar: {},
    hoverCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    listeners: {},
    loadMask: {},
    loadMaskDefaults: {},
    loadMaskError: {},
    localizable: {},
    longPressTime: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    owner: {},
    plugins: {},
    preserveFocusOnDatasetChange: {},
    preserveScroll: {},
    preserveScrollOnDatasetChange: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    resizable: {},
    resizeToFitIncludesHeader: {},
    responsiveLevels: {},
    ripple: {},
    rootElement: {},
    rowHeight: {},
    rowLines: {},
    rtl: {},
    scrollable: {},
    scrollerClass: {},
    scrollManager: {},
    selectionMode: {},
    showDirty: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    stateSettings: {},
    store: {},
    strips: {},
    subGridConfigs: {},
    syncMask: {},
    tab: {},
    tabBarItems: {},
    tbar: {},
    title: {},
    tools: {},
    transitionDuration: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    cellCopyPasteFeature: {},
    cellEditFeature: {},
    cellMenuFeature: {},
    cellTooltipFeature: {},
    columnAutoWidthFeature: {},
    columnDragToolbarFeature: {},
    columnPickerFeature: {},
    columnRenameFeature: {},
    columnReorderFeature: {},
    columnResizeFeature: {},
    excelExporterFeature: {},
    fileDropFeature: {},
    fillHandleFeature: {},
    filterFeature: {},
    filterBarFeature: {},
    groupFeature: {},
    groupSummaryFeature: {},
    headerMenuFeature: {},
    lockRowsFeature: {},
    mergeCellsFeature: {},
    pdfExportFeature: {},
    printFeature: {},
    quickFindFeature: {},
    regionResizeFeature: {},
    rowCopyPasteFeature: {},
    rowEditFeature: {},
    rowExpanderFeature: {},
    rowReorderFeature: {},
    rowResizeFeature: {},
    searchFeature: {},
    sortFeature: {},
    splitFeature: {},
    stickyCellsFeature: {},
    stripeFeature: {},
    summaryFeature: {},
    treeFeature: {},
    treeGroupFeature: {}
  },
  emits: ["beforeCancelCellEdit", "beforeCancelRowEdit", "beforeCellDelete", "beforeCellEditStart", "beforeColumnDragStart", "beforeColumnDropFinalize", "beforeColumnResize", "beforeCopy", "beforeCSVExport", "beforeDestroy", "beforeExcelExport", "beforeFillHandleDragStart", "beforeFinishCellEdit", "beforeFinishRowEdit", "beforeHide", "beforePaste", "beforePdfExport", "beforeRenderRow", "beforeRenderRows", "beforeRowCollapse", "beforeRowExpand", "beforeSelectionChange", "beforeSetRecord", "beforeShow", "beforeStartRowEdit", "beforeStateApply", "beforeStateSave", "beforeToggleGroup", "beforeToggleNode", "cancelCellEdit", "catchAll", "cellClick", "cellContextMenu", "cellDblClick", "cellMenuBeforeShow", "cellMenuItem", "cellMenuShow", "cellMenuToggleItem", "cellMouseEnter", "cellMouseLeave", "cellMouseOut", "cellMouseOver", "collapse", "collapseNode", "columnDrag", "columnDragStart", "columnDrop", "columnResize", "columnResizeStart", "contextMenuItem", "contextMenuToggleItem", "copy", "dataChange", "destroy", "dirtyStateChange", "dragSelecting", "expand", "expandNode", "fileDrop", "fillHandleBeforeDragFinalize", "fillHandleDrag", "fillHandleDragAbort", "fillHandleDragEnd", "fillHandleDragStart", "finishCellEdit", "finishRowEdit", "focusIn", "focusOut", "gridRowBeforeDragStart", "gridRowBeforeDropFinalize", "gridRowDrag", "gridRowDragAbort", "gridRowDragStart", "gridRowDrop", "headerClick", "headerMenuBeforeShow", "headerMenuItem", "headerMenuShow", "headerMenuToggleItem", "hide", "lockRows", "mouseOut", "mouseOver", "paint", "paste", "pdfExport", "readOnly", "recompose", "renderRow", "renderRows", "resize", "responsive", "rowCollapse", "rowExpand", "rowMouseEnter", "rowMouseLeave", "scroll", "selectionChange", "selectionModeChange", "show", "split", "splitterCollapseClick", "splitterDragEnd", "splitterDragStart", "splitterExpandClick", "startCellEdit", "startRowEdit", "subGridCollapse", "subGridExpand", "toggleGroup", "toggleNode", "toolClick", "unlockRows", "unsplit"],
  setup(T11, { expose: p, emit: g }) {
    const f = g, s = {
      instanceClass: TreeGrid,
      instanceName: "TreeGrid",
      isView: true,
      dataStores: {
        originalStore: "originals"
      },
      projectStores: false,
      featureNames: [
        "cellCopyPasteFeature",
        "cellEditFeature",
        "cellMenuFeature",
        "cellTooltipFeature",
        "columnAutoWidthFeature",
        "columnDragToolbarFeature",
        "columnPickerFeature",
        "columnRenameFeature",
        "columnReorderFeature",
        "columnResizeFeature",
        "excelExporterFeature",
        "fileDropFeature",
        "fillHandleFeature",
        "filterFeature",
        "filterBarFeature",
        "groupFeature",
        "groupSummaryFeature",
        "headerMenuFeature",
        "lockRowsFeature",
        "mergeCellsFeature",
        "pdfExportFeature",
        "printFeature",
        "quickFindFeature",
        "regionResizeFeature",
        "rowCopyPasteFeature",
        "rowEditFeature",
        "rowExpanderFeature",
        "rowReorderFeature",
        "rowResizeFeature",
        "searchFeature",
        "sortFeature",
        "splitFeature",
        "stickyCellsFeature",
        "stripeFeature",
        "summaryFeature",
        "treeFeature",
        "treeGroupFeature"
      ],
      configNames: [
        "adopt",
        "animateFilterRemovals",
        "animateRemovingRows",
        "ariaDescription",
        "ariaLabel",
        "autoHeight",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "collapsible",
        "config",
        "contentElementCls",
        "contextMenuTriggerEvent",
        "defaultRegion",
        "destroyStore",
        "disableGridColumnIdWarning",
        "disableGridRowModelWarning",
        "dock",
        "drawer",
        "elementAttributes",
        "enableSticky",
        "enableTextSelection",
        "fillLastColumn",
        "fixedRowHeight",
        "footer",
        "formulaProviders",
        "fullRowRefresh",
        "getRowHeight",
        "header",
        "hideHorizontalScrollbar",
        "hoverCls",
        "ignoreParentReadOnly",
        "listeners",
        "loadMask",
        "loadMaskDefaults",
        "loadMaskError",
        "localizable",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "plugins",
        "preserveFocusOnDatasetChange",
        "preserveScrollOnDatasetChange",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resizable",
        "resizeToFitIncludesHeader",
        "responsiveLevels",
        "ripple",
        "rootElement",
        "scrollerClass",
        "scrollManager",
        "showDirty",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "subGridConfigs",
        "syncMask",
        "tab",
        "tabBarItems",
        "tbar",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "animateTreeNodeToggle",
        "appendTo",
        "ariaLive",
        "cellEllipsis",
        "cls",
        "collapsed",
        "columnLines",
        "columns",
        "data",
        "dataset",
        "disabled",
        "emptyText",
        "enableUndoRedoKeys",
        "extraData",
        "flex",
        "height",
        "hidden",
        "hideFooters",
        "hideHeaders",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "longPressTime",
        "margin",
        "maxHeight",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeCancelCellEdit",
        "onBeforeCancelRowEdit",
        "onBeforeCellDelete",
        "onBeforeCellEditStart",
        "onBeforeColumnDragStart",
        "onBeforeColumnDropFinalize",
        "onBeforeColumnResize",
        "onBeforeCopy",
        "onBeforeCSVExport",
        "onBeforeDestroy",
        "onBeforeExcelExport",
        "onBeforeFillHandleDragStart",
        "onBeforeFinishCellEdit",
        "onBeforeFinishRowEdit",
        "onBeforeHide",
        "onBeforePaste",
        "onBeforePdfExport",
        "onBeforeRenderRow",
        "onBeforeRenderRows",
        "onBeforeRowCollapse",
        "onBeforeRowExpand",
        "onBeforeSelectionChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStartRowEdit",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onBeforeToggleGroup",
        "onBeforeToggleNode",
        "onCancelCellEdit",
        "onCatchAll",
        "onCellClick",
        "onCellContextMenu",
        "onCellDblClick",
        "onCellMenuBeforeShow",
        "onCellMenuItem",
        "onCellMenuShow",
        "onCellMenuToggleItem",
        "onCellMouseEnter",
        "onCellMouseLeave",
        "onCellMouseOut",
        "onCellMouseOver",
        "onCollapse",
        "onCollapseNode",
        "onColumnDrag",
        "onColumnDragStart",
        "onColumnDrop",
        "onColumnResize",
        "onColumnResizeStart",
        "onContextMenuItem",
        "onContextMenuToggleItem",
        "onCopy",
        "onDataChange",
        "onDestroy",
        "onDirtyStateChange",
        "onDragSelecting",
        "onExpand",
        "onExpandNode",
        "onFileDrop",
        "onFillHandleBeforeDragFinalize",
        "onFillHandleDrag",
        "onFillHandleDragAbort",
        "onFillHandleDragEnd",
        "onFillHandleDragStart",
        "onFinishCellEdit",
        "onFinishRowEdit",
        "onFocusIn",
        "onFocusOut",
        "onGridRowBeforeDragStart",
        "onGridRowBeforeDropFinalize",
        "onGridRowDrag",
        "onGridRowDragAbort",
        "onGridRowDragStart",
        "onGridRowDrop",
        "onHeaderClick",
        "onHeaderMenuBeforeShow",
        "onHeaderMenuItem",
        "onHeaderMenuShow",
        "onHeaderMenuToggleItem",
        "onHide",
        "onLockRows",
        "onMouseOut",
        "onMouseOver",
        "onPaint",
        "onPaste",
        "onPdfExport",
        "onReadOnly",
        "onRecompose",
        "onRenderRow",
        "onRenderRows",
        "onResize",
        "onResponsive",
        "onRowCollapse",
        "onRowExpand",
        "onRowMouseEnter",
        "onRowMouseLeave",
        "onScroll",
        "onSelectionChange",
        "onSelectionModeChange",
        "onShow",
        "onSplit",
        "onSplitterCollapseClick",
        "onSplitterDragEnd",
        "onSplitterDragStart",
        "onSplitterExpandClick",
        "onStartCellEdit",
        "onStartRowEdit",
        "onSubGridCollapse",
        "onSubGridExpand",
        "onToggleGroup",
        "onToggleNode",
        "onToolClick",
        "onUnlockRows",
        "onUnsplit",
        "preserveScroll",
        "readOnly",
        "rowHeight",
        "rowLines",
        "rtl",
        "scrollable",
        "selectionMode",
        "stateSettings",
        "store",
        "title",
        "tools",
        "transitionDuration",
        "width"
      ],
      propertyNames: [
        "focusVisible",
        "hasChanges",
        "originalStore",
        "parent",
        "selectedCell",
        "selectedCells",
        "selectedRecord",
        "selectedRecords",
        "selectedRows",
        "state",
        "tooltip"
      ],
      eventNames: [
        "beforeCancelCellEdit",
        "beforeCancelRowEdit",
        "beforeCellDelete",
        "beforeCellEditStart",
        "beforeColumnDragStart",
        "beforeColumnDropFinalize",
        "beforeColumnResize",
        "beforeCopy",
        "beforeCSVExport",
        "beforeDestroy",
        "beforeExcelExport",
        "beforeFillHandleDragStart",
        "beforeFinishCellEdit",
        "beforeFinishRowEdit",
        "beforeHide",
        "beforePaste",
        "beforePdfExport",
        "beforeRenderRow",
        "beforeRenderRows",
        "beforeRowCollapse",
        "beforeRowExpand",
        "beforeSelectionChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStartRowEdit",
        "beforeStateApply",
        "beforeStateSave",
        "beforeToggleGroup",
        "beforeToggleNode",
        "cancelCellEdit",
        "catchAll",
        "cellClick",
        "cellContextMenu",
        "cellDblClick",
        "cellMenuBeforeShow",
        "cellMenuItem",
        "cellMenuShow",
        "cellMenuToggleItem",
        "cellMouseEnter",
        "cellMouseLeave",
        "cellMouseOut",
        "cellMouseOver",
        "collapse",
        "collapseNode",
        "columnDrag",
        "columnDragStart",
        "columnDrop",
        "columnResize",
        "columnResizeStart",
        "contextMenuItem",
        "contextMenuToggleItem",
        "copy",
        "dataChange",
        "destroy",
        "dirtyStateChange",
        "dragSelecting",
        "expand",
        "expandNode",
        "fileDrop",
        "fillHandleBeforeDragFinalize",
        "fillHandleDrag",
        "fillHandleDragAbort",
        "fillHandleDragEnd",
        "fillHandleDragStart",
        "finishCellEdit",
        "finishRowEdit",
        "focusIn",
        "focusOut",
        "gridRowBeforeDragStart",
        "gridRowBeforeDropFinalize",
        "gridRowDrag",
        "gridRowDragAbort",
        "gridRowDragStart",
        "gridRowDrop",
        "headerClick",
        "headerMenuBeforeShow",
        "headerMenuItem",
        "headerMenuShow",
        "headerMenuToggleItem",
        "hide",
        "lockRows",
        "mouseOut",
        "mouseOver",
        "paint",
        "paste",
        "pdfExport",
        "readOnly",
        "recompose",
        "renderRow",
        "renderRows",
        "resize",
        "responsive",
        "rowCollapse",
        "rowExpand",
        "rowMouseEnter",
        "rowMouseLeave",
        "scroll",
        "selectionChange",
        "selectionModeChange",
        "show",
        "split",
        "splitterCollapseClick",
        "splitterDragEnd",
        "splitterDragStart",
        "splitterExpandClick",
        "startCellEdit",
        "startRowEdit",
        "subGridCollapse",
        "subGridExpand",
        "toggleGroup",
        "toggleNode",
        "toolClick",
        "unlockRows",
        "unsplit"
      ]
    }, t = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const o = getCurrentInstance();
      t.value = l.createWidget({
        me: o,
        widgetData: s,
        emit: f,
        element: n.value,
        processCellContent: l.processCellContent,
        processEventContent: l.processEventContent,
        processWidgetContent: l.processWidgetContent,
        hasFrameworkRenderer: l.hasFrameworkRenderer,
        toRaw
      }), l.relayStores(o.data, t.value);
      const l2 = (e, C) => watch(() => o.props[e], C);
      l.watchProps(t.value, s, l2);
    }), onBeforeUnmount(() => {
      var o, l2;
      (l2 = (o = t.value) == null ? void 0 : o.destroy) == null || l2.call(o);
    }), p({
      instance: t,
      refElement: n,
      teleports: i
    }), (o, l2) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, [
      createBaseVNode("div", H5, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(i.value.values(), (e) => (openBlock(), createBlock(Teleport, {
          key: e.key,
          to: e.to
        }, [
          (openBlock(), createBlock(resolveDynamicComponent(e.is), mergeProps({
            ref_for: true,
            ref: e.key,
            "data-key": e.key,
            "data-generation": e.generation
          }, e.bind, { "data-vue": "" }, toHandlers(e.on)), null, 16, ["data-key", "data-generation"]))
        ], 8, ["to"]))), 128))
      ], 512)
    ], 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CJwnMel3.js
var O5 = defineComponent({
  __name: "BryntumUndoRedo",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    color: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    project: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scheduler: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    showZeroActionBadge: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    text: {},
    textAlign: {},
    textContent: {},
    title: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "catchAll", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(R5, { expose: s, emit: c }) {
    const d2 = c, a2 = {
      instanceClass: UndoRedo,
      instanceName: "UndoRedo",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "color",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scheduler",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "showZeroActionBadge",
        "tab",
        "tabBarItems",
        "tag",
        "text",
        "textAlign",
        "textContent",
        "title",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "project",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "catchAll",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), i = ref(/* @__PURE__ */ new Map());
    return provide("teleports", i), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: a2,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (m, p) => watch(() => e.props[m], p);
      l.watchProps(o.value, a2, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CujPRVnk.js
var T9 = defineComponent({
  __name: "BryntumViewPresetCombo",
  props: {
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    badge: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    clearTextOnSelection: {},
    clearWhenInputEmpty: {},
    client: {},
    cls: {},
    config: {},
    constrainTo: {},
    contentElementCls: {},
    dataField: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    editable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hidePickerOnSelect: {},
    hint: { type: [String, Function] },
    hintHtml: { type: [String, Function] },
    id: {},
    ignoreParentReadOnly: {},
    inputAlign: {},
    inputAttributes: {},
    inputTag: {},
    inputWidth: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    label: {},
    labelCls: {},
    labelPosition: {},
    labels: {},
    labelWidth: {},
    listCls: {},
    listeners: {},
    listItemTpl: { type: Function },
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    name: {},
    overlayAnchor: {},
    owner: {},
    pickerWidth: {},
    positioned: {},
    presets: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollAction: {},
    showAnimation: {},
    showRequiredIndicator: {},
    showTooltipWhenDisabled: {},
    skipValidation: {},
    tab: {},
    tabIndex: {},
    textAlign: {},
    type: {},
    ui: {},
    useFixedDuration: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["action", "beforeDestroy", "beforeHide", "beforeShow", "catchAll", "change", "clear", "destroy", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "select", "show", "trigger"],
  setup(k3, { expose: s, emit: c }) {
    const d2 = c, o = {
      instanceClass: ViewPresetCombo,
      instanceName: "ViewPresetCombo",
      configNames: [
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "clearTextOnSelection",
        "clearWhenInputEmpty",
        "client",
        "config",
        "constrainTo",
        "contentElementCls",
        "dataField",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "hidePickerOnSelect",
        "hint",
        "hintHtml",
        "ignoreParentReadOnly",
        "inputAlign",
        "inputAttributes",
        "inputTag",
        "inputWidth",
        "labelCls",
        "labelPosition",
        "labels",
        "labelWidth",
        "listCls",
        "listeners",
        "listItemTpl",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "name",
        "overlayAnchor",
        "owner",
        "pickerWidth",
        "positioned",
        "presets",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "skipValidation",
        "tab",
        "tabIndex",
        "textAlign",
        "type",
        "ui",
        "useFixedDuration",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "badge",
        "cls",
        "disabled",
        "editable",
        "extraData",
        "flex",
        "height",
        "hidden",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "label",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAction",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onChange",
        "onClear",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelect",
        "onShow",
        "onTrigger",
        "readOnly",
        "rtl",
        "showRequiredIndicator",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "formula",
        "input",
        "multiSelect",
        "parent",
        "picker",
        "placeholder",
        "required",
        "tooltip",
        "value"
      ],
      eventNames: [
        "action",
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "change",
        "clear",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "select",
        "show",
        "trigger"
      ]
    }, i = {}, n = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      i.value = l.createWidget({
        me: e,
        widgetData: o,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(i.value, o, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = i.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: i,
      refElement: n,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/Dw_EPWaU.js
var T10 = defineComponent({
  __name: "BryntumWeekView",
  props: {
    actionButtons: {},
    activationKey: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allDayEvents: {},
    allowDragCreate: {},
    allowDragMove: {},
    allowDragResize: {},
    allowZoomUnderflow: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCreate: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnHeaderRenderer: { type: [Function, String] },
    config: {},
    constrainTo: {},
    contentElementCls: {},
    coreHours: { type: [Object, Function, String] },
    currentTimeIndicatorRenderer: { type: [Function, String] },
    dashedSubticks: {},
    dataset: {},
    date: {},
    dateFilter: { type: [Function, String] },
    dateFormat: {},
    dateSeparator: {},
    dayCellRenderer: { type: [Function, String] },
    dayEndTime: {},
    dayHeaderRenderer: { type: [Function, String] },
    dayStartShift: {},
    dayStartTime: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    defaultScrollOptions: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    disabled: {},
    dock: {},
    draggable: {},
    dragUnit: {},
    drawer: {},
    elementAttributes: {},
    endDate: {},
    eventFilter: { type: [Function, String] },
    eventHeaderRenderer: { type: [Function, String] },
    eventLayout: {},
    eventRenderer: { type: [Function, String] },
    eventSorter: { type: Function },
    eventSpacing: {},
    extendAllDayEndDay: {},
    extraData: {},
    filterEventResources: {},
    fitHours: {},
    fixedDuration: {},
    flex: {},
    floating: {},
    footer: {},
    getPrimaryResource: { type: [Function, String] },
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideEmptyDays: {},
    hideNonWorkingDays: {},
    hideWhenEmpty: {},
    hourHeight: {},
    hourHeightBreakpoints: {},
    id: {},
    ignoreParentReadOnly: {},
    increment: {},
    insertBefore: {},
    insertFirst: {},
    interDayDrag: {},
    interDayResize: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxAllDayHeight: {},
    maxDate: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minDate: {},
    minDayWidth: {},
    minEventHeight: {},
    minHeight: {},
    minHourHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    noMatchingDates: {},
    nonWorkingDays: {},
    overflowPopup: {},
    owner: {},
    pastEventCls: {},
    positioned: {},
    preventTooltipOnTouch: {},
    range: {},
    readOnly: {},
    relayStoreEvents: {},
    resourceImagePath: {},
    responsive: {},
    responsiveRoot: {},
    responsiveState: {},
    responsiveTarget: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectorButton: {},
    selectorMenuItem: {},
    shiftIncrement: {},
    shortDateFormat: {},
    shortDateTimeFormat: {},
    shortEventCls: {},
    shortEventDuration: {},
    showAllDayHeader: {},
    showAnimation: {},
    showBullet: {},
    showCurrentTime: {},
    showResourceAvatars: {},
    showTime: {},
    showTooltipWhenDisabled: {},
    sixMinuteTicks: {},
    snapRelativeToEventStartDate: {},
    stackMultiDayEvents: {},
    startDate: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    syncCalendarDate: {},
    syncViewDate: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    tickRenderer: { type: [Function, String] },
    timeAxisTimeFormat: {},
    timeFormat: {},
    timeSnapType: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    visibleStartTime: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {},
    zoomOnMouseWheel: {}
  },
  emits: ["beforeAutoCreate", "beforeChangeDate", "beforeDestroy", "beforeHide", "beforeResponsiveStateChange", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "cellMapPopulated", "collapse", "dayCellPopulated", "destroy", "dirtyStateChange", "eventAutoCreated", "eventPropagate", "expand", "focusIn", "focusOut", "hide", "layoutUpdate", "paint", "rangeChange", "readOnly", "recompose", "refresh", "resize", "responsiveStateChange", "shiftIncrementChange", "show", "tickChange", "toolClick"],
  setup(w3, { expose: l2, emit: d2 }) {
    const c = d2, n = {
      instanceClass: WeekView,
      instanceName: "WeekView",
      configNames: [
        "actionButtons",
        "activationKey",
        "adopt",
        "align",
        "allDayEvents",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "columnHeaderRenderer",
        "config",
        "constrainTo",
        "contentElementCls",
        "currentTimeIndicatorRenderer",
        "dayCellRenderer",
        "dayHeaderRenderer",
        "dayStartShift",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "descriptionRenderer",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "endDate",
        "eventFilter",
        "eventHeaderRenderer",
        "eventLayout",
        "eventRenderer",
        "eventSorter",
        "eventSpacing",
        "fixedDuration",
        "floating",
        "footer",
        "getPrimaryResource",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxAllDayHeight",
        "monitorResize",
        "namedItems",
        "nonWorkingDays",
        "overflowPopup",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resourceImagePath",
        "responsive",
        "responsiveRoot",
        "responsiveState",
        "responsiveTarget",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectorButton",
        "selectorMenuItem",
        "shortEventCls",
        "shortEventDuration",
        "showAllDayHeader",
        "showAnimation",
        "showBullet",
        "showResourceAvatars",
        "showTooltipWhenDisabled",
        "startDate",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "tickRenderer",
        "timeAxisTimeFormat",
        "timeFormat",
        "trapFocus",
        "type",
        "ui",
        "visibleStartTime",
        "weekStartDay",
        "weight",
        "zoomOnMouseWheel"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDragCreate",
        "allowDragMove",
        "allowDragResize",
        "allowZoomUnderflow",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "autoCreate",
        "cls",
        "collapsed",
        "coreHours",
        "dashedSubticks",
        "dataset",
        "date",
        "dateFilter",
        "dateFormat",
        "dateSeparator",
        "dayEndTime",
        "dayStartTime",
        "defaultScrollOptions",
        "descriptionFormat",
        "disabled",
        "dragUnit",
        "extendAllDayEndDay",
        "extraData",
        "filterEventResources",
        "fitHours",
        "flex",
        "height",
        "hidden",
        "hideEmptyDays",
        "hideNonWorkingDays",
        "hourHeight",
        "hourHeightBreakpoints",
        "id",
        "increment",
        "insertBefore",
        "insertFirst",
        "interDayDrag",
        "interDayResize",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDate",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minDate",
        "minDayWidth",
        "minEventHeight",
        "minHeight",
        "minHourHeight",
        "minWidth",
        "noMatchingDates",
        "onBeforeAutoCreate",
        "onBeforeChangeDate",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeResponsiveStateChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCellMapPopulated",
        "onCollapse",
        "onDayCellPopulated",
        "onDestroy",
        "onDirtyStateChange",
        "onEventAutoCreated",
        "onEventPropagate",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onLayoutUpdate",
        "onPaint",
        "onRangeChange",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onResponsiveStateChange",
        "onShiftIncrementChange",
        "onShow",
        "onTickChange",
        "onToolClick",
        "pastEventCls",
        "range",
        "readOnly",
        "rtl",
        "scrollable",
        "shiftIncrement",
        "shortDateFormat",
        "shortDateTimeFormat",
        "showCurrentTime",
        "showTime",
        "sixMinuteTicks",
        "snapRelativeToEventStartDate",
        "stackMultiDayEvents",
        "strictRecordMapping",
        "syncCalendarDate",
        "syncViewDate",
        "timeSnapType",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "dayCellCls",
        "firstVisibleCell",
        "firstVisibleDate",
        "focusVisible",
        "hasChanges",
        "horizontalScroller",
        "isSettingValues",
        "isValid",
        "lastVisibleCell",
        "lastVisibleDate",
        "parent",
        "record",
        "state",
        "values"
      ],
      eventNames: [
        "beforeAutoCreate",
        "beforeChangeDate",
        "beforeDestroy",
        "beforeHide",
        "beforeResponsiveStateChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "cellMapPopulated",
        "collapse",
        "dayCellPopulated",
        "destroy",
        "dirtyStateChange",
        "eventAutoCreated",
        "eventPropagate",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "layoutUpdate",
        "paint",
        "rangeChange",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "responsiveStateChange",
        "shiftIncrementChange",
        "show",
        "tickChange",
        "toolClick"
      ]
    }, a2 = {}, o = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      a2.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: o.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(a2.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = a2.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), l2({
      instance: a2,
      refElement: o,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: o
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/CT6j3nBD.js
var B6 = defineComponent({
  __name: "BryntumWidget",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    keyMap: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    tab: {},
    tag: {},
    textAlign: {},
    title: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeShow", "catchAll", "destroy", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "show"],
  setup(A6, { expose: s, emit: c }) {
    const d2 = c, i = {
      instanceClass: Widget,
      instanceName: "Widget",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "dock",
        "draggable",
        "elementAttributes",
        "floating",
        "hideAnimation",
        "htmlCls",
        "ignoreParentReadOnly",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tag",
        "textAlign",
        "title",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "keyMap",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeShow",
        "onCatchAll",
        "onDestroy",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "readOnly",
        "rtl",
        "scrollable",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "parent"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeShow",
        "catchAll",
        "destroy",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show"
      ]
    }, o = {}, n = ref(), a2 = ref(/* @__PURE__ */ new Map());
    return provide("teleports", a2), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: i,
        emit: d2,
        element: n.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, i, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: a2
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/Dc2Q3FHA.js
var E8 = defineComponent({
  __name: "BryntumYearPicker",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    drawer: {},
    elementAttributes: {},
    extraData: {},
    flex: {},
    floating: {},
    footer: {},
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    maxYear: {},
    minHeight: {},
    minWidth: {},
    minYear: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    startYear: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    textContent: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {},
    year: {},
    yearButtonCount: {}
  },
  emits: ["beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "collapse", "destroy", "dirtyStateChange", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "resize", "select", "show", "toolClick"],
  setup(x3, { expose: s, emit: c }) {
    const d2 = c, n = {
      instanceClass: YearPicker,
      instanceName: "YearPicker",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "floating",
        "footer",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxYear",
        "minYear",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "textContent",
        "trapFocus",
        "type",
        "ui",
        "weight",
        "yearButtonCount"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "collapsed",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCollapse",
        "onDestroy",
        "onDirtyStateChange",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onSelect",
        "onShow",
        "onToolClick",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "startYear",
        "strictRecordMapping",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y",
        "year"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "state",
        "value",
        "values"
      ],
      eventNames: [
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "collapse",
        "destroy",
        "dirtyStateChange",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "select",
        "show",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), r = ref(/* @__PURE__ */ new Map());
    return provide("teleports", r), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: n,
        emit: d2,
        element: a2.value,
        toRaw
      });
      const t = (p, m) => watch(() => e.props[p], m);
      l.watchProps(o.value, n, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: r
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});

// node_modules/@bryntum/calendar-vue-3/lib/chunks/Bql8Ih5c.js
var P4 = defineComponent({
  __name: "BryntumYearView",
  props: {
    activationKey: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allowDragCreate: {},
    allowDragMove: {},
    allowDragResize: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCreate: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    config: {},
    constrainTo: {},
    contentElementCls: {},
    dataset: {},
    date: {},
    dateFormat: {},
    dateSeparator: {},
    dayCellNameFormat: {},
    dayCellRenderer: { type: Function },
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    defaultScrollOptions: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    disabled: {},
    dock: {},
    draggable: {},
    dragUnit: {},
    drawer: {},
    elementAttributes: {},
    emptyCellRenderer: { type: [Function, Object, String] },
    eventCountTip: {},
    eventDots: {},
    eventFilter: { type: [Function, String] },
    eventHeaderRenderer: { type: [Function, String] },
    eventHeight: {},
    eventRenderer: { type: [Function, String] },
    eventSorter: { type: Function },
    eventSpacing: {},
    extendAllDayEndDay: {},
    extraData: {},
    filterEventResources: {},
    flex: {},
    floating: {},
    footer: {},
    getPrimaryResource: { type: [Function, String] },
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideNonWorkingDays: {},
    hideWhenEmpty: {},
    id: {},
    ignoreParentReadOnly: {},
    insertBefore: {},
    insertFirst: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxDate: {},
    maxDots: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minDate: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    nonWorkingDays: {},
    overflowButtonRenderer: { type: Function },
    overflowPopup: {},
    overflowPopupTrigger: {},
    owner: {},
    pastEventCls: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    relayStoreEvents: {},
    resourceImagePath: {},
    responsive: {},
    responsiveRoot: {},
    responsiveState: {},
    responsiveTarget: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectorButton: {},
    selectorMenuItem: {},
    shortDateFormat: {},
    shortDateTimeFormat: {},
    shortEventCls: {},
    shortEventDuration: {},
    showAnimation: {},
    showBullet: {},
    showEvents: {},
    showResourceAvatars: {},
    showTooltipWhenDisabled: {},
    sixWeeks: {},
    stackMultiDayEvents: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    syncCalendarDate: {},
    syncViewDate: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    timeFormat: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {},
    year: {}
  },
  emits: ["beforeAutoCreate", "beforeChangeDate", "beforeDestroy", "beforeHide", "beforeResponsiveStateChange", "beforeSetRecord", "beforeShow", "beforeShowOverflowPopup", "beforeStateApply", "beforeStateSave", "catchAll", "cellMapPopulated", "collapse", "dayCellPopulated", "destroy", "dirtyStateChange", "emptyCellClick", "eventAutoCreated", "eventPropagate", "expand", "focusIn", "focusOut", "hide", "paint", "readOnly", "recompose", "refresh", "resize", "responsiveStateChange", "show", "showOverflowPopup", "toolClick"],
  setup(D6, { expose: s, emit: p }) {
    const d2 = p, r = {
      instanceClass: YearView,
      instanceName: "YearView",
      configNames: [
        "activationKey",
        "adopt",
        "align",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "config",
        "constrainTo",
        "contentElementCls",
        "date",
        "dayCellNameFormat",
        "dayCellRenderer",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "descriptionRenderer",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "emptyCellRenderer",
        "eventFilter",
        "eventHeaderRenderer",
        "eventHeight",
        "eventRenderer",
        "eventSorter",
        "floating",
        "footer",
        "getPrimaryResource",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "monitorResize",
        "namedItems",
        "nonWorkingDays",
        "overflowButtonRenderer",
        "overflowPopup",
        "overflowPopupTrigger",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resourceImagePath",
        "responsive",
        "responsiveRoot",
        "responsiveState",
        "responsiveTarget",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectorButton",
        "selectorMenuItem",
        "shortEventCls",
        "shortEventDuration",
        "showAnimation",
        "showBullet",
        "showResourceAvatars",
        "showTooltipWhenDisabled",
        "sixWeeks",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "timeFormat",
        "trapFocus",
        "type",
        "ui",
        "weekStartDay",
        "weight",
        "year"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDragCreate",
        "allowDragMove",
        "allowDragResize",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "autoCreate",
        "cls",
        "collapsed",
        "dataset",
        "dateFormat",
        "dateSeparator",
        "defaultScrollOptions",
        "descriptionFormat",
        "disabled",
        "dragUnit",
        "eventCountTip",
        "eventDots",
        "eventSpacing",
        "extendAllDayEndDay",
        "extraData",
        "filterEventResources",
        "flex",
        "height",
        "hidden",
        "hideNonWorkingDays",
        "id",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDate",
        "maxDots",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minDate",
        "minHeight",
        "minWidth",
        "onBeforeAutoCreate",
        "onBeforeChangeDate",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeResponsiveStateChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeShowOverflowPopup",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCellMapPopulated",
        "onCollapse",
        "onDayCellPopulated",
        "onDestroy",
        "onDirtyStateChange",
        "onEmptyCellClick",
        "onEventAutoCreated",
        "onEventPropagate",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onResponsiveStateChange",
        "onShow",
        "onShowOverflowPopup",
        "onToolClick",
        "pastEventCls",
        "readOnly",
        "rtl",
        "scrollable",
        "shortDateFormat",
        "shortDateTimeFormat",
        "showEvents",
        "stackMultiDayEvents",
        "strictRecordMapping",
        "syncCalendarDate",
        "syncViewDate",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "dayCellCls",
        "firstVisibleCell",
        "firstVisibleDate",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "lastVisibleCell",
        "lastVisibleDate",
        "parent",
        "record",
        "state",
        "values"
      ],
      eventNames: [
        "beforeAutoCreate",
        "beforeChangeDate",
        "beforeDestroy",
        "beforeHide",
        "beforeResponsiveStateChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeShowOverflowPopup",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "cellMapPopulated",
        "collapse",
        "dayCellPopulated",
        "destroy",
        "dirtyStateChange",
        "emptyCellClick",
        "eventAutoCreated",
        "eventPropagate",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "paint",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "responsiveStateChange",
        "show",
        "showOverflowPopup",
        "toolClick"
      ]
    }, o = {}, a2 = ref(), n = ref(/* @__PURE__ */ new Map());
    return provide("teleports", n), onMounted(() => {
      const e = getCurrentInstance();
      o.value = l.createWidget({
        me: e,
        widgetData: r,
        emit: d2,
        element: a2.value,
        toRaw
      });
      const t = (c, u) => watch(() => e.props[c], u);
      l.watchProps(o.value, r, t);
    }), onBeforeUnmount(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: a2,
      teleports: n
    }), (e, t) => (openBlock(), createElementBlock("div", {
      ref_key: "refElement",
      ref: a2
    }, null, 512));
  }
});
export {
  M as BryntumAgendaView,
  T as BryntumButton,
  R as BryntumButtonGroup,
  N as BryntumCalendar,
  W as BryntumCalendarDatePicker,
  x as BryntumCalendarProjectModel,
  D as BryntumCheckbox,
  B as BryntumCheckboxGroup,
  w as BryntumChecklistFilterCombo,
  F2 as BryntumChipView,
  O2 as BryntumCodeEditor,
  S as BryntumColorField,
  T2 as BryntumCombo,
  A as BryntumContainer,
  E as BryntumDateField,
  v as BryntumDatePicker,
  A2 as BryntumDateRangeField,
  S2 as BryntumDateTimeField,
  H2 as BryntumDayAgendaView,
  T3 as BryntumDayResourceView,
  T4 as BryntumDayView,
  B2 as BryntumDemoCodeEditor,
  F as BryntumDemoHeader,
  S3 as BryntumDisplayField,
  S4 as BryntumDurationField,
  T5 as BryntumEditor,
  S5 as BryntumEventColorField,
  R2 as BryntumFieldFilterPicker,
  v2 as BryntumFieldFilterPickerGroup,
  O3 as BryntumFieldSet,
  D2 as BryntumFileField,
  R3 as BryntumFilePicker,
  S6 as BryntumFilterField,
  d as BryntumFullscreenButton,
  G as BryntumGrid,
  G2 as BryntumGridBase,
  R4 as BryntumGridFieldFilterPicker,
  v3 as BryntumGridFieldFilterPickerGroup,
  F3 as BryntumGroupBar,
  E2 as BryntumHint,
  B3 as BryntumLabel,
  I as BryntumList,
  A3 as BryntumMenu,
  z2 as BryntumModeSelector,
  A4 as BryntumMonthAgendaView,
  E3 as BryntumMonthPicker,
  P2 as BryntumMonthView,
  D3 as BryntumNumberField,
  B4 as BryntumPagingToolbar,
  O4 as BryntumPanel,
  D4 as BryntumPasswordField,
  T6 as BryntumProjectCombo,
  D5 as BryntumRadio,
  E4 as BryntumRadioGroup,
  A5 as BryntumRangeMenu,
  E5 as BryntumResourceCombo,
  x2 as BryntumResourceFilter,
  F4 as BryntumResourceView,
  F5 as BryntumScheduler,
  F6 as BryntumSchedulerBase,
  W2 as BryntumSchedulerDatePicker,
  T7 as BryntumSlideToggle,
  z3 as BryntumSlider,
  k as BryntumSplitter,
  E6 as BryntumTabPanel,
  S7 as BryntumTextAreaField,
  T8 as BryntumTextAreaPickerField,
  S8 as BryntumTextField,
  E7 as BryntumTimeField,
  z4 as BryntumTimePicker,
  P3 as BryntumTimelineHistogram,
  B5 as BryntumToolbar,
  w2 as BryntumTreeCombo,
  G3 as BryntumTreeGrid,
  O5 as BryntumUndoRedo,
  T9 as BryntumViewPresetCombo,
  T10 as BryntumWeekView,
  B6 as BryntumWidget,
  E8 as BryntumYearPicker,
  P4 as BryntumYearView
};
//# sourceMappingURL=@bryntum_calendar-vue-3.js.map
