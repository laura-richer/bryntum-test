import Field from './Field.js';
import Formula from './mixin/FormulaField.js';



/**
 * @module Core/widget/TextField
 */

/**
 * Textfield widget. Wraps native &lt;input type="text"&gt;
 *
 * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column}.
 * It is used as the default editor for the {@link Grid.column.Column}, {@link Grid.column.TemplateColumn},
 * {@link Grid.column.TreeColumn}, and for other columns if another editor is not specified explicitly,
 * or disabled by setting `false` value.
 *
 *
 * ```javascript
 * let textField = new TextField({
 *   placeholder: 'Enter some text'
 * });
 * ```
 *
 * {@inlineexample Core/widget/TextField.js}
 *
 * @extends Core/widget/Field
 * @mixes Core/widget/mixin/FormulaField
 * @classtype textfield
 * @classtypealias text
 * @inputfield
 */
export default class TextField extends Field.mixin(Formula) {

    static $name = 'TextField';

    static type = 'textfield';

    static alias = 'text';

    static configurable = {
        /**
         * The min number of characters for the input field
         * @config {Number} minLength
         * @category Field
         */

        /**
         * The max number of characters for the input field
         * @config {Number} maxLength
         * @category Field
         */

        nullValue : ''
    };

    construct(config) {
        if (config?.inputType === 'hidden') {
            config.hidden = true;
        }

        super.construct(...arguments);
    }

    /**
     * Returns the current token - the token that the cursor is within or adjacent to in the
     * input field as separated by space, or the passed regular expression.
     * @param {RegExp} [delimiter=/\s/] The delimiter to use to separate tokens.
     * @returns {Object} The token object containing the token, start and end positions
     * and the cursor position.
     * @property {String} token The current token
     * @property {Number} start The start position of the token
     * @property {Number} end The end position of the token
     * @property {Number} cursor The cursor position
     * @category Field
     * @internal
     */
    getCurrentToken(delimiter = /\s/) {
        const { value, selectionStart } = this.input;

        let start = selectionStart, end = selectionStart + 1;

        if (!value.length || selectionStart == null) {
            return null;
        }
        while (start > 0 && !value[start - 1].match(delimiter)) {
            start--;
        }
        while (end < value.length && !value[end].match(delimiter)) {
            end++;
        }
        return {
            token  : value.substring(start, end),
            cursor : selectionStart,
            start,
            end
        };
    }
}

// Register this widget type with its Factory
TextField.initClass();
