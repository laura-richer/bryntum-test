import { AnyConstructor, Mixin } from "../../../../ChronoGraph/class/Mixin.js"
import { CalculationIterator } from "../../../../ChronoGraph/primitives/Calculation.js"
import { ConstrainedLateScheduleMixin } from "./ConstrainedLateScheduleMixin.js"
import { InactiveEventMixin } from "./InactiveEventMixin.js"


export class InactiveEventScheduleMixin extends Mixin(
    [ ConstrainedLateScheduleMixin ],
    (base : AnyConstructor<ConstrainedLateScheduleMixin, typeof ConstrainedLateScheduleMixin>) => {

    const superProto : InstanceType<typeof base> = base.prototype

    class InactiveEventScheduleMixin extends base {

        * shouldRollupChildStartDate (childEvent : InactiveEventMixin) : CalculationIterator<boolean> {
            // Do not take into account inactive children dates when calculating
            // their parent start end dates (unless the parent is also inactive)
            return !(yield childEvent.$.inactive) || (yield this.event.$.inactive)
        }


        * shouldRollupChildEndDate (childEvent : InactiveEventMixin) : CalculationIterator<boolean> {
            // Do not take into account inactive children dates when calculating
            // their parent start end dates (unless the parent is also inactive)
            return !(yield childEvent.$.inactive) || (yield this.event.$.inactive)
        }
    }

    return InactiveEventScheduleMixin
}){}
