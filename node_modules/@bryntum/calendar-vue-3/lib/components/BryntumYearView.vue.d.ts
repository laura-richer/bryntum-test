import type { AlignSpec, Base, BryntumScrollOptions, ButtonConfig, CalendarMixin, Container, ContainerItemConfig, ContainerLayoutConfig, DayCell, DomConfig, EventBar, EventModel, KeyMapConfig, MaskConfig, MenuItemConfig, Model, OverflowPopup, OverflowPopupConfig, PagingToolbarConfig, Panel, PanelCollapserConfig, PanelCollapserOverlayConfig, PanelHeader, Rectangle, ResourceModel, Scroller, ScrollerConfig, StateProvider, TabConfig, Tool, ToolConfig, ToolbarConfig, ToolbarItems, TooltipConfig, Widget, YearViewListeners } from '@bryntum/calendar';
import { YearView } from '@bryntum/calendar';
declare const _default: import("vue").DefineComponent<__VLS_TypePropsToRuntimeProps<{
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-activationKey)
     */
    activationKey?: string | undefined;
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-adopt)
     */
    adopt?: string | HTMLElement | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-align)
     */
    align?: string | AlignSpec | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string | undefined;
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: Boolean | undefined;
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: Boolean | undefined;
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: Boolean | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: Boolean | undefined;
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-animateTimeShift)
     */
    animateTimeShift?: Boolean | undefined;
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: string | HTMLElement | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaDescription)
     */
    ariaDescription?: string | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaLabel)
     */
    ariaLabel?: string | undefined;
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string | undefined;
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-autoCreate)
     */
    autoCreate?: string | Boolean | {
        gesture?: string | undefined;
        newName?: string | Function | undefined;
        step?: string | undefined;
        snapType?: "round" | "ceil" | "floor" | undefined;
        duration?: string | undefined;
        startHour?: number | undefined;
    } | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bbar)
     */
    bbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bodyCls)
     */
    bodyCls?: string | object | undefined;
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bubbleEvents)
     */
    bubbleEvents?: object | undefined;
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-callOnFunctions)
     */
    callOnFunctions?: Boolean | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: Boolean | undefined;
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-cls)
     */
    cls?: string | object | undefined;
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: Boolean | undefined;
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-collapsible)
     */
    collapsible?: Boolean | PanelCollapserConfig | PanelCollapserOverlayConfig | undefined;
    config?: object | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: Widget | HTMLElement | Rectangle | undefined;
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-contentElementCls)
     */
    contentElementCls?: string | object | undefined;
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string> | undefined;
    /**
     * A date which specifies the year to display. All types of calendar view have a `date`
     * config which they use to set their visible date range according to their configuration
     * and type.
     */
    date?: Date | undefined;
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string | undefined;
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string | undefined;
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names
     * in the header part of each calendar cell.
     */
    dayCellNameFormat?: string | undefined;
    /**
     * An empty function by default, but provided so that you can override it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dayCellRenderer)
     * @param {object} cellData An object that contains data about the cell.
     * @param {Date} cellData.date The Date of this cell
     * @param {Scheduler.model.EventModel[]} cellData.events The array of events in this cell
     * @param {DomConfig} cellData.cellConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object that contains data about the cells element.
     * @param {string} cellData.cellConfig.style The style property is an object containing style properties for the cell header element.
     * @param {string} cellData.cellConfig.cls The cls property is an object whose property names will be added to the cell element if the property value is truthy.
     * @returns {DomConfig,string,void}
     */
    dayCellRenderer?: ((cellData: {
        date: Date;
        events: EventModel[];
        cellConfig: {
            style: string;
            cls: string;
        };
    }) => DomConfig | string | void) | undefined;
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string | undefined;
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: string | ((widget: Widget) => Boolean) | undefined;
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: ContainerItemConfig | undefined;
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions | undefined;
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-descriptionFormat)
     */
    descriptionFormat?: string | string[] | Boolean[] | undefined;
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: ((view: Widget) => string) | undefined;
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-disabled)
     */
    disabled?: Boolean | "inert" | undefined;
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dock)
     */
    dock?: object | "top" | "bottom" | "left" | "right" | "start" | "end" | "header" | "pre-header" | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-draggable)
     */
    draggable?: Boolean | {
        handleSelector?: string | undefined;
    } | undefined;
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dragUnit)
     */
    dragUnit?: string | undefined;
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: Boolean | {
        side?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        size?: string | number | undefined;
        inline?: Boolean | undefined;
    } | undefined;
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string | null> | undefined;
    /**
     * A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which will be used to create the content of a clickable
     * element which is present when no events are in a cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-emptyCellRenderer)
     * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.
     * @returns {DomConfig,void} DomConfig object representing the HTML markup
     */
    emptyCellRenderer?: string | object | ((dayCellRenderer: {
        cellData: DayCell;
    }) => DomConfig | void) | undefined;
    /**
     * When [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopupTrigger) is not a mouseover gesture, setting this to
     * a truthy value means that a tooltip containing the event count will be shown on hover of
     * a day cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventCountTip)
     */
    eventCountTip?: Boolean | Record<string, string | Boolean> | undefined;
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents) is `'dots'`, this controls the layout of the dots
     * below the day number.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventDots)
     */
    eventDots?: {
        marginTop?: number | undefined;
        max?: number | undefined;
        gap?: number | undefined;
        size?: number | undefined;
        stripe?: Boolean | undefined;
    } | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: string | ((event: EventModel) => Boolean) | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: string | ((detail: {
        view: typeof CalendarMixin;
        eventRecord: EventModel;
        resourceRecord: ResourceModel;
        renderData: {
            style: object;
            cls: object;
            iconStyle: object;
            iconCls: object;
            eventColor: string;
            dataset: object;
            solidBar: Boolean;
            bodyColor: string;
        };
        showBullet: Boolean;
    }) => DomConfig | DomConfig[] | string | void) | undefined;
    /**
     * The height of event bars if this view creates event bars.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventHeight)
     */
    eventHeight?: string | number | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: string | ((detail: {
        view: typeof CalendarMixin;
        eventRecord: EventModel;
        resourceRecord: ResourceModel;
        renderData: {
            style: object;
            cls: object;
            iconStyle: object;
            iconCls: object;
            eventColor: string;
            dataset: object;
            solidBar: Boolean;
            bodyColor: string;
            showBullet: Boolean;
        };
    }) => DomConfig | DomConfig[] | string | void) | undefined;
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: ((lhs: EventModel | EventBar, rhs: EventModel | EventBar) => number) | undefined;
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing?: number | undefined;
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: Boolean | undefined;
    extraData?: any;
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-filterEventResources)
     */
    filterEventResources?: Boolean | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: string | number | undefined;
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: Boolean | undefined;
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-footer)
     */
    footer?: string | {
        dock?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        html?: string | undefined;
        cls?: string | undefined;
    } | undefined;
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: string | ((eventRecord: EventModel) => ResourceModel) | undefined;
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-header)
     */
    header?: string | Boolean | PanelHeader | undefined;
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string | number | undefined;
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: Boolean | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-hideAnimation)
     */
    hideAnimation?: object | Boolean | undefined;
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: Boolean | undefined;
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-hideWhenEmpty)
     */
    hideWhenEmpty?: Boolean | undefined;
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string | undefined;
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: Boolean | undefined;
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: string | HTMLElement | undefined;
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: string | HTMLElement | undefined;
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string | undefined;
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-items)
     */
    items?: (Widget | ContainerItemConfig | MenuItemConfig)[] | Record<string, Boolean | ContainerItemConfig | MenuItemConfig | null> | undefined;
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig> | undefined;
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-layout)
     */
    layout?: string | ContainerLayoutConfig | undefined;
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-layoutStyle)
     */
    layoutStyle?: object | undefined;
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-lazyItems)
     */
    lazyItems?: Record<string, ContainerItemConfig> | Widget[] | ContainerItemConfig[] | undefined;
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-listeners)
     */
    listeners?: YearViewListeners | undefined;
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-localeClass)
     */
    localeClass?: typeof Base | undefined;
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: Boolean | undefined;
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-localizableProperties)
     */
    localizableProperties?: string[] | undefined;
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: string | number | undefined;
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig | undefined;
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: string | Boolean | MaskConfig | undefined;
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: string | Date | undefined;
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents) is `'dots'`, this is the maximum number of dots to show
     * below the date number in the cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-maxDots)
     * @deprecated 6.1.2 Use [eventDots](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#property-eventDots) instead.
     */
    maxDots?: number | undefined;
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string | number | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-maximizeOnMobile)
     */
    maximizeOnMobile?: string | number | undefined;
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string | number | undefined;
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: string | Date | undefined;
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string | number | undefined;
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string | number | undefined;
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-monitorResize)
     */
    monitorResize?: Boolean | undefined;
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-namedItems)
     */
    namedItems?: Record<string, ContainerItemConfig> | undefined;
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, Boolean> | undefined;
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to create the "+n more" button which indicates that a day cell has
     * overflowing events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowButtonRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to create the overflow button.
     * @param {string} domConfig.tag The tag name of the element to create.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {string} domConfig.text The inner content of the element. <strong>Note that this will be HTML encoded for XSS safety</strong>
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {number} overflowCount The number of overflowing events.
     * @returns {DomConfig,string,void}
     */
    overflowButtonRenderer?: ((domConfig: {
        tag: string;
        className: object;
        text: string;
        style: object;
        dataset: object;
    }, overflowCount: number) => DomConfig | string | void) | undefined;
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that this view
     * may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig | undefined;
    /**
     * The pointer gesture which shows the popup containing any overflowing events
     * in the current view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopupTrigger)
     */
    overflowPopupTrigger?: "click" | "mouseover" | "hover" | undefined;
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-owner)
     */
    owner?: Widget | undefined;
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-pastEventCls)
     */
    pastEventCls?: string | undefined;
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-positioned)
     */
    positioned?: Boolean | undefined;
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: Boolean | undefined;
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-readOnly)
     */
    readOnly?: Boolean | undefined;
    relayStoreEvents?: Boolean | undefined;
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-resourceImagePath)
     */
    resourceImagePath?: string | undefined;
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-responsive)
     */
    responsive?: object | undefined;
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: Boolean | undefined;
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string | undefined;
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-responsiveTarget)
     */
    responsiveTarget?: string | Widget | undefined;
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ripple)
     */
    ripple?: Boolean | {
        delegate?: string | undefined;
        color?: string | undefined;
        radius?: number | undefined;
        clip?: string | undefined;
    } | undefined;
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: HTMLElement | ShadowRoot | undefined;
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-rtl)
     */
    rtl?: Boolean | undefined;
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-scrollable)
     */
    scrollable?: Boolean | ScrollerConfig | Scroller | undefined;
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: "hide" | "realign" | null | undefined;
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig | undefined;
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig | undefined;
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string | undefined;
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string | undefined;
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string | undefined;
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-shortEventDuration)
     */
    shortEventDuration?: string | number | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showAnimation)
     */
    showAnimation?: object | Boolean | undefined;
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: Boolean | {
        bar?: Boolean | undefined;
        noBar?: Boolean | undefined;
    } | undefined;
    /**
     * How to indicate the presence of events for a date. The default is `heatmap` which adds
     * classes depending on how many events intersect the date.Values may be:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents)
     */
    showEvents?: Boolean | "dots" | "heatmap" | undefined;
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showResourceAvatars)
     */
    showResourceAvatars?: string | Boolean | undefined;
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: Boolean | undefined;
    /**
     * By default, all months show six week rows. Pass `false` to only render as many rows
     * as needed.
     */
    sixWeeks?: Boolean | undefined;
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: Boolean | undefined;
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateful)
     */
    stateful?: object | Boolean | string[] | undefined;
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-statefulEvents)
     */
    statefulEvents?: object | string[] | undefined;
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateId)
     */
    stateId?: string | undefined;
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateProvider)
     */
    stateProvider?: StateProvider | undefined;
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: Boolean | undefined;
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-strips)
     */
    strips?: Record<string, ContainerItemConfig> | undefined;
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-syncCalendarDate)
     */
    syncCalendarDate?: Boolean | undefined;
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-syncViewDate)
     */
    syncViewDate?: Boolean | undefined;
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tab)
     */
    tab?: Boolean | TabConfig | undefined;
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[] | Widget[] | undefined;
    /**
     * The tag name of this Widget's root element
     */
    tag?: string | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tbar)
     */
    tbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-textAlign)
     */
    textAlign?: "left" | "right" | "start" | "end" | "center" | undefined;
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string | undefined;
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-title)
     */
    title?: string | undefined;
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tools)
     */
    tools?: Record<string, ToolConfig> | null | undefined;
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tooltip)
     */
    tooltip?: string | TooltipConfig | null | undefined;
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: Boolean | undefined;
    type?: "year" | "yearview" | undefined;
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ui)
     */
    ui?: string | object | undefined;
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number | undefined;
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number | undefined;
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string | number | undefined;
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-x)
     */
    x?: number | undefined;
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-y)
     */
    y?: number | undefined;
    /**
     * The year to display
     */
    year?: number | undefined;
}>, {
    instance: {
        value?: YearView | undefined;
    };
    refElement: import("vue").Ref<HTMLDivElement | undefined>;
    teleports: import("vue").Ref<Map<any, any>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    beforeAutoCreate: (params: string | ((event: {
        domEvent: Event;
        date: Date;
        resourceRecord: ResourceModel;
        view: <T extends import("@bryntum/calendar").AnyConstructor<Base>>(base: T) => import("@bryntum/calendar").AnyConstructor<InstanceType<T> & import("@bryntum/calendar").CalendarMixinClass>;
    }) => boolean | void | Promise<boolean>)) => void;
    beforeChangeDate: (params: string | ((event: {
        oldDate: Date;
        date: Date;
    }) => boolean | void | Promise<boolean>)) => void;
    beforeDestroy: (params: string | ((event: {
        source: Base;
    }) => void)) => void;
    beforeHide: (params: string | ((event: {
        source: Widget;
    }) => boolean | void | Promise<boolean>)) => void;
    beforeResponsiveStateChange: (params: string | ((event: {
        source: Widget;
        state: string;
        oldState: string;
    }) => void)) => void;
    beforeSetRecord: (params: string | ((event: {
        source: Container;
        record: Model;
    }) => void)) => void;
    beforeShow: (params: string | ((event: {
        source: any;
    }) => boolean | void | Promise<boolean>)) => void;
    beforeShowOverflowPopup: (params: string | ((event: {
        cell: HTMLElement;
        cellData: DayCell;
        date: Date;
        overflowPopup: OverflowPopup;
    }) => boolean | void | Promise<boolean>)) => void;
    beforeStateApply: (params: string | ((event: {
        event: {
            state: object;
        };
    }) => boolean | void | Promise<boolean>)) => void;
    beforeStateSave: (params: string | ((event: {
        event: {
            state: object;
        };
    }) => boolean | void | Promise<boolean>)) => void;
    catchAll: (params: string | ((event: {
        [key: string]: any;
        type: string;
    }) => void)) => void;
    cellMapPopulated: (params: string | (() => void)) => void;
    collapse: (params: string | ((event: {
        source: Panel;
    }) => void)) => void;
    dayCellPopulated: (params: string | ((event: {
        events: EventModel[];
        The: Date;
    }) => void)) => void;
    destroy: (params: string | ((event: {
        source: Base;
    }) => void)) => void;
    dirtyStateChange: (params: string | ((event: {
        source: Container;
        dirty: boolean;
    }) => void)) => void;
    emptyCellClick: (params: string | ((event: {
        domEvent: Event;
        date: Date;
    }) => void)) => void;
    eventAutoCreated: (params: string | ((event: {
        source: <T extends import("@bryntum/calendar").AnyConstructor<Base>>(base: T) => import("@bryntum/calendar").AnyConstructor<InstanceType<T> & import("@bryntum/calendar").CalendarMixinClass>;
        eventRecord: EventModel;
    }) => void)) => void;
    eventPropagate: (params: string | ((event: {
        eventEndDate: Date;
        propagateEndDate: Date;
        isAllDay: boolean;
        isOverflow: boolean;
        overflows: boolean;
        eventRecord: EventModel;
        date: Date;
    }) => void)) => void;
    expand: (params: string | ((event: {
        source: Panel;
    }) => void)) => void;
    focusIn: (params: string | ((event: {
        source: Widget;
        fromElement: HTMLElement;
        toElement: HTMLElement;
        fromWidget: Widget;
        toWidget: Widget;
        backwards: boolean;
    }) => void)) => void;
    focusOut: (params: string | ((event: {
        source: Widget;
        fromElement: HTMLElement;
        toElement: HTMLElement;
        fromWidget: Widget;
        toWidget: Widget;
        backwards: boolean;
    }) => void)) => void;
    hide: (params: string | ((event: {
        source: Widget;
    }) => void)) => void;
    paint: (params: string | ((event: {
        source: Widget;
        firstPaint: boolean;
    }) => void)) => void;
    readOnly: (params: string | ((event: {
        readOnly: boolean;
    }) => void)) => void;
    recompose: (params: string | (() => void)) => void;
    refresh: (params: string | ((event: {
        source: YearView;
    }) => void)) => void;
    resize: (params: string | ((event: {
        source: Widget;
        width: number;
        height: number;
        oldWidth: number;
        oldHeight: number;
    }) => void)) => void;
    responsiveStateChange: (params: string | ((event: {
        source: Widget;
        state: string;
        oldState: string;
    }) => void)) => void;
    show: (params: string | ((event: {
        source: Widget;
    }) => void)) => void;
    showOverflowPopup: (params: string | ((event: {
        cell: HTMLElement;
        cellData: DayCell;
        date: Date;
        overflowPopup: OverflowPopup;
    }) => void)) => void;
    toolClick: (params: string | ((event: {
        source: Tool;
        tool: Tool;
    }) => void)) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<{
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-activationKey)
     */
    activationKey?: string | undefined;
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-adopt)
     */
    adopt?: string | HTMLElement | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-align)
     */
    align?: string | AlignSpec | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string | undefined;
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: Boolean | undefined;
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: Boolean | undefined;
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: Boolean | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: Boolean | undefined;
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-animateTimeShift)
     */
    animateTimeShift?: Boolean | undefined;
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: string | HTMLElement | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaDescription)
     */
    ariaDescription?: string | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaLabel)
     */
    ariaLabel?: string | undefined;
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string | undefined;
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-autoCreate)
     */
    autoCreate?: string | Boolean | {
        gesture?: string | undefined;
        newName?: string | Function | undefined;
        step?: string | undefined;
        snapType?: "round" | "ceil" | "floor" | undefined;
        duration?: string | undefined;
        startHour?: number | undefined;
    } | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bbar)
     */
    bbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bodyCls)
     */
    bodyCls?: string | object | undefined;
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bubbleEvents)
     */
    bubbleEvents?: object | undefined;
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-callOnFunctions)
     */
    callOnFunctions?: Boolean | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: Boolean | undefined;
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-cls)
     */
    cls?: string | object | undefined;
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: Boolean | undefined;
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-collapsible)
     */
    collapsible?: Boolean | PanelCollapserConfig | PanelCollapserOverlayConfig | undefined;
    config?: object | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: Widget | HTMLElement | Rectangle | undefined;
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-contentElementCls)
     */
    contentElementCls?: string | object | undefined;
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string> | undefined;
    /**
     * A date which specifies the year to display. All types of calendar view have a `date`
     * config which they use to set their visible date range according to their configuration
     * and type.
     */
    date?: Date | undefined;
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string | undefined;
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string | undefined;
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names
     * in the header part of each calendar cell.
     */
    dayCellNameFormat?: string | undefined;
    /**
     * An empty function by default, but provided so that you can override it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dayCellRenderer)
     * @param {object} cellData An object that contains data about the cell.
     * @param {Date} cellData.date The Date of this cell
     * @param {Scheduler.model.EventModel[]} cellData.events The array of events in this cell
     * @param {DomConfig} cellData.cellConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object that contains data about the cells element.
     * @param {string} cellData.cellConfig.style The style property is an object containing style properties for the cell header element.
     * @param {string} cellData.cellConfig.cls The cls property is an object whose property names will be added to the cell element if the property value is truthy.
     * @returns {DomConfig,string,void}
     */
    dayCellRenderer?: ((cellData: {
        date: Date;
        events: EventModel[];
        cellConfig: {
            style: string;
            cls: string;
        };
    }) => DomConfig | string | void) | undefined;
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string | undefined;
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: string | ((widget: Widget) => Boolean) | undefined;
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: ContainerItemConfig | undefined;
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions | undefined;
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-descriptionFormat)
     */
    descriptionFormat?: string | string[] | Boolean[] | undefined;
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: ((view: Widget) => string) | undefined;
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-disabled)
     */
    disabled?: Boolean | "inert" | undefined;
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dock)
     */
    dock?: object | "top" | "bottom" | "left" | "right" | "start" | "end" | "header" | "pre-header" | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-draggable)
     */
    draggable?: Boolean | {
        handleSelector?: string | undefined;
    } | undefined;
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dragUnit)
     */
    dragUnit?: string | undefined;
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: Boolean | {
        side?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        size?: string | number | undefined;
        inline?: Boolean | undefined;
    } | undefined;
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string | null> | undefined;
    /**
     * A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which will be used to create the content of a clickable
     * element which is present when no events are in a cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-emptyCellRenderer)
     * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.
     * @returns {DomConfig,void} DomConfig object representing the HTML markup
     */
    emptyCellRenderer?: string | object | ((dayCellRenderer: {
        cellData: DayCell;
    }) => DomConfig | void) | undefined;
    /**
     * When [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopupTrigger) is not a mouseover gesture, setting this to
     * a truthy value means that a tooltip containing the event count will be shown on hover of
     * a day cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventCountTip)
     */
    eventCountTip?: Boolean | Record<string, string | Boolean> | undefined;
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents) is `'dots'`, this controls the layout of the dots
     * below the day number.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventDots)
     */
    eventDots?: {
        marginTop?: number | undefined;
        max?: number | undefined;
        gap?: number | undefined;
        size?: number | undefined;
        stripe?: Boolean | undefined;
    } | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: string | ((event: EventModel) => Boolean) | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: string | ((detail: {
        view: typeof CalendarMixin;
        eventRecord: EventModel;
        resourceRecord: ResourceModel;
        renderData: {
            style: object;
            cls: object;
            iconStyle: object;
            iconCls: object;
            eventColor: string;
            dataset: object;
            solidBar: Boolean;
            bodyColor: string;
        };
        showBullet: Boolean;
    }) => DomConfig | DomConfig[] | string | void) | undefined;
    /**
     * The height of event bars if this view creates event bars.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventHeight)
     */
    eventHeight?: string | number | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: string | ((detail: {
        view: typeof CalendarMixin;
        eventRecord: EventModel;
        resourceRecord: ResourceModel;
        renderData: {
            style: object;
            cls: object;
            iconStyle: object;
            iconCls: object;
            eventColor: string;
            dataset: object;
            solidBar: Boolean;
            bodyColor: string;
            showBullet: Boolean;
        };
    }) => DomConfig | DomConfig[] | string | void) | undefined;
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: ((lhs: EventModel | EventBar, rhs: EventModel | EventBar) => number) | undefined;
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing?: number | undefined;
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: Boolean | undefined;
    extraData?: any;
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-filterEventResources)
     */
    filterEventResources?: Boolean | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: string | number | undefined;
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: Boolean | undefined;
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-footer)
     */
    footer?: string | {
        dock?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        html?: string | undefined;
        cls?: string | undefined;
    } | undefined;
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: string | ((eventRecord: EventModel) => ResourceModel) | undefined;
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-header)
     */
    header?: string | Boolean | PanelHeader | undefined;
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string | number | undefined;
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: Boolean | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-hideAnimation)
     */
    hideAnimation?: object | Boolean | undefined;
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: Boolean | undefined;
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-hideWhenEmpty)
     */
    hideWhenEmpty?: Boolean | undefined;
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string | undefined;
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: Boolean | undefined;
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: string | HTMLElement | undefined;
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: string | HTMLElement | undefined;
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string | undefined;
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-items)
     */
    items?: (Widget | ContainerItemConfig | MenuItemConfig)[] | Record<string, Boolean | ContainerItemConfig | MenuItemConfig | null> | undefined;
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig> | undefined;
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-layout)
     */
    layout?: string | ContainerLayoutConfig | undefined;
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-layoutStyle)
     */
    layoutStyle?: object | undefined;
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-lazyItems)
     */
    lazyItems?: Record<string, ContainerItemConfig> | Widget[] | ContainerItemConfig[] | undefined;
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-listeners)
     */
    listeners?: YearViewListeners | undefined;
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-localeClass)
     */
    localeClass?: typeof Base | undefined;
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: Boolean | undefined;
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-localizableProperties)
     */
    localizableProperties?: string[] | undefined;
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: string | number | undefined;
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig | undefined;
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: string | Boolean | MaskConfig | undefined;
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: string | Date | undefined;
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents) is `'dots'`, this is the maximum number of dots to show
     * below the date number in the cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-maxDots)
     * @deprecated 6.1.2 Use [eventDots](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#property-eventDots) instead.
     */
    maxDots?: number | undefined;
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string | number | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-maximizeOnMobile)
     */
    maximizeOnMobile?: string | number | undefined;
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string | number | undefined;
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: string | Date | undefined;
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string | number | undefined;
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string | number | undefined;
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-monitorResize)
     */
    monitorResize?: Boolean | undefined;
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-namedItems)
     */
    namedItems?: Record<string, ContainerItemConfig> | undefined;
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, Boolean> | undefined;
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to create the "+n more" button which indicates that a day cell has
     * overflowing events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowButtonRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to create the overflow button.
     * @param {string} domConfig.tag The tag name of the element to create.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {string} domConfig.text The inner content of the element. <strong>Note that this will be HTML encoded for XSS safety</strong>
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {number} overflowCount The number of overflowing events.
     * @returns {DomConfig,string,void}
     */
    overflowButtonRenderer?: ((domConfig: {
        tag: string;
        className: object;
        text: string;
        style: object;
        dataset: object;
    }, overflowCount: number) => DomConfig | string | void) | undefined;
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that this view
     * may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig | undefined;
    /**
     * The pointer gesture which shows the popup containing any overflowing events
     * in the current view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopupTrigger)
     */
    overflowPopupTrigger?: "click" | "mouseover" | "hover" | undefined;
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-owner)
     */
    owner?: Widget | undefined;
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-pastEventCls)
     */
    pastEventCls?: string | undefined;
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-positioned)
     */
    positioned?: Boolean | undefined;
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: Boolean | undefined;
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-readOnly)
     */
    readOnly?: Boolean | undefined;
    relayStoreEvents?: Boolean | undefined;
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-resourceImagePath)
     */
    resourceImagePath?: string | undefined;
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-responsive)
     */
    responsive?: object | undefined;
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: Boolean | undefined;
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string | undefined;
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-responsiveTarget)
     */
    responsiveTarget?: string | Widget | undefined;
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ripple)
     */
    ripple?: Boolean | {
        delegate?: string | undefined;
        color?: string | undefined;
        radius?: number | undefined;
        clip?: string | undefined;
    } | undefined;
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: HTMLElement | ShadowRoot | undefined;
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-rtl)
     */
    rtl?: Boolean | undefined;
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-scrollable)
     */
    scrollable?: Boolean | ScrollerConfig | Scroller | undefined;
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: "hide" | "realign" | null | undefined;
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig | undefined;
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig | undefined;
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string | undefined;
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string | undefined;
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string | undefined;
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-shortEventDuration)
     */
    shortEventDuration?: string | number | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showAnimation)
     */
    showAnimation?: object | Boolean | undefined;
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: Boolean | {
        bar?: Boolean | undefined;
        noBar?: Boolean | undefined;
    } | undefined;
    /**
     * How to indicate the presence of events for a date. The default is `heatmap` which adds
     * classes depending on how many events intersect the date.Values may be:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents)
     */
    showEvents?: Boolean | "dots" | "heatmap" | undefined;
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showResourceAvatars)
     */
    showResourceAvatars?: string | Boolean | undefined;
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: Boolean | undefined;
    /**
     * By default, all months show six week rows. Pass `false` to only render as many rows
     * as needed.
     */
    sixWeeks?: Boolean | undefined;
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: Boolean | undefined;
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateful)
     */
    stateful?: object | Boolean | string[] | undefined;
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-statefulEvents)
     */
    statefulEvents?: object | string[] | undefined;
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateId)
     */
    stateId?: string | undefined;
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateProvider)
     */
    stateProvider?: StateProvider | undefined;
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: Boolean | undefined;
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-strips)
     */
    strips?: Record<string, ContainerItemConfig> | undefined;
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-syncCalendarDate)
     */
    syncCalendarDate?: Boolean | undefined;
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-syncViewDate)
     */
    syncViewDate?: Boolean | undefined;
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tab)
     */
    tab?: Boolean | TabConfig | undefined;
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[] | Widget[] | undefined;
    /**
     * The tag name of this Widget's root element
     */
    tag?: string | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tbar)
     */
    tbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-textAlign)
     */
    textAlign?: "left" | "right" | "start" | "end" | "center" | undefined;
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string | undefined;
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-title)
     */
    title?: string | undefined;
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tools)
     */
    tools?: Record<string, ToolConfig> | null | undefined;
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tooltip)
     */
    tooltip?: string | TooltipConfig | null | undefined;
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: Boolean | undefined;
    type?: "year" | "yearview" | undefined;
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ui)
     */
    ui?: string | object | undefined;
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number | undefined;
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number | undefined;
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string | number | undefined;
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-x)
     */
    x?: number | undefined;
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-y)
     */
    y?: number | undefined;
    /**
     * The year to display
     */
    year?: number | undefined;
}>>> & {
    onBeforeAutoCreate?: ((params: string | ((event: {
        domEvent: Event;
        date: Date;
        resourceRecord: ResourceModel;
        view: <T extends import("@bryntum/calendar").AnyConstructor<Base>>(base: T) => import("@bryntum/calendar").AnyConstructor<InstanceType<T> & import("@bryntum/calendar").CalendarMixinClass>;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onBeforeChangeDate?: ((params: string | ((event: {
        oldDate: Date;
        date: Date;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onBeforeDestroy?: ((params: string | ((event: {
        source: Base;
    }) => void)) => any) | undefined;
    onBeforeHide?: ((params: string | ((event: {
        source: Widget;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onBeforeResponsiveStateChange?: ((params: string | ((event: {
        source: Widget;
        state: string;
        oldState: string;
    }) => void)) => any) | undefined;
    onBeforeSetRecord?: ((params: string | ((event: {
        source: Container;
        record: Model;
    }) => void)) => any) | undefined;
    onBeforeShow?: ((params: string | ((event: {
        source: any;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onBeforeStateApply?: ((params: string | ((event: {
        event: {
            state: object;
        };
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onBeforeStateSave?: ((params: string | ((event: {
        event: {
            state: object;
        };
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onCatchAll?: ((params: string | ((event: {
        [key: string]: any;
        type: string;
    }) => void)) => any) | undefined;
    onCellMapPopulated?: ((params: string | (() => void)) => any) | undefined;
    onCollapse?: ((params: string | ((event: {
        source: Panel;
    }) => void)) => any) | undefined;
    onDayCellPopulated?: ((params: string | ((event: {
        events: EventModel[];
        The: Date;
    }) => void)) => any) | undefined;
    onDestroy?: ((params: string | ((event: {
        source: Base;
    }) => void)) => any) | undefined;
    onDirtyStateChange?: ((params: string | ((event: {
        source: Container;
        dirty: boolean;
    }) => void)) => any) | undefined;
    onEventAutoCreated?: ((params: string | ((event: {
        source: <T extends import("@bryntum/calendar").AnyConstructor<Base>>(base: T) => import("@bryntum/calendar").AnyConstructor<InstanceType<T> & import("@bryntum/calendar").CalendarMixinClass>;
        eventRecord: EventModel;
    }) => void)) => any) | undefined;
    onEventPropagate?: ((params: string | ((event: {
        eventEndDate: Date;
        propagateEndDate: Date;
        isAllDay: boolean;
        isOverflow: boolean;
        overflows: boolean;
        eventRecord: EventModel;
        date: Date;
    }) => void)) => any) | undefined;
    onExpand?: ((params: string | ((event: {
        source: Panel;
    }) => void)) => any) | undefined;
    onFocusIn?: ((params: string | ((event: {
        source: Widget;
        fromElement: HTMLElement;
        toElement: HTMLElement;
        fromWidget: Widget;
        toWidget: Widget;
        backwards: boolean;
    }) => void)) => any) | undefined;
    onFocusOut?: ((params: string | ((event: {
        source: Widget;
        fromElement: HTMLElement;
        toElement: HTMLElement;
        fromWidget: Widget;
        toWidget: Widget;
        backwards: boolean;
    }) => void)) => any) | undefined;
    onHide?: ((params: string | ((event: {
        source: Widget;
    }) => void)) => any) | undefined;
    onPaint?: ((params: string | ((event: {
        source: Widget;
        firstPaint: boolean;
    }) => void)) => any) | undefined;
    onReadOnly?: ((params: string | ((event: {
        readOnly: boolean;
    }) => void)) => any) | undefined;
    onRecompose?: ((params: string | (() => void)) => any) | undefined;
    onRefresh?: ((params: string | ((event: {
        source: YearView;
    }) => void)) => any) | undefined;
    onResize?: ((params: string | ((event: {
        source: Widget;
        width: number;
        height: number;
        oldWidth: number;
        oldHeight: number;
    }) => void)) => any) | undefined;
    onResponsiveStateChange?: ((params: string | ((event: {
        source: Widget;
        state: string;
        oldState: string;
    }) => void)) => any) | undefined;
    onShow?: ((params: string | ((event: {
        source: Widget;
    }) => void)) => any) | undefined;
    onToolClick?: ((params: string | ((event: {
        source: Tool;
        tool: Tool;
    }) => void)) => any) | undefined;
    onEmptyCellClick?: ((params: string | ((event: {
        domEvent: Event;
        date: Date;
    }) => void)) => any) | undefined;
    onBeforeShowOverflowPopup?: ((params: string | ((event: {
        cell: HTMLElement;
        cellData: DayCell;
        date: Date;
        overflowPopup: OverflowPopup;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onShowOverflowPopup?: ((params: string | ((event: {
        cell: HTMLElement;
        cellData: DayCell;
        date: Date;
        overflowPopup: OverflowPopup;
    }) => void)) => any) | undefined;
}, {}, {}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
