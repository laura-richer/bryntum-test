import { defineComponent as u, ref as i, provide as h, onMounted as y, getCurrentInstance as g, toRaw as f, watch as v, onBeforeUnmount as D, createElementBlock as S, openBlock as C } from "vue";
import { WeekView as b } from "@bryntum/calendar";
import { WrapperHelper as s } from "../helper/WrapperHelper.js";
const T = /* @__PURE__ */ u({
  __name: "BryntumWeekView",
  props: {
    actionButtons: {},
    activationKey: {},
    adopt: {},
    align: {},
    alignSelf: {},
    allDayEvents: {},
    allowDragCreate: {},
    allowDragMove: {},
    allowDragResize: {},
    allowZoomUnderflow: {},
    anchor: {},
    animateTimeShift: {},
    appendTo: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoCreate: {},
    bbar: {},
    bodyCls: {},
    bubbleEvents: {},
    callOnFunctions: {},
    centered: {},
    cls: {},
    collapsed: {},
    collapsible: {},
    columnHeaderRenderer: { type: [Function, String] },
    config: {},
    constrainTo: {},
    contentElementCls: {},
    coreHours: { type: [Object, Function, String] },
    currentTimeIndicatorRenderer: { type: [Function, String] },
    dashedSubticks: {},
    dataset: {},
    date: {},
    dateFilter: { type: [Function, String] },
    dateFormat: {},
    dateSeparator: {},
    dayCellRenderer: { type: [Function, String] },
    dayEndTime: {},
    dayHeaderRenderer: { type: [Function, String] },
    dayStartShift: {},
    dayStartTime: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    defaultScrollOptions: {},
    descriptionFormat: {},
    descriptionRenderer: { type: Function },
    disabled: {},
    dock: {},
    draggable: {},
    dragUnit: {},
    drawer: {},
    elementAttributes: {},
    endDate: {},
    eventFilter: { type: [Function, String] },
    eventHeaderRenderer: { type: [Function, String] },
    eventLayout: {},
    eventRenderer: { type: [Function, String] },
    eventSorter: { type: Function },
    eventSpacing: {},
    extendAllDayEndDay: {},
    extraData: {},
    filterEventResources: {},
    fitHours: {},
    fixedDuration: {},
    flex: {},
    floating: {},
    footer: {},
    getPrimaryResource: { type: [Function, String] },
    header: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideEmptyDays: {},
    hideNonWorkingDays: {},
    hideWhenEmpty: {},
    hourHeight: {},
    hourHeightBreakpoints: {},
    id: {},
    ignoreParentReadOnly: {},
    increment: {},
    insertBefore: {},
    insertFirst: {},
    interDayDrag: {},
    interDayResize: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    maxAllDayHeight: {},
    maxDate: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minDate: {},
    minDayWidth: {},
    minEventHeight: {},
    minHeight: {},
    minHourHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    noMatchingDates: {},
    nonWorkingDays: {},
    overflowPopup: {},
    owner: {},
    pastEventCls: {},
    positioned: {},
    preventTooltipOnTouch: {},
    range: {},
    readOnly: {},
    relayStoreEvents: {},
    resourceImagePath: {},
    responsive: {},
    responsiveRoot: {},
    responsiveState: {},
    responsiveTarget: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    selectorButton: {},
    selectorMenuItem: {},
    shiftIncrement: {},
    shortDateFormat: {},
    shortDateTimeFormat: {},
    shortEventCls: {},
    shortEventDuration: {},
    showAllDayHeader: {},
    showAnimation: {},
    showBullet: {},
    showCurrentTime: {},
    showResourceAvatars: {},
    showTime: {},
    showTooltipWhenDisabled: {},
    sixMinuteTicks: {},
    snapRelativeToEventStartDate: {},
    stackMultiDayEvents: {},
    startDate: {},
    stateful: {},
    statefulEvents: {},
    stateId: {},
    stateProvider: {},
    strictRecordMapping: {},
    strips: {},
    syncCalendarDate: {},
    syncViewDate: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    tbar: {},
    textAlign: {},
    tickRenderer: { type: [Function, String] },
    timeAxisTimeFormat: {},
    timeFormat: {},
    timeSnapType: {},
    title: {},
    tools: {},
    tooltip: {},
    trapFocus: {},
    type: {},
    ui: {},
    visibleStartTime: {},
    weekStartDay: {},
    weight: {},
    width: {},
    x: {},
    y: {},
    zoomOnMouseWheel: {}
  },
  emits: ["beforeAutoCreate", "beforeChangeDate", "beforeDestroy", "beforeHide", "beforeResponsiveStateChange", "beforeSetRecord", "beforeShow", "beforeStateApply", "beforeStateSave", "catchAll", "cellMapPopulated", "collapse", "dayCellPopulated", "destroy", "dirtyStateChange", "eventAutoCreated", "eventPropagate", "expand", "focusIn", "focusOut", "hide", "layoutUpdate", "paint", "rangeChange", "readOnly", "recompose", "refresh", "resize", "responsiveStateChange", "shiftIncrementChange", "show", "tickChange", "toolClick"],
  setup(w, { expose: l, emit: d }) {
    const c = d, n = {
      instanceClass: b,
      instanceName: "WeekView",
      configNames: [
        "actionButtons",
        "activationKey",
        "adopt",
        "align",
        "allDayEvents",
        "anchor",
        "ariaDescription",
        "ariaLabel",
        "bbar",
        "bodyCls",
        "bubbleEvents",
        "callOnFunctions",
        "centered",
        "collapsible",
        "columnHeaderRenderer",
        "config",
        "constrainTo",
        "contentElementCls",
        "currentTimeIndicatorRenderer",
        "dayCellRenderer",
        "dayHeaderRenderer",
        "dayStartShift",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "descriptionRenderer",
        "dock",
        "draggable",
        "drawer",
        "elementAttributes",
        "endDate",
        "eventFilter",
        "eventHeaderRenderer",
        "eventLayout",
        "eventRenderer",
        "eventSorter",
        "eventSpacing",
        "fixedDuration",
        "floating",
        "footer",
        "getPrimaryResource",
        "header",
        "hideAnimation",
        "hideWhenEmpty",
        "ignoreParentReadOnly",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "maxAllDayHeight",
        "monitorResize",
        "namedItems",
        "nonWorkingDays",
        "overflowPopup",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "resourceImagePath",
        "responsive",
        "responsiveRoot",
        "responsiveState",
        "responsiveTarget",
        "ripple",
        "rootElement",
        "scrollAction",
        "selectorButton",
        "selectorMenuItem",
        "shortEventCls",
        "shortEventDuration",
        "showAllDayHeader",
        "showAnimation",
        "showBullet",
        "showResourceAvatars",
        "showTooltipWhenDisabled",
        "startDate",
        "stateful",
        "statefulEvents",
        "stateId",
        "stateProvider",
        "strips",
        "tab",
        "tabBarItems",
        "tag",
        "tbar",
        "textAlign",
        "tickRenderer",
        "timeAxisTimeFormat",
        "timeFormat",
        "trapFocus",
        "type",
        "ui",
        "visibleStartTime",
        "weekStartDay",
        "weight",
        "zoomOnMouseWheel"
      ],
      propertyConfigNames: [
        "alignSelf",
        "allowDragCreate",
        "allowDragMove",
        "allowDragResize",
        "allowZoomUnderflow",
        "animateTimeShift",
        "appendTo",
        "ariaLive",
        "autoCreate",
        "cls",
        "collapsed",
        "coreHours",
        "dashedSubticks",
        "dataset",
        "date",
        "dateFilter",
        "dateFormat",
        "dateSeparator",
        "dayEndTime",
        "dayStartTime",
        "defaultScrollOptions",
        "descriptionFormat",
        "disabled",
        "dragUnit",
        "extendAllDayEndDay",
        "extraData",
        "filterEventResources",
        "fitHours",
        "flex",
        "height",
        "hidden",
        "hideEmptyDays",
        "hideNonWorkingDays",
        "hourHeight",
        "hourHeightBreakpoints",
        "id",
        "increment",
        "insertBefore",
        "insertFirst",
        "interDayDrag",
        "interDayResize",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxDate",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minDate",
        "minDayWidth",
        "minEventHeight",
        "minHeight",
        "minHourHeight",
        "minWidth",
        "noMatchingDates",
        "onBeforeAutoCreate",
        "onBeforeChangeDate",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeResponsiveStateChange",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStateApply",
        "onBeforeStateSave",
        "onCatchAll",
        "onCellMapPopulated",
        "onCollapse",
        "onDayCellPopulated",
        "onDestroy",
        "onDirtyStateChange",
        "onEventAutoCreated",
        "onEventPropagate",
        "onExpand",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onLayoutUpdate",
        "onPaint",
        "onRangeChange",
        "onReadOnly",
        "onRecompose",
        "onRefresh",
        "onResize",
        "onResponsiveStateChange",
        "onShiftIncrementChange",
        "onShow",
        "onTickChange",
        "onToolClick",
        "pastEventCls",
        "range",
        "readOnly",
        "rtl",
        "scrollable",
        "shiftIncrement",
        "shortDateFormat",
        "shortDateTimeFormat",
        "showCurrentTime",
        "showTime",
        "sixMinuteTicks",
        "snapRelativeToEventStartDate",
        "stackMultiDayEvents",
        "strictRecordMapping",
        "syncCalendarDate",
        "syncViewDate",
        "timeSnapType",
        "title",
        "tools",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "dayCellCls",
        "firstVisibleCell",
        "firstVisibleDate",
        "focusVisible",
        "hasChanges",
        "horizontalScroller",
        "isSettingValues",
        "isValid",
        "lastVisibleCell",
        "lastVisibleDate",
        "parent",
        "record",
        "state",
        "values"
      ],
      eventNames: [
        "beforeAutoCreate",
        "beforeChangeDate",
        "beforeDestroy",
        "beforeHide",
        "beforeResponsiveStateChange",
        "beforeSetRecord",
        "beforeShow",
        "beforeStateApply",
        "beforeStateSave",
        "catchAll",
        "cellMapPopulated",
        "collapse",
        "dayCellPopulated",
        "destroy",
        "dirtyStateChange",
        "eventAutoCreated",
        "eventPropagate",
        "expand",
        "focusIn",
        "focusOut",
        "hide",
        "layoutUpdate",
        "paint",
        "rangeChange",
        "readOnly",
        "recompose",
        "refresh",
        "resize",
        "responsiveStateChange",
        "shiftIncrementChange",
        "show",
        "tickChange",
        "toolClick"
      ]
    }, a = {}, o = i(), r = i(/* @__PURE__ */ new Map());
    return h("teleports", r), y(() => {
      const e = g();
      a.value = s.createWidget({
        me: e,
        widgetData: n,
        emit: c,
        element: o.value,
        toRaw: f
      });
      const t = (p, m) => v(() => e.props[p], m);
      s.watchProps(a.value, n, t);
    }), D(() => {
      var e, t;
      (t = (e = a.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), l({
      instance: a,
      refElement: o,
      teleports: r
    }), (e, t) => (C(), S("div", {
      ref_key: "refElement",
      ref: o
    }, null, 512));
  }
});
export {
  T as _
};
//# sourceMappingURL=Dw_EPWaU.js.map
