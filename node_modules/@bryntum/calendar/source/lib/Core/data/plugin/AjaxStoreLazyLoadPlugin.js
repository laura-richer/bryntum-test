import StoreLazyLoadPlugin from './StoreLazyLoadPlugin.js';

/**
 * @module Core/data/plugin/AjaxStoreLazyLoadPlugin
 */

/**
 * Plugin for AjaxStore that handles lazy loading.
 * @plugin
 * @private
 * @extends Core/data/plugin/StoreLazyLoadPlugin
 */
export default class AjaxStoreLazyLoad extends StoreLazyLoadPlugin {
    static $name = 'AjaxStoreLazyLoadPlugin';

    // There's no merging of pluginConfigs
    static get pluginConfig() {
        const config = {};

        for (const prop in super.pluginConfig) {
            config[prop] = [...super.pluginConfig[prop]];
        }

        config.assign.push(
            'updateResponseTotalProperty',
            'updateResponseDataProperty'
        );
        return config;
    };

    // AjaxStore's totalProperty will apply for lazyLoading
    updateResponseTotalProperty(name) {
        this.totalCountProperty = name;
    }

    // AjaxStore's dataProperty will apply for lazyLoading
    updateResponseDataProperty(name) {
        this.dataProperty = name;
    }

    // Scoped to run on the client
    async requestData(params) {
        const
            {
                totalCountProperty,
                dataProperty
            }    = this.lazyLoad,
            resp = await this.internalLoad(params, '', undefined, false);

        return {
            [totalCountProperty] : resp.json[totalCountProperty],
            [dataProperty]       : resp.data
        };
    }

    // Overridden to support params param
    async load(params) {
        const
            { client }          = this,
            originalStoreParams = client.params;

        if (params) {
            // Temporarily set provided params on the store
            client.params = {
                ...params,
                ...originalStoreParams
            };
        }

        if (client.autoLoad && client.isConstructing) {
            // If AjaxStore autoLoad call, we wait a bit for the store to be constructed
            await new Promise(resolve => this.requestAnimationFrame(resolve));
        }

        await super.load();

        if (params) {
            // Reset the original params
            client.params = originalStoreParams;
        }
    }

};
