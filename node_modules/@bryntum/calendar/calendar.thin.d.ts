/*!
 *
 * Bryntum Calendar 6.2.1 (TRIAL VERSION)
 *
 * Copyright(c) 2025 Bryntum AB
 * https://bryntum.com/contact
 * https://bryntum.com/license
 *
 * Bryntum incorporates third-party code licensed under the MIT and Apache-2.0 licenses.
 * See the licenses below or visit https://bryntum.com/products/calendar/docs/guide/Calendar/licenses
 *
 * # Third Party Notices
 * 
 * Bryntum uses the following third party libraries:
 * 
 * * [Font Awesome 6 Free](https://fontawesome.com/license/free) (MIT/SIL OFL 1.1)
 * * [Roboto font](https://github.com/google/roboto) (Apache-2.0)
 * * [Styling Cross-Browser Compatible Range Inputs with Sass](https://github.com/darlanrod/input-range-sass) (MIT)
 * * [Tree Walker polyfill (only applies to Salesforce)](https://github.com/Krinkle/dom-TreeWalker-polyfill) (MIT)
 * * [chronograph](https://github.com/bryntum/chronograph) (MIT)
 * * [later.js](https://github.com/bunkat/later) (MIT)
 * * [Monaco editor (only used in our demos)](https://microsoft.github.io/monaco-editor) (MIT)
 * * Map/Set polyfill to fix performance issues for Salesforce LWS (MIT)
 * 
 * Note: the **chronograph** and **later.js** libraries are used in Bryntum Scheduler Pro and Bryntum Gantt, but they are
 * listed for all Bryntum products since the distribution contains trial versions of the thin bundles for all other
 * products. TreeWalker is only used in the LWC bundle for Salesforce. Roboto font is only used in the material theme.
 * 
 * ## Font Awesome 6 Free
 * 
 * [Font Awesome Free 6 by @fontawesome](https://fontawesome.com/)
 * 
 * Font Awesome Free is free, open source, and GPL friendly. You can use it for commercial projects, open source projects,
 * or really almost whatever you want.
 * 
 * [Full Font Awesome Free license](https://fontawesome.com/license/free)
 * 
 * ## Roboto font
 * 
 * [Apache License Version 2.0, January 2004](https://www.apache.org/licenses/LICENSE-2.0)
 * 
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * 
 * 1. Definitions.
 * 
 * "License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9
 * of this document.
 * 
 * "Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.
 * 
 * "Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are
 * under common control with that entity. For the purposes of this definition,
 * "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by
 * contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial
 * ownership of such entity.
 * 
 * "You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.
 * 
 * "Source" form shall mean the preferred form for making modifications, including but not limited to software source code,
 * documentation source, and configuration files.
 * 
 * "Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including
 * but not limited to compiled object code, generated documentation, and conversions to other media types.
 * 
 * "Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as
 * indicated by a copyright notice that is included in or attached to the work
 * (an example is provided in the Appendix below).
 * 
 * "Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work
 * and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an
 * original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain
 * separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.
 * 
 * "Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or
 * additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the
 * Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner.
 * For the purposes of this definition, "submitted"
 * means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including
 * but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems
 * that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding
 * communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a
 * Contribution."
 * 
 * "Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received
 * by Licensor and subsequently incorporated within the Work.
 * 
 * 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to
 *    You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce,
 *    prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such
 *    Derivative Works in Source or Object form.
 * 
 * 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a
 *    perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable
 *    (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise
 *    transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are
 *    necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s)
 *    with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (
 *    including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within
 *    the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this
 *    License for that Work shall terminate as of the date such litigation is filed.
 * 
 * 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with
 *    or without modifications, and in Source or Object form, provided that You meet the following conditions:
 * 
 * (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and
 * 
 * (b) You must cause any modified files to carry prominent notices stating that You changed the files; and
 * 
 * (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark,
 * and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the
 * Derivative Works; and
 * 
 * (d) If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute
 * must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that
 * do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file
 * distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the
 * Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices
 * normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You
 * may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the
 * NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the
 * License.
 * 
 * You may add Your own copyright statement to Your modifications and may provide additional or different license terms and
 * conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole,
 * provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this
 * License.
 * 
 * 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for
 *    inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any
 *    additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any
 *    separate license agreement you may have executed with Licensor regarding such Contributions.
 * 
 * 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product
 *    names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and
 *    reproducing the content of the NOTICE file.
 * 
 * 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and
 *    each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 *    either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
 *    MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness
 *    of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this
 *    License.
 * 
 * 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or
 *    otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing,
 *    shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or
 *    consequential damages of any character arising as a result of this License or out of the use or inability to use the
 *    Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or
 *    any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such
 *    damages.
 * 
 * 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose
 *    to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or
 *    rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and
 *    on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and
 *    hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason
 *    of your accepting any such warranty or additional liability.
 * 
 * END OF TERMS AND CONDITIONS
 * 
 * APPENDIX: How to apply the Apache License to your work.
 * 
 * To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by
 * brackets "[]"
 * replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the
 * appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose
 * be included on the same "printed page" as the copyright notice for easier identification within third-party archives.
 * 
 * Copyright [yyyy] [name of copyright owner]
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 * 
 * [APACHE LICENSE, VERSION 2.0](http://www.apache.org/licenses/LICENSE-2.0)
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "
 * AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 * 
 * ## Styling Cross-Browser Compatible Range Inputs with Sass
 * 
 * Github: [input-range-sass](https://github.com/darlanrod/input-range-sass)
 * 
 * Author: [Darlan Rod](https://github.com/darlanrod)
 * 
 * Version 1.4.1
 * 
 * The MIT License (MIT)
 * 
 * Copyright (c) 2016 Darlan Rod
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * ## Tree Walker polyfill
 * 
 * The MIT License (MIT)
 * 
 * [Copyright 2013–2017 Timo Tijhof](https://github.com/Krinkle/dom-TreeWalker-polyfill)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * ## chronograph
 * 
 * GitHub: [chronograph](https://github.com/bryntum/chronograph)
 * 
 * The MIT License (MIT)
 * 
 * Copyright (c) 2023 Bryntum
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * ## later.js
 * 
 * GitHub: [later.js](https://github.com/bunkat/later)
 * 
 * The MIT License (MIT)
 * 
 * Copyright © 2013 BunKat
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * ## Monaco editor
 * 
 * GitHub: [Monaco editor](https://microsoft.github.io/monaco-editor) (MIT)
 * 
 * The MIT License (MIT)
 * 
 * Copyright (c) 2016 - present Microsoft Corporation
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 * ## Map/Set polyfill to fix performance issues for Salesforce LWS
 * 
 * Copyright © 2024 Certinia Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */
import { CellCopyPaste, CellCopyPasteConfig, CellEdit, CellEditConfig, CellMenu, CellMenuConfig, CellTooltip, CellTooltipConfig, Column,
    ColumnAutoWidth, ColumnAutoWidthConfig, ColumnDragToolbar, ColumnDragToolbarConfig, ColumnPicker, ColumnPickerConfig, ColumnRename,
    ColumnRenameConfig, ColumnReorder, ColumnReorderConfig, ColumnResize, ColumnResizeConfig, ColumnSummaryConfig, ExportConfig, FileDrop,
    FileDropConfig, FillHandle, FillHandleConfig, Filter, FilterBar, FilterBarConfig, FilterConfig, Grid, GridBase, ExcelExporter as
    GridExcelExporter, ExcelExporterConfig as GridExcelExporterConfig, GroupSummary as GridGroupSummary, GroupSummaryConfig as
    GridGroupSummaryConfig, GridLocation, GridLocationConfig, LockRows as GridLockRows, LockRowsConfig as GridLockRowsConfig, PdfExport as
    GridPdfExport, PdfExportConfig as GridPdfExportConfig, Print as GridPrint, PrintConfig as GridPrintConfig, RowReorder as GridRowReorder,
    RowReorderConfig as GridRowReorderConfig, RowResize as GridRowResize, RowResizeConfig as GridRowResizeConfig, GridSelectionMode, Split
    as GridSplit, SplitConfig as GridSplitConfig, Summary as GridSummary, SummaryConfig as GridSummaryConfig, Group, GroupConfig,
    HeaderMenu, HeaderMenuConfig, MergeCells, MergeCellsConfig, PreserveScrollOptions, QuickFind, QuickFindConfig, RecordPositionContext,
    RegionResize, RegionResizeConfig, Row, RowCopyPaste, RowCopyPasteConfig, RowEdit, RowEditConfig, RowExpander, RowExpanderConfig, Search,
    SearchConfig, Sort, SortConfig, StickyCells, StickyCellsConfig, Stripe, StripeConfig, SubGrid, SubGridConfig, Tree, TreeConfig,
    TreeGroup, TreeGroupConfig, XLSColumn, XlsProviderBase } from '../../Grid/build/grid.thin'
import { AjaxStore, AjaxStoreConfig, AlignSpec, Base, BryntumListenerConfig, BryntumScrollOptions, Button, ButtonConfig, ButtonGroup,
    CalendarPanel, Collection, CollectionConfig, CollectionFilter, CollectionFilterConfig, CollectionSorter, CollectionSorterConfig,
    Container, ContainerConfig, DataField, DatePicker, DatePickerConfig, DomClassList, DomConfig, DragContext, Duration, DurationConfig,
    DurationUnit, Editor, EditorConfig, EventsClass, Field, FormulaProvider, FormulaProviderConfig, Grouper, HttpMethods, InstancePlugin,
    KeyMap, KeyMapConfig, LocaleHelper, LocaleManager, Mask, MaskConfig, Menu, MenuConfig, MenuItem, MenuItemConfig, Model, Month,
    MonthConfig, PagingToolbar, PagingToolbarConfig, Panel, PanelCollapser, PanelCollapserConfig, PanelCollapserOverlay,
    PanelCollapserOverlayConfig, PanelHeader, Popup, Rectangle, ScrollManager, ScrollManagerConfig, Scroller, ScrollerConfig, Sorter,
    StateProvider, StateTrackingManager, StateTrackingManagerConfig, Store, StoreConfig, SyncDataOnLoadOptions, Tab, TabConfig, TextField,
    TextFieldConfig, Tool, ToolConfig, Toolbar, ToolbarConfig, ToolbarItems, Tooltip, TooltipConfig, VueConfig, Widget } from
    '../../Core/build/core.thin'
import { AbstractCrudManager, AssignmentModel, AssignmentModelConfig, AssignmentStore, AssignmentStoreConfig, CrudManagerStoreDescriptor,
    DependencyModel, DependencyModelConfig, DependencyStore, DependencyStoreConfig, EventModel, EventModelConfig, EventStore,
    EventStoreConfig, ProjectConsumer, ProjectConsumerClass, ProjectModelMixin, RecurrenceCombo, RecurrenceConfirmationPopup,
    RecurrenceConfirmationPopupConfig, RecurrenceLegendButton, ResourceFilter, ResourceFilterConfig, ResourceModel, ResourceModelConfig,
    ResourceStore, ResourceStoreConfig, ResourceTimeRangeModel, ResourceTimeRangeModelConfig, ResourceTimeRangeStore,
    ResourceTimeRangeStoreConfig, ScheduleTableExporter, Scheduler, SchedulerColumn, SchedulerColumnConfig, SchedulerContainerItem,
    SchedulerContainerItemConfig, SchedulerContainerLayoutConfig, CrudManager as SchedulerCrudManager, SchedulerDatePicker, EventCopyPaste
    as SchedulerEventCopyPaste, EventEdit as SchedulerEventEdit, EventEditor as SchedulerEventEditor, EventMenu as SchedulerEventMenu,
    EventNavigationClass as SchedulerEventNavigationClass, EventSelectionClass as SchedulerEventSelectionClass, ExcelExporter as
    SchedulerExcelExporter, SchedulerInputFieldConfig, SchedulerModelFieldConfig, ProjectModel as SchedulerProjectModel, ScheduleMenu as
    SchedulerScheduleMenu, TimeRangeModel as SchedulerTimeRangeModel, TimeRangeStore as SchedulerTimeRangeStore, TimeRanges as
    SchedulerTimeRanges, TimeSpan, TimeSpanConfig } from '../../Scheduler/build/scheduler.thin'

type AnyConstructor<A = any> = new (...input: any[]) => A

/**
 * An immutable object that describes a calendar drag mode. These objects are used to simplify detecting the drag mode
 * to apply appropriate actions.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#typedef-CalendarDragMode)
 */
type CalendarDragMode = {
    /**
     * The value `'create'`, `'move'`, or `'resize'`.
     */
    type: 'create'|'move'|'resize'
    /**
     * The value `true` if `type === 'create'`, otherwise `false`.
     */
    create: boolean
    /**
     * The value `true` if `type === 'move'`, otherwise `false`.
     */
    move: boolean
    /**
     * The value `true` if `type === 'resize'`, otherwise `false`.
     */
    resize: boolean
}

/**
 * Format expected to be returned in a `validateCreateFn`
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#typedef-ValidateCreateResult)
 */
type ValidateCreateResult = {
    /**
     * Allow adding to store
     */
    add: boolean
    /**
     * Allow editor to open
     */
    edit: boolean
}

/**
 * A mutable object used to render an element of the time range.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#typedef-TimeRangeRenderData)
 */
type TimeRangeRenderData = {
    /**
     * The record being rendered
     */
    record: TimeRangeModel
    /**
     * This is `true` if the TimeRange has zero duration, meaning it will be
     * rendered as a line with no `header`, `body` or `footer`.
     */
    isLine: boolean
    /**
     * The color to be applied to the element
     */
    color: string
    /**
     * An object whose truthy property names will be added to the element's CSS `classList`
     */
    cls: object
    /**
     * An object containing style properties for the element
     */
    style: object
    /**
     * The render data for the outermost element. This property is present when
     * rendering any of the inner elements. The outer element is rendered after all inner elements, meaning this object
     * can be modified by an inner element renderer function.
     */
    outer?: TimeRangeRenderData
    /**
     * The render data for the header element. This property is present when
     * rendering the outermost element. The corresponding element has already been rendered, meaning that this object
     * should be considered read only.
     */
    header?: TimeRangeRenderData
    /**
     * The render data for the body element. This property is present when
     * rendering the outermost element. The corresponding element has already been rendered, meaning that this object
     * should be considered read only.
     */
    body?: TimeRangeRenderData
    /**
     * The render data for the footer element. This property is present when
     * rendering the outermost element. The corresponding element has already been rendered, meaning that this object
     * should be considered read only.
     */
    footer?: TimeRangeRenderData
}

/**
 * The object passed to a [renderer](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-renderer) function.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#typedef-TimeRangeRenderInfo)
 */
type TimeRangeRenderInfo = {
    /**
     * The render data object to modify
     */
    renderData: TimeRangeRenderData
    /**
     * The record being rendered
     */
    timeRange: TimeRangeModel
    /**
     * The default DOM config. This is only passed to the `outer` renderer and represents
     * the DOM config that will be used for the element. The `className` and `style` properties are applied after the
     * renderer returns.
     */
    domConfig?: DomConfig
}

/**
 * An object containing rendering methods for the various elements of a time range. All functions are optional. The
 * `footer` function is special in that there is no footer element by default. If a footer is desired, a `footer`
 * renderer function must be provided.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#typedef-TimeRangeRenderer)
 */
type TimeRangeRenderer = {
    /**
     * An optional function to be called to render the outermost element. This function is
     * passed a [TimeRangeRenderInfo](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#typedef-TimeRangeRenderInfo) object.
     */
    outer?: Function
    /**
     * An optional function to be called to render the body element. This function is passed
     * a [TimeRangeRenderInfo](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#typedef-TimeRangeRenderInfo) object.
     */
    body?: Function
    /**
     * An optional function to be called to render the header element. This function is passed
     * a [TimeRangeRenderInfo](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#typedef-TimeRangeRenderInfo) object.
     */
    header?: Function
    /**
     * An optional function to be called to render the footer element. This function is passed
     * a [TimeRangeRenderInfo](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#typedef-TimeRangeRenderInfo) object.
     */
    footer?: Function
}

type CalendarHit = {
    /**
     * The type of the target:
     * `'event'`, `'dayNumber'`, `'weekNumber'`, `'cellOverflow'`, or `'schedule'`.
     */
    type: 'event'|'dayNumber'|'weekNumber'|'cellOverflow'|'schedule'
    /**
     * The date of the target.
     */
    date: Date
    /**
     * The target event record.
     */
    eventRecord: EventModel
}

/**
 * An object which contains properties which encapsulate hour height breakpoints which dictate
 * when intervening time indicators are introduced into the DayView's time axis.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#typedef-HourHeightBreakPoints)
 */
type HourHeightBreakPoints = {
    /**
     * The height at which half hour time is displayed.
     */
    thirty: number
    /**
     * The height at which all fifteen minute times are displayed.
     */
    fifteen: number
    /**
     * The height at which all ten minute times are displayed.
     */
    ten: number
    /**
     * The height at which all five minute times are displayed.
     */
    five: number
}

/**
 * An object which describes the properties of action buttons injected into event blocks.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#typedef-ActionButtonsConfig)
 */
type ActionButtonsConfig = Record<string, string|Function> & {
    /**
     * A class name to add to the button element. It may be of the form
     * `b-icon-xxxx` which will use a font-awesome icon by that name.
     */
    cls: string
    /**
     * The tooltip to show when the button is hovered.
     */
    tooltip: string
    /**
     * A function, or the name of a function in the ownership hierarchy
     * to call when the button is clicked.
     */
    handler: string|Function
}

/**
 * A data block created by all [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) Calendar views to
 * encapsulate occupied day cells and the events which intersect with each date to be shown in the UI.
 * All useful data about the date and the shape of the UI is included.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-DayCell)
 */
type DayCell = {
    /**
     * The owning view of the cell.
     */
    view: AgendaView|CalendarRow|DayResourceCalendarRow|DayResourceView|DayView|EventList|MonthView|ResourceView|WeekView|YearView
    /**
     * The date of the cell.
     */
    date: Date
    /**
     * a `YYYY-MM-DD` formatted date key for the cell.
     */
    key: string
    /**
     * The overall cell index in the cell-based UI being created.
     */
    cellIndex: number
    /**
     * The day of week for the cell: 0=Sunday, 6=Saturday
     */
    day: number
    /**
     * The column index in the cell-based UI being created.
     */
    columnIndex: number
    /**
     * The visible column index (eg 0 for a Monday if Sunday is the week start day, but was hidden)
     */
    visibleColumnIndex: number
    /**
     * `true` if the owning view considers the date a non-working day.
     */
    isNonWorking: boolean
    /**
     * The `[year, week]` encapsulating the cell.
     */
    week: number[]
    /**
     * The cell is outside the view's primary time range. Only significant
     * when used by a CalendarPanel which encapsulates a single month.
     */
    isOtherMonth: boolean
    /**
     * `true` if the date cell is not for a hidden day.
     */
    visible: boolean
    /**
     * The date of the following cell.
     */
    tomorrow: Date
    /**
     * `true` if the cell is at the start of a visible row.
     */
    isRowStart: boolean
    /**
     * `true` if the cell is at the end of a visible row.
     */
    isRowEnd: boolean
    /**
     * `true` if the `renderedEvents` overflow the cell height and
     * require a `+n more` button.
     */
    hasOverflow: boolean
    /**
     * The events which are to be shown for this date.
     */
    events: EventModel[]
    /**
     * <strong>Note</strong> this only exists when the cell is
     * owned by a subview of a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView), or while creating resource columns
     * in a [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView).
     */
    resource: ResourceModel
    /**
     * If this view renders event bars ([MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView),
     * [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow)), then this is an array of
     * [event bar](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-EventBar) definitions which belong in the cell. Whether all can be rendered depends
     * upon the view's configured [eventHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventHeight) and whether
     * the cell is of fixed height. The `hasOverflow` property is set if the rendered events overflow
     * a cell's fixed capacity.
     */
    renderedEvents: EventBar[]
}

/**
 * A data block which describes how an event bar is to be rendered into a day cell.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-EventBar)
 */
type EventBar = {
    /**
     * The event record for which the event bar is being rendered.
     */
    eventRecord: EventModel
    /**
     * The date of the last cell into which the event bar will extend.
     */
    propagateEndDate: Date
    /**
     * The CSS classes to apply to the event bar.
     */
    cls: DomClassList
    /**
     * The CSS classes to apply to an event icon.
     */
    iconCls: DomClassList
    /**
     * Property names and values to be applied to the Event bar's DOM `dataset`
     */
    dataset: object
    /**
     * Either a predefined colour name, or a DOM colour value to apply to the event bar.
     */
    eventColor: string
    /**
     * `true` if the event is flagged as an all day event in its data, or
     * if it spans a day boundary and occupies more than one cell.
     */
    isAllDay: boolean
    /**
     * `true` if this event bar is a continuation from a previous cell.
     */
    isOverflow: boolean
    /**
     * `true` if this event bar flows into the next cell.
     */
    overflows: boolean
    /**
     * `true` if the event bar is to be rendered with a solid background of
     * its defined colour. All day events are solid by default.
     */
    solidBar: boolean
}

/**
 * Type with available listeners functions for [AgendaColumn](https://bryntum.com/products/grid/docs/api/Calendar/column/AgendaColumn) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type AgendaColumnListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
}

/**
 * Type with listeners options for [AgendaColumn](https://bryntum.com/products/grid/docs/api/Calendar/column/AgendaColumn) class.
 */
type AgendaColumnListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [AgendaColumn](https://bryntum.com/products/grid/docs/api/Calendar/column/AgendaColumn) class.
 */
type AgendaColumnConfig = {
    type?: 'agendacolumn'
    /**
     * A callback function called after every cell has been rendered, which lets you mutate the cell/row or
     * contents. This is useful when you want to mutate contents of a pre-configured column (e.g. `CheckColumn`,
     * `WidgetColumn` etc.) without overwriting the built-in `renderer`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-afterRenderCell)
     * @param {object} renderData Object containing rendering parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {any} renderData.value Value to be displayed in the cell
     * @param {Core.data.Model} renderData.record Record for the row
     * @param {Grid.column.Column} renderData.column This column
     * @param {Grid.view.Grid} renderData.grid This grid
     * @param {Grid.row.Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/calendar/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport `true` if the record is being exported to Excel or a textual format, enabling special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call.
     * @returns {void}
     */
    afterRenderCell?: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => void
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align?: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-alwaysClearCell)
     */
    alwaysClearCell?: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel?: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-autoHeight)
     */
    autoHeight?: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml?: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-autoWidth)
     */
    autoWidth?: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel?: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls?: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/calendar/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor?: EditorConfig
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-cellMenuItems)
     */
    cellMenuItems?: Record<string, MenuItemConfig|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-children)
     */
    children?: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls?: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-collapseMode)
     */
    collapseMode?: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed?: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible?: boolean
    /**
     * Set to `false` to prevent this column header from being dragged
     */
    draggable?: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector?: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-editor)
     * @param {any} ref React `RefObject` for editor JSX component.
     * @returns {any} Returns React editor JSX component template
     */
    editor?: boolean|string|CalendarInputFieldConfig|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu?: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu?: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded?: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable?: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/calendar/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType?: string
    /**
     * The [name](https://bryntum.com/products/calendar/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-field)
     */
    field?: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType?: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/calendar/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-filterable)
     * @param {object} data Data object
     * @param {any} data.value Record value
     * @param {Core.data.Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable?: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Core.widget.Field} context.inputField The field configured as the column's `editor`.
     * @param {Core.data.Model} context.record The record being edited.
     * @param {any} context.oldValue The old value of the cell.
     * @param {any} context.value The new value of the cell.
     * @param {Grid.view.Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit) context object.
     * @param {Grid.column.Column} context.editorContext.column The column being edited.
     * @param {Core.data.Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Core.widget.Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean,void}
     */
    finalizeCellEdit?: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-fitMode)
     */
    fitMode?: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex?: number|string
    /**
     * Set to `true` to have the cell editor for this column inherit formula providers from the Grid's configured
     * [formulaProviders](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-formulaProviders).
     */
    formula?: boolean
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {any} renderData.groupRowFor Current group value
     * @param {Core.data.Model} renderData.record Record for the row
     * @param {Core.data.Model[]} renderData.groupRecords Records in the group
     * @param {Grid.column.Column} renderData.column Current rendering column
     * @param {Grid.column.Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid.view.Grid} renderData.grid This grid
     * @returns {DomConfig,string,void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer?: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to `false` to prevent grouping by this column
     */
    groupable?: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-headerMenuItems)
     */
    headerMenuItems?: Record<string, MenuItemConfig|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Grid.column.Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     */
    headerRenderer?: (renderData: { column: Column, headerElement: HTMLElement }) => string|object|null|void
    /**
     * An array of the widgets to append to the column header. These widgets have this Column instance
     * as their `owner` which can be used to reference the column, and the owning Grid via `this.owner.grid`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-headerWidgets)
     */
    headerWidgets?: CalendarContainerItemConfig[]
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden?: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable?: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode?: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText?: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon?: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-id)
     */
    id?: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate?: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-invalidAction)
     */
    invalidAction?: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-listeners)
     */
    listeners?: AgendaColumnListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked?: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-managedCellEditing)
     */
    managedCellEditing?: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth?: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-mergeCells)
     */
    mergeCells?: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-mergeable)
     */
    mergeable?: boolean
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * a merged cell is rendered. It allows you to manipulate the DOM config object used before it is synced to
     * DOM, thus giving you control over styling and contents.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-mergedRenderer)
     * @param {object} detail An object containing the information needed to render a task.
     * @param {any} detail.value Value that will be displayed in the merged cell
     * @param {number} detail.fromIndex Index in store of the first row of the merged cell
     * @param {number} detail.toIndex Index in store of the last row of the merged cell
     * @param {DomConfig} detail.domConfig DOM config object for the merged cell element
     * @returns {void}
     */
    mergedRenderer?: (detail: { value: any, fromIndex: number, toIndex: number, domConfig: DomConfig }) => void
    /**
     * Column minimum width. If value is `Number`, then minimal width is in pixels
     */
    minWidth?: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex?: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId?: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex?: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly?: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-region)
     */
    region?: string
    /**
     * This field is added to the class at runtime when the Store is configured with
     * [lazyLoad](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-lazyLoad). It is also required for lazy load functionality in a Tree store. The
     * number specified should reflect the <strong>total</strong> amount of children of a parent node, including nested descendants.
     */
    remoteChildCount?: number
    /**
     * Renderer function, used to format and style the content displayed in the cell. Return the cell text you
     * want to display. Can also affect other aspects of the cell, such as styling.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {any} renderData.value Value to be displayed in the cell
     * @param {Core.data.Model} renderData.record Record for the row
     * @param {Grid.column.Column} renderData.column This column
     * @param {Grid.view.Grid} renderData.grid This grid
     * @param {Grid.row.Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/calendar/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport `true` if the record is being exported to Excel or a textual format, enabling special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {string,DomConfig,DomConfig[],void}
     */
    renderer?: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => string|DomConfig|DomConfig[]|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable?: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels?: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/calendar/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape?: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed?: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable?: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker?: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/calendar/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-sortable)
     * @param {Core.data.Model} left Left side model to compare
     * @param {Core.data.Model} right Right side model to compare
     * @returns {number}
     */
    sortable?: boolean|((left: Model, right: Model) => number)|CollectionSorterConfig
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-sum)
     * @param {number,any} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Core.data.Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number,any}
     */
    sum?: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries?: ColumnSummaryConfig[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number,any} data.sum The sum parameter
     * @returns {string,DomConfig,void}
     */
    summaryRenderer?: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags?: string[]
    /**
     * Header text
     */
    text?: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip?: string|TooltipConfig
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Core.data.Model} renderData.record Record for cell row
     * @param {Grid.column.Column} renderData.column Cell column
     * @param {Grid.feature.CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string,DomConfig,void}
     */
    tooltipRenderer?: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig?: CalendarColumnConfig
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree?: boolean
    /**
     * Flag to enable vue component rendering
     */
    vue?: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width?: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays events for a day.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn)
 */
export class AgendaColumn extends Column {
    /**
     * Identifies an object as an instance of [AgendaColumn](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn) class, or subclass thereof.
     */
    static readonly isAgendaColumn: boolean
    /**
     * Identifies an object as an instance of [AgendaColumn](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn) class, or subclass thereof.
     */
    readonly isAgendaColumn: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/AgendaColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Renderer that shows a list of events for a single date.
     * @param {object} renderData Object containing renderer parameters
     */
    defaultRenderer(renderData: {
        cellElement: HTMLElement
        value: any
        record: DayCell
        column: Column
        grid: Grid
        row: Row
        isExport: boolean
        isMeasuring: boolean
    }): DomConfig|string|null;
}

/**
 * Type with available listeners functions for [EventColumn](https://bryntum.com/products/grid/docs/api/Calendar/column/EventColumn) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type EventColumnListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
}

/**
 * Type with listeners options for [EventColumn](https://bryntum.com/products/grid/docs/api/Calendar/column/EventColumn) class.
 */
type EventColumnListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [EventColumn](https://bryntum.com/products/grid/docs/api/Calendar/column/EventColumn) class.
 */
type EventColumnConfig = {
    type?: 'calendarevents'
    /**
     * A callback function called after every cell has been rendered, which lets you mutate the cell/row or
     * contents. This is useful when you want to mutate contents of a pre-configured column (e.g. `CheckColumn`,
     * `WidgetColumn` etc.) without overwriting the built-in `renderer`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-afterRenderCell)
     * @param {object} renderData Object containing rendering parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {any} renderData.value Value to be displayed in the cell
     * @param {Core.data.Model} renderData.record Record for the row
     * @param {Grid.column.Column} renderData.column This column
     * @param {Grid.view.Grid} renderData.grid This grid
     * @param {Grid.row.Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/calendar/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {object} renderData.size Set `size.height` to specify the desired row height for the current row. Largest specified height is used, falling back to configured [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#config-rowHeight) in case none is specified. Can be null in case of export
     * @param {number} renderData.size.height Set this to request a certain row height
     * @param {number} renderData.size.configuredHeight Row height that will be used if none is requested
     * @param {boolean} renderData.isExport `true` if the record is being exported to Excel or a textual format, enabling special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call.
     * @returns {void}
     */
    afterRenderCell?: (renderData: { cellElement: HTMLElement, value: any, record: Model, column: Column, grid: Grid, row: Row, size: { height: number, configuredHeight: number }, isExport: boolean, isMeasuring: boolean }) => void
    /**
     * Text align. Accepts `'left'`/`'center'`/`'right'` or direction neutral `'start'`/`'end'`
     */
    align?: 'left'|'center'|'right'|'start'|'end'
    /**
     * Set to `false` to not always clear cell content if the [renderer](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-renderer) returns `undefined`
     * or has no `return` statement. This is useful when you mutate the cellElement, and want to prevent
     * cell content from being reset during rendering.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-alwaysClearCell)
     */
    alwaysClearCell?: boolean
    /**
     * The `aria-label` to use for this Column`s header element
     */
    ariaLabel?: string
    /**
     * This config enables automatic height for all cells in this column. It is achieved by measuring the height
     * a cell after rendering it to DOM, and then sizing the row using that height (if it is greater than other
     * heights used for the row).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-autoHeight)
     */
    autoHeight?: boolean
    /**
     * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
     * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
     * no effect unless [htmlEncode](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-htmlEncode) is disabled. Returned html must contain a single root element
     * (that can have multiple children). See PercentColumn for example usage.
     */
    autoSyncHtml?: boolean
    /**
     * This config sizes a column to fits its content. It is used instead of `width` or `flex`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-autoWidth)
     */
    autoWidth?: boolean|number|number[]
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The `aria-label` to use for cells in this Column
     */
    cellAriaLabel?: string
    /**
     * CSS class added to each cell in this column
     */
    cellCls?: string
    /**
     * A config object used to configure an [Editor](https://bryntum.com/products/calendar/docs/api/Core/widget/Editor) which contains this Column's
     * [input field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-editor) if [CellEdit](#Grid/feature/CellEdit) feature is enabled.
     */
    cellEditor?: EditorConfig
    /**
     * Extra items to show in the cell context menu for this column, `null` or `false` to not show any menu items
     * for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-cellMenuItems)
     */
    cellMenuItems?: Record<string, MenuItemConfig|boolean|null>
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-children)
     */
    children?: boolean|object[]|Model[]
    /**
     * CSS class added to the header of this column
     */
    cls?: string
    /**
     * The collapse behavior when collapsing a parent column. Specify "toggleAll" or "showFirst".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-collapseMode)
     */
    collapseMode?: string
    /**
     * The collapsed state of this column, only applicable for parent columns
     */
    collapsed?: boolean
    /**
     * If `true`, this column will show a collapse/expand icon in its header, only applicable for parent columns
     */
    collapsible?: boolean
    /**
     * Set to `false` to prevent this column header from being dragged
     */
    draggable?: boolean
    /**
     * An optional query selector to select a sub element within the cell being
     * edited to align a cell editor's `X` position and `width` to.
     */
    editTargetSelector?: string
    /**
     * A config object used to create the input field which will be used for editing cells in the
     * column. Used when [CellEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit) feature is enabled. The Editor refers to
     * [field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-field) for a data source.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-editor)
     * @param {any} ref React `RefObject` for editor JSX component.
     * @returns {any} Returns React editor JSX component template
     */
    editor?: boolean|string|CalendarInputFieldConfig|Field|((ref: any) => any)|null
    /**
     * Set to `false` to prevent showing a context menu on the cell elements in this column
     */
    enableCellContextMenu?: boolean
    /**
     * false to prevent showing a context menu on the column header element
     */
    enableHeaderContextMenu?: boolean
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded?: boolean
    /**
     * Used by the Export feature. Set to `false` to omit a column from an exported dataset
     */
    exportable?: boolean
    /**
     * Column type which will be used by [TableExporter](https://bryntum.com/products/calendar/docs/api/Grid/util/TableExporter). See list of available types in
     * TableExporter docs. Returns undefined by default, which means column type should be read from the record
     * field.
     */
    exportedType?: string
    /**
     * The [name](https://bryntum.com/products/calendar/docs/api/Core/data/field/DataField#config-name) of the [data model](#Core/data/Model) field to
     * read a cells value from.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-field)
     */
    field?: string
    /**
     * Determines which type of filtering to use for the column. Usually determined by the column type used,
     * but may be overridden by setting this field.
     */
    filterType?: 'text'|'date'|'number'|'duration'
    /**
     * Allow filtering data in the column (if [Filter](https://bryntum.com/products/calendar/docs/api/Grid/feature/Filter) or [FilterBar](#Grid/feature/FilterBar)
     * feature is enabled).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-filterable)
     * @param {object} data Data object
     * @param {any} data.value Record value
     * @param {Core.data.Model} data.record Record instance
     * @returns {boolean} Returns `true` if value matches condition
     */
    filterable?: boolean|((data: { value: any, record: Model }) => boolean)|object
    /**
     * A function which is called when a cell edit is requested to finish.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-finalizeCellEdit)
     * @param {object} context An object describing the state of the edit at completion request time.
     * @param {Core.widget.Field} context.inputField The field configured as the column's `editor`.
     * @param {Core.data.Model} context.record The record being edited.
     * @param {any} context.oldValue The old value of the cell.
     * @param {any} context.value The new value of the cell.
     * @param {Grid.view.Grid} context.grid The host grid.
     * @param {object} context.editorContext The [CellEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit) context object.
     * @param {Grid.column.Column} context.editorContext.column The column being edited.
     * @param {Core.data.Model} context.editorContext.record The record being edited.
     * @param {HTMLElement} context.editorContext.cell The cell element hosting the editor.
     * @param {Core.widget.Editor} context.editorContext.editor The floating Editor widget which is hosting the input field.
     * @returns {boolean,void}
     */
    finalizeCellEdit?: (context: { inputField: Field, record: Model, oldValue: any, value: any, grid: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Editor } }) => Promise<boolean|void>
    /**
     * Mode to use when measuring the contents of this column in calls to [resizeToFitContent](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#function-resizeToFitContent).
     * Available modes are:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-fitMode)
     */
    fitMode?: 'exact'|'textContent'|'value'|'none'|null
    /**
     * Column width as a flex weight. All columns with flex specified divide the available space (after
     * subtracting fixed widths) between them according to the flex value. Columns that have `flex : 2` will be
     * twice as wide as those with `flex : 1` (and so on)
     */
    flex?: number|string
    /**
     * Set to `true` to have the cell editor for this column inherit formula providers from the Grid's configured
     * [formulaProviders](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-formulaProviders).
     */
    formula?: boolean
    /**
     * Renderer function for group headers (when using Group feature).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-groupRenderer)
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc.
     * @param {any} renderData.groupRowFor Current group value
     * @param {Core.data.Model} renderData.record Record for the row
     * @param {Core.data.Model[]} renderData.groupRecords Records in the group
     * @param {Grid.column.Column} renderData.column Current rendering column
     * @param {Grid.column.Column} renderData.groupColumn Column that the grid is grouped by
     * @param {number} renderData.count Number of records in the group
     * @param {Grid.view.Grid} renderData.grid This grid
     * @returns {DomConfig,string,void} The header grouping text or DomConfig object representing the HTML markup
     */
    groupRenderer?: (renderData: { cellElement: HTMLElement, groupRowFor: any, record: Model, groupRecords: Model[], column: Column, groupColumn: Column, count: number, grid: Grid }) => DomConfig|string|void
    /**
     * Set to `false` to prevent grouping by this column
     */
    groupable?: boolean
    /**
     * Extra items to show in the header context menu for this column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-headerMenuItems)
     */
    headerMenuItems?: Record<string, MenuItemConfig|boolean|null>
    /**
     * Renderer function for the column header.
     * @param {object} renderData
     * @param {Grid.column.Column} renderData.column This column
     * @param {HTMLElement} renderData.headerElement The header element
     */
    headerRenderer?: (renderData: { column: Column, headerElement: HTMLElement }) => string|object|null|void
    /**
     * An array of the widgets to append to the column header. These widgets have this Column instance
     * as their `owner` which can be used to reference the column, and the owning Grid via `this.owner.grid`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-headerWidgets)
     */
    headerWidgets?: CalendarContainerItemConfig[]
    /**
     * Columns hidden state. Specify `true` to hide the column, `false` to show it.
     */
    hidden?: boolean
    /**
     * Allow column visibility to be toggled through UI
     */
    hideable?: boolean
    /**
     * By default, any rendered column cell content is HTML-encoded. Set this flag to `false` disable this and
     * allow rendering html elements
     */
    htmlEncode?: boolean
    /**
     * By default, the header text is HTML-encoded. Set this flag to `false` disable this and allow html
     * elements in the column header
     */
    htmlEncodeHeaderText?: boolean
    /**
     * Icon to display in header. Specifying an icon will render a `&lt;i&gt;` element with the icon as value for the
     * class attribute
     */
    icon?: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-id)
     */
    id?: string|number
    /**
     * Set to `true` to have the [CellEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit) feature update the record being edited live upon
     * field edit instead of when editing is finished by using `TAB` or `ENTER`
     */
    instantUpdate?: boolean
    /**
     * How to handle a request to complete a cell edit in this column if the field is invalid.
     * There are three choices:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-invalidAction)
     */
    invalidAction?: 'block'|'allow'|'revert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-listeners)
     */
    listeners?: EventColumnListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
     * If you have defined your own regions (using [subGridConfigs](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#config-subGridConfigs)) you should use
     * [region](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-region) instead of this one.
     */
    locked?: boolean
    /**
     * By default, cell editing is finalized when the editor is blurred or if the user taps outside the editor.
     * For complex custom editors, focus or tapping might be expected outside the Bryntum owned editor. In such
     * cases, supply `false` for this config to take manual control over when cell editing in the column should
     * be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-managedCellEditing)
     */
    managedCellEditing?: boolean
    /**
     * Column maximal width. If value is Number, then maximal width is in pixels
     */
    maxWidth?: number|string
    /**
     * Specify `true` to merge cells within the column whose value match between rows, making the first
     * occurrence of the value span multiple rows.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-mergeCells)
     */
    mergeCells?: boolean
    /**
     * Set to `false` to prevent merging cells in this column using the column header menu.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-mergeable)
     */
    mergeable?: boolean
    /**
     * An empty function by default, but provided so that you can override it. This function is called each time
     * a merged cell is rendered. It allows you to manipulate the DOM config object used before it is synced to
     * DOM, thus giving you control over styling and contents.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-mergedRenderer)
     * @param {object} detail An object containing the information needed to render a task.
     * @param {any} detail.value Value that will be displayed in the merged cell
     * @param {number} detail.fromIndex Index in store of the first row of the merged cell
     * @param {number} detail.toIndex Index in store of the last row of the merged cell
     * @param {DomConfig} detail.domConfig DOM config object for the merged cell element
     * @returns {void}
     */
    mergedRenderer?: (detail: { value: any, fromIndex: number, toIndex: number, domConfig: DomConfig }) => void
    /**
     * Column minimum width. If value is `Number`, then minimal width is in pixels
     */
    minWidth?: number|string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex?: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId?: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex?: number
    /**
     * Set this to `true` to not allow any type of editing in this column.
     */
    readOnly?: boolean
    /**
     * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
     * [defaultRegion](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#config-defaultRegion).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-region)
     */
    region?: string
    /**
     * This field is added to the class at runtime when the Store is configured with
     * [lazyLoad](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-lazyLoad). It is also required for lazy load functionality in a Tree store. The
     * number specified should reflect the <strong>total</strong> amount of children of a parent node, including nested descendants.
     */
    remoteChildCount?: number
    /**
     * Renderer that shows resource avatars of assigned resources next to event names for a single date.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-renderer)
     * @param {object} renderData Object containing renderer parameters
     * @param {HTMLElement} renderData.cellElement Cell element, for adding CSS classes, styling etc. Can be `null` in case of export
     * @param {any} renderData.value Value to be displayed in the cell
     * @param {DayCell} renderData.record A [DayCell](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-DayCell) context object which contains contextual information about the date being rendered and an `events` property encapsulating all the events which coincide with the date.
     * @param {Grid.column.Column} renderData.column This column
     * @param {Grid.view.Grid} renderData.grid This grid
     * @param {Grid.row.Row} renderData.row Row object. Can be null in case of export. Use the [row's API](https://bryntum.com/products/calendar/docs/api/Grid/row/Row#function-assignCls) to manipulate CSS class names.
     * @param {boolean} renderData.isExport `true` if the record is being exported to Excel or a textual format, enabling special handling during export.
     * @param {boolean} renderData.isMeasuring True if the column is being measured for a `resizeToFitContent` call. In which case an advanced renderer might need to take different actions.
     * @returns {DomConfig,string,void}
     */
    renderer?: (renderData: { cellElement: HTMLElement, value: any, record: DayCell, column: Column, grid: Grid, row: Row, isExport: boolean, isMeasuring: boolean }) => DomConfig|string|void
    /**
     * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
     */
    resizable?: boolean
    /**
     * Column settings at different responsive levels, see responsive demo under examples/
     */
    responsiveLevels?: object
    /**
     * Setting this option means that pressing the `ESCAPE` key after editing the field will
     * revert the field to the value it had when the edit began. If the value is *not* changed
     * from when the edit started, the input field's [clearable](https://bryntum.com/products/calendar/docs/api/Core/widget/Field#config-clearable)
     * behaviour will be activated. Finally, the edit will be canceled.
     */
    revertOnEscape?: boolean
    /**
     * Setting this flag to `true` will prevent dropping child columns into a group column
     */
    sealed?: boolean
    /**
     * Allow searching in the column (respected by QuickFind and Search features)
     */
    searchable?: boolean
    /**
     * Show column picker for the column
     */
    showColumnPicker?: boolean
    /**
     * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
     * custom sorting function, or a config object for a [CollectionSorter](https://bryntum.com/products/calendar/docs/api/Core/util/CollectionSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-sortable)
     * @param {Core.data.Model} left Left side model to compare
     * @param {Core.data.Model} right Right side model to compare
     * @returns {number}
     */
    sortable?: boolean|((left: Model, right: Model) => number)|CollectionSorterConfig
    /**
     * Summary type (when using Summary feature). Valid types are:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-sum)
     * @param {number,any} result The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is first element.
     * @param {Core.data.Model} value The value of the current element.
     * @param {number} index The index position of currentValue. On the first call, its value is 0 if initialValue is specified, otherwise 1.
     * @returns {number,any}
     */
    sum?: 'sum'|'add'|'count'|'countNotEmpty'|'average'|((result: number|any, value: Model, index: number) => number|any)
    /**
     * Summary configs, use if you need multiple summaries per column. Replaces [sum](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-sum) and
     * [summaryRenderer](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-summaryRenderer) configs.
     */
    summaries?: ColumnSummaryConfig[]
    /**
     * Renderer function for summary (when using Summary feature). The renderer is called with an object having
     * the calculated summary `sum` parameter. Function returns a string value to be rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#config-summaryRenderer)
     * @param {object} data Object containing renderer parameters
     * @param {number,any} data.sum The sum parameter
     * @returns {string,DomConfig,void}
     */
    summaryRenderer?: (data: { sum: number|any }) => string|DomConfig|void
    /**
     * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
     */
    tags?: string[]
    /**
     * Header text
     */
    text?: string
    /**
     * A tooltip string to show when hovering the column header, or a config object which can
     * reconfigure the shared tooltip by setting boolean, numeric and string config values.
     */
    tooltip?: string|TooltipConfig
    /**
     * Renderer function for the cell tooltip (used with [CellTooltip](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellTooltip) feature).
     * Specify `false` to disable tooltip for this column.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cellElement Cell element
     * @param {Core.data.Model} renderData.record Record for cell row
     * @param {Grid.column.Column} renderData.column Cell column
     * @param {Grid.feature.CellTooltip} renderData.cellTooltip Feature instance, used to set tooltip content async
     * @param {MouseEvent} renderData.event The event that triggered the tooltip
     * @returns {string,DomConfig,void}
     */
    tooltipRenderer?: ((renderData: { cellElement: HTMLElement, record: Model, column: Column, cellTooltip: CellTooltip, event: MouseEvent }) => string|DomConfig|void)|boolean
    /**
     * Column config to apply to normal config if viewed on a touch device
     */
    touchConfig?: CalendarColumnConfig
    /**
     * When using the tree feature, exactly one column should specify { tree: true }
     */
    tree?: boolean
    /**
     * Flag to enable vue component rendering
     */
    vue?: boolean
    /**
     * Column width. If value is Number then width is in pixels
     */
    width?: number|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
}

/**
 * A column that displays a formatted event with details of name, times, and assigned resources in a
 * grid cell.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn)
 */
export class EventColumn extends Column {
    /**
     * Identifies an object as an instance of [EventColumn](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn) class, or subclass thereof.
     */
    static readonly isEventColumn: boolean
    /**
     * Identifies an object as an instance of [EventColumn](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn) class, or subclass thereof.
     */
    readonly isEventColumn: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/column/EventColumn#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {EventColumnConfig} config
     */
    constructor(config?: EventColumnConfig);
}

/**
 * Type with available listeners functions for [CrudManager](https://bryntum.com/products/grid/docs/api/Calendar/data/CrudManager) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type CrudManagerListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires before [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    beforeLoad: (event: { source: AbstractCrudManager, pack: object }) => Promise<boolean>|boolean|void
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    beforeLoadApply: (event: { source: AbstractCrudManager, response: object, options: object }) => Promise<boolean>|boolean|void
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    beforeResponseApply: (event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => Promise<boolean>|boolean|void
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-beforeSend)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync','load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    beforeSend: (event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>
    /**
     * Fires before [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    beforeSync: (event: { source: AbstractCrudManager, pack: object }) => Promise<boolean>|boolean|void
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    beforeSyncApply: (event: { source: AbstractCrudManager, response: object }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     */
    hasChanges: (event: { source: AbstractCrudManager }) => void
    /**
     * Fires on successful [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    load: (event: { source: AbstractCrudManager, response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void
    /**
     * Fired after [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    loadCanceled: (event: { source: AbstractCrudManager, pack: object }) => void
    /**
     * Fires when a [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    loadFail: (event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     */
    noChanges: (event: { source: AbstractCrudManager }) => void
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    requestDone: (event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    requestFail: (event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void
    /**
     * Fires on successful [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    sync: (event: { source: AbstractCrudManager, response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void
    /**
     * Fires after [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    syncCanceled: (event: { source: AbstractCrudManager, pack: object }) => void
    /**
     * Fires after [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    syncDelayed: (event: { source: AbstractCrudManager, arguments: object }) => void
    /**
     * Fires when a [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    syncFail: (event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void
}

/**
 * Type with listeners options for [CrudManager](https://bryntum.com/products/grid/docs/api/Calendar/data/CrudManager) class.
 */
type CrudManagerListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    beforeLoad?: ((event: { source: AbstractCrudManager, pack: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    beforeLoadApply?: ((event: { source: AbstractCrudManager, response: object, options: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    beforeResponseApply?: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-beforeSend)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync','load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    beforeSend?: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    beforeSync?: ((event: { source: AbstractCrudManager, pack: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    beforeSyncApply?: ((event: { source: AbstractCrudManager, response: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     */
    hasChanges?: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    load?: ((event: { source: AbstractCrudManager, response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    loadCanceled?: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    loadFail?: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     */
    noChanges?: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    requestDone?: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    requestFail?: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    sync?: ((event: { source: AbstractCrudManager, response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    syncCanceled?: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    syncDelayed?: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    syncFail?: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
}

/**
 * Type with configuration options for [CrudManager](https://bryntum.com/products/grid/docs/api/Calendar/data/CrudManager) class.
 */
type CrudManagerConfig = {
    /**
     * A store with assignments (or a config object).
     */
    assignmentStore?: AssignmentStore|AssignmentStoreConfig
    /**
     * Specify `true` to automatically call [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method on the next frame after creation.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-autoLoad)
     */
    autoLoad?: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * [autoSyncTimeout](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout) interval.
     */
    autoSync?: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoSync](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync) is set to `true`.
     */
    autoSyncTimeout?: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-crudStores)
     */
    crudStores?: Store[]|string[]|CrudManagerStoreDescriptor[]|StoreConfig[]
    /**
     * A store with dependencies(or a config object).
     */
    dependencyStore?: DependencyStore|DependencyStoreConfig
    /**
     * Configuration of the JSON encoder used by the *Crud Manager*.
     */
    encoder?: {
        requestData?: object
    }
    /**
     * A store with events (or a config object).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-eventStore)
     */
    eventStore?: EventStore|EventStoreConfig
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync?: boolean
    /**
     * Set to `true` to make STM ignore changes coming from the backend. This will allow user to only undo redo
     * local changes.
     */
    ignoreRemoteChangesInSTM?: boolean
    /**
     * Set to `false` to only include the id of a removed parent node in the request to the backend (also
     * affects programmatic calls to get [changes](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes) etc.), and not the ids of its children.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-includeChildrenInRemoveRequest)
     */
    includeChildrenInRemoveRequest?: boolean
    /**
     * If set to `true`, or a config object, this makes the CrudManager load records only when needed. When a record
     * or a date range that is not already loaded is requested, a load request will be made to the specified URL.
     * More more details about lazy loading, see the [guide](https://bryntum.com/products/calendar/docs/api/Grid/guides/data/lazyloading.md)
     * @param {object} lazyLoad Lazy load config
     * @param {number} lazyLoad.chunkSize The number of records to be loaded before and after the requested index (only affects the ResourceStore).
     * @param {DurationUnit} bufferUnit Used together with bufferAmount to calculate the start and end dates of each load request. The value is added to the current visible start or end date. Defaults to the visible time span length (does not affect ResourceStore).
     * @param {number} bufferAmount See `bufferUnit`
     */
    lazyLoad?: boolean|{lazyLoad: { chunkSize: number }, bufferUnit: DurationUnit, bufferAmount: number}
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-listeners)
     */
    listeners?: CrudManagerListeners
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-loadUrl)
     */
    loadUrl?: string
    /**
     * The number of Resource records each page should contain, when using [remotePaging](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/mixin/LazyLoadCrudManager#config-remotePaging)
     */
    pageSize?: number
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField?: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField?: string
    /**
     * A project that holds and links stores
     */
    project?: SchedulerProjectModel
    /**
     * If set to `true`, this makes the CrudManager load pages of data, instead of loading the complete dataset at
     * once. The requests made to the [loadUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-loadUrl) will contain
     * params with info about the current dataset being requested:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-remotePaging)
     */
    remotePaging?: boolean
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync?: boolean
    /**
     * A store with resources (or a config object).
     */
    resourceStore?: ResourceStore|ResourceStoreConfig
    /**
     * A store with resource time ranges (or a config object).
     */
    resourceTimeRangeStore?: ResourceTimeRangeStore|ResourceTimeRangeStoreConfig
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty?: boolean
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `id` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-storeIdProperty)
     */
    storeIdProperty?: string
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-stores)
     */
    stores?: Store[]|string[]|CrudManagerStoreDescriptor[]|StoreConfig[]
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * *sync* response. In this case response should include only server side changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-supportShortSyncResponse)
     */
    supportShortSyncResponse?: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-syncApplySequence)
     */
    syncApplySequence?: string[]|CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-syncUrl)
     */
    syncUrl?: string
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType?: boolean
    /**
     * Configuration of the AJAX requests used by *Crud Manager* to communicate with a server-side.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-transport)
     */
    transport?: {
        load?: object
        sync?: object
    }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#config-validateResponse)
     */
    validateResponse?: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have [persist](https://bryntum.com/products/calendar/docs/api/Core/data/field/DataField#config-persist) set to `false` will
     * still be ignored and fields having [alwaysWrite](https://bryntum.com/products/calendar/docs/api/Core/data/field/DataField#config-alwaysWrite) set to `true`
     * will always be included.
     */
    writeAllFields?: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad?: ((event: { source: AbstractCrudManager, pack: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply?: ((event: { source: AbstractCrudManager, response: object, options: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply?: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-beforeSend)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync','load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend?: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync?: ((event: { source: AbstractCrudManager, pack: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply?: ((event: { source: AbstractCrudManager, response: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges?: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onLoad?: ((event: { source: AbstractCrudManager, response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled?: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onLoadFail?: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges?: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onRequestDone?: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onRequestFail?: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onSync?: ((event: { source: AbstractCrudManager, response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled?: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed?: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onSyncFail?: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
}

/**
 * A Calendar-specific implementation of a `CrudManager`.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager)
 */
export class CrudManager extends SchedulerCrudManager {
    /**
     * Identifies an object as an instance of [CrudManager](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager) class, or subclass thereof.
     */
    static readonly isCrudManager: boolean
    /**
     * Identifies an object as an instance of [CrudManager](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager) class, or subclass thereof.
     */
    readonly isCrudManager: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires before [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) is sent. Return `false` to cancel load request.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeLoad: ((event: { source: AbstractCrudManager, pack: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.options Options provided to the [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     */
    onBeforeLoadApply: ((event: { source: AbstractCrudManager, response: object, options: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     */
    onBeforeResponseApply: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before a request is sent to the server.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-beforeSend)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.crudManager The CRUD manager.
     * @param {object} event.params HTTP request params to be passed in the request URL.
     * @param {'sync','load'} event.requestType CrudManager request type (`load`/`sync`)
     * @param {object} event.requestConfig Configuration object for Ajax request call
     */
    onBeforeSend: ((event: { crudManager: AbstractCrudManager, params: object, requestType: 'sync'|'load', requestConfig: object }) => Promise<void>)|string
    /**
     * Fires before [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) is sent. Return `false` to cancel sync request.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-beforeSync)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onBeforeSync: ((event: { source: AbstractCrudManager, pack: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     */
    onBeforeSyncApply: ((event: { source: AbstractCrudManager, response: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-hasChanges)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     */
    onHasChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) completion after data gets loaded to the stores.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onLoad: ((event: { source: AbstractCrudManager, response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fired after [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) was canceled by some [beforeLoad](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad)
     * listener or due to incomplete prior load request.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onLoadCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires when a [load request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onLoadFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) or [sync](#Scheduler/crud/AbstractCrudManagerMixin#function-sync) request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/CrudManager#event-noChanges)
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     */
    onNoChanges: ((event: { source: AbstractCrudManager }) => void)|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onRequestDone: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires when a request fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {'sync','load'} event.requestType The request type (`sync` or `load`).
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onRequestFail: ((event: { source: AbstractCrudManager, requestType: 'sync'|'load', response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires on successful [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) completion.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.response The decoded server response object.
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onSync: ((event: { source: AbstractCrudManager, response: object, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was canceled by some [beforeSync](#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync) listener.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.pack The data package which contains data for all stores managed by the crud manager.
     */
    onSyncCanceled: ((event: { source: AbstractCrudManager, pack: object }) => void)|string
    /**
     * Fires after [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) was delayed due to incomplete previous one.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager.
     * @param {object} event.arguments The arguments of [sync](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) call.
     */
    onSyncDelayed: ((event: { source: AbstractCrudManager, arguments: object }) => void)|string
    /**
     * Fires when a [sync request](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync) fails.
     * @param {object} event Event object
     * @param {Scheduler.crud.AbstractCrudManager} event.source The CRUD manager instance.
     * @param {object} event.response The decoded server response object.
     * @param {string} event.responseText The raw server response text
     * @param {object} event.responseOptions [DEPRECATED] see `requestOptions`
     * @param {object} event.requestOptions The request options passed to the request.
     * @param {Response} event.rawResponse The native Response object
     */
    onSyncFail: ((event: { source: AbstractCrudManager, response: object, responseText: string, responseOptions: object, requestOptions: object, rawResponse: Response }) => void)|string
}

/**
 * Type with available listeners functions for [TimeRangeStore](https://bryntum.com/products/grid/docs/api/Calendar/data/TimeRangeStore) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type TimeRangeStoreListenersTypes = {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Core.data.Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Core.data.Model} event.parent If due to an [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to `true` if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to `true` if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    add: (event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/calendar/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/calendar/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store.
     * @param {Core.data.Model} event.record The record confirmed as added.
     */
    addConfirmed: (event: { source: Store, record: Model }) => void
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create','read','update','delete','readPage'} event.action Action that has finished, `'create'`, `'read'`, `'update'`, `'delete'` or `'readPage'`
     * @param {'network','failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     * @param {object} event.params An object containing key/value pairs that were passed on the request query string
     */
    afterRequest: (event: { exception: boolean, action: 'create'|'read'|'update'|'delete'|'readPage', exceptionType: 'network'|'failure', response: Response, json: object, params: object }) => void
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records The records which are to be added
     * @param {Core.data.Model} event.parent The parent node when using a tree store
     */
    beforeAdd: (event: { source: Store, records: Model[], parent: Model }) => Promise<boolean>|boolean|void
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    beforeCommit: (event: { source: Store, changes: object }) => void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fired before filtering
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.util.Collection} event.filters Filters to be applied to this Store
     */
    beforeFilter: (event: { source: Store, filters: Collection }) => void
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The
     * @param {(Core.data.Model|any)[]} event.records The nodes to indent.
     */
    beforeIndent: (event: { source: Store|any, records: (Model|any)[] }) => Promise<boolean>|boolean|void
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable by returning `false`. For paged stores,
     * instead listen to [beforeLoadPage](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#event-beforeLoadPage). For remote loading of tree child nodes, listen to
     * [beforeLoadChildren](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#event-beforeLoadChildren).
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.action The read action being performed: `'read'`
     * @param {string} event.url The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) configured for this Store.
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    beforeLoad: (event: { source: Store, action: string, url: string, params: object }) => Promise<boolean>|boolean|void
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.action The read action being performed: `'readChildren'`
     * @param {string} event.url The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) configured for this Store.
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    beforeLoadChildren: (event: { source: Store, action: string, url: string, params: object }) => Promise<boolean>|boolean|void
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.action (AjaxStore only) The read action being performed: `'readPage'`
     * @param {string} event.url (AjaxStore only) The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) configured for this Store.
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the request.
     */
    beforeLoadPage: (event: { source: Store, action: string, url: string, params: object }) => Promise<boolean>|boolean|void
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source This store
     * @param {(Core.data.Model|any)[]} event.records Nodes to be outdented
     */
    beforeOutdent: (event: { source: Store|any, records: (Model|any)[] }) => Promise<boolean>|boolean|void
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records The records which are to be removed.
     * @param {Core.data.Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    beforeRemove: (event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => Promise<boolean>|boolean|void
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.url The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base urls configured for this Store.
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create','read','update','delete','readPage'} event.action Action that is making the request, `'create'`, `'read'`, `'update'`, `'delete'` or `'readPage'`
     */
    beforeRequest: (event: { source: Store, url: string, params: object, body: object, action: 'create'|'read'|'update'|'delete'|'readPage' }) => void
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Core.data.Model[]} event.records Records to sort
     */
    beforeSort: (event: { source: Store, sorters: Sorter[], records: Model[] }) => void
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    beforeUpdate: (event: { source: Store, record: Model, changes: object }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-change)
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store.
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    change: (event: { source: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    commit: (event: { source: Store, changes: object }) => void
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    commitAdded: (event: { source: Store }) => void
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    commitModified: (event: { source: Store }) => void
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    commitRemoved: (event: { source: Store }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-exception)
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create','read','update','delete','commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network','failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    exception: (event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.util.Collection} event.filters Filters used by this Store
     * @param {Core.data.Model[]} event.removed The records which were filtered out by the action.
     * @param {Core.data.Model[]} event.added The records which were filtered back in by the action.
     * @param {Core.data.Model[]} event.records Filtered records
     */
    filter: (event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Core.data.Model[]} event.records Grouped records
     */
    group: (event: { source: Store, groupers: Grouper[], records: Model[] }) => void
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.record Modified record
     * @param {string,number} event.oldValue Old id
     * @param {string,number} event.value New id
     */
    idChange: (event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The store
     * @param {(Core.data.Model|any)[]} event.records Nodes that were indented
     */
    indent: (event: { source: Store|any, records: (Model|any)[] }) => void
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    load: (event: { source: Store, data: object[], response: Response, json: object }) => void
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    loadChildren: (event: { source: Store, data: object[], json: object }) => void
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    loadChildrenStart: (event: { source: Store, params: object }) => void
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#property-isPaged), this is fired when a page is loaded.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the request.
     */
    loadPage: (event: { source: Store, params: object }) => void
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page load is beginning.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    loadPageStart: (event: { source: Store, params: object }) => void
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    loadStart: (event: { source: Store, params: object }) => void
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store [move](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Core.data.Model[]} event.records The moved records.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Core.data.Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Core.data.Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    move: (event: { source: Store, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The store
     * @param {(Core.data.Model|any)[]} event.records Nodes that were outdented
     */
    outdent: (event: { source: Store|any, records: (Model|any)[] }) => void
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset','sort','clearchanges','filter','create','update','delete','group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    refresh: (event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Core.data.Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Core.data.Model} event.parent If due to a [removeChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to `true` if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to `true` if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    remove: (event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    removeAll: (event: { source: Store }) => void
    /**
     * This event only fires in a non-[AjaxStore](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore), configured with [remoteSort](#Core/data/Store#config-remoteSort),
     * [remoteFilter](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-remoteFilter) or [remotePaging](#Core/data/Store#config-remotePaging), when the Store requests more or new data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-requestData)
     */
    requestData: () => void
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.oldRoot The old root node.
     * @param {Core.data.Model} event.rootNode The new root node.
     */
    rootChange: (event: { source: Store, oldRoot: Model, rootNode: Model }) => void
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Core.data.Model[]} event.records Sorted records
     */
    sort: (event: { source: Store, sorters: Sorter[], records: Model[] }) => void
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    update: (event: { source: Store, record: Model, changes: object }) => void
}

/**
 * Type with listeners options for [TimeRangeStore](https://bryntum.com/products/grid/docs/api/Calendar/data/TimeRangeStore) class.
 */
type TimeRangeStoreListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Core.data.Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Core.data.Model} event.parent If due to an [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to `true` if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to `true` if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    add?: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/calendar/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/calendar/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store.
     * @param {Core.data.Model} event.record The record confirmed as added.
     */
    addConfirmed?: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create','read','update','delete','readPage'} event.action Action that has finished, `'create'`, `'read'`, `'update'`, `'delete'` or `'readPage'`
     * @param {'network','failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     * @param {object} event.params An object containing key/value pairs that were passed on the request query string
     */
    afterRequest?: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete'|'readPage', exceptionType: 'network'|'failure', response: Response, json: object, params: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records The records which are to be added
     * @param {Core.data.Model} event.parent The parent node when using a tree store
     */
    beforeAdd?: ((event: { source: Store, records: Model[], parent: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    beforeCommit?: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired before filtering
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.util.Collection} event.filters Filters to be applied to this Store
     */
    beforeFilter?: ((event: { source: Store, filters: Collection }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The
     * @param {(Core.data.Model|any)[]} event.records The nodes to indent.
     */
    beforeIndent?: ((event: { source: Store|any, records: (Model|any)[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable by returning `false`. For paged stores,
     * instead listen to [beforeLoadPage](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#event-beforeLoadPage). For remote loading of tree child nodes, listen to
     * [beforeLoadChildren](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#event-beforeLoadChildren).
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.action The read action being performed: `'read'`
     * @param {string} event.url The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) configured for this Store.
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    beforeLoad?: ((event: { source: Store, action: string, url: string, params: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.action The read action being performed: `'readChildren'`
     * @param {string} event.url The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) configured for this Store.
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    beforeLoadChildren?: ((event: { source: Store, action: string, url: string, params: object }) => Promise<boolean>|boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.action (AjaxStore only) The read action being performed: `'readPage'`
     * @param {string} event.url (AjaxStore only) The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) configured for this Store.
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the request.
     */
    beforeLoadPage?: ((event: { source: Store, action: string, url: string, params: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source This store
     * @param {(Core.data.Model|any)[]} event.records Nodes to be outdented
     */
    beforeOutdent?: ((event: { source: Store|any, records: (Model|any)[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records The records which are to be removed.
     * @param {Core.data.Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    beforeRemove?: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.url The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base urls configured for this Store.
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create','read','update','delete','readPage'} event.action Action that is making the request, `'create'`, `'read'`, `'update'`, `'delete'` or `'readPage'`
     */
    beforeRequest?: ((event: { source: Store, url: string, params: object, body: object, action: 'create'|'read'|'update'|'delete'|'readPage' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Core.data.Model[]} event.records Records to sort
     */
    beforeSort?: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    beforeUpdate?: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-change)
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store.
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    change?: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    commit?: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    commitAdded?: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    commitModified?: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    commitRemoved?: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-exception)
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create','read','update','delete','commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network','failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    exception?: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.util.Collection} event.filters Filters used by this Store
     * @param {Core.data.Model[]} event.removed The records which were filtered out by the action.
     * @param {Core.data.Model[]} event.added The records which were filtered back in by the action.
     * @param {Core.data.Model[]} event.records Filtered records
     */
    filter?: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Core.data.Model[]} event.records Grouped records
     */
    group?: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.record Modified record
     * @param {string,number} event.oldValue Old id
     * @param {string,number} event.value New id
     */
    idChange?: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The store
     * @param {(Core.data.Model|any)[]} event.records Nodes that were indented
     */
    indent?: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    load?: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    loadChildren?: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    loadChildrenStart?: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#property-isPaged), this is fired when a page is loaded.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the request.
     */
    loadPage?: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page load is beginning.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    loadPageStart?: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    loadStart?: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store [move](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Core.data.Model[]} event.records The moved records.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Core.data.Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Core.data.Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    move?: ((event: { source: Store, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The store
     * @param {(Core.data.Model|any)[]} event.records Nodes that were outdented
     */
    outdent?: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset','sort','clearchanges','filter','create','update','delete','group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    refresh?: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Core.data.Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Core.data.Model} event.parent If due to a [removeChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to `true` if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to `true` if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    remove?: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    removeAll?: ((event: { source: Store }) => void)|string
    /**
     * This event only fires in a non-[AjaxStore](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore), configured with [remoteSort](#Core/data/Store#config-remoteSort),
     * [remoteFilter](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-remoteFilter) or [remotePaging](#Core/data/Store#config-remotePaging), when the Store requests more or new data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-requestData)
     */
    requestData?: (() => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.oldRoot The old root node.
     * @param {Core.data.Model} event.rootNode The new root node.
     */
    rootChange?: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Core.data.Model[]} event.records Sorted records
     */
    sort?: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    update?: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * Type with configuration options for [TimeRangeStore](https://bryntum.com/products/grid/docs/api/Calendar/data/TimeRangeStore) class.
 */
type TimeRangeStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practice to enforce when syncing with a
     * backend.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-allowNoId)
     */
    allowNoId?: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-applyChangesetFilterSortTarget)
     */
    applyChangesetFilterSortTarget?: 'changes'|'none'
    /**
     * When a recurring event *base* is rescheduled, the new start date may
     * not conform with the recurrence pattern if for example certain weekdays
     * are selected, such as to repeat every Monday.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-autoAdjustRecurrence)
     */
    autoAdjustRecurrence?: boolean
    /**
     * Commit changes automatically
     */
    autoCommit?: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when [autoCommit](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-autoCommit) is set to `true`.
     */
    autoCommitTimeout?: number
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad?: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree?: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * If `true`, chained stores will apply filters from the master store. Filters flagged with `ignoreForChain`
     * will be ignored.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-chainFilters)
     */
    chainFilters?: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-chainedFields)
     */
    chainedFields?: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     * Return `true` to include the passed record, or a `false` to exclude it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-chainedFilterFn)
     * @param {Core.data.Model} record
     * @returns {boolean}
     */
    chainedFilterFn?: (record: Model) => boolean
    /**
     * Creates a model instance, used internally when data is set/added.
     * Provide this method for your own custom conversion from data to record.
     * @param {any} data Json data
     * @param {boolean} skipExpose Supply true when batch setting to not expose properties multiple times
     * @returns {Core.data.Model}
     */
    createRecord?: (data: any, skipExpose?: boolean) => Model
    /**
     * Url to post newly created records to.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-createUrl)
     */
    createUrl?: string
    /**
     * Raw data to load initially.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-data)
     */
    data?: object[]|Model[]
    /**
     * Url for deleting records.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-deleteUrl)
     */
    deleteUrl?: string
    /**
     * Method names calls to which should be relayed to master store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-doRelayToMaster)
     */
    doRelayToMaster?: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-dontRelayToMaster)
     */
    dontRelayToMaster?: string
    /**
     * If `true`, collapsed records in original tree will be excluded from the chained store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-excludeCollapsedRecords)
     */
    excludeCollapsedRecords?: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-fetchOptions)
     */
    fetchOptions?: object
    /**
     * An array of field definitions used to create a [Model](https://bryntum.com/products/calendar/docs/api/Core/data/Model) (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-fields)
     */
    fields?: (string|CalendarModelFieldConfig|DataField)[]
    /**
     * The name of the parameter to use to pass any filters when loading data remotely.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-filterParamName)
     */
    filterParamName?: string
    /**
     * Specify one or more [CollectionFilter](https://bryntum.com/products/calendar/docs/api/Core/util/CollectionFilter) config objects to apply initially.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-filters)
     */
    filters?: CollectionFilterConfig|CollectionFilterConfig[]
    /**
     * Set to `true` to fire a 'remove' event when moving a node (to mimic the behavior of versions &lt; 6.0).
     */
    fireRemoveEventForMoveAction?: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers?: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-headers)
     */
    headers?: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when [useRestfulMethods](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-useRestfulMethods) is enabled.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-httpMethods)
     */
    httpMethods?: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id?: string|number
    /**
     * Set to true to prevent including links (when grouping by array field)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-ignoreLinkRecords)
     */
    ignoreLinkRecords?: boolean
    /**
     * This config is taken into account only when store is part of a scheduling project.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-ignoreLoadPropagationChanges)
     */
    ignoreLoadPropagationChanges?: boolean
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM?: boolean
    /**
     * Set to `false` to only include the id of a removed parent node in the request to the backend, and not the ids
     * of its children. Applies when configured with a [deleteUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-deleteUrl).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-includeChildrenInRemoveRequest)
     */
    includeChildrenInRemoveRequest?: boolean
    /**
     * When set to `true`, restores the expanded states of tree nodes when reloading data.
     */
    keepExpandedOnLoad?: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-listeners)
     */
    listeners?: TimeRangeStoreListeners
    /**
     * Master store that a chained store gets its records from.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-masterStore)
     */
    masterStore?: Store
    /**
     * Class used to represent records in the store, should be a subclass of [Model](https://bryntum.com/products/calendar/docs/api/Core/data/Model). Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-modelClass)
     */
    modelClass?: typeof Model
    /**
     * The name of the parameter to use when requesting pages of data using the <strong>zero based</strong> index of the required
     * page's starting record.
     */
    pageParamName?: string
    /**
     * When the Store is paged by configuring [remotePaging](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#config-remotePaging), this value will be included in the load
     * requests.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-pageSize)
     */
    pageSize?: number
    /**
     * The name of the parameter to use when requesting pages of data, representing the configured
     * [pageSize](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#config-pageSize) value.
     */
    pageSizeParamName?: string
    /**
     * The name of the parameter to use when requesting pages of data using the <strong>one based</strong> page number required.
     */
    pageStartParamName?: string
    /**
     * An object containing key/value pairs that are passed on the request query string, or in the request body
     * if HTTP method allows. See [paramsInBody](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-paramsInBody) config.
     */
    params?: object
    /**
     * When this config is enabled, the [params](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#property-params) of "read" request are placed in the
     * request body instead of the query string, if the HTTP method allows.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-paramsInBody)
     */
    paramsInBody?: boolean
    /**
     * The name of the HTTP parameter passed to this Store's [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName?: string
    /**
     * Url to read data from.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-readUrl)
     */
    readUrl?: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd?: boolean
    /**
     * Specify `true` to reapply filters when a record is updated in the store. You can also provide an array
     * of field names, to only re-filter when certain data fields are updated.
     */
    reapplyFilterOnUpdate?: boolean|{
        fields?: string[]
    }
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd?: boolean
    /**
     * Specify `true` to reapply sorting when a record is updated in the store. You can also provide an array
     * of field names, to only trigger sort when certain data fields are updated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-reapplySortersOnUpdate)
     */
    reapplySortersOnUpdate?: boolean|{
        fields?: string[]
    }
    /**
     * Set this to `true` to activate remote filtering in this Store. This makes it possible to use the built-in
     * filtering features of the Store and corresponding UI functionality, without using local data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-remoteFilter)
     */
    remoteFilter?: boolean
    /**
     * Set this to `true` to activate remote paging in this Store. Makes it possible to use the
     * [loadPage](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#function-loadPage), [nextPage](#Core/data/mixin/StorePaging#function-nextPage), and [previousPage](#Core/data/mixin/StorePaging#function-previousPage) functions. Or
     * add the [PagingToolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/PagingToolbar) to control what page to load.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-remotePaging)
     */
    remotePaging?: boolean
    /**
     * Set this to `true` to activate remote sorting in this Store. This makes it possible to use the built-in
     * sorting features of the Store and corresponding UI functionality, without using local data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-remoteSort)
     */
    remoteSort?: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-responseDataProperty)
     */
    responseDataProperty?: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-responseSuccessProperty)
     */
    responseSuccessProperty?: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#property-isPaged) or [lazy loaded](#Core/data/AjaxStore#config-lazyLoad)</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-responseTotalProperty)
     */
    responseTotalProperty?: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-restfulFilter)
     */
    restfulFilter?: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData?: boolean
    /**
     * The name of the parameter to use to pass any sorters when loading data remotely.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-sortParamName)
     */
    sortParamName?: string
    /**
     * Initial sorters, format is:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-sorters)
     */
    sorters?: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-startGroupsCollapsed)
     */
    startGroupsCollapsed?: boolean
    /**
     * Reference to STM manager
     */
    stm?: StateTrackingManager
    /**
     * A [Collection](https://bryntum.com/products/calendar/docs/api/Core/util/Collection), or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage?: Collection|CollectionConfig
    /**
     * Store class to use when creating the store when it is a part of a
     * [CrudManager](https://bryntum.com/products/scheduler/docs/api/Scheduler/data/CrudManager).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-storeClass)
     */
    storeClass?: typeof Store
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-syncDataOnLoad)
     */
    syncDataOnLoad?: boolean|SyncDataOnLoadOptions
    /**
     * If `true`, chained stores will be sorted when the master store is sorted. Note that this replaces
     * any existing sorters defined on the chained store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-syncSort)
     */
    syncSort?: boolean
    /**
     * Pass a function to transform record creation data before it is sent to the backend
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-transformCreationData)
     * @param {object} payload
     * @param {any[]} payload.data The data that is going to be sent to the backend
     * @returns {object} Return the modified payload
     */
    transformCreationData?: (payload: { data: any[] }) => object
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-transformFlatData)
     */
    transformFlatData?: boolean
    /**
     * Pass a function to transform data loaded from the backend before it is turned into records and added to the
     * store
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-transformLoadedData)
     * @param {object} response
     * @param {any[]} response.data The data that is going to be loaded into the store
     * @returns {object} Returns the modified response object
     */
    transformLoadedData?: (response: { data: any[] }) => object
    /**
     * Pass a function to transform records modification data before it is sent to the backend
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-transformModificationData)
     * @param {object} payload
     * @param {any[]} payload.data The data that is going to be sent to the backend
     * @returns {object} Return the modified payload
     */
    transformModificationData?: (payload: { data: any[] }) => object
    /**
     * Pass a function to transform record removal data before it is sent to the backend
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-transformRemovalData)
     * @param {object} payload
     * @param {any[]} payload.ids Ids for records being removed
     * @returns {object} Return the modified payload
     */
    transformRemovalData?: (payload: { ids: any[] }) => object
    /**
     * `true` to act as a tree store.
     */
    tree?: boolean
    /**
     * Url to post record modifications to.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-updateUrl)
     */
    updateUrl?: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-useLocaleSort)
     */
    useLocaleSort?: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-useRawData)
     * @param {boolean} disableDuplicateIdCheck Data must not contain duplicate ids, check is bypassed.
     * @param {boolean} disableDefaultValue Default values will not be applied to record fields.
     * @param {boolean} disableTypeConversion No type conversions will be performed on record data. Incoming data must be in the correct format expected by each field, for example dates must be Date objects.
     */
    useRawData?: boolean|{disableDuplicateIdCheck?: boolean, disableDefaultValue?: boolean, disableTypeConversion?: boolean}
    /**
     * Set to ´true´ to use restful [httpMethods](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-httpMethods)
     */
    useRestfulMethods?: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#config-verifyNoGeneratedIds)
     */
    verifyNoGeneratedIds?: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields?: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Core.data.Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Core.data.Model} event.parent If due to an [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to `true` if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to `true` if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd?: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired when a temporary record with the [isCreating](https://bryntum.com/products/calendar/docs/api/Core/data/Model#property-isCreating) property set
     * has been confirmed as a part of this store by having its [isCreating](https://bryntum.com/products/calendar/docs/api/Core/data/Model#property-isCreating)
     * property cleared.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store.
     * @param {Core.data.Model} event.record The record confirmed as added.
     */
    onAddConfirmed?: ((event: { source: Store, record: Model }) => void)|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @param {object} event Event object
     * @param {boolean} event.exception `true`. *Only present if the request triggered an exception.*
     * @param {'create','read','update','delete','readPage'} event.action Action that has finished, `'create'`, `'read'`, `'update'`, `'delete'` or `'readPage'`
     * @param {'network','failure'} event.exceptionType The type of failure, `'network'` or `'server'`. <em>Only present if the request triggered an exception.</em>
     * @param {Response} event.response The `Response` object
     * @param {object} event.json The decoded response object if there was no `'network'` exception.
     * @param {object} event.params An object containing key/value pairs that were passed on the request query string
     */
    onAfterRequest?: ((event: { exception: boolean, action: 'create'|'read'|'update'|'delete'|'readPage', exceptionType: 'network'|'failure', response: Response, json: object, params: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records The records which are to be added
     * @param {Core.data.Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd?: ((event: { source: Store, records: Model[], parent: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit?: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired before filtering
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.util.Collection} event.filters Filters to be applied to this Store
     */
    onBeforeFilter?: ((event: { source: Store, filters: Collection }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The
     * @param {(Core.data.Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent?: ((event: { source: Store|any, records: (Model|any)[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable by returning `false`. For paged stores,
     * instead listen to [beforeLoadPage](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#event-beforeLoadPage). For remote loading of tree child nodes, listen to
     * [beforeLoadChildren](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#event-beforeLoadChildren).
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.action The read action being performed: `'read'`
     * @param {string} event.url The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) configured for this Store.
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoad?: ((event: { source: Store, action: string, url: string, params: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.action The read action being performed: `'readChildren'`
     * @param {string} event.url The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) configured for this Store.
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onBeforeLoadChildren?: ((event: { source: Store, action: string, url: string, params: object }) => Promise<boolean>|boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.action (AjaxStore only) The read action being performed: `'readPage'`
     * @param {string} event.url (AjaxStore only) The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) configured for this Store.
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the request.
     */
    onBeforeLoadPage?: ((event: { source: Store, action: string, url: string, params: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source This store
     * @param {(Core.data.Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent?: ((event: { source: Store|any, records: (Model|any)[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records The records which are to be removed.
     * @param {Core.data.Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove?: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before any remote request is initiated.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.url The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base urls configured for this Store.
     * @param {object} event.params An object containing key/value pairs that are passed on the request query string
     * @param {object} event.body The body of the request to be posted to the server.
     * @param {'create','read','update','delete','readPage'} event.action Action that is making the request, `'create'`, `'read'`, `'update'`, `'delete'` or `'readPage'`
     */
    onBeforeRequest?: ((event: { source: Store, url: string, params: object, body: object, action: 'create'|'read'|'update'|'delete'|'readPage' }) => void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Core.data.Model[]} event.records Records to sort
     */
    onBeforeSort?: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onBeforeUpdate?: ((event: { source: Store, record: Model, changes: object }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-change)
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store.
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of the options listed above
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange?: ((event: { source: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit?: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fired after committing added records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    onCommitAdded?: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing modified records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    onCommitModified?: ((event: { source: Store }) => void)|string
    /**
     * Fired after committing removed records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    onCommitRemoved?: ((event: { source: Store }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-exception)
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {boolean} event.exception `true`
     * @param {'create','read','update','delete','commit'} event.action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.
     * @param {'network','failure'} event.exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object *if the exceptionType is `'server'`*
     */
    onException?: ((event: { source: Store, exception: boolean, action: 'create'|'read'|'update'|'delete'|'commit', exceptionType: 'network'|'failure', response: Response, json: object }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.util.Collection} event.filters Filters used by this Store
     * @param {Core.data.Model[]} event.removed The records which were filtered out by the action.
     * @param {Core.data.Model[]} event.added The records which were filtered back in by the action.
     * @param {Core.data.Model[]} event.records Filtered records
     */
    onFilter?: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Core.data.Model[]} event.records Grouped records
     */
    onGroup?: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired when the id of a record has changed
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.record Modified record
     * @param {string,number} event.oldValue Old id
     * @param {string,number} event.value New id
     */
    onIdChange?: ((event: { source: Store, record: Model, oldValue: string|number, value: string|number }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The store
     * @param {(Core.data.Model|any)[]} event.records Nodes that were indented
     */
    onIndent?: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired on successful load
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {Response} event.response the `Response` object
     * @param {object} event.json The decoded response object.
     */
    onLoad?: ((event: { source: Store, data: object[], response: Response, json: object }) => void)|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object[]} event.data Data loaded
     * @param {object} event.json The decoded response object.
     */
    onLoadChildren?: ((event: { source: Store, data: object[], json: object }) => void)|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadChildrenStart?: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#property-isPaged), this is fired when a page is loaded.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the request.
     */
    onLoadPage?: ((event: { source: Store, params: object }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#property-isPaged), this is fired when a page load is beginning.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadPageStart?: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the Ajax request.
     */
    onLoadStart?: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired when a block of records has been moved within this Store
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store [move](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-move) API now accepts an array of records to move).
     * @param {Core.data.Model[]} event.records The moved records.
     * @param {number} event.from The index from which the record was removed (applicable only for flat store).
     * @param {number} event.to The index at which the record was inserted (applicable only for flat store).
     * @param {Core.data.Model} event.newParent The new parent record for the dragged records (applicable only for tree stores)
     * @param {Core.data.Model[]} event.oldParents The old parent records for the dragged records (applicable only for move operations in tree stores)
     */
    onMove?: ((event: { source: Store, records: Model[], from: number, to: number, newParent?: Model, oldParents?: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The store
     * @param {(Core.data.Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent?: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store.
     * @param {boolean} event.batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {'dataset','sort','clearchanges','filter','create','update','delete','group'} event.action Name of action which triggered the change. May be one of the options listed above.
     */
    onRefresh?: ((event: { source: Store, batch: boolean, action: 'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group' }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Core.data.Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Core.data.Model} event.parent If due to a [removeChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to `true` if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to `true` if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove?: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    onRemoveAll?: ((event: { source: Store }) => void)|string
    /**
     * This event only fires in a non-[AjaxStore](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore), configured with [remoteSort](#Core/data/Store#config-remoteSort),
     * [remoteFilter](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-remoteFilter) or [remotePaging](#Core/data/Store#config-remotePaging), when the Store requests more or new data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-requestData)
     */
    onRequestData?: (() => void)|string
    /**
     * Fired when the root node is set
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.oldRoot The old root node.
     * @param {Core.data.Model} event.rootNode The new root node.
     */
    onRootChange?: ((event: { source: Store, oldRoot: Model, rootNode: Model }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Core.data.Model[]} event.records Sorted records
     */
    onSort?: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fired when a record is modified
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model} event.record Modified record
     * @param {object} event.changes Modification data
     */
    onUpdate?: ((event: { source: Store, record: Model, changes: object }) => void)|string
}

/**
 * A store representing a collection of time ranges.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore)
 */
export class TimeRangeStore extends SchedulerTimeRangeStore {
    /**
     * Identifies an object as an instance of [TimeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore) class, or subclass thereof.
     */
    static readonly isTimeRangeStore: boolean
    /**
     * Identifies an object as an instance of [TimeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore) class, or subclass thereof.
     */
    readonly isTimeRangeStore: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records Added records. In case of tree store, if branch is added, only branch root is returned
     * @param {Core.data.Model[]} event.allRecords Flat list of all added records. In case of tree store, if branch is added, all new records are returned, not only branch root
     * @param {Core.data.Model} event.parent If due to an [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) call, this is the parent node added to.
     * @param {number} event.index Insertion point in the store's [Collection](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-storage).
     * @param {number} event.oldIndex Not used for tree stores. The index of the first record moved.
     * @param {boolean} event.isChild Flag which is set to `true` if the records are added to a parent record
     * @param {boolean} event.isExpand Flag which is set to `true` if records are added to the store by expanding parent
     * @param {object} event.isMove An object keyed by the ids of the records which were moved from another position in the store, or from another parent node in the store. The ids of moved records will be property names with a value `true`.
     */
    onAdd: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, oldIndex?: number, isChild?: boolean, isExpand?: boolean, isMove?: object }) => void)|string
    /**
     * Fired before records are added to this store by the [add](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-add) or [insert](#Core/data/mixin/StoreCRUD#function-insert). In a tree
     * store, also fired by [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) and
     * [insertChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-insertChild). The add or insert may be vetoed by returning `false`
     * from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records The records which are to be added
     * @param {Core.data.Model} event.parent The parent node when using a tree store
     */
    onBeforeAdd: ((event: { source: Store, records: Model[], parent: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onBeforeCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before filtering
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.util.Collection} event.filters Filters to be applied to this Store
     */
    onBeforeFilter: ((event: { source: Store, filters: Collection }) => void)|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The
     * @param {(Core.data.Model|any)[]} event.records The nodes to indent.
     */
    onBeforeIndent: ((event: { source: Store|any, records: (Model|any)[] }) => Promise<boolean>|boolean|void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#property-isPaged), this is fired before loading a page and is cancelable
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {string} event.action (AjaxStore only) The read action being performed: `'readPage'`
     * @param {string} event.url (AjaxStore only) The URL to which the HTTP request will be sent. This property may be mutated in an event handler *without changing* the base [readUrl](https://bryntum.com/products/calendar/docs/api/Core/data/AjaxStore#config-readUrl) configured for this Store.
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the request.
     */
    onBeforeLoadPage: ((event: { source: Store, action: string, url: string, params: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source This store
     * @param {(Core.data.Model|any)[]} event.records Nodes to be outdented
     */
    onBeforeOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before records are removed from this store by the [remove](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreCRUD#function-remove) or [removeAll](#Core/data/mixin/StoreCRUD#function-removeAll).
     * Also fired when removing a child record in a tree store using [removeChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-removeChild).
     * The remove may be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records The records which are to be removed.
     * @param {Core.data.Model} event.parent The record from which children are being removed when using a tree store. Only provided when removing a single node.
     * @param {boolean} event.isMove This flag is `true` if the child node is being removed by [appendChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-appendChild) to be moved *within the same tree*.
     * @param {boolean} event.removingAll This flag is `true` if the operation is removing the store's entire data set.
     */
    onBeforeRemove: ((event: { source: Store, records: Model[], parent: Model, isMove: boolean, removingAll: boolean }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before sorting
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Core.data.Model[]} event.records Records to sort
     */
    onBeforeSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired after committing changes
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.changes Modification data
     */
    onCommit: ((event: { source: Store, changes: object }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired after applying filters to the store
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.util.Collection} event.filters Filters used by this Store
     * @param {Core.data.Model[]} event.removed The records which were filtered out by the action.
     * @param {Core.data.Model[]} event.added The records which were filtered back in by the action.
     * @param {Core.data.Model[]} event.records Filtered records
     */
    onFilter: ((event: { source: Store, filters: Collection, removed: Model[], added: Model[], records: Model[] }) => void)|string
    /**
     * Fired when grouping changes
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Grouper[]} event.groupers Applied groupers
     * @param {Core.data.Model[]} event.records Grouped records
     */
    onGroup: ((event: { source: Store, groupers: Grouper[], records: Model[] }) => void)|string
    /**
     * Fired after tasks in the tree are indented
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The store
     * @param {(Core.data.Model|any)[]} event.records Nodes that were indented
     */
    onIndent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * When the store [is paged](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StorePaging#property-isPaged), this is fired when a page is loaded.
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {object} event.params An object containing property/name pairs which are the parameters. This may be mutated to affect the parameters used in the request.
     */
    onLoadPage: ((event: { source: Store, params: object }) => void)|string
    /**
     * Fired after tasks in the tree are outdented
     * @param {object} event Event object
     * @param {Core.data.Store,any} event.source The store
     * @param {(Core.data.Model|any)[]} event.records Nodes that were outdented
     */
    onOutdent: ((event: { source: Store|any, records: (Model|any)[] }) => void)|string
    /**
     * Fired when one or more records are removed
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Core.data.Model[]} event.records Array of removed records. In case of tree store, if branch is removed, only branch root is returned
     * @param {Core.data.Model[]} event.allRecords Flat array of all removed records. In case of tree store, if branch is removed, all removed records are returned, not only branch root
     * @param {Core.data.Model} event.parent If due to a [removeChild](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/TreeNode#function-removeChild) call, this is the parent node removed from. Only applicable when removing a single tree node.
     * @param {number} event.index Visible index at which record was removed. In case the record was removed from a collapsed branch, -1 is returned. For tree store, this is only provided when removing a single node.
     * @param {boolean} event.isChild Flag which is set to `true` if the record was removed from a parent record
     * @param {boolean} event.isCollapse Flag which is set to `true` if records were removed from the store by collapsing parent
     * @param {boolean} event.isMove Passed as `true` if the remove was part of a move operation within this Store.
     */
    onRemove: ((event: { source: Store, records: Model[], allRecords?: Model[], parent?: Model, index?: number, isChild?: boolean, isCollapse?: boolean, isMove?: boolean }) => void)|string
    /**
     * Fired after removing all records
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     */
    onRemoveAll: ((event: { source: Store }) => void)|string
    /**
     * Fired after sorting
     * @param {object} event Event object
     * @param {Core.data.Store} event.source This Store
     * @param {Sorter[]} event.sorters Sorter configs
     * @param {Core.data.Model[]} event.records Sorted records
     */
    onSort: ((event: { source: Store, sorters: Sorter[], records: Model[] }) => void)|string
}

/**
 * Type with available listeners functions for [CalendarDrag](https://bryntum.com/products/grid/docs/api/Calendar/feature/CalendarDrag) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type CalendarDragListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [CalendarDrag](https://bryntum.com/products/grid/docs/api/Calendar/feature/CalendarDrag) class.
 */
type CalendarDragListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [CalendarDrag](https://bryntum.com/products/grid/docs/api/Calendar/feature/CalendarDrag) class.
 */
type CalendarDragConfig = {
    type?: 'drag'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * Specify `false` to disallow creating events by drag gestures.
     */
    creatable?: boolean
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Specify `false` to disallow dragging events to new times or days.
     */
    draggable?: boolean
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-durationUnit)
     */
    durationUnit?: string
    /**
     * A [DOM config](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object used to create an extra element
     * during event drag to contain the end time of the tentative event. This element contains the CSS class
     * `'b-cal-event-footer'` which can be used for styling.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-footer)
     */
    footer?: DomConfig
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-listeners)
     */
    listeners?: CalendarDragListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * The name of new events or a function to call with the event record that will return the event name.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-newName)
     * @param {Scheduler.model.EventModel} eventRecord The record being drag-created.
     * @returns {string} Name of new event
     */
    newName?: string|((eventRecord: EventModel) => string)
    /**
     * The text to display as a hint for creating recurring events during drag. This tip is displayed in the
     * [tooltip](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-tooltip) in the same place as the recurrence summary (when there is no recurrence to
     * display).
     */
    recurrenceTip?: string
    /**
     * By default, when an event is dragged from an external source, the event is removed from the
     * source EventStore. Configure this as `false` to leave the event in place to allow for the dragging
     * in of the same event repeatedly.
     */
    removeFromExternalStore?: boolean
    /**
     * Specify `false` to disallow dragging the edges of events to change their start or end.
     */
    resizable?: boolean
    /**
     * The tooltip to display during a drag create process. Disabled by
     * default, set to `true`, or provide a tooltip / config object, to enable it.
     */
    tooltip?: boolean|EventTipConfig|EventTip
    /**
     * An empty function by default that allows you to perform custom validation on an event being created by
     * a drag gesture.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateCreateFn)
     * @param {object} info
     * @param {Core.util.drag.DragContext} info.drag The drag create context.
     * @param {Event} info.event The browser event object.
     * @param {Scheduler.model.EventModel} info.eventRecord The Event record.
     * @returns {boolean,ValidateCreateResult} Return `false` if this event should be rejected.
     */
    validateCreateFn?: ((info: { drag: DragContext, event: Event, eventRecord: EventModel }) => boolean|ValidateCreateResult)|string
    /**
     * An empty function by default that allows you to perform custom validation on the event being moved to a
     * new date or time via a drag gesture.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateMoveFn)
     * @param {object} info
     * @param {Core.util.drag.DragContext} info.drag The drag create context.
     * @param {Event} info.event The browser event object.
     * @param {Scheduler.model.EventModel} info.eventRecord The Event record.
     * @returns {boolean} Return `false` if this event change should be rejected.
     */
    validateMoveFn?: ((info: { drag: DragContext, event: Event, eventRecord: EventModel }) => boolean)|string
    /**
     * An empty function by default that allows you to perform custom validation on the event whose `startDate`
     * or `endDate` is being modified via drag gesture.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateResizeFn)
     * @param {object} info
     * @param {Core.util.drag.DragContext} info.drag The drag create context.
     * @param {Event} info.event The browser event object.
     * @param {Scheduler.model.EventModel} info.eventRecord The Event record.
     * @returns {boolean,Promise<any>} Return `false` if this event change should be rejected.
     */
    validateResizeFn?: ((info: { drag: DragContext, event: Event, eventRecord: EventModel }) => boolean|Promise<any>)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature provides drag-based event creation and modification for Calendars. When enabled (which is the default
 * for calendars), the user can do the following via the mouse or touch screen:
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag)
 */
export class CalendarDrag extends CalendarFeature {
    /**
     * Identifies an object as an instance of [CalendarDrag](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) class, or subclass thereof.
     */
    static readonly isCalendarDrag: boolean
    /**
     * Identifies an object as an instance of [CalendarDrag](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) class, or subclass thereof.
     */
    readonly isCalendarDrag: boolean
    /**
     * By default, when an event is dragged from an external source, the event is removed from the
     * source EventStore. Configure this as `false` to leave the event in place to allow for the dragging
     * in of the same event repeatedly.
     */
    removeFromExternalStore: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {CalendarDragConfig} config
     */
    constructor(config?: CalendarDragConfig);
}

/**
 * Type with available listeners functions for [CalendarFeature](https://bryntum.com/products/grid/docs/api/Calendar/feature/CalendarFeature) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type CalendarFeatureListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [CalendarFeature](https://bryntum.com/products/grid/docs/api/Calendar/feature/CalendarFeature) class.
 */
type CalendarFeatureListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [CalendarFeature](https://bryntum.com/products/grid/docs/api/Calendar/feature/CalendarFeature) class.
 */
type CalendarFeatureConfig = {
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature#config-listeners)
     */
    listeners?: CalendarFeatureListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * The base abstract class for Calendar features.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature)
 */
export abstract class CalendarFeature extends InstancePlugin {
    /**
     * Identifies an object as an instance of [CalendarFeature](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature) class, or subclass thereof.
     */
    static readonly isCalendarFeature: boolean
    /**
     * Identifies an object as an instance of [CalendarFeature](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature) class, or subclass thereof.
     */
    readonly isCalendarFeature: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarFeature#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with available listeners functions for [EventBuffer](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventBuffer) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type EventBufferListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [EventBuffer](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventBuffer) class.
 */
type EventBufferListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [EventBuffer](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventBuffer) class.
 */
type EventBufferConfig = {
    type?: 'eventBuffer'|'eventbuffer'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer#config-listeners)
     */
    listeners?: EventBufferListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * A function which lets you customize the visual appearance of the preamble and postamble elements.
     * @param {object} data
     * @param {Scheduler.model.EventModel} data.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} data.resourceRecord The resource record (only available in resource views)
     * @param {object} data.preambleConfig A config object for the preamble
     * @param {string} data.preambleConfig.icon A CSS class for the icon to show (e.g. car / bicycle)
     * @param {object,string} data.preambleConfig.cls A CSS object for the preamble element
     * @param {string} data.preambleConfig.text The text to display
     * @param {string} data.preambleConfig.tooltip Extra information to display when hovering the `text`
     * @param {object} data.postambleConfig A config object for the postamble
     * @param {string} data.postambleConfig.icon A CSS class for the icon to show (e.g. car / bicycle)
     * @param {object,string} data.postambleConfig.cls A CSS object for the postamble element
     * @param {string} data.postambleConfig.text The text to display
     * @param {string} data.postambleConfig.tooltip Extra information to display when hovering the `text`
     * @returns {void}
     */
    renderer?: (data: { eventRecord: EventModel, resourceRecord: ResourceModel, preambleConfig: { icon: string, cls: object|string, text: string, tooltip: string }, postambleConfig: { icon: string, cls: object|string, text: string, tooltip: string } }) => void
    /**
     * Show buffer duration labels
     */
    showDuration?: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A Feature that allows showing additional time before &amp; after an event, to visualize things like travel time - or the time you
 * need to prepare a room for a meeting + clean it up after.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer)
 */
export class EventBuffer extends CalendarFeature {
    /**
     * Identifies an object as an instance of [EventBuffer](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer) class, or subclass thereof.
     */
    static readonly isEventBuffer: boolean
    /**
     * Identifies an object as an instance of [EventBuffer](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer) class, or subclass thereof.
     */
    readonly isEventBuffer: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventBuffer#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {EventBufferConfig} config
     */
    constructor(config?: EventBufferConfig);
}

/**
 * Type with available listeners functions for [EventCopyPaste](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventCopyPaste) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type EventCopyPasteListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [EventCopyPaste](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventCopyPaste) class.
 */
type EventCopyPasteListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [EventCopyPaste](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventCopyPaste) class.
 */
type EventCopyPasteConfig = {
    type?: 'eventCopyPaste'|'eventcopypaste'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * If `true` this prevents cutting and pasting. Will default to `true` if [CellEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit) feature
     * is disabled. Set to `false` to prevent this behaviour.
     */
    copyOnly?: boolean
    /**
     * The format a copied date value should have when converted to a string. To learn more about available formats,
     * check out [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) docs.
     */
    dateFormat?: string
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * If an empty value (null or empty string) is copied or cut, this config will replace that value.
     * This allows for clipboard data to skip columns.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#config-emptyValueChar)
     */
    emptyValueChar?: string
    /**
     * When copying events (or assignments), data will be sent to the clipboard as a tab (`\t`) and new-line (`\n`)
     * separated string with field values for fields present in this config (in specified order). The default
     * included fields are (in this order):
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#config-eventToStringFields)
     */
    eventToStringFields?: string[]
    /**
     * A method used to generate the name for a copy-pasted record. By defaults appends "- 2", "- 3" as a suffix.
     * Override it to provide your own naming of pasted records.
     * @param {Core.data.Model} record The new record being pasted
     * @param {Core.data.Model} originalRecord The record that was copied
     * @returns {string}
     */
    generateNewName?: (record: Model, originalRecord: Model) => string
    /**
     * Default keyMap configuration: Ctrl/Cmd+c to copy, Ctrl/Cmd+x to cut and Ctrl/Cmd+v to paste. These keyboard
     * shortcuts require a selection to be made.
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#config-listeners)
     */
    listeners?: EventCopyPasteListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * The field to use as the name field when updating the name of copied records
     */
    nameField?: string
    /**
     * Provide a function to be able to customize the string value which is copied
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#config-toCopyString)
     * @param {object} data
     * @param {string} data.currentValue
     * @param {Grid.column.Column} data.column
     * @param {Core.data.Model} data.record
     * @returns {string}
     */
    toCopyString?: (data: { currentValue: string, column: Column, record: Model }) => string
    /**
     * Provide a function to be able to customize the value which will be set onto the record
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#config-toPasteValue)
     * @param {object} data
     * @param {string} data.currentValue
     * @param {Grid.column.Column} data.column
     * @param {Core.data.Model} data.record
     * @returns {string}
     */
    toPasteValue?: (data: { currentValue: string, column: Column, record: Model }) => string
    /**
     * By default, pasting of multiple events will spread out according to the pattern it was copied. Set to `false`
     * to paste into the same resource and same date.
     */
    unifiedPaste?: boolean
    /**
     * Set this to `false` to not use native Clipboard API even if it is available
     */
    useNativeClipboard?: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Allow using [Ctrl/CMD + C/X/V] to copy/cut-and-paste events.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste)
 */
export class EventCopyPaste extends SchedulerEventCopyPaste {
    /**
     * Identifies an object as an instance of [EventCopyPaste](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste) class, or subclass thereof.
     */
    static readonly isEventCopyPaste: boolean
    /**
     * Identifies an object as an instance of [EventCopyPaste](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste) class, or subclass thereof.
     */
    readonly isEventCopyPaste: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventCopyPaste#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with available listeners functions for [EventEdit](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventEdit) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type EventEditListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [EventEdit](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventEdit) class.
 */
type EventEditListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [EventEdit](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventEdit) class.
 */
type EventEditConfig = {
    type?: 'eventEdit'|'eventedit'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * This config parameter is passed to the `startDateField` and `endDateField` constructor.
     */
    dateFormat?: string
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * The configuration for the internal editor widget. With this config you can control the *type*
     * of editor (defaults to `Popup`) and which widgets to show,
     * change the items in the `bbar`, or change whether the popup should be modal etc.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-editorConfig)
     */
    editorConfig?: EventEditorConfig
    /**
     * A CSS selector targeting elements that should not trigger the editor when clicked.
     */
    ignoreSelector?: string
    /**
     * An object to merge with the provided items config of the editor to override the
     * configuration of provided fields, or add new fields.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|boolean|null>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-listeners)
     */
    listeners?: EventEditListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * How much of a long event bar which is clipped by scrolling must be brought into view
     * to facilitate editing.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-minEditSize)
     */
    minEditSize?: number
    /**
     * Specify `true` to put the editor in read only mode.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-readOnly)
     */
    readOnly?: boolean
    /**
     * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.
     */
    saveAndCloseOnEnter?: boolean
    /**
     * Set to `false` to hide recurring fields in event editor, even if the
     * [Recurring Events](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents) is `true`
     * and a recurring event is being edited.
     */
    showRecurringUI?: boolean
    /**
     * This config parameter is passed to the `startTimeField` and `endTimeField` constructor.
     */
    timeFormat?: string
    /**
     * The event that shall trigger showing the editor. Defaults to `eventdblclick`, set to `''` or null to
     * disable editing of existing events.
     */
    triggerEvent?: string
    /**
     * The data field in the model that defines the eventType.
     * Applied as class (b-eventtype-xx) to the editors element, to allow showing/hiding fields depending on
     * eventType. Dynamic toggling of fields in the editor is activated by adding an `eventTypeField` field to
     * your widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-typeField)
     */
    typeField?: string
    /**
     * By default, the day of week and week of month of the event's start date are used to create
     * helpful contextual recurrence types when editing a non-recurring event record and choosing
     * an initial recurrence type.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#config-useContextualRecurrenceRules)
     */
    useContextualRecurrenceRules?: boolean
    /**
     * The week start day used in all date fields of the feature editor form by default.
     * 0 means Sunday, 6 means Saturday.
     * Defaults to the locale's week start day.
     */
    weekStartDay?: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Feature that displays a popup containing fields for editing event data.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit)
 */
export class EventEdit extends SchedulerEventEdit {
    /**
     * Identifies an object as an instance of [EventEdit](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit) class, or subclass thereof.
     */
    static readonly isEventEdit: boolean
    /**
     * Identifies an object as an instance of [EventEdit](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit) class, or subclass thereof.
     */
    readonly isEventEdit: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventEdit#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Opens an editor for the passed event. This function is exposed on Calendar and can be called as
     * `calendar.editEvent()`.
     * @param {Scheduler.model.EventModel} eventRecord Event to edit
     * @param {Scheduler.model.ResourceModel} resourceRecord Not used. Inherited from Scheduler.
     * @param {HTMLElement} element Element to anchor editor to (defaults to events element)
     */
    editEvent(eventRecord: EventModel, resourceRecord?: ResourceModel, element?: HTMLElement): Promise<void>;
}

/**
 * Type with available listeners functions for [EventMenu](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventMenu) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type EventMenuListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [EventMenu](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventMenu) class.
 */
type EventMenuListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [EventMenu](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventMenu) class.
 */
type EventMenuConfig = {
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * A CSS selector targeting an element, such as an ellipsis icon that when
     * clicked will trigger the menu to show.
     */
    clickTriggerSelector?: string
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * This is a preconfigured set of items used to create the default context menu. The default options are
     * listed at the top of the page.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#config-items)
     */
    items?: Record<string, MenuItemConfig|boolean|null>
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/calendar/docs/api/Core/feature/base/ContextMenuBase#keyboard-shortcuts) for details
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#config-listeners)
     */
    listeners?: EventMenuListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * A config which will be applied when creating the Menu component.
     */
    menu?: MenuConfig
    /**
     * Set to `true` to prevent the native menu from showing when there are no menu items to show, or
     * you manually prevent the menu from showing in an event listener.
     */
    preventNativeMenu?: boolean
    /**
     * A function called before displaying the menu that allows manipulations of its items.
     * Returning `false` from this function prevents the menu being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#config-processItems)
     * @param {object} context An object with information about the menu being shown.
     * @param {Scheduler.feature.SchedulerEventMenu} context.feature A reference to this feature.
     * @param {Event} context.domEvent The initiating event.
     * @param {Event} context.event DEPRECATED: The initiating event.
     * @param {number[]} context.point The client `X` and `Y` position of the initiating event.
     * @param {HTMLElement} context.targetElement The target to which the menu is being applied.
     * @param {Scheduler.model.EventModel} context.eventRecord The record representing the current event.
     * @param {Scheduler.model.ResourceModel} context.resourceRecord The record representing the current resource.
     * @param {Scheduler.model.AssignmentModel} context.assignmentRecord The assignment record.
     * @param {Record<string, MenuItemConfig|boolean>} context.items An object containing the [menu item](https://bryntum.com/products/calendar/docs/api/Core/widget/MenuItem) configs keyed by their id.
     * @returns {boolean,void} Returning `false` from this function prevents the menu being shown.
     */
    processItems?: (context: { feature: SchedulerEventMenu, domEvent: Event, event: Event, point: number[], targetElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, items: Record<string, MenuItemConfig|boolean> }) => boolean|void
    /**
     * An event which is used to show event menu. The available values for it are
     * `contextmenu`, `click` and `dblclick`. If no value is specified,
     * default value is used from [contextMenuTriggerEvent](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-contextMenuTriggerEvent)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#config-triggerEvent)
     */
    triggerEvent?: 'contextmenu'|'click'|'dblclick'|null
    /**
     * This is a type of the context menu used to generate correct names for methods and events.
     * Should be in camel case. Required to be set in subclass.
     */
    type?: string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A feature which shows a context menu when right-clicking events in the calendar.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu)
 */
export class EventMenu extends SchedulerEventMenu {
    /**
     * Identifies an object as an instance of [EventMenu](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu) class, or subclass thereof.
     */
    static readonly isEventMenu: boolean
    /**
     * Identifies an object as an instance of [EventMenu](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu) class, or subclass thereof.
     */
    readonly isEventMenu: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {EventMenuConfig} config
     */
    constructor(config?: EventMenuConfig);
}

/**
 * Type with available listeners functions for [EventTooltip](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventTooltip) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type EventTooltipListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [EventTooltip](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventTooltip) class.
 */
type EventTooltipListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [EventTooltip](https://bryntum.com/products/grid/docs/api/Calendar/feature/EventTooltip) class.
 */
type EventTooltipConfig = {
    type?: 'eventTooltip'|'eventtooltip'
    /**
     * Defines how to align the EventTooltip to its event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-align)
     */
    align?: AlignSpec|string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * If using `[showOn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-showOn) : 'click'` (the default), this is the amount of time to delay
     * showing after the click gesture. This may be used if you do not wish the tooltip to appear on the
     * first click of a double click gesture. By default there is no delay, and the tip is shown instantly.
     */
    clickDelay?: number
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * By default, the end date of an all day event is displayed in the tooltip UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-listeners)
     */
    listeners?: EventTooltipListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * A function, or the *name* of a function called to update the tooltip's content when the
     * cursor is moved over a target.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-renderer)
     * @param {object} context
     * @param {Scheduler.model.EventModel} context.eventRecord The event record which the tooltip is being shown for.
     * @param {Core.widget.Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string,Promise<any>,DomConfig}
     */
    renderer?: ((context: { eventRecord: EventModel, tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>|DomConfig)|string
    /**
     * By default, if the tip's target event is in a cluster of overlapping events and therefore
     * narrow, activating the tip will expand it to full width temporarily.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-revealEventsInCluster)
     */
    revealEventsInCluster?: boolean
    /**
     * The gesture which activates the event tooltip. Defaults to `'click'`, but may be set to
     * `'contextmenu'` or `'mouseover`'. The tip persists until closed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-showOn)
     */
    showOn?: 'click'|'contextmenu'|'mouseover'|'hover'
    /**
     * A function, or the *name* of a function which, when passed the active
     * [EventModel](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel), returns a value to use as the tooltip's
     * [title](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-title).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-titleRenderer)
     * @param {Scheduler.model.EventModel} record Event record
     * @returns {string,DomConfig}
     */
    titleRenderer?: ((record: EventModel) => string|DomConfig)|string
    /**
     * This config is used to directly configure the associated [tooltip](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip).
     */
    tooltip?: EventTipConfig
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A feature which displays a [tooltip](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-tooltip) containing extra information. The tooltip can
 * be triggered by clicking or hovering an event bar element (see [showOn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-showOn)).
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip)
 */
export class EventTooltip extends CalendarFeature {
    /**
     * Identifies an object as an instance of [EventTooltip](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip) class, or subclass thereof.
     */
    static readonly isEventTooltip: boolean
    /**
     * If using `[showOn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#config-showOn) : 'click'` (the default), this is the amount of time to delay
     * showing after the click gesture. This may be used if you do not wish the tooltip to appear on the
     * first click of a double click gesture. By default there is no delay, and the tip is shown instantly.
     */
    clickDelay: number
    /**
     * The event which the tooltip feature has been activated for.
     */
    readonly eventRecord: EventModel
    /**
     * Identifies an object as an instance of [EventTooltip](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip) class, or subclass thereof.
     */
    readonly isEventTooltip: boolean
    /**
     * By default, if the tip's target event is in a cluster of overlapping events and therefore
     * narrow, activating the tip will expand it to full width temporarily.
     */
    revealEventsInCluster: boolean
    /**
     * Gets the Tooltip instance that this feature is using.
     */
    readonly tooltip: EventTip
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {EventTooltipConfig} config
     */
    constructor(config?: EventTooltipConfig);
}

/**
 * Type with available listeners functions for [ExternalEventSource](https://bryntum.com/products/grid/docs/api/Calendar/feature/ExternalEventSource) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type ExternalEventSourceListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [ExternalEventSource](https://bryntum.com/products/grid/docs/api/Calendar/feature/ExternalEventSource) class.
 */
type ExternalEventSourceListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [ExternalEventSource](https://bryntum.com/products/grid/docs/api/Calendar/feature/ExternalEventSource) class.
 */
type ExternalEventSourceConfig = {
    type?: 'externalEventSource'|'externaleventsource'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * If not dragging from a grid, which is the default mode, then a selector which identifies
     * draggable elements within the [dragRootElement](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-dragRootElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-dragItemSelector)
     */
    dragItemSelector?: string
    /**
     * If not dragging from a grid, which is the default mode, then an element from which
     * dragging can take place must be supplied in the `dragRootElement` config.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-dragRootElement)
     */
    dragRootElement?: HTMLElement|string
    /**
     * An object which overrides or augments the default configuration for the
     * [Draggable](https://bryntum.com/products/calendar/docs/api/Core/mixin/Draggable) which handles picking up events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-draggable)
     */
    draggable?: object
    /**
     * An object which, if present, causes creation of a [Droppable](https://bryntum.com/products/calendar/docs/api/Core/mixin/Droppable) which
     * handles dropping events *from* the Calendar into the external location.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable)
     */
    droppable?: object|boolean
    /**
     * If not dragging from a grid, which is the default mode, then a function which returns
     * an event record to drag from a passed element must be supplied.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-getRecordFromElement)
     * @param {HTMLElement} element HTML element
     * @returns {Scheduler.model.EventModel,void}
     */
    getRecordFromElement?: ((element: HTMLElement) => EventModel|void)|string
    /**
     * The grid, or `id` of a grid from which events are to be dragged.
     */
    grid?: Grid|string
    /**
     * By default, the proxy shown when "picking up" the grid row is hidden
     * when dragging over the calendar because the [CalendarDrag](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag)
     * feature automatically shows a drop position indicator which shows where the
     * proposed new event will be.
     */
    hideExternalProxy?: boolean
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-listeners)
     */
    listeners?: ExternalEventSourceListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A Calendar feature which allows new events to be dragged into the Calendar from an external source.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource)
 */
export class ExternalEventSource extends CalendarFeature {
    /**
     * Identifies an object as an instance of [ExternalEventSource](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource) class, or subclass thereof.
     */
    static readonly isExternalEventSource: boolean
    /**
     * Identifies an object as an instance of [ExternalEventSource](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource) class, or subclass thereof.
     */
    readonly isExternalEventSource: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {ExternalEventSourceConfig} config
     */
    constructor(config?: ExternalEventSourceConfig);
}

/**
 * Type with available listeners functions for [LoadOnDemand](https://bryntum.com/products/grid/docs/api/Calendar/feature/LoadOnDemand) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type LoadOnDemandListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [LoadOnDemand](https://bryntum.com/products/grid/docs/api/Calendar/feature/LoadOnDemand) class.
 */
type LoadOnDemandListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [LoadOnDemand](https://bryntum.com/products/grid/docs/api/Calendar/feature/LoadOnDemand) class.
 */
type LoadOnDemandConfig = {
    type?: 'loadOnDemand'|'loadondemand'
    /**
     * By default, if a view requests a date range that we have already loaded, no
     * network request is made, and the events will be loaded from the current content
     * of the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#config-alwaysLoadNewRange)
     */
    alwaysLoadNewRange?: boolean
    /**
     * A function, or name of a function in the ownership hierarchy which may be called
     * to mutate the `options` packet that is passed to the [CrudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/data/CrudManager)
     * [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     * One possible use of this function is to mutate the `options.request.params` object to add extra
     * parameters for the server.
     * @param {object} options The `options` parameter to be sent to the [CrudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/data/CrudManager) [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     * @param {object} options.dateRangeRequested An object containing the start and end dates of the range to load.
     * @param {Date} options.dateRangeRequested.startDate The start date of the range to request.
     * @param {Date} options.dateRangeRequested.endDate The end date of the range to request. <strong>Note that Dates are timestamps</strong>.
     * @param {object} options.request A configuration object for the CrudManager load request
     * @param {object} options.request.params An object where the property name is the HTTP parameter name and the property value is the parameter value.
     * @returns {void}
     */
    beforeRequest?: ((options: { dateRangeRequested: { startDate: Date, endDate: Date }, request: { params: object } }) => void)|string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * Configure this as `true` to clear the event store when a new date range has been requested
     * instead of leaving it until the load of the new data to correct the store contents,
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#config-clearOnNewRange)
     */
    clearOnNewRange?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-format-static) format string to use to
     * encode the start date and end date of the events to load when the view requires a new date range.
     */
    dateFormat?: string
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * The name of the HTTP parameter which contains the end date of the view requiring new data.
     */
    endDateParamName?: string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#config-listeners)
     */
    listeners?: LoadOnDemandListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * The name of the HTTP parameter which contains the start date of the view requiring new data.
     */
    startDateParamName?: string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Loads the host Calendar's [CrudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) on demand
 * as the date range required to produce the UI changes.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand)
 */
export class LoadOnDemand extends CalendarFeature {
    /**
     * Identifies an object as an instance of [LoadOnDemand](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand) class, or subclass thereof.
     */
    static readonly isLoadOnDemand: boolean
    /**
     * Identifies an object as an instance of [LoadOnDemand](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand) class, or subclass thereof.
     */
    readonly isLoadOnDemand: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {LoadOnDemandConfig} config
     */
    constructor(config?: LoadOnDemandConfig);
    /**
     * Reloads the currently loaded date range.
     */
    refresh(): void;
}

/**
 * Type with available listeners functions for [ScheduleMenu](https://bryntum.com/products/grid/docs/api/Calendar/feature/ScheduleMenu) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type ScheduleMenuListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [ScheduleMenu](https://bryntum.com/products/grid/docs/api/Calendar/feature/ScheduleMenu) class.
 */
type ScheduleMenuListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [ScheduleMenu](https://bryntum.com/products/grid/docs/api/Calendar/feature/ScheduleMenu) class.
 */
type ScheduleMenuConfig = {
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * A CSS selector targeting an element, such as an ellipsis icon that when
     * clicked will trigger the menu to show.
     */
    clickTriggerSelector?: string
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * This is a preconfigured set of items used to create the default context menu.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#config-items)
     */
    items?: Record<string, MenuItemConfig|boolean|null>
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/calendar/docs/api/Core/feature/base/ContextMenuBase#keyboard-shortcuts) for details
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#config-listeners)
     */
    listeners?: ScheduleMenuListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * A config which will be applied when creating the Menu component.
     */
    menu?: MenuConfig
    /**
     * Set to `true` to prevent the native menu from showing when there are no menu items to show, or
     * you manually prevent the menu from showing in an event listener.
     */
    preventNativeMenu?: boolean
    /**
     * A function called before displaying the menu that allows manipulations of its items.
     * Returning `false` from this function prevents the menu being shown.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#config-processItems)
     * @param {object} context An object with information about the menu being shown
     * @param {Scheduler.feature.SchedulerScheduleMenu} context.feature A reference to this feature.
     * @param {Event} context.domEvent The initiating event.
     * @param {Event} context.event DEPRECATED: The initiating event.
     * @param {number[]} context.point The client `X` and `Y` position of the initiating event.
     * @param {HTMLElement} context.targetElement The target to which the menu is being applied.
     * @param {Scheduler.model.ResourceModel} context.resourceRecord The record representing the current resource
     * @param {Date} context.date The clicked date
     * @param {Record<string, MenuItemConfig|boolean>} context.items An object containing the [menu item](https://bryntum.com/products/calendar/docs/api/Core/widget/MenuItem) configs keyed by their id.
     * @returns {boolean,void} Returning `false` from this function prevents the menu being shown
     */
    processItems?: (context: { feature: SchedulerScheduleMenu, domEvent: Event, event: Event, point: number[], targetElement: HTMLElement, resourceRecord: ResourceModel, date: Date, items: Record<string, MenuItemConfig|boolean> }) => boolean|void
    /**
     * An event which is used to show schedule menu. The available values for it are
     * `contextmenu`, `click` and `dblclick`. If no value is specified, default
     * value is used from [contextMenuTriggerEvent](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-contextMenuTriggerEvent)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#config-triggerEvent)
     */
    triggerEvent?: 'contextmenu'|'click'|'dblclick'|null
    /**
     * This is a type of the context menu used to generate correct names for methods and events.
     * Should be in camel case. Required to be set in subclass.
     */
    type?: string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A feature which adds a context menu to the unoccupied parts of calendar views.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu)
 */
export class ScheduleMenu extends SchedulerScheduleMenu {
    /**
     * Identifies an object as an instance of [ScheduleMenu](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu) class, or subclass thereof.
     */
    static readonly isScheduleMenu: boolean
    /**
     * Identifies an object as an instance of [ScheduleMenu](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu) class, or subclass thereof.
     */
    readonly isScheduleMenu: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {ScheduleMenuConfig} config
     */
    constructor(config?: ScheduleMenuConfig);
}

/**
 * Type with available listeners functions for [ScheduleTooltip](https://bryntum.com/products/grid/docs/api/Calendar/feature/ScheduleTooltip) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type ScheduleTooltipListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [ScheduleTooltip](https://bryntum.com/products/grid/docs/api/Calendar/feature/ScheduleTooltip) class.
 */
type ScheduleTooltipListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [ScheduleTooltip](https://bryntum.com/products/grid/docs/api/Calendar/feature/ScheduleTooltip) class.
 */
type ScheduleTooltipConfig = {
    type?: 'scheduleTooltip'|'scheduletooltip'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#config-listeners)
     */
    listeners?: ScheduleTooltipListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * A function (or name of a function in the ownership hierarchy) which decides whether to show the ScheduleTooltip
     * depending on the active view. The active view is passed, and if a truthy value is returned, the tip is shown,
     * otherwise it is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#config-showScheduleTip)
     * @param {Calendar.widget.mixin.CalendarMixin} view The Calendar view that the pointer is over. Return `true` to show the ScheduleTooltip for the passed view.
     * @returns {boolean} `true` to show the Schedule tooltip for the passed view.
     */
    showScheduleTip?: ((view: CalendarMixinClass) => boolean)|string
    /**
     * This config is used to directly configure the associated [Tooltip](https://bryntum.com/products/calendar/docs/api/Core/widget/Tooltip).
     */
    tooltip?: TooltipConfig
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A feature that displays a tooltip containing the time at the mouse position when hovering empty parts of the schedule:
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip)
 */
export class ScheduleTooltip extends CalendarFeature {
    /**
     * Identifies an object as an instance of [ScheduleTooltip](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip) class, or subclass thereof.
     */
    static readonly isScheduleTooltip: boolean
    /**
     * Identifies an object as an instance of [ScheduleTooltip](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip) class, or subclass thereof.
     */
    readonly isScheduleTooltip: boolean
    /**
     * A function (or name of a function in the ownership hierarchy) which decides whether to show the ScheduleTooltip
     * depending on the active view. The active view is passed, and if a truthy value is returned, the tip is shown,
     * otherwise it is hidden.
     */
    showScheduleTip: ((view: CalendarMixinClass) => boolean)|string
    /**
     * Gets the Tooltip instance that this feature is using.
     */
    readonly tooltip: Tooltip
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ScheduleTooltip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {ScheduleTooltipConfig} config
     */
    constructor(config?: ScheduleTooltipConfig);
}

/**
 * Type with available listeners functions for [TimeRanges](https://bryntum.com/products/grid/docs/api/Calendar/feature/TimeRanges) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type TimeRangesListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [TimeRanges](https://bryntum.com/products/grid/docs/api/Calendar/feature/TimeRanges) class.
 */
type TimeRangesListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [TimeRanges](https://bryntum.com/products/grid/docs/api/Calendar/feature/TimeRanges) class.
 */
type TimeRangesConfig = {
    type?: 'timeRanges'|'timeranges'
    /**
     * Function used to generate the HTML content for a time range body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-bodyRenderer)
     * @param {object} data Render data
     * @param {Scheduler.model.TimeSpan} data.timeRange
     * @returns {string} String representing the HTML markup
     */
    bodyRenderer?: (data: { timeRange: TimeSpan }) => string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * The date format to show in the header for the current time line (when [showCurrentTimeLine](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/TimeRanges#config-showCurrentTimeLine) is configured).
     * See [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) for the possible formats to use.
     */
    currentDateFormat?: string
    /**
     * The interval (as amount of ms) defining how frequently the current timeline will be updated
     */
    currentTimeLineUpdateInterval?: number
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Set to `true` to enable dragging and resizing of range elements in the header. Only relevant when
     * [showHeaderElements](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/AbstractTimeRanges#config-showHeaderElements) is `true`.
     */
    enableResizing?: boolean
    /**
     * Function used to generate the HTML content for a time range header element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-headerRenderer)
     * @param {object} data Render data
     * @param {Scheduler.model.TimeSpan} data.timeRange
     * @returns {string} String representing the HTML markup
     */
    headerRenderer?: (data: { timeRange: TimeSpan }) => string
    /**
     * The number of pixels or proportion of the overall width to allocate for time range headers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-headerWidth)
     */
    headerWidth?: number
    /**
     * A [Tooltip](https://bryntum.com/products/calendar/docs/api/Core/widget/Tooltip) config object which is applied to the tooltip shown when hovering a
     * TimeRange header element
     */
    hoverTooltip?: TooltipConfig
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-listeners)
     */
    listeners?: TimeRangesListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * An empty function by default, but provided so that you can override it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-renderer)
     * @param {TimeRangeRenderInfo} info An object that contains data about the time span being rendered.
     * @returns {string}
     */
    renderer?: ((info: TimeRangeRenderInfo) => string)|TimeRangeRenderer
    /**
     * Show a line indicating current time. Either `true` or `false` or a [TimeSpan](https://bryntum.com/products/calendar/docs/api/Scheduler/model/TimeSpan)
     * configuration object to apply to this special time range (allowing you to provide a custom text):
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-showCurrentTimeLine)
     */
    showCurrentTimeLine?: boolean|TimeSpanConfig
    /**
     * Set to `false` to not render range elements into the time axis header
     */
    showHeaderElements?: boolean
    /**
     * A Boolean specifying whether to show tooltip while resizing range elements, or a
     * [Tooltip](https://bryntum.com/products/calendar/docs/api/Core/widget/Tooltip) config object which is applied to the tooltip
     */
    showTooltip?: boolean|TooltipConfig
    /**
     * Template used to generate the tooltip contents when hovering a time range header element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#config-tooltipTemplate)
     * @param {object} data Tooltip data
     * @param {Scheduler.model.TimeSpan} data.timeRange
     * @param {string} data.startClockHtml Predefined HTML to show the start time
     * @param {string} data.endClockHtml Predefined HTML to show the end time
     * @returns {string} String representing the HTML markup
     */
    tooltipTemplate?: (data: { timeRange: TimeSpan, startClockHtml: string, endClockHtml: string }) => string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * This feature provides an easy way to highlight ranges of time in a calendar's day and week views. Each time range is
 * represented using the [TimeRangeModel](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel).
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges)
 */
export class TimeRanges extends SchedulerTimeRanges {
    /**
     * Identifies an object as an instance of [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) class, or subclass thereof.
     */
    static readonly isTimeRanges: boolean
    /**
     * Identifies an object as an instance of [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) class, or subclass thereof.
     */
    readonly isTimeRanges: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {TimeRangesConfig} config
     */
    constructor(config?: TimeRangesConfig);
}

/**
 * Type with available listeners functions for [WeekExpander](https://bryntum.com/products/grid/docs/api/Calendar/feature/WeekExpander) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type WeekExpanderListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [WeekExpander](https://bryntum.com/products/grid/docs/api/Calendar/feature/WeekExpander) class.
 */
type WeekExpanderListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [WeekExpander](https://bryntum.com/products/grid/docs/api/Calendar/feature/WeekExpander) class.
 */
type WeekExpanderConfig = {
    type?: 'weekExpander'|'weekexpander'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander#config-listeners)
     */
    listeners?: WeekExpanderListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * A Feature which, when present, adds a week row expansion tool to week rows in
 * [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView)s so that a row which contains overflowing cells
 * can be expanded to show all events with no overflow.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander)
 */
export class WeekExpander extends CalendarFeature {
    /**
     * Identifies an object as an instance of [WeekExpander](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander) class, or subclass thereof.
     */
    static readonly isWeekExpander: boolean
    /**
     * Identifies an object as an instance of [WeekExpander](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander) class, or subclass thereof.
     */
    readonly isWeekExpander: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with available listeners functions for [ExcelExporter](https://bryntum.com/products/grid/docs/api/Calendar/feature/experimental/ExcelExporter) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type ExcelExporterListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable: (event: { source: InstancePlugin }) => void
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable: (event: { source: InstancePlugin }) => void
}

/**
 * Type with listeners options for [ExcelExporter](https://bryntum.com/products/grid/docs/api/Calendar/feature/experimental/ExcelExporter) class.
 */
type ExcelExporterListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    disable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    enable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * Type with configuration options for [ExcelExporter](https://bryntum.com/products/grid/docs/api/Calendar/feature/experimental/ExcelExporter) class.
 */
type ExcelExporterConfig = {
    type?: 'excelExporter'|'excelexporter'
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `true` to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * The widget which this plugin is to attach to.
     */
    client?: Widget
    /**
     * If this config is true, exporter will convert all empty values to ''. Empty values are:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#config-convertEmptyValueToEmptyString)
     */
    convertEmptyValueToEmptyString?: boolean
    /**
     * Defines how dates in a cell will be formatted
     */
    dateFormat?: string
    /**
     * The plugin/feature `disabled` state.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Set this config to `true` to export all [exportable](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-exportable) columns including
     * [hidden](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-hidden) columns as well.
     */
    exportAllColumns?: boolean
    /**
     * Exporter class. Must subclass [ScheduleTableExporter](https://bryntum.com/products/calendar/docs/api/Scheduler/util/ScheduleTableExporter)
     */
    exporterClass?: typeof ScheduleTableExporter
    /**
     * Configuration object for [exporter class](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/experimental/ExcelExporter#config-exporterClass).
     */
    exporterConfig?: object
    /**
     * Name of the exported file
     */
    filename?: string
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#config-listeners)
     */
    listeners?: ExcelExporterListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * This hook allows to use 3rd party libraries to generate XLSX files. Until version 7.0 zipcelx library is
     * used. From version 7.0, the default will be [WriteExcelFileProvider](https://bryntum.com/products/calendar/docs/api/Grid/feature/experimental/xlsproviders/WriteExcelFileProvider).
     * Provider must extend [XlsProviderBase](https://bryntum.com/products/calendar/docs/api/Grid/feature/experimental/xlsproviders/XlsProviderBase) and implement static
     * [write](https://bryntum.com/products/calendar/docs/api/Grid/feature/experimental/xlsproviders/XlsProviderBase#function-write-static) method.
     */
    xlsProvider?: typeof XlsProviderBase
    /**
     * Legacy way to generate XLS files was using [zipcelx library](https://www.npmjs.com/package/zipcelx)
     * forked and adjusted to support [column width config](https://github.com/bryntum/zipcelx/tree/column-width-build)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#config-zipcelx)
     * @deprecated 6.1.0 Use [xlsProvider](https://bryntum.com/products/calendar/docs/api/Grid/feature/experimental/ExcelExporter#config-xlsProvider) instead
     */
    zipcelx?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when the plugin/feature is disabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onDisable?: ((event: { source: InstancePlugin }) => void)|string
    /**
     * Fired when the plugin/feature is enabled.
     * @param {object} event Event object
     * @param {Core.mixin.InstancePlugin} event.source
     */
    onEnable?: ((event: { source: InstancePlugin }) => void)|string
}

/**
 * <strong>NOTE</strong>: This class requires a 3rd party library to operate.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter)
 */
export class ExcelExporter extends SchedulerExcelExporter {
    /**
     * Identifies an object as an instance of [ExcelExporter](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter) class, or subclass thereof.
     */
    static readonly isExcelExporter: boolean
    /**
     * Identifies an object as an instance of [ExcelExporter](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter) class, or subclass thereof.
     */
    readonly isExcelExporter: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/experimental/ExcelExporter#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with configuration options for [Print](https://bryntum.com/products/grid/docs/api/Calendar/feature/print/Print) class.
 */
type PrintConfig = {
    type?: 'print'
    /**
     * The function to use to create the [&lt;title&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title) element for the print document.
     * Defaults to using the [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer)
     * of the active view. Note that this does not process HTML source.
     * @param {Calendar.widget.mixin.CalendarMixin} source The view which triggered the event.
     * @returns {string}
     */
    titleRenderer?: ((source: typeof CalendarMixin) => string)|string
    /**
     * By default, a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView) is rendered with the week rows
     * shrinkwrapping their event content. That is, rows with no events are small, and rows
     * containing events are expanded to make all events visible.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/print/Print#config-wysiwyg)
     */
    wysiwyg?: boolean
    /**
     * Fires when print has finished
     */
    onPrint?: (() => void)|string
}

/**
 * This feature enables printing of the current Calendar mode.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/feature/print/Print)
 */
export class Print {
    /**
     * Fires when print has finished
     */
    onPrint: (() => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {PrintConfig} config
     */
    constructor(config?: PrintConfig);
    /**
     * Prints the current active view of the Calendar
     */
    print(): Promise<void>;
}

/**
 * Type with configuration options for [DayLayout](https://bryntum.com/products/grid/docs/api/Calendar/layout/day/DayLayout) class.
 */
type DayLayoutConfig = {
    /**
     * Set to `false` to disable the gap on the right-most edge of events. See [gutterWidth](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/DayLayout#config-gutterWidth) to
     * control the size of the gutter.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/DayLayout#config-gutter)
     */
    gutter?: boolean
    /**
     * The number of pixels or proportion of the overall width to allocate to the [gutter](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/DayLayout#config-gutter).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/DayLayout#config-gutterWidth)
     */
    gutterWidth?: number
    /**
     * The number of pixels or proportion of the overall width to allocate for rendering on outside the area where
     * events are displayed. This space is used by [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) to render arbitrary spans of
     * time on either side of the day's events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/DayLayout#config-inset)
     */
    inset?: number
}

/**
 * The base class for [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView) layout algorithms.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/DayLayout)
 */
export abstract class DayLayout extends Base {
    /**
     * Identifies an object as an instance of [DayLayout](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/DayLayout) class, or subclass thereof.
     */
    static readonly isDayLayout: boolean
    /**
     * Identifies an object as an instance of [DayLayout](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/DayLayout) class, or subclass thereof.
     */
    readonly isDayLayout: boolean
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {DayLayoutConfig} config
     */
    constructor(config?: DayLayoutConfig);
}

/**
 * Type with configuration options for [FluidDayLayout](https://bryntum.com/products/grid/docs/api/Calendar/layout/day/FluidDayLayout) class.
 */
type FluidDayLayoutConfig = {
    /**
     * The number of minutes of an event that must be (vertically) cleared by another event before it is
     * allowed to be significantly overlapped by it (horizontally).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout#config-clearanceMinutes)
     */
    clearanceMinutes?: number
    /**
     * Set to `false` to disable the gap on the right-most edge of events. See [gutterWidth](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/DayLayout#config-gutterWidth) to
     * control the size of the gutter.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout#config-gutter)
     */
    gutter?: boolean
    /**
     * The number of pixels or proportion of the overall width to allocate to the [gutter](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/DayLayout#config-gutter).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout#config-gutterWidth)
     */
    gutterWidth?: number
    /**
     * The number of pixels or proportion of the overall width to allocate for rendering on outside the area where
     * events are displayed. This space is used by [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) to render arbitrary spans of
     * time on either side of the day's events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout#config-inset)
     */
    inset?: number
    /**
     * This is the minimum width to which `staggerWidth` will size an event. For example, if an event has many
     * overlapping events, its width may be reduced a number of steps due to `staggerWidth`. This value limits
     * how much the event's width will be reduced.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout#config-staggerMinimum)
     */
    staggerMinimum?: number
    /**
     * When enabled, the width of an event is reduced in steps based on the number of events that overlap it.
     * Set this config to `false` or 0 to disable this effect.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout#config-staggerWidth)
     */
    staggerWidth?: boolean|number
    /**
     * Set this to `true` to use the full day width for events. By default, overlapping events equally split the
     * width.
     */
    stretch?: boolean
}

/**
 * This class positions events for a `DayView` by maximizing the visible area of each event. When events overlap, this
 * class determines the minimum amount of horizontal indent required for the overlapping events so that as much of
 * their content as possible is unobstructed.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout)
 */
export class FluidDayLayout extends DayLayout {
    /**
     * Identifies an object as an instance of [FluidDayLayout](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout) class, or subclass thereof.
     */
    static readonly isFluidDayLayout: boolean
    /**
     * Identifies an object as an instance of [FluidDayLayout](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout) class, or subclass thereof.
     */
    readonly isFluidDayLayout: boolean
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {FluidDayLayoutConfig} config
     */
    constructor(config?: FluidDayLayoutConfig);
}

/**
 * Type with configuration options for [CalendarStores](https://bryntum.com/products/grid/docs/api/Calendar/mixin/CalendarStores) class.
 */
type CalendarStoresClassConfig = {
    /**
     * The [AssignmentStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/AssignmentStore) or a reconfiguring object for a store which will hold assignments linking resources to events.
     */
    assignmentStore?: AssignmentStore|AssignmentStoreConfig
    /**
     * Inline assignments, will be loaded into the [assignmentStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-assignmentStore).
     */
    assignments?: AssignmentModel[]|AssignmentModelConfig[]
    /**
     * Supply a [CrudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/data/CrudManager) instance or a config object if you want to use
     * CrudManager for handling data.
     */
    crudManager?: CrudManagerConfig|SchedulerCrudManager
    /**
     * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to
     * [crudManager](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#config-crudManager) config.
     */
    crudManagerClass?: SchedulerCrudManager
    /**
     * The calendar ([Resource](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel)), (or its `id`) to use as the
     * default calendar for new events created using [dblclick](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-autoCreate)
     * or [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag), or [dragging in](#Calendar/feature/ExternalEventSource).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#config-defaultCalendar)
     */
    defaultCalendar?: string|ResourceModel
    /**
     * Configure as `true` to destroy the Project and stores when `this` is destroyed.
     */
    destroyStores?: boolean
    /**
     * The [EventStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore) or a reconfiguring object for a store which will hold
     * the events to be rendered into the Calendar.
     */
    eventStore?: EventStore|EventStoreConfig
    /**
     * Inline events, will be loaded into the [eventStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-eventStore).
     */
    events?: EventModel[]|EventModelConfig[]
    /**
     * A [ProjectModel](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel) instance or a config object. The project holds all Scheduler data.
     * Can be omitted in favor of individual store configs or [crudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#config-project)
     */
    project?: ProjectModel|ProjectModelConfig
    /**
     * The [ResourceStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceStore) or a reconfiguring object for a store which will hold the resources to be rendered into the Calendar.
     */
    resourceStore?: ResourceStore|ResourceStoreConfig
    /**
     * The [ResourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceTimeRangeStore) or a reconfiguring object for a store which will hold resource time ranges.
     * These may be used by the [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) feature.
     */
    resourceTimeRangeStore?: ResourceTimeRangeStore|ResourceTimeRangeStoreConfig
    /**
     * Inline resource time ranges, will be loaded into [resourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-resourceTimeRangeStore).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#config-resourceTimeRanges)
     */
    resourceTimeRanges?: ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]
    /**
     * Inline resources, will be loaded into the [resourceStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-resourceStore).
     */
    resources?: ResourceModel[]|ResourceModelConfig[]
    /**
     * The [TimeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore) or a reconfiguring object for a store which will hold time ranges.
     * These may be used by the [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) feature.
     */
    timeRangeStore?: TimeRangeStore|TimeRangeStoreConfig
    /**
     * Inline time ranges, will be loaded into the [timeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-timeRangeStore).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#config-timeRanges)
     */
    timeRanges?: TimeRangeModel[]|TimeRangeModelConfig[]
    /**
     * Set to a time zone or a UTC offset. This will set the project's
     * [timeZone](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#config-timeZone) config accordingly. As this config is only a referer,
     * please see project's config [documentation](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#config-timeZone) for more
     * information.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#config-timeZone)
     */
    timeZone?: string|number
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#event-dataChange)
     * @param {object} event Event object
     * @param {typeof Scheduler.data.mixin.ProjectConsumer,any} event.source Owning component
     * @param {typeof Scheduler.model.mixin.ProjectModelMixin,any} event.project Project model
     * @param {Core.data.Store} event.store Affected store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange?: ((event: { source: typeof ProjectConsumer|any, project: typeof ProjectModelMixin|any, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
}

export class CalendarStoresClass extends ProjectConsumerClass {
    /**
     * Identifies an object as an instance of [CalendarStores](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores) class, or subclass thereof.
     */
    static readonly isCalendarStores: boolean
    /**
     * The [AssignmentStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/AssignmentStore) holding assignments linking resources to events.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Inline assignments, will be loaded into the [assignmentStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-assignmentStore).
     */
    assignments: AssignmentModel[]|AssignmentModelConfig[]
    /**
     * Get/set the CrudManager instance
     */
    crudManager: SchedulerCrudManager
    /**
     * The default Calendar to be used when creating new events which do not initially have a resource.
     */
    defaultCalendar: ResourceModel
    /**
     * The [EventStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore) holding the events to be rendered into the Calendar.
     */
    readonly eventStore: EventStore
    /**
     * Inline events, will be loaded into the [eventStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-eventStore).
     */
    events: EventModel[]|EventModelConfig[]
    /**
     * Identifies an object as an instance of [CalendarStores](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores) class, or subclass thereof.
     */
    readonly isCalendarStores: boolean
    /**
     * The [ResourceStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceStore) holding the resources to be rendered into the Calendar.
     */
    readonly resourceStore: ResourceStore
    /**
     * The [ResourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceTimeRangeStore) holding resource time ranges.
     * These may be used by the [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) feature.
     */
    readonly resourceTimeRangeStore: ResourceTimeRangeStore
    /**
     * Inline resource time ranges, will be loaded into [resourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-resourceTimeRangeStore).
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]
    /**
     * Inline resources, will be loaded into the [resourceStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-resourceStore).
     */
    resources: ResourceModel[]|ResourceModelConfig[]
    /**
     * The [TimeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore) holding time ranges.
     * These may be used by the [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) feature.
     */
    readonly timeRangeStore: TimeRangeStore
    /**
     * Inline time ranges, will be loaded into the [timeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-timeRangeStore).
     */
    timeRanges: TimeRangeModel[]|TimeRangeModelConfig[]
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#event-dataChange)
     * @param {object} event Event object
     * @param {typeof Scheduler.data.mixin.ProjectConsumer,any} event.source Owning component
     * @param {typeof Scheduler.model.mixin.ProjectModelMixin,any} event.project Project model
     * @param {Core.data.Store} event.store Affected store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: typeof ProjectConsumer|any, project: typeof ProjectModelMixin|any, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {CalendarStoresClassConfig} config
     */
    constructor(config?: CalendarStoresClassConfig);
}

export const CalendarStores : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & CalendarStoresClass>

/**
 * Type with configuration options for [ProjectModel](https://bryntum.com/products/grid/docs/api/Calendar/model/ProjectModel) class.
 */
type ProjectModelConfig = {
    /**
     * A flag, indicating whether the dates and duration calculations should adjust the result to DST time shift.
     */
    adjustDurationToDST?: boolean
    /**
     * The constructor of the assignment model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-modelClass) property of the [assignmentStore](#Scheduler/model/ProjectModel#property-assignmentStore)
     */
    assignmentModelClass?: typeof AssignmentModel
    /**
     * An [AssignmentStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/AssignmentStore) instance or a config object.
     */
    assignmentStore?: AssignmentStore|AssignmentStoreConfig
    /**
     * The constructor to create an assignment store instance with. Should be a class, subclassing the
     * [AssignmentStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/AssignmentStore)
     */
    assignmentStoreClass?: typeof AssignmentStore|object
    /**
     * Data use to fill the [assignmentStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#property-assignmentStore). Should be an array of
     * [AssignmentModels](https://bryntum.com/products/calendar/docs/api/Scheduler/model/AssignmentModel) or its configuration objects.
     */
    assignments?: AssignmentModel[]|AssignmentModelConfig[]
    /**
     * The initial data, to fill the [assignmentStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#property-assignmentStore) with.
     * Should be an array of [AssignmentModels](https://bryntum.com/products/calendar/docs/api/Scheduler/model/AssignmentModel) or its configuration
     * objects.
     */
    assignmentsData?: AssignmentModel[]|AssignmentModelConfig[]
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#config-children)
     */
    children?: boolean|object[]|Model[]
    /**
     * Data use to fill the [dependencyStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#property-dependencyStore). Should be an array of
     * [DependencyModels](https://bryntum.com/products/calendar/docs/api/Scheduler/model/DependencyModel) or its configuration objects.
     */
    dependencies?: DependencyModel[]|DependencyModelConfig[]
    /**
     * The initial data, to fill the [dependencyStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#property-dependencyStore) with.
     * Should be an array of [DependencyModels](https://bryntum.com/products/calendar/docs/api/Scheduler/model/DependencyModel) or its configuration
     * objects.
     */
    dependenciesData?: DependencyModel[]|DependencyModelConfig[]
    /**
     * The constructor of the dependency model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-modelClass) property of the [dependencyStore](#Scheduler/model/ProjectModel#property-dependencyStore)
     */
    dependencyModelClass?: typeof DependencyModel
    /**
     * A [DependencyStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/DependencyStore) instance or a config object.
     */
    dependencyStore?: DependencyStore|DependencyStoreConfig
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the
     * [DependencyStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/DependencyStore)
     */
    dependencyStoreClass?: typeof DependencyStore|object
    /**
     * The constructor of the event model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-modelClass) property of the [eventStore](#Scheduler/model/ProjectModel#property-eventStore)
     */
    eventModelClass?: typeof EventModel
    /**
     * An [EventStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore) instance or a config object.
     */
    eventStore?: EventStore|EventStoreConfig
    /**
     * The constructor to create an event store instance with. Should be a class, subclassing the
     * [EventStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore)
     */
    eventStoreClass?: typeof EventStore|object
    /**
     * Data use to fill the [eventStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#property-eventStore). Should be an array of
     * [EventModels](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) or its configuration objects.
     */
    events?: EventModel[]|EventModelConfig[]
    /**
     * The initial data, to fill the [eventStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#property-eventStore) with.
     * Should be an array of [EventModels](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) or its configuration objects.
     */
    eventsData?: EventModel[]|EventModelConfig[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded?: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#config-id)
     */
    id?: string|number
    /**
     * Project data as a JSON string, used to populate its stores.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#config-json)
     */
    json?: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex?: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId?: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex?: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#config-readOnly)
     */
    readOnly?: boolean
    /**
     * This field is added to the class at runtime when the Store is configured with
     * [lazyLoad](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-lazyLoad). It is also required for lazy load functionality in a Tree store. The
     * number specified should reflect the <strong>total</strong> amount of children of a parent node, including nested descendants.
     */
    remoteChildCount?: number
    /**
     * The constructor of the resource model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-modelClass) property of the [resourceStore](#Scheduler/model/ProjectModel#property-resourceStore)
     */
    resourceModelClass?: typeof ResourceModel
    /**
     * A [ResourceStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceStore) instance or a config object.
     */
    resourceStore?: ResourceStore|ResourceStoreConfig
    /**
     * The constructor to create a resource store instance with. Should be a class, subclassing the
     * [ResourceStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceStore)
     */
    resourceStoreClass?: typeof ResourceStore|object
    /**
     * A [ResourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceTimeRangeStore) instance or a config object.
     */
    resourceTimeRangeStore?: ResourceTimeRangeStore|ResourceTimeRangeStoreConfig
    /**
     * The constructor to create a resource time range store instance with. Should be a class subclassing the
     * [ResourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceTimeRangeStore)
     */
    resourceTimeRangeStoreClass?: typeof ResourceTimeRangeStore|object
    /**
     * Data use to fill the [resourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#property-resourceTimeRangeStore). Should be an array
     * of [ResourceTimeRangeModels](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceTimeRangeModel) or its configuration objects.
     */
    resourceTimeRanges?: ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]
    /**
     * The initial data, to fill the [resourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/mixin/ProjectModelMixin#property-resourceTimeRangeStore) with.
     * Should be an array of [ResourceTimeRangeModel](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceTimeRangeModel) or it's
     * configuration objects.
     */
    resourceTimeRangesData?: ResourceTimeRangeModel[]
    /**
     * Data use to fill the [resourceStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#property-resourceStore). Should be an array of
     * [ResourceModels](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) or its configuration objects.
     */
    resources?: ResourceModel[]|ResourceModelConfig[]
    /**
     * The initial data, to fill the [resourceStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#property-resourceStore) with.
     * Should be an array of [ResourceModels](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) or its configuration objects.
     */
    resourcesData?: ResourceModel[]|ResourceModelConfig[]
    /**
     * Experimental hook that lets the app determine if a bound dataset needs syncing with the store or not, and
     * if it does - which records that should be processed. Only called for stores that are configured with
     * `syncDataOnLoad: true` (which is the default in the React, Angular and Vue wrappers).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#config-shouldSyncDataOnLoad)
     * @param {object} options Options passed by the store to this hook
     * @param {Core.data.Store} options.store Store about to be synced
     * @param {Core.data.Model} options.records Records currently in the store
     * @param {object[]} options.data Incoming data
     * @returns {Set<any>,boolean} Return `false` to prevent the store from syncing, or a set of record ids that need further processing (for records that has some kind of change, eg. an update, removal or addition)
     */
    shouldSyncDataOnLoad?: (options: { store: Store, records: Model, data: object[] }) => Set<any>|boolean
    /**
     * Silences propagations caused by the project loading.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#config-silenceInitialCommit)
     */
    silenceInitialCommit?: boolean
    /**
     * Configuration options to provide to the STM manager
     */
    stm?: StateTrackingManagerConfig|StateTrackingManager
    /**
     * The constructor of the time range model class, to be used in the project. Will be set as the
     * [modelClass](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-modelClass) property of the [timeRangeStore](#Calendar/model/ProjectModel#property-timeRangeStore)
     */
    timeRangeModelClass?: typeof TimeRangeModel
    /**
     * A [Store](https://bryntum.com/products/calendar/docs/api/Core/data/Store) instance or a config object.
     */
    timeRangeStore?: Store|StoreConfig
    /**
     * The constructor to create an timeRange store instance with. Should be a class, subclassing the
     * [Store](https://bryntum.com/products/calendar/docs/api/Core/data/Store)
     */
    timeRangeStoreClass?: typeof Store|object
    /**
     * Data use to fill the [timeRangeStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#property-timeRangeStore). Should be an array of
     * [TimeRangeModels](https://bryntum.com/products/calendar/docs/api/Scheduler/model/TimeRangeModel) or its configuration objects.
     */
    timeRanges?: SchedulerTimeRangeModel[]|TimeRangeModelConfig[]
    /**
     * The initial data, to fill the [timeRangeStore](https://bryntum.com/products/calendar/docs/api/Scheduler/model/mixin/ProjectModelMixin#property-timeRangeStore) with.
     * Should be an array of [TimeSpan](https://bryntum.com/products/calendar/docs/api/Scheduler/model/TimeSpan) or its configuration objects.
     */
    timeRangesData?: TimeSpan[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#config-timeZone)
     */
    timeZone?: string|number
    /**
     * Specifies the output format of [toJSON](https://bryntum.com/products/calendar/docs/api/Scheduler/model/mixin/ProjectModelCommon#function-toJSON).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#config-toJSONResultFormat)
     */
    toJSONResultFormat?: 'inlineData'|'model'
    /**
     * By default, the stores of a project use the raw data objects passed to them as the data source for their
     * records if data is loaded remotely (using an `AjaxStore` or a `CrudManager`). For data supplied inline,
     * the data objects are instead by default cloned to avoid the original data object being modified by the
     * store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#config-useRawData)
     */
    useRawData?: boolean
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#event-change)
     * @param {object} event Event object
     * @param {Scheduler.model.SchedulerProjectModel,any} event.source This project
     * @param {Core.data.Store} event.store Affected store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange?: ((event: { source: SchedulerProjectModel|any, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#event-dataReady)
     * @param {object} event Event object
     * @param {Scheduler.model.SchedulerProjectModel,any} event.source The project
     * @param {boolean} event.isInitialCommit Flag that shows if this commit is initial
     * @param {Set<any>} event.records Set of all [Model](https://bryntum.com/products/calendar/docs/api/Core/data/Model)s that were modified in the completed transaction. Use the [modifications](https://bryntum.com/products/calendar/docs/api/Core/data/Model#property-modifications) property of each Model to identify modified fields.
     */
    onDataReady?: ((event: { source: SchedulerProjectModel|any, isInitialCommit: boolean, records: Set<any> }) => void)|string
}

/**
 * This class represents a global project of your Calendar - a central place for all data.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel)
 */
export class ProjectModel extends SchedulerProjectModel {
    /**
     * Identifies an object as an instance of [ProjectModel](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel) class, or subclass thereof.
     */
    static readonly isProjectModel: boolean
    /**
     * Identifies an object as an instance of [ProjectModel](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel) class, or subclass thereof.
     */
    readonly isProjectModel: boolean
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/ProjectModel#event-change)
     * @param {object} event Event object
     * @param {Scheduler.model.SchedulerProjectModel,any} event.source This project
     * @param {Core.data.Store} event.store Affected store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onChange: ((event: { source: SchedulerProjectModel|any, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {ProjectModelConfig} config
     */
    constructor(config?: ProjectModelConfig);
}

/**
 * Type with configuration options for [TimeRangeModel](https://bryntum.com/products/grid/docs/api/Calendar/model/TimeRangeModel) class.
 */
type TimeRangeModelConfig = {
    /**
     * The side of the time range on which the header will be displayed The default value is `'start'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-alignment)
     */
    alignment?: 'start'|'end'
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-children)
     */
    children?: boolean|object[]|Model[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-cls)
     */
    cls?: DomClassList|string|string[]|object
    /**
     * The primary color of the header element.
     */
    color?: 'red'|'pink'|'purple'|'violet'|'indigo'|'blue'|'cyan'|'teal'|'magenta'|'green'|'lime'|'yellow'|'orange'|'deep-orange'|'gray'|'gantt-green'|'light-gray'
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration?: number
    /**
     * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-durationUnit)
     */
    durationUnit?: DurationUnit
    /**
     * The end date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-endDate)
     */
    endDate?: string|Date
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-exceptionDates)
     */
    exceptionDates?: string|string[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded?: boolean
    /**
     * The text for the footer.
     */
    footer?: string
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the [duration](https://bryntum.com/products/calendar/docs/api/Scheduler/model/TimeSpan#field-duration) and [durationUnit](#Scheduler/model/TimeSpan#field-durationUnit) fields.
     */
    fullDuration?: DurationConfig|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls?: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-id)
     */
    id?: string|number
    /**
     * The name of the time span (or Event / Task)
     */
    name?: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex?: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId?: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex?: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-readOnly)
     */
    readOnly?: boolean
    /**
     * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)
     * described format ("RRULE" expression).
     */
    recurrenceRule?: string
    /**
     * This field is added to the class at runtime when the Store is configured with
     * [lazyLoad](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-lazyLoad). It is also required for lazy load functionality in a Tree store. The
     * number specified should reflect the <strong>total</strong> amount of children of a parent node, including nested descendants.
     */
    remoteChildCount?: number
    /**
     * The direction to rotate header/footer text.
     */
    rotation?: 'neg'|'pos'
    /**
     * The start date of a time span (or Event / Task).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-startDate)
     */
    startDate?: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-style)
     */
    style?: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel#config-timeZone)
     */
    timeZone?: string|number|null
}

/**
 * This class represents a named time range with additional, Calendar-specific fields. It is used by the
 * [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) feature.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel)
 */
export class TimeRangeModel extends SchedulerTimeRangeModel {
    /**
     * Identifies an object as an instance of [TimeRangeModel](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel) class, or subclass thereof.
     */
    static readonly isTimeRangeModel: boolean
    /**
     * The side of the time range on which the header will be displayed The default value is `'start'`.
     */
    alignment: 'start'|'end'
    /**
     * The primary color of the header element.
     */
    color: 'red'|'pink'|'purple'|'violet'|'indigo'|'blue'|'cyan'|'teal'|'magenta'|'green'|'lime'|'yellow'|'orange'|'deep-orange'|'gray'|'gantt-green'|'light-gray'
    /**
     * The text for the footer.
     */
    footer: string
    /**
     * Identifies an object as an instance of [TimeRangeModel](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel) class, or subclass thereof.
     */
    readonly isTimeRangeModel: boolean
    /**
     * The direction to rotate header/footer text.
     */
    rotation: 'neg'|'pos'
}

/**
 * This class contains methods to sort events into appropriate order within a day for display
 * in all contexts.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/util/EventSorter)
 */
export class EventSorter {
    /**
     * This sorting method implement following rules:
     * @param {Scheduler.model.EventModel,EventBar} event1
     * @param {Scheduler.model.EventModel,EventBar} event2
     */
    static defaultSorterFn(event1: EventModel|EventBar, event2: EventModel|EventBar): number;
}

/**
 * Type with available listeners functions for [Calendar](https://bryntum.com/products/grid/docs/api/Calendar/view/Calendar) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type CalendarListenersTypes = {
    /**
     * Fired when a change of view has completed. By default, view changes are animated and this
     * event fires when the view is fully visible.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance.
     * @param {Core.widget.Widget} event.prevActiveItem The previously active view.
     * @param {Core.widget.Widget} event.activeItem The new active view.
     * @param {boolean} event.containedFocus `true` if the outgoing view contained focus.
     */
    activeItemChange: (event: { source: Calendar, prevActiveItem: Widget, activeItem: Widget, containedFocus: boolean }) => void
    /**
     * Fires on the owning Scheduler after editor is closed by any action - save, delete or cancel
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {'save','delete','cancel'} event.action The action that was taken to end the edit. One of 'save', 'delete' or 'cancel'
     * @param {Scheduler.feature.SchedulerEventEdit} event.eventEdit The eventEdit feature
     * @param {Scheduler.model.EventModel} event.eventRecord The record that has been edited.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     * @param {Core.widget.Popup} event.editor The editor
     */
    afterEventEdit: (event: { source: Scheduler, action: 'save'|'delete'|'cancel', eventEdit: SchedulerEventEdit, eventRecord: EventModel, resourceRecord: ResourceModel, eventElement: HTMLElement, editor: Popup }) => void
    /**
     * Fires on the owning Scheduler after an event is successfully saved
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler instance
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be saved
     */
    afterEventSave: (event: { source: Scheduler, eventRecord: EventModel }) => void
    /**
     * Fired before a change of view is initiated.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance.
     * @param {Core.widget.Widget} event.prevActiveItem The previously active view.
     * @param {Core.widget.Widget} event.activeItem The new active view.
     */
    beforeActiveItemChange: (event: { source: Calendar, prevActiveItem: Widget, activeItem: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The Scheduler instance
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    beforeAssignmentDelete: (event: { source: Scheduler, assignmentRecords: AssignmentModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    beforeAssignmentSelectionChange: (event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void
    /**
     * This event fires whenever a child view's [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected and also when a [drag-create](#Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view The view in which the event is being created.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {Grid.column.Column[]} event.columns An array of columns to export
     * @param {Core.data.Model[]} event.rows An array of records to export
     * @param {string} event.lineDelimiter The CSV delimiter to separate lines
     * @param {string} event.columnDelimiter The CSV delimiter to separate values on one line
     */
    beforeCSVExport: (event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Scheduler before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The event records about to be copied
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment records about to be copied
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other beforeCopy events
     */
    beforeCopy: (event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void
    /**
     * Fires before a mode is created. The configuration block is passed to the handler for possible modification.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar
     * @param {AgendaViewConfig,DayResourceViewConfig,DayViewConfig,EventListConfig,MonthViewConfig,ResourceViewConfig,WeekViewConfig,YearViewConfig} event.config The configuration block of the mode about to be created. Any property, including the `type` may be changed.
     * @param {string} event.config.type The type of the mode about to be created.
     */
    beforeCreateMode: (event: { source: Calendar, config: { type: string } }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * This event fires on the owning Calendar before a drag creation gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.domEvent The browser event.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    beforeDragCreate: (event: { source: Calendar, drag: DragContext, domEvent: Event, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Calendar before a drag creation gesture is completed. Return `false` to
     * immediately veto the operation or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being created that has not yet been added in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateCreateFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateCreateFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    beforeDragCreateEnd: (event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Calendar before a drag move gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag move context.
     * @param {Event} event.domEvent The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being moved.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    beforeDragMove: (event: { source: Calendar, drag: DragContext, domEvent: Event, eventRecord: EventModel, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Calendar before a drag move gesture is completed. Return `false` to immediately veto the operation
     * or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record that has not yet been updated in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateMoveFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateMoveFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    beforeDragMoveEnd: (event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Calendar before a drag resize gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag resize context.
     * @param {Event} event.domEvent The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being resized.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    beforeDragResize: (event: { source: Calendar, drag: DragContext, domEvent: Event, eventRecord: EventModel, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Calendar before a drag resize gesture is completed. Return `false` to immediately veto the operation
     * or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record that has not yet been updated in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateResizeFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateResizeFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    beforeDragResizeEnd: (event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void
    /**
     * This event is fired on the owning Calendar when dropping an event from the calendar on the
     * external source <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>. Returning `false`
     * prevents the gesture from being completed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeDropExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being dragged.
     * @param {boolean} event.dropOnCalendar `true` if the drop gesture is over the client Calendar. This feature also allows drag *out* of the Calendar and onto the external event source if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) config is set.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    beforeDropExternal: (event: { eventRecord: EventModel, dropOnCalendar: boolean, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => Promise<boolean>|boolean|void
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Can for example be used to display a custom dialog to confirm deletion, in which case
     * records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance
     * @param {Scheduler.model.EventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    beforeEventDelete: (event: { source: Calendar, eventRecords: EventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Scheduler before an event is displayed in an editor.
     * This may be listened for to allow an application to take over event editing duties. Returning `false`
     * stops the default editing UI from being shown.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {Scheduler.feature.SchedulerEventEdit} event.eventEdit The eventEdit feature
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     */
    beforeEventEdit: (event: { source: Scheduler, eventEdit: SchedulerEventEdit, eventRecord: EventModel, resourceRecord: ResourceModel, eventElement: HTMLElement }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Scheduler when the editor for an event is available but before it is populated with
     * data and shown. Allows manipulating fields etc.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {Scheduler.feature.SchedulerEventEdit} event.eventEdit The eventEdit feature
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     * @param {Core.widget.Popup} event.editor The editor
     */
    beforeEventEditShow: (event: { source: Scheduler, eventEdit: SchedulerEventEdit, eventRecord: EventModel, resourceRecord: ResourceModel, eventElement: HTMLElement, editor: Popup }) => void
    /**
     * Fires on the owning Scheduler before an event is saved.
     * Return `false` to immediately prevent saving
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeEventSave)
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler instance
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be saved
     * @param {Scheduler.model.ResourceModel[]} event.resourceRecords The resources to which the event is assigned
     * @param {object} event.values The new values
     * @param {object} event.context Extended save context:
     * @param {boolean} event.context.async Set this to `true` in a listener to indicate that the listener will asynchronously decide to prevent or not the event save.
     * @param {Function} event.context.finalize Function to call to finalize the save. Used when `async` is `true`. Provide `false` to the function to prevent the save.
     */
    beforeEventSave: (event: { source: Scheduler, eventRecord: EventModel, resourceRecords: ResourceModel[], values: object, context: { async?: boolean, finalize: Function } }) => Promise<boolean>|boolean|void
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of events that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    beforeEventSelectionChange: (event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {XLSColumn[]} event.columns An array of columns to export
     * @param {any[][]} event.rows An array of records to export
     */
    beforeExcelExport: (event: { config: ExportConfig, columns: XLSColumn[], rows: any[] }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Scheduler before a paste action is performed, return `false` to prevent the action.
     * Depending on if the EventStore is using [singleAssignment](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore#config-singleAssignment) or the
     * configuration of [copyPasteAction](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/EventCopyPaste#config-copyPasteAction), either the `eventRecords` or the `assignmentRecords` param
     * will be populated with record copies.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The events about to be pasted
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignments about to be pasted
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The original event records
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecords The original assignment record
     * @param {Date} event.date The date when the pasted events will be scheduled
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The target resource record, the clipboard event records will be assigned to this resource.
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other beforePaste events
     */
    beforePaste: (event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], originalEventRecords: EventModel[], originalAssignmentRecords: AssignmentModel[], date: Date, resourceRecord: ResourceModel, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Calendar before print starts. Return `false` to cancel the print.
     * @param {object} event Event object
     * @param {object} event.config Print config
     */
    beforePrint: (event: { config: object }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when a cell overflow indicator is clicked in any view. This will include
     * the cells of a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView) and the `+ n more` overflow
     * indicator of cells in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView), and "all day" events section
     * of a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView).
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on.
     */
    cellOverflowClick: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     */
    contextMenuItem: (event: { source: Widget, menu: Menu, item: MenuItem }) => void
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    contextMenuToggleItem: (event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void
    /**
     * Fires on the owning Scheduler after a copy action is performed. Depending on if the EventStore is using
     * [singleAssignment](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore#config-singleAssignment) or the configuration of
     * [copyPasteAction](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/EventCopyPaste#config-copyPasteAction), either the `eventRecords` or the `assignmentRecords` param will be populated
     * with record copies.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The event record copies
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment record copies
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The event records that were copied
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecord The assignment records that were copied
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other copy events
     */
    copy: (event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], originalEventRecords: EventModel[], originalAssignmentRecord: AssignmentModel[], isCut: boolean, entityName: string }) => void
    /**
     * Fires on the owning Scheduler/Gantt when the line indicating the current time is updated (see [currentTimeLineUpdateInterval](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/TimeRanges#config-currentTimeLineUpdateInterval)).
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {Date} event.date The current date
     */
    currentTimelineUpdate: (event: { source: Scheduler, date: Date }) => void
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dataChange)
     * @param {object} event Event object
     * @param {typeof Scheduler.data.mixin.ProjectConsumer,any} event.source Owning component
     * @param {typeof Scheduler.model.mixin.ProjectModelMixin,any} event.project Project model
     * @param {Core.data.Store} event.store Affected store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    dataChange: (event: { source: typeof ProjectConsumer|any, project: typeof ProjectModelMixin|any, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void
    /**
     * Fires when the calendar changes the date that it orientates its views around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateChange)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar.
     * @param {Date} event.oldDate The previous Calendar date.
     * @param {Date} event.date The new Calendar date.
     */
    dateChange: (event: { source: Calendar, oldDate: Date, date: Date }) => void
    /**
     * Fired when the eventStore is queried for events by date range, and the date range
     * requested is different from the last time the store was queried.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateRangeChange)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date
     * @param {Date} event.old.endDate the old end date
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date
     * @param {Date} event.new.endDate the new end date
     */
    dateRangeChange: (event: { source: Calendar, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void
    /**
     * Fires when the [LoadOnDemand](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand) feature has loaded a range of events.
     * @param {object} event Event object
     * @param {object} event.response The decoded JSON response.
     * @param {object} event.options The options object passed into the CrudManager [CrudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/data/CrudManager) [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     * @param {Date} event.startDate The start date of the range to request.
     * @param {Date} event.endDate The end date of the range to request. <strong>Note that Dates are timestamps</strong>.
     */
    dateRangeLoad: (event: { response: object, options: object, startDate: Date, endDate: Date }) => void
    /**
     * Fired <strong>every</strong> time the eventStore is queried for events by date range.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateRangeRequested)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date
     * @param {Date} event.old.endDate the old end date
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date
     * @param {Date} event.new.endDate the new end date
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made
     */
    dateRangeRequested: (event: { source: Calendar, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void
    /**
     * Fired by the active view after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     * @param {typeof CalendarMixin} event.view The view in which the event is being created.
     */
    dayCellPopulated: (event: { events: EventModel[], The: Date, view: typeof CalendarMixin }) => void
    /**
     * Fires when a day number is clicked in a view which shows day numbers. This will include
     * the cells of a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView), the cell header of cells
     * in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView), and the day header in a
     * [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView).
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on.
     * @param {DayCell} event.cellData An object that contains data about the calendar cell for the date.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    dayNumberClick: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, cellData: DayCell, fromOverflowPopup: boolean }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * This event fires on the owning Calendar when a drag creation gesture is completed.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The new `EventModel` record added in the store.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateCreateFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateCreateFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    dragCreateEnd: (event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void
    /**
     * This event fires on the owning Calendar when a drag move gesture is completed. The `eventRecord` has already been added
     * to the `eventStore` of the owning calendar.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The updated `EventModel` record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateMoveFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateMoveFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    dragMoveEnd: (event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void
    /**
     * This event is fired on the owning Calendar when dragging an event from the calendar over the
     * external source <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dragMoveExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being dragged.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    dragMoveExternal: (event: { eventRecord: EventModel, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => void
    /**
     * This event fires on the owning Calendar when a drag resize gesture is completed.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The updated `EventModel` record.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateResizeFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateResizeFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    dragResizeEnd: (event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void
    /**
     * This event is fired on the owning Calendar after dropping an event from the calendar on the
     * external source has been completed <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dropExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record that was dropped.
     * @param {boolean} event.dropOnCalendar `true` if the drop gesture is over the client Calendar. This feature also allows drag *out* of the Calendar and onto the external event source if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) config is set.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    dropExternal: (event: { eventRecord: EventModel, dropOnCalendar: boolean, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => void
    /**
     * Fired when an empty cell content area is clicked on in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView) or a
     * [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow).
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    emptyCellClick: (event: { domEvent: Event, date: Date }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has
     * created a new event and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The child view on which the event was initiated.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when an event bar is clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventClick: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void
    /**
     * Fires when an event bar is right-clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event right-clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource right-clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventContextMenu: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void
    /**
     * Fires when an event bar is double clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event double clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource double clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventDblClick: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void
    /**
     * Fired before the editor will load the event record data into its input fields. This is useful if you
     * want to modify the fields before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The editor widget
     * @param {Scheduler.model.EventModel} event.record The record
     */
    eventEditBeforeSetRecord: (event: { source: Container, record: EventModel }) => void
    /**
     * Fires when a key is pressed while an event bar is focused.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event in which the key event was detected.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource in which the key event was detected if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventKeyDown: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void
    /**
     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Scheduler.model.EventModel} event.eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} event.resourceRecord Resource record
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     * @param {MouseEvent} event.event Pointer event which triggered the context menu (if any)
     */
    eventMenuBeforeShow: (event: { source: Scheduler, items: Record<string, MenuItemConfig>, eventRecord: EventModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, eventElement: HTMLElement, event?: MouseEvent }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Core.widget.MenuItem} event.item
     * @param {Scheduler.model.EventModel} event.eventRecord
     * @param {Scheduler.model.ResourceModel} event.resourceRecord
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    eventMenuItem: (event: { source: Scheduler, item: MenuItem, eventRecord: EventModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, eventElement: HTMLElement }) => void
    /**
     * This event fires on the owning Scheduler after showing the context menu for an event
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Scheduler.model.EventModel} event.eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} event.resourceRecord Resource record
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    eventMenuShow: (event: { source: Scheduler, menu: Menu, eventRecord: EventModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, eventElement: HTMLElement }) => void
    /**
     * Fires when an event bar is mousedowned in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mousedowned on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mousedowned on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseDown: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void
    /**
     * Fires when cursor enters an event bar in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseEnter: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void
    /**
     * Fires when cursor leaves an event bar in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseLeave: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void
    /**
     * Fires when an event bar is mouseouted in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseouted.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseouted if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseOut: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void
    /**
     * Fires when an event bar is mouseovered in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseovered.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseovered if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseOver: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void
    /**
     * Fires when an event bar is mouseupped in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseupped.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseupped if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseUp: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate: (event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Fires when the [LoadOnDemand](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand) feature detects that a request
     * for data from the server has failed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-loadOnDemandFail)
     * @param {object} event Event object
     * @param {Response} event.rawResponse The HTTP `fetch` response object.
     * @param {object} event.request The CrudManager load data block.
     * @param {object} event.response The decoded JSON response.
     */
    loadOnDemandFail: (event: { rawResponse: Response, request: object, response: object }) => void
    /**
     * Fires when a month name header in a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView) is clicked on.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {number} event.month The month index *(zero based)* clicked on.
     * @param {Date} event.date The date of the first of the month clicked on.
     */
    monthNameClick: (event: { source: typeof CalendarMixin, domEvent: Event, month: number, date: Date }) => void
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement,null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement,null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    navigate: (event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fires on the owning Scheduler after a paste action is performed.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The pasted event records
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The pasted assignment records
     * @param {Scheduler.model.EventModel[]} event.pastedEventRecords (DEPRECATED) Use eventRecords instead
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The original copied event records
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecords The original copied assignment records
     * @param {Date} event.date date Pasted to this date
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The target resource record
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other paste events
     */
    paste: (event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], pastedEventRecords: EventModel[], originalEventRecords: EventModel[], originalAssignmentRecords: AssignmentModel[], date: Date, resourceRecord: ResourceModel, isCut: boolean, entityName: string }) => void
    /**
     * Fires on the owning Scheduler if a paste action is not allowed. Depending on if the EventStore is using
     * [singleAssignment](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore#config-singleAssignment) or the configuration of
     * [copyPasteAction](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/EventCopyPaste#config-copyPasteAction), either the `eventRecords` or the `assignmentRecords` param will be populated
     * with record copies.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The event records about to be pasted
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment records about to be pasted
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The event records that were copied
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecords The assignment records that were copied
     * @param {Date} event.date The paste date
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The target resource record
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other `pasteNotAllowed` events
     * @param {'overlappingEvents','resourceReadOnly'} event.reason A string id to use for displaying an error message to the user.
     */
    pasteNotAllowed: (event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], originalEventRecords: EventModel[], originalAssignmentRecords: AssignmentModel[], date: Date, resourceRecord: ResourceModel, isCut: boolean, entityName: string, reason: 'overlappingEvents'|'resourceReadOnly' }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when one of the views in this Calendar refreshes.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which refreshed.
     */
    refresh: (event: { source: typeof CalendarMixin }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fires when a click made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleClick: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void
    /**
     * Fires when a context menu made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleContextMenu: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void
    /**
     * Fires when a dblclick made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date double clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleDblClick: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the schedule.
     * Allows manipulation of the items to show in the same way as in `processItems`. Returning `false` from a listener
     * prevents the menu from being shown.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Scheduler.model.EventModel} event.eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} event.resourceRecord Resource record
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    scheduleMenuBeforeShow: (event: { source: Scheduler, items: Record<string, MenuItemConfig>, eventRecord: EventModel, resourceRecord: ResourceModel, date: Date, assignmentRecord: AssignmentModel, eventElement: HTMLElement }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Core.widget.MenuItem} event.item
     * @param {Scheduler.model.ResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.element
     */
    scheduleMenuItem: (event: { source: Scheduler, item: MenuItem, resourceRecord: ResourceModel, date: Date, element: HTMLElement }) => void
    /**
     * This event fires on the owning Scheduler or Gantt widget after showing the context menu for the schedule.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Scheduler.model.ResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.targetElement
     */
    scheduleMenuShow: (event: { source: Scheduler, items: Record<string, MenuItemConfig>, menu: Menu, resourceRecord: ResourceModel, date: Date, targetElement: HTMLElement }) => void
    /**
     * Fires when a mousedown made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mousedowned on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleMouseDown: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void
    /**
     * Fires when a mouseout made it's way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseouted. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleMouseOut: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void
    /**
     * Fires when a mouseover made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseovered. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleMouseOver: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void
    /**
     * Fires when a mouseup made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseupped on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleMouseUp: (event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void
    /**
     * Fired any time there is a change to the events selected in the Calendar.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance.
     * @param {'select','deselect','update','clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of the Events added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The new selection.
     */
    selectionChange: (event: { source: Calendar, action: 'select'|'deselect'|'update'|'clear', selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Fired when the sidebar is collapsed either through the UI or programatically.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     */
    sidebarCollapse: (event: { source: Calendar }) => void
    /**
     * Fired when the sidebar is expanded either through the UI or programatically.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     */
    sidebarExpand: (event: { source: Calendar }) => void
    /**
     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Scheduler instance
     * @param {Scheduler.model.TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.domEvent Browser event
     */
    timeRangeHeaderClick: (event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void
    /**
     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Scheduler instance
     * @param {Scheduler.model.TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.domEvent Browser event
     */
    timeRangeHeaderContextMenu: (event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void
    /**
     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Scheduler instance
     * @param {Scheduler.model.TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.domEvent Browser event
     */
    timeRangeHeaderDblClick: (event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
    /**
     * Fires when one of the child views is painted. That is when it becomes visible.
     * Note that due to the slide-in animation, while the view is visible, it will not
     * yet be in its final position.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted
     * @param {boolean} event.firstPaint `true` if this is the first paint
     */
    viewPaint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fires when a week number is clicked. This will include the week number cells of a
     * [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView), the week number in the first cell
     * in each row of a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {number[]} event.week The `[year, week]` clicked on.
     * @param {Date} event.date The date clicked on.
     */
    weekNumberClick: (event: { source: typeof CalendarMixin, domEvent: Event, week: number[], date: Date }) => void
}

/**
 * Type with listeners options for [Calendar](https://bryntum.com/products/grid/docs/api/Calendar/view/Calendar) class.
 */
type CalendarListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fired when a change of view has completed. By default, view changes are animated and this
     * event fires when the view is fully visible.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance.
     * @param {Core.widget.Widget} event.prevActiveItem The previously active view.
     * @param {Core.widget.Widget} event.activeItem The new active view.
     * @param {boolean} event.containedFocus `true` if the outgoing view contained focus.
     */
    activeItemChange?: ((event: { source: Calendar, prevActiveItem: Widget, activeItem: Widget, containedFocus: boolean }) => void)|string
    /**
     * Fires on the owning Scheduler after editor is closed by any action - save, delete or cancel
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {'save','delete','cancel'} event.action The action that was taken to end the edit. One of 'save', 'delete' or 'cancel'
     * @param {Scheduler.feature.SchedulerEventEdit} event.eventEdit The eventEdit feature
     * @param {Scheduler.model.EventModel} event.eventRecord The record that has been edited.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     * @param {Core.widget.Popup} event.editor The editor
     */
    afterEventEdit?: ((event: { source: Scheduler, action: 'save'|'delete'|'cancel', eventEdit: SchedulerEventEdit, eventRecord: EventModel, resourceRecord: ResourceModel, eventElement: HTMLElement, editor: Popup }) => void)|string
    /**
     * Fires on the owning Scheduler after an event is successfully saved
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler instance
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be saved
     */
    afterEventSave?: ((event: { source: Scheduler, eventRecord: EventModel }) => void)|string
    /**
     * Fired before a change of view is initiated.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance.
     * @param {Core.widget.Widget} event.prevActiveItem The previously active view.
     * @param {Core.widget.Widget} event.activeItem The new active view.
     */
    beforeActiveItemChange?: ((event: { source: Calendar, prevActiveItem: Widget, activeItem: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The Scheduler instance
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    beforeAssignmentDelete?: ((event: { source: Scheduler, assignmentRecords: AssignmentModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    beforeAssignmentSelectionChange?: ((event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires whenever a child view's [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected and also when a [drag-create](#Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view The view in which the event is being created.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {Grid.column.Column[]} event.columns An array of columns to export
     * @param {Core.data.Model[]} event.rows An array of records to export
     * @param {string} event.lineDelimiter The CSV delimiter to separate lines
     * @param {string} event.columnDelimiter The CSV delimiter to separate values on one line
     */
    beforeCSVExport?: ((event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Scheduler before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The event records about to be copied
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment records about to be copied
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other beforeCopy events
     */
    beforeCopy?: ((event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before a mode is created. The configuration block is passed to the handler for possible modification.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar
     * @param {AgendaViewConfig,DayResourceViewConfig,DayViewConfig,EventListConfig,MonthViewConfig,ResourceViewConfig,WeekViewConfig,YearViewConfig} event.config The configuration block of the mode about to be created. Any property, including the `type` may be changed.
     * @param {string} event.config.type The type of the mode about to be created.
     */
    beforeCreateMode?: ((event: { source: Calendar, config: { type: string } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * This event fires on the owning Calendar before a drag creation gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.domEvent The browser event.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    beforeDragCreate?: ((event: { source: Calendar, drag: DragContext, domEvent: Event, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag creation gesture is completed. Return `false` to
     * immediately veto the operation or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being created that has not yet been added in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateCreateFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateCreateFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    beforeDragCreateEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag move gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag move context.
     * @param {Event} event.domEvent The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being moved.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    beforeDragMove?: ((event: { source: Calendar, drag: DragContext, domEvent: Event, eventRecord: EventModel, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag move gesture is completed. Return `false` to immediately veto the operation
     * or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record that has not yet been updated in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateMoveFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateMoveFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    beforeDragMoveEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag resize gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag resize context.
     * @param {Event} event.domEvent The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being resized.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    beforeDragResize?: ((event: { source: Calendar, drag: DragContext, domEvent: Event, eventRecord: EventModel, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag resize gesture is completed. Return `false` to immediately veto the operation
     * or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record that has not yet been updated in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateResizeFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateResizeFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    beforeDragResizeEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired on the owning Calendar when dropping an event from the calendar on the
     * external source <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>. Returning `false`
     * prevents the gesture from being completed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeDropExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being dragged.
     * @param {boolean} event.dropOnCalendar `true` if the drop gesture is over the client Calendar. This feature also allows drag *out* of the Calendar and onto the external event source if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) config is set.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    beforeDropExternal?: ((event: { eventRecord: EventModel, dropOnCalendar: boolean, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Can for example be used to display a custom dialog to confirm deletion, in which case
     * records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance
     * @param {Scheduler.model.EventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    beforeEventDelete?: ((event: { source: Calendar, eventRecords: EventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Scheduler before an event is displayed in an editor.
     * This may be listened for to allow an application to take over event editing duties. Returning `false`
     * stops the default editing UI from being shown.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {Scheduler.feature.SchedulerEventEdit} event.eventEdit The eventEdit feature
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     */
    beforeEventEdit?: ((event: { source: Scheduler, eventEdit: SchedulerEventEdit, eventRecord: EventModel, resourceRecord: ResourceModel, eventElement: HTMLElement }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Scheduler when the editor for an event is available but before it is populated with
     * data and shown. Allows manipulating fields etc.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {Scheduler.feature.SchedulerEventEdit} event.eventEdit The eventEdit feature
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     * @param {Core.widget.Popup} event.editor The editor
     */
    beforeEventEditShow?: ((event: { source: Scheduler, eventEdit: SchedulerEventEdit, eventRecord: EventModel, resourceRecord: ResourceModel, eventElement: HTMLElement, editor: Popup }) => void)|string
    /**
     * Fires on the owning Scheduler before an event is saved.
     * Return `false` to immediately prevent saving
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeEventSave)
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler instance
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be saved
     * @param {Scheduler.model.ResourceModel[]} event.resourceRecords The resources to which the event is assigned
     * @param {object} event.values The new values
     * @param {object} event.context Extended save context:
     * @param {boolean} event.context.async Set this to `true` in a listener to indicate that the listener will asynchronously decide to prevent or not the event save.
     * @param {Function} event.context.finalize Function to call to finalize the save. Used when `async` is `true`. Provide `false` to the function to prevent the save.
     */
    beforeEventSave?: ((event: { source: Scheduler, eventRecord: EventModel, resourceRecords: ResourceModel[], values: object, context: { async?: boolean, finalize: Function } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of events that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    beforeEventSelectionChange?: ((event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {XLSColumn[]} event.columns An array of columns to export
     * @param {any[][]} event.rows An array of records to export
     */
    beforeExcelExport?: ((event: { config: ExportConfig, columns: XLSColumn[], rows: any[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Scheduler before a paste action is performed, return `false` to prevent the action.
     * Depending on if the EventStore is using [singleAssignment](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore#config-singleAssignment) or the
     * configuration of [copyPasteAction](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/EventCopyPaste#config-copyPasteAction), either the `eventRecords` or the `assignmentRecords` param
     * will be populated with record copies.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The events about to be pasted
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignments about to be pasted
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The original event records
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecords The original assignment record
     * @param {Date} event.date The date when the pasted events will be scheduled
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The target resource record, the clipboard event records will be assigned to this resource.
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other beforePaste events
     */
    beforePaste?: ((event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], originalEventRecords: EventModel[], originalAssignmentRecords: AssignmentModel[], date: Date, resourceRecord: ResourceModel, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Calendar before print starts. Return `false` to cancel the print.
     * @param {object} event Event object
     * @param {object} event.config Print config
     */
    beforePrint?: ((event: { config: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a cell overflow indicator is clicked in any view. This will include
     * the cells of a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView) and the `+ n more` overflow
     * indicator of cells in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView), and "all day" events section
     * of a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView).
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on.
     */
    cellOverflowClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     */
    contextMenuItem?: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    contextMenuToggleItem?: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Scheduler after a copy action is performed. Depending on if the EventStore is using
     * [singleAssignment](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore#config-singleAssignment) or the configuration of
     * [copyPasteAction](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/EventCopyPaste#config-copyPasteAction), either the `eventRecords` or the `assignmentRecords` param will be populated
     * with record copies.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The event record copies
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment record copies
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The event records that were copied
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecord The assignment records that were copied
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other copy events
     */
    copy?: ((event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], originalEventRecords: EventModel[], originalAssignmentRecord: AssignmentModel[], isCut: boolean, entityName: string }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the line indicating the current time is updated (see [currentTimeLineUpdateInterval](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/TimeRanges#config-currentTimeLineUpdateInterval)).
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {Date} event.date The current date
     */
    currentTimelineUpdate?: ((event: { source: Scheduler, date: Date }) => void)|string
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dataChange)
     * @param {object} event Event object
     * @param {typeof Scheduler.data.mixin.ProjectConsumer,any} event.source Owning component
     * @param {typeof Scheduler.model.mixin.ProjectModelMixin,any} event.project Project model
     * @param {Core.data.Store} event.store Affected store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    dataChange?: ((event: { source: typeof ProjectConsumer|any, project: typeof ProjectModelMixin|any, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fires when the calendar changes the date that it orientates its views around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateChange)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar.
     * @param {Date} event.oldDate The previous Calendar date.
     * @param {Date} event.date The new Calendar date.
     */
    dateChange?: ((event: { source: Calendar, oldDate: Date, date: Date }) => void)|string
    /**
     * Fired when the eventStore is queried for events by date range, and the date range
     * requested is different from the last time the store was queried.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateRangeChange)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date
     * @param {Date} event.old.endDate the old end date
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date
     * @param {Date} event.new.endDate the new end date
     */
    dateRangeChange?: ((event: { source: Calendar, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires when the [LoadOnDemand](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand) feature has loaded a range of events.
     * @param {object} event Event object
     * @param {object} event.response The decoded JSON response.
     * @param {object} event.options The options object passed into the CrudManager [CrudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/data/CrudManager) [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     * @param {Date} event.startDate The start date of the range to request.
     * @param {Date} event.endDate The end date of the range to request. <strong>Note that Dates are timestamps</strong>.
     */
    dateRangeLoad?: ((event: { response: object, options: object, startDate: Date, endDate: Date }) => void)|string
    /**
     * Fired <strong>every</strong> time the eventStore is queried for events by date range.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateRangeRequested)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date
     * @param {Date} event.old.endDate the old end date
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date
     * @param {Date} event.new.endDate the new end date
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made
     */
    dateRangeRequested?: ((event: { source: Calendar, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Fired by the active view after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     * @param {typeof CalendarMixin} event.view The view in which the event is being created.
     */
    dayCellPopulated?: ((event: { events: EventModel[], The: Date, view: typeof CalendarMixin }) => void)|string
    /**
     * Fires when a day number is clicked in a view which shows day numbers. This will include
     * the cells of a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView), the cell header of cells
     * in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView), and the day header in a
     * [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView).
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on.
     * @param {DayCell} event.cellData An object that contains data about the calendar cell for the date.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    dayNumberClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, cellData: DayCell, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * This event fires on the owning Calendar when a drag creation gesture is completed.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The new `EventModel` record added in the store.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateCreateFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateCreateFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    dragCreateEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void)|string
    /**
     * This event fires on the owning Calendar when a drag move gesture is completed. The `eventRecord` has already been added
     * to the `eventStore` of the owning calendar.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The updated `EventModel` record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateMoveFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateMoveFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    dragMoveEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void)|string
    /**
     * This event is fired on the owning Calendar when dragging an event from the calendar over the
     * external source <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dragMoveExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being dragged.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    dragMoveExternal?: ((event: { eventRecord: EventModel, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => void)|string
    /**
     * This event fires on the owning Calendar when a drag resize gesture is completed.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The updated `EventModel` record.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateResizeFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateResizeFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    dragResizeEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void)|string
    /**
     * This event is fired on the owning Calendar after dropping an event from the calendar on the
     * external source has been completed <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dropExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record that was dropped.
     * @param {boolean} event.dropOnCalendar `true` if the drop gesture is over the client Calendar. This feature also allows drag *out* of the Calendar and onto the external event source if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) config is set.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    dropExternal?: ((event: { eventRecord: EventModel, dropOnCalendar: boolean, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView) or a
     * [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow).
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    emptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has
     * created a new event and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The child view on which the event was initiated.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when an event bar is clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is right-clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event right-clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource right-clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventContextMenu?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is double clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event double clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource double clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventDblClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fired before the editor will load the event record data into its input fields. This is useful if you
     * want to modify the fields before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The editor widget
     * @param {Scheduler.model.EventModel} event.record The record
     */
    eventEditBeforeSetRecord?: ((event: { source: Container, record: EventModel }) => void)|string
    /**
     * Fires when a key is pressed while an event bar is focused.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event in which the key event was detected.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource in which the key event was detected if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventKeyDown?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Scheduler.model.EventModel} event.eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} event.resourceRecord Resource record
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     * @param {MouseEvent} event.event Pointer event which triggered the context menu (if any)
     */
    eventMenuBeforeShow?: ((event: { source: Scheduler, items: Record<string, MenuItemConfig>, eventRecord: EventModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, eventElement: HTMLElement, event?: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Core.widget.MenuItem} event.item
     * @param {Scheduler.model.EventModel} event.eventRecord
     * @param {Scheduler.model.ResourceModel} event.resourceRecord
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    eventMenuItem?: ((event: { source: Scheduler, item: MenuItem, eventRecord: EventModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler after showing the context menu for an event
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Scheduler.model.EventModel} event.eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} event.resourceRecord Resource record
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    eventMenuShow?: ((event: { source: Scheduler, menu: Menu, eventRecord: EventModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * Fires when an event bar is mousedowned in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mousedowned on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mousedowned on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseDown?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when cursor enters an event bar in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseEnter?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when cursor leaves an event bar in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseLeave?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is mouseouted in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseouted.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseouted if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseOut?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is mouseovered in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseovered.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseovered if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseOver?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is mouseupped in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseupped.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseupped if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    eventMouseUp?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when the [LoadOnDemand](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand) feature detects that a request
     * for data from the server has failed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-loadOnDemandFail)
     * @param {object} event Event object
     * @param {Response} event.rawResponse The HTTP `fetch` response object.
     * @param {object} event.request The CrudManager load data block.
     * @param {object} event.response The decoded JSON response.
     */
    loadOnDemandFail?: ((event: { rawResponse: Response, request: object, response: object }) => void)|string
    /**
     * Fires when a month name header in a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView) is clicked on.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {number} event.month The month index *(zero based)* clicked on.
     * @param {Date} event.date The date of the first of the month clicked on.
     */
    monthNameClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, month: number, date: Date }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement,null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement,null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    navigate?: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Scheduler after a paste action is performed.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The pasted event records
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The pasted assignment records
     * @param {Scheduler.model.EventModel[]} event.pastedEventRecords (DEPRECATED) Use eventRecords instead
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The original copied event records
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecords The original copied assignment records
     * @param {Date} event.date date Pasted to this date
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The target resource record
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other paste events
     */
    paste?: ((event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], pastedEventRecords: EventModel[], originalEventRecords: EventModel[], originalAssignmentRecords: AssignmentModel[], date: Date, resourceRecord: ResourceModel, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fires on the owning Scheduler if a paste action is not allowed. Depending on if the EventStore is using
     * [singleAssignment](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore#config-singleAssignment) or the configuration of
     * [copyPasteAction](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/EventCopyPaste#config-copyPasteAction), either the `eventRecords` or the `assignmentRecords` param will be populated
     * with record copies.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The event records about to be pasted
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment records about to be pasted
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The event records that were copied
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecords The assignment records that were copied
     * @param {Date} event.date The paste date
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The target resource record
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other `pasteNotAllowed` events
     * @param {'overlappingEvents','resourceReadOnly'} event.reason A string id to use for displaying an error message to the user.
     */
    pasteNotAllowed?: ((event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], originalEventRecords: EventModel[], originalAssignmentRecords: AssignmentModel[], date: Date, resourceRecord: ResourceModel, isCut: boolean, entityName: string, reason: 'overlappingEvents'|'resourceReadOnly' }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when one of the views in this Calendar refreshes.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which refreshed.
     */
    refresh?: ((event: { source: typeof CalendarMixin }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fires when a click made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a context menu made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleContextMenu?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a dblclick made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date double clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleDblClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the schedule.
     * Allows manipulation of the items to show in the same way as in `processItems`. Returning `false` from a listener
     * prevents the menu from being shown.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Scheduler.model.EventModel} event.eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} event.resourceRecord Resource record
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    scheduleMenuBeforeShow?: ((event: { source: Scheduler, items: Record<string, MenuItemConfig>, eventRecord: EventModel, resourceRecord: ResourceModel, date: Date, assignmentRecord: AssignmentModel, eventElement: HTMLElement }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Core.widget.MenuItem} event.item
     * @param {Scheduler.model.ResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.element
     */
    scheduleMenuItem?: ((event: { source: Scheduler, item: MenuItem, resourceRecord: ResourceModel, date: Date, element: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after showing the context menu for the schedule.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Scheduler.model.ResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.targetElement
     */
    scheduleMenuShow?: ((event: { source: Scheduler, items: Record<string, MenuItemConfig>, menu: Menu, resourceRecord: ResourceModel, date: Date, targetElement: HTMLElement }) => void)|string
    /**
     * Fires when a mousedown made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mousedowned on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleMouseDown?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a mouseout made it's way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseouted. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleMouseOut?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a mouseover made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseovered. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleMouseOver?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a mouseup made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseupped on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    scheduleMouseUp?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fired any time there is a change to the events selected in the Calendar.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance.
     * @param {'select','deselect','update','clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of the Events added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The new selection.
     */
    selectionChange?: ((event: { source: Calendar, action: 'select'|'deselect'|'update'|'clear', selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Fired when the sidebar is collapsed either through the UI or programatically.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     */
    sidebarCollapse?: ((event: { source: Calendar }) => void)|string
    /**
     * Fired when the sidebar is expanded either through the UI or programatically.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     */
    sidebarExpand?: ((event: { source: Calendar }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Scheduler instance
     * @param {Scheduler.model.TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.domEvent Browser event
     */
    timeRangeHeaderClick?: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Scheduler instance
     * @param {Scheduler.model.TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.domEvent Browser event
     */
    timeRangeHeaderContextMenu?: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Scheduler instance
     * @param {Scheduler.model.TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.domEvent Browser event
     */
    timeRangeHeaderDblClick?: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when one of the child views is painted. That is when it becomes visible.
     * Note that due to the slide-in animation, while the view is visible, it will not
     * yet be in its final position.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted
     * @param {boolean} event.firstPaint `true` if this is the first paint
     */
    viewPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires when a week number is clicked. This will include the week number cells of a
     * [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView), the week number in the first cell
     * in each row of a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {number[]} event.week The `[year, week]` clicked on.
     * @param {Date} event.date The date clicked on.
     */
    weekNumberClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, week: number[], date: Date }) => void)|string
}

type CalendarFeaturesType = {
    drag: CalendarDrag
    eventBuffer: EventBuffer
    eventCopyPaste: EventCopyPaste
    eventEdit: EventEdit
    eventMenu: EventMenu
    eventTooltip: EventTooltip
    excelExporter: ExcelExporter
    externalEventSource: ExternalEventSource
    loadOnDemand: LoadOnDemand
    print: Print
    scheduleMenu: ScheduleMenu
    scheduleTooltip: ScheduleTooltip
    timeRanges: TimeRanges
    weekExpander: WeekExpander
}

type CalendarFeaturesConfigType = {
    drag?: string|boolean|CalendarDragConfig
    eventBuffer?: string|boolean|EventBufferConfig
    eventCopyPaste?: string|boolean|EventCopyPasteConfig
    eventEdit?: string|boolean|EventEditConfig
    eventMenu?: string|boolean|EventMenuConfig
    eventTooltip?: string|boolean|EventTooltipConfig
    excelExporter?: string|boolean|ExcelExporterConfig
    externalEventSource?: string|boolean|ExternalEventSourceConfig
    loadOnDemand?: string|boolean|LoadOnDemandConfig
    print?: string|boolean|PrintConfig
    scheduleMenu?: string|boolean|ScheduleMenuConfig
    scheduleTooltip?: string|boolean|ScheduleTooltipConfig
    timeRanges?: string|boolean|TimeRangesConfig
    weekExpander?: string|boolean|WeekExpanderConfig
}

/**
 * Type with configuration options for [Calendar](https://bryntum.com/products/grid/docs/api/Calendar/view/Calendar) class.
 */
type CalendarConfig = {
    type?: 'calendar'
    /**
     * An optional CSS class name to add to calendar date cells which encapsulate the calendar's
     * active [date](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-date).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-activeDateCls)
     */
    activeDateCls?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * The [AssignmentStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/AssignmentStore) or a reconfiguring object for a store which will hold assignments linking resources to events.
     */
    assignmentStore?: AssignmentStore|AssignmentStoreConfig
    /**
     * Inline assignments, will be loaded into the [assignmentStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-assignmentStore).
     */
    assignments?: AssignmentModel[]|AssignmentModelConfig[]
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        duration?: string
        startHour?: number|string
    }|string|boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Event which is used to show context menus via the context menu features
     * [EventMenu](https://bryntum.com/products/calendar/docs/api/Calendar/feature/EventMenu) and [ScheduleMenu](#Calendar/feature/ScheduleMenu).
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent?: 'contextmenu'|'click'|'dblclick'
    /**
     * Supply a [CrudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/data/CrudManager) instance or a config object if you want to use
     * CrudManager for handling data.
     */
    crudManager?: CrudManagerConfig|SchedulerCrudManager
    /**
     * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to
     * [crudManager](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#config-crudManager) config.
     */
    crudManagerClass?: SchedulerCrudManager
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The date which the Calendar, its [sidebar](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-sidebar)'s date picker, and
     * its active view should encapsulate upon creation.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-date)
     */
    date?: Date|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * view descriptions.
     */
    dateFormat?: string
    /**
     * An optional config object to configure the [CalendarDatePicker](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker) which is
     * shown in the [sidebar](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-sidebar) next to the calendar views.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-datePicker)
     * @param {boolean,'count','dots'} datePicker.showEvents Displays the presence of events in each cell. values may be:  * `false` - Do not show events in cells. * `true` - Show a themeable bullet to indicate the presence of events for a date. * `'count'` - Show a themeable badge containing the event count for a date. * '`dots'` - Show small event-coloured bullets (to a maximum of three) below the date.
     * @param {boolean} datePicker.collapsible `true` to enable collapse into a header.
     * @param {string} datePicker.title The text to place in a header above the picker.
     * @param {boolean} datePicker.editMonth `true` to enable setting the date using the controls in the DatePicker header.
     * @param {boolean,'range'} multiSelect The DatePicker can select [multiple dates](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) in two modes:  * `true` to mean many discontiguous dates may be selected. * `'range'` to mean that a start date and end date may be selected.  If set up to multi select, views which are not fixed to a date duration will obey the date selection by using a [dateFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-dateFilter) to skip days which are not selected. These include:  * AgendaView      (mode type `'agenda'`) * DayViews        (view type `'dayview'`) which you add to the modes - The default `day` and `week` modes have a fixed duration. * ResourceView    (view type `'resourceview'`) * DayResourceView (view type `'dayresourceview'`)  The `MonthView`, and the `WeekView` and the built-in single day `DayView` <strong>mode</strong> all have fixed duration and will not participate in this. If you select a discontiguous range, then the views which are amenable to being controlled in this way will switch their range to encompass what you have selected. For example, if you select the first to the last days of a month, the view's [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-range) will be set to `'1 month'`. This choice will be maintained, and by navigating using the next and previous tbar buttons, the views will move by exactly one month. If your set of selected dates is enclosed within a two week block, then the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-range) of the views will be set to `{ unit : 'week', magnitude : 2 }`. If you select the 1st, 3th and 5th of the month, and those days are all on one week row, the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-range) of the views will be set to `{ unit : 'week', magnitude : 1 }`. For selection ranges other than exactly one month, navigation in time will be in increments of one week for intuitive navigation up and down the date picker. When navigating in time, the selected block of dates moves and *follows the time navigation* so that there are always dates in view, even if they are empty.
     */
    datePicker?: CalendarDatePickerConfig|boolean|null
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * The calendar ([Resource](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel)), (or its `id`) to use as the
     * default calendar for new events created using [dblclick](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-autoCreate)
     * or [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag), or [dragging in](#Calendar/feature/ExternalEventSource).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-defaultCalendar)
     */
    defaultCalendar?: string|ResourceModel
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * Configure as `false` to preserve selection when clicking the empty schedule area.
     */
    deselectAllOnScheduleClick?: boolean
    /**
     * Configure as `true` to deselect a selected event upon click.
     */
    deselectOnClick?: boolean
    /**
     * Configure as `true` to destroy the Project and stores when `this` is destroyed.
     */
    destroyStores?: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * Allow using [Delete] and [Backspace] to remove events/assignments
     */
    enableDeleteKey?: boolean
    /**
     * Enables events being recurring and also adds extra recurrence UI fields in the built-in event editor.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-enableRecurringEvents)
     */
    enableRecurringEvents?: boolean|{
        defaultAction?: 'single'|'future'
    }
    /**
     * Set to `true` to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is pressed).
     * Only applicable when using a [StateTrackingManager](https://bryntum.com/products/calendar/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys?: boolean
    /**
     * Configure as `true`, or set property to `true` to disable event selection.
     */
    eventSelectionDisabled?: boolean
    /**
     * The [EventStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore) or a reconfiguring object for a store which will hold
     * the events to be rendered into the Calendar.
     */
    eventStore?: EventStore|EventStoreConfig
    /**
     * Inline events, will be loaded into the [eventStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-eventStore).
     */
    events?: EventModel[]|EventModelConfig[]
    /**
     * Specifies the features to create and associate with the Calendar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-features)
     */
    features?: CalendarFeaturesConfigType
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-nonWorkingDays) for each calendar view
     */
    hideNonWorkingDays?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * Configure this as `true` to make picking a date in the [sidebar](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-sidebar)'s
     * date picker highlight the date cell in the active view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-highlightDate)
     * @param {Date} date Cell date
     * @returns {boolean} Returns `true` to make picking a date in a date picker
     */
    highlightDate?: boolean|((date: Date) => boolean)
    /**
     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.
     */
    highlightPredecessors?: boolean
    /**
     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.
     */
    highlightSuccessors?: boolean
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Set to `true` to show the "Weekends" toggle button of the mode selector. Alternatively, this config
     * can be a [Button](https://bryntum.com/products/calendar/docs/api/Core/widget/Button) config object to configure the button.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-includeWeekendsButton)
     */
    includeWeekendsButton?: boolean|ButtonConfig
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * A template method (empty by default) allowing you to control if an event can be selected or not.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-isEventSelectable)
     * @param {Scheduler.model.EventModel} event The event record
     * @returns {boolean} true if event can be selected, otherwise false
     */
    isEventSelectable?: (event: EventModel) => boolean
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * The default key shortcuts for the Calendar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-listeners)
     */
    listeners?: CalendarListeners
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask?: string|MaskConfig|null
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/calendar/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-loadMaskDefaults)
     */
    loadMaskDefaults?: MaskConfig
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-loadMaskError)
     */
    loadMaskError?: MaskConfig|Mask|boolean
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * This flag controls whether Scheduler should preserve its selection of events when loading a new dataset
     * (if selected event ids are included in the newly loaded dataset).
     */
    maintainSelectionOnDatasetChange?: boolean
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum date to which the `endDate` of any child view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * The minimum date to which the `startDate` of any child view may be navigated.
     */
    minDate?: Date|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * Which of the built-in [modes](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes) should be the initially active view.
     */
    mode?: 'agenda'|'year'|'month'|'week'|'day'|'list'|'resource'|'dayresource'|string
    /**
     * An object to use to configure common properties for all [modes](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes) prior to their construction.
     */
    modeDefaults?: object
    /**
     * Configures the view modes which are to be available in this Calendar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes)
     */
    modes?: {
        [mode: string]: CalendarContainerItemConfig|boolean|null|undefined
        agenda?: AgendaViewConfig|boolean|null
        year?: YearViewConfig|boolean|null
        month?: MonthViewConfig|boolean|null
        week?: WeekViewConfig|boolean|null
        day?: DayViewConfig|boolean|null
        list?: EventListConfig|boolean|null
        resource?: ResourceViewConfig|boolean|null
        dayresourceview?: DayResourceViewConfig|boolean|null
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * Configure as `true` to allow `CTRL+click` to select multiple events in the scheduler.
     */
    multiEventSelect?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * Indicates where the Next/Previous/Today buttons should be placed.
     */
    navigatorPlacement?: 'toolbar'|'sidebar'
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-nonWorkingDays)
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * By default, the [sidebar](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-sidebar) expands and collapses taking width from the
     * calendar UI. Configure `overlaySidebar` as `true` to have it start collapsed, and then
     * <strong>overlay</strong> the calendar UI when the expand/collapse button is toggled.
     */
    overlaySidebar?: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-owner)
     */
    owner?: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * A [ProjectModel](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel) instance or a config object. The project holds all Scheduler data.
     * Can be omitted in favor of individual store configs or [crudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-project)
     */
    project?: ProjectModel|ProjectModelConfig
    /**
     * Configure as `true` to make the calendar read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-readOnly)
     */
    readOnly?: boolean
    /**
     * The confirmation dialog shown when a recurring event is edited.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-recurrenceConfirmationPopup)
     */
    recurrenceConfirmationPopup?: RecurrenceConfirmationPopupConfig|RecurrenceConfirmationPopup
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-ref)
     */
    ref?: string
    /**
     * Path to load resource images from. Used by the resource headers in ResourceView and by
     * [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) in event-displaying
     * modes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * The [ResourceStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceStore) or a reconfiguring object for a store which will hold the resources to be rendered into the Calendar.
     */
    resourceStore?: ResourceStore|ResourceStoreConfig
    /**
     * The [ResourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceTimeRangeStore) or a reconfiguring object for a store which will hold resource time ranges.
     * These may be used by the [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) feature.
     */
    resourceTimeRangeStore?: ResourceTimeRangeStore|ResourceTimeRangeStoreConfig
    /**
     * Inline resource time ranges, will be loaded into [resourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-resourceTimeRangeStore).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-resourceTimeRanges)
     */
    resourceTimeRanges?: ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]
    /**
     * Inline resources, will be loaded into the [resourceStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-resourceStore).
     */
    resources?: ResourceModel[]|ResourceModelConfig[]
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * Set to `false` to not select the resource of the event when clicking an event bar.
     */
    selectResourceOnEventNavigate?: boolean
    /**
     * Set to `false` to not select the row/resource when clicking the empty area in a time axis cell.
     */
    selectResourceOnScheduleClick?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * Set to `false` to hide recurring fields in event editor, even if the
     * [Recurring Events](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents) is `true`
     * and a recurring event is being edited.
     */
    showRecurringUI?: boolean
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * An optional config object to configure the [Sidebar](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar) which is
     * shown next to the calendar views specified by the [modes](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-sidebar)
     * @param {'left','right'} side Which [side](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-side) to dock to.
     * @param {boolean} collapsed May be initially [collapsed](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-collapsed).
     * @param {Record<string, CalendarContainerItemConfig>} items Reconfigure or add to the sidebar UI.
     * @param {CalendarContainerItemConfig} items.custom Settings specific to custom item.
     * @param {DatePickerConfig} items.datePicker The [DatePicker](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker) may be reconfigured using an object, or configured away using `null`. Its default [weight](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-weight) is 100.
     * @param {TextFieldConfig} items.eventFilter The eventFilter is a [TextField](https://bryntum.com/products/calendar/docs/api/Core/widget/TextField) which may be used to filter the events by matched name. It may be reconfigured using an object, or configured away using `null`. Its default [weight](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-weight) is 150.
     * @param {ResourceFilterConfig} items.resourceFilter The [ResourceFilter](https://bryntum.com/products/calendar/docs/api/Scheduler/widget/ResourceFilter) may be reconfigured using an object, or configured away using `null`. Its default [weight](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-weight) is 200.
     */
    sidebar?: {side?: 'left'|'right', collapsed?: boolean, items: { [mode: string]: CalendarContainerItemConfig|null|undefined, datePicker?: DatePickerConfig, eventFilter?: TextFieldConfig, resourceFilter?: ResourceFilterConfig }}|boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-syncMask)
     */
    syncMask?: string|MaskConfig|null
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A config object containing definitions of the toolbar of the Calendar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * The [TimeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore) or a reconfiguring object for a store which will hold time ranges.
     * These may be used by the [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) feature.
     */
    timeRangeStore?: TimeRangeStore|TimeRangeStoreConfig
    /**
     * Inline time ranges, will be loaded into the [timeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-timeRangeStore).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-timeRanges)
     */
    timeRanges?: TimeRangeModel[]|TimeRangeModelConfig[]
    /**
     * Set to a time zone or a UTC offset. This will set the project's
     * [timeZone](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#config-timeZone) config accordingly. As this config is only a referer,
     * please see project's config [documentation](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#config-timeZone) for more
     * information.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-timeZone)
     */
    timeZone?: string|number
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Configure as `true` to trigger `selectionChange` when removing a selected event/assignment.
     */
    triggerSelectionChangeOnRemove?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * By default, the day of week and week of month of the event's start date are used to create
     * helpful contextual recurrence types when editing a non-recurring event record and choosing
     * an initial recurrence type.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-useContextualRecurrenceRules)
     */
    useContextualRecurrenceRules?: boolean
    /**
     * Configuration options to change how the subordinate [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container) which contains
     * the calendar's child views is created.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-viewContainer)
     */
    viewContainer?: ContainerConfig
    /**
     * The week start day to be used throughout this Calendar, 0 meaning Sunday, 6 meaning Saturday.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-weekStartDay)
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-y)
     */
    y?: number
    /**
     * Fired when a change of view has completed. By default, view changes are animated and this
     * event fires when the view is fully visible.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance.
     * @param {Core.widget.Widget} event.prevActiveItem The previously active view.
     * @param {Core.widget.Widget} event.activeItem The new active view.
     * @param {boolean} event.containedFocus `true` if the outgoing view contained focus.
     */
    onActiveItemChange?: ((event: { source: Calendar, prevActiveItem: Widget, activeItem: Widget, containedFocus: boolean }) => void)|string
    /**
     * Fires on the owning Scheduler after editor is closed by any action - save, delete or cancel
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {'save','delete','cancel'} event.action The action that was taken to end the edit. One of 'save', 'delete' or 'cancel'
     * @param {Scheduler.feature.SchedulerEventEdit} event.eventEdit The eventEdit feature
     * @param {Scheduler.model.EventModel} event.eventRecord The record that has been edited.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     * @param {Core.widget.Popup} event.editor The editor
     */
    onAfterEventEdit?: ((event: { source: Scheduler, action: 'save'|'delete'|'cancel', eventEdit: SchedulerEventEdit, eventRecord: EventModel, resourceRecord: ResourceModel, eventElement: HTMLElement, editor: Popup }) => void)|string
    /**
     * Fires on the owning Scheduler after an event is successfully saved
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler instance
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be saved
     */
    onAfterEventSave?: ((event: { source: Scheduler, eventRecord: EventModel }) => void)|string
    /**
     * Fired before a change of view is initiated.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance.
     * @param {Core.widget.Widget} event.prevActiveItem The previously active view.
     * @param {Core.widget.Widget} event.activeItem The new active view.
     */
    onBeforeActiveItemChange?: ((event: { source: Calendar, prevActiveItem: Widget, activeItem: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The Scheduler instance
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete?: ((event: { source: Scheduler, assignmentRecords: AssignmentModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    onBeforeAssignmentSelectionChange?: ((event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires whenever a child view's [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected and also when a [drag-create](#Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view The view in which the event is being created.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {Grid.column.Column[]} event.columns An array of columns to export
     * @param {Core.data.Model[]} event.rows An array of records to export
     * @param {string} event.lineDelimiter The CSV delimiter to separate lines
     * @param {string} event.columnDelimiter The CSV delimiter to separate values on one line
     */
    onBeforeCSVExport?: ((event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Scheduler before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The event records about to be copied
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment records about to be copied
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy?: ((event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before a mode is created. The configuration block is passed to the handler for possible modification.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar
     * @param {AgendaViewConfig,DayResourceViewConfig,DayViewConfig,EventListConfig,MonthViewConfig,ResourceViewConfig,WeekViewConfig,YearViewConfig} event.config The configuration block of the mode about to be created. Any property, including the `type` may be changed.
     * @param {string} event.config.type The type of the mode about to be created.
     */
    onBeforeCreateMode?: ((event: { source: Calendar, config: { type: string } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * This event fires on the owning Calendar before a drag creation gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.domEvent The browser event.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    onBeforeDragCreate?: ((event: { source: Calendar, drag: DragContext, domEvent: Event, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag creation gesture is completed. Return `false` to
     * immediately veto the operation or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being created that has not yet been added in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateCreateFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateCreateFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onBeforeDragCreateEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag move gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag move context.
     * @param {Event} event.domEvent The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being moved.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    onBeforeDragMove?: ((event: { source: Calendar, drag: DragContext, domEvent: Event, eventRecord: EventModel, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag move gesture is completed. Return `false` to immediately veto the operation
     * or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record that has not yet been updated in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateMoveFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateMoveFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onBeforeDragMoveEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag resize gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag resize context.
     * @param {Event} event.domEvent The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being resized.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    onBeforeDragResize?: ((event: { source: Calendar, drag: DragContext, domEvent: Event, eventRecord: EventModel, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag resize gesture is completed. Return `false` to immediately veto the operation
     * or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record that has not yet been updated in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateResizeFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateResizeFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onBeforeDragResizeEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired on the owning Calendar when dropping an event from the calendar on the
     * external source <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>. Returning `false`
     * prevents the gesture from being completed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeDropExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being dragged.
     * @param {boolean} event.dropOnCalendar `true` if the drop gesture is over the client Calendar. This feature also allows drag *out* of the Calendar and onto the external event source if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) config is set.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    onBeforeDropExternal?: ((event: { eventRecord: EventModel, dropOnCalendar: boolean, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Can for example be used to display a custom dialog to confirm deletion, in which case
     * records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance
     * @param {Scheduler.model.EventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete?: ((event: { source: Calendar, eventRecords: EventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Scheduler before an event is displayed in an editor.
     * This may be listened for to allow an application to take over event editing duties. Returning `false`
     * stops the default editing UI from being shown.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {Scheduler.feature.SchedulerEventEdit} event.eventEdit The eventEdit feature
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     */
    onBeforeEventEdit?: ((event: { source: Scheduler, eventEdit: SchedulerEventEdit, eventRecord: EventModel, resourceRecord: ResourceModel, eventElement: HTMLElement }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Scheduler when the editor for an event is available but before it is populated with
     * data and shown. Allows manipulating fields etc.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {Scheduler.feature.SchedulerEventEdit} event.eventEdit The eventEdit feature
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be shown in the event editor.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The Resource record for the event. If the event is being created, it will not contain a resource, so this parameter specifies the resource the event is being created for.
     * @param {HTMLElement} event.eventElement The element which represents the event in the scheduler display.
     * @param {Core.widget.Popup} event.editor The editor
     */
    onBeforeEventEditShow?: ((event: { source: Scheduler, eventEdit: SchedulerEventEdit, eventRecord: EventModel, resourceRecord: ResourceModel, eventElement: HTMLElement, editor: Popup }) => void)|string
    /**
     * Fires on the owning Scheduler before an event is saved.
     * Return `false` to immediately prevent saving
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeEventSave)
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler instance
     * @param {Scheduler.model.EventModel} event.eventRecord The record about to be saved
     * @param {Scheduler.model.ResourceModel[]} event.resourceRecords The resources to which the event is assigned
     * @param {object} event.values The new values
     * @param {object} event.context Extended save context:
     * @param {boolean} event.context.async Set this to `true` in a listener to indicate that the listener will asynchronously decide to prevent or not the event save.
     * @param {Function} event.context.finalize Function to call to finalize the save. Used when `async` is `true`. Provide `false` to the function to prevent the save.
     */
    onBeforeEventSave?: ((event: { source: Scheduler, eventRecord: EventModel, resourceRecords: ResourceModel[], values: object, context: { async?: boolean, finalize: Function } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of events that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    onBeforeEventSelectionChange?: ((event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {XLSColumn[]} event.columns An array of columns to export
     * @param {any[][]} event.rows An array of records to export
     */
    onBeforeExcelExport?: ((event: { config: ExportConfig, columns: XLSColumn[], rows: any[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Scheduler before a paste action is performed, return `false` to prevent the action.
     * Depending on if the EventStore is using [singleAssignment](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore#config-singleAssignment) or the
     * configuration of [copyPasteAction](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/EventCopyPaste#config-copyPasteAction), either the `eventRecords` or the `assignmentRecords` param
     * will be populated with record copies.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The events about to be pasted
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignments about to be pasted
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The original event records
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecords The original assignment record
     * @param {Date} event.date The date when the pasted events will be scheduled
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The target resource record, the clipboard event records will be assigned to this resource.
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other beforePaste events
     */
    onBeforePaste?: ((event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], originalEventRecords: EventModel[], originalAssignmentRecords: AssignmentModel[], date: Date, resourceRecord: ResourceModel, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Calendar before print starts. Return `false` to cancel the print.
     * @param {object} event Event object
     * @param {object} event.config Print config
     */
    onBeforePrint?: ((event: { config: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a cell overflow indicator is clicked in any view. This will include
     * the cells of a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView) and the `+ n more` overflow
     * indicator of cells in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView), and "all day" events section
     * of a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView).
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on.
     */
    onCellOverflowClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     */
    onContextMenuItem?: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem?: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Scheduler after a copy action is performed. Depending on if the EventStore is using
     * [singleAssignment](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore#config-singleAssignment) or the configuration of
     * [copyPasteAction](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/EventCopyPaste#config-copyPasteAction), either the `eventRecords` or the `assignmentRecords` param will be populated
     * with record copies.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The event record copies
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment record copies
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The event records that were copied
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecord The assignment records that were copied
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other copy events
     */
    onCopy?: ((event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], originalEventRecords: EventModel[], originalAssignmentRecord: AssignmentModel[], isCut: boolean, entityName: string }) => void)|string
    /**
     * Fires on the owning Scheduler/Gantt when the line indicating the current time is updated (see [currentTimeLineUpdateInterval](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/TimeRanges#config-currentTimeLineUpdateInterval)).
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The scheduler
     * @param {Date} event.date The current date
     */
    onCurrentTimelineUpdate?: ((event: { source: Scheduler, date: Date }) => void)|string
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dataChange)
     * @param {object} event Event object
     * @param {typeof Scheduler.data.mixin.ProjectConsumer,any} event.source Owning component
     * @param {typeof Scheduler.model.mixin.ProjectModelMixin,any} event.project Project model
     * @param {Core.data.Store} event.store Affected store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange?: ((event: { source: typeof ProjectConsumer|any, project: typeof ProjectModelMixin|any, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fires when the calendar changes the date that it orientates its views around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateChange)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar.
     * @param {Date} event.oldDate The previous Calendar date.
     * @param {Date} event.date The new Calendar date.
     */
    onDateChange?: ((event: { source: Calendar, oldDate: Date, date: Date }) => void)|string
    /**
     * Fired when the eventStore is queried for events by date range, and the date range
     * requested is different from the last time the store was queried.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateRangeChange)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date
     * @param {Date} event.old.endDate the old end date
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date
     * @param {Date} event.new.endDate the new end date
     */
    onDateRangeChange?: ((event: { source: Calendar, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires when the [LoadOnDemand](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand) feature has loaded a range of events.
     * @param {object} event Event object
     * @param {object} event.response The decoded JSON response.
     * @param {object} event.options The options object passed into the CrudManager [CrudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/data/CrudManager) [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     * @param {Date} event.startDate The start date of the range to request.
     * @param {Date} event.endDate The end date of the range to request. <strong>Note that Dates are timestamps</strong>.
     */
    onDateRangeLoad?: ((event: { response: object, options: object, startDate: Date, endDate: Date }) => void)|string
    /**
     * Fired <strong>every</strong> time the eventStore is queried for events by date range.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateRangeRequested)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date
     * @param {Date} event.old.endDate the old end date
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date
     * @param {Date} event.new.endDate the new end date
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made
     */
    onDateRangeRequested?: ((event: { source: Calendar, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Fired by the active view after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     * @param {typeof CalendarMixin} event.view The view in which the event is being created.
     */
    onDayCellPopulated?: ((event: { events: EventModel[], The: Date, view: typeof CalendarMixin }) => void)|string
    /**
     * Fires when a day number is clicked in a view which shows day numbers. This will include
     * the cells of a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView), the cell header of cells
     * in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView), and the day header in a
     * [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView).
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on.
     * @param {DayCell} event.cellData An object that contains data about the calendar cell for the date.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onDayNumberClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, cellData: DayCell, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * This event fires on the owning Calendar when a drag creation gesture is completed.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The new `EventModel` record added in the store.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateCreateFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateCreateFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onDragCreateEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void)|string
    /**
     * This event fires on the owning Calendar when a drag move gesture is completed. The `eventRecord` has already been added
     * to the `eventStore` of the owning calendar.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The updated `EventModel` record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateMoveFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateMoveFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onDragMoveEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void)|string
    /**
     * This event is fired on the owning Calendar when dragging an event from the calendar over the
     * external source <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dragMoveExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being dragged.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    onDragMoveExternal?: ((event: { eventRecord: EventModel, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => void)|string
    /**
     * This event fires on the owning Calendar when a drag resize gesture is completed.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The updated `EventModel` record.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateResizeFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateResizeFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onDragResizeEnd?: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void)|string
    /**
     * This event is fired on the owning Calendar after dropping an event from the calendar on the
     * external source has been completed <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dropExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record that was dropped.
     * @param {boolean} event.dropOnCalendar `true` if the drop gesture is over the client Calendar. This feature also allows drag *out* of the Calendar and onto the external event source if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) config is set.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    onDropExternal?: ((event: { eventRecord: EventModel, dropOnCalendar: boolean, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView) or a
     * [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow).
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has
     * created a new event and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The child view on which the event was initiated.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when an event bar is clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is right-clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event right-clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource right-clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventContextMenu?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is double clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event double clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource double clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventDblClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fired before the editor will load the event record data into its input fields. This is useful if you
     * want to modify the fields before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The editor widget
     * @param {Scheduler.model.EventModel} event.record The record
     */
    onEventEditBeforeSetRecord?: ((event: { source: Container, record: EventModel }) => void)|string
    /**
     * Fires when a key is pressed while an event bar is focused.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event in which the key event was detected.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource in which the key event was detected if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventKeyDown?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from
     * being shown.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Scheduler.model.EventModel} event.eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} event.resourceRecord Resource record
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     * @param {MouseEvent} event.event Pointer event which triggered the context menu (if any)
     */
    onEventMenuBeforeShow?: ((event: { source: Scheduler, items: Record<string, MenuItemConfig>, eventRecord: EventModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, eventElement: HTMLElement, event?: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Scheduler when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Core.widget.MenuItem} event.item
     * @param {Scheduler.model.EventModel} event.eventRecord
     * @param {Scheduler.model.ResourceModel} event.resourceRecord
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuItem?: ((event: { source: Scheduler, item: MenuItem, eventRecord: EventModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler after showing the context menu for an event
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Scheduler.model.EventModel} event.eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} event.resourceRecord Resource record
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onEventMenuShow?: ((event: { source: Scheduler, menu: Menu, eventRecord: EventModel, resourceRecord: ResourceModel, assignmentRecord: AssignmentModel, eventElement: HTMLElement }) => void)|string
    /**
     * Fires when an event bar is mousedowned in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mousedowned on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mousedowned on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseDown?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when cursor enters an event bar in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseEnter?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when cursor leaves an event bar in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseLeave?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is mouseouted in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseouted.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseouted if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseOut?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is mouseovered in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseovered.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseovered if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseOver?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is mouseupped in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseupped.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseupped if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseUp?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when the [LoadOnDemand](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand) feature detects that a request
     * for data from the server has failed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-loadOnDemandFail)
     * @param {object} event Event object
     * @param {Response} event.rawResponse The HTTP `fetch` response object.
     * @param {object} event.request The CrudManager load data block.
     * @param {object} event.response The decoded JSON response.
     */
    onLoadOnDemandFail?: ((event: { rawResponse: Response, request: object, response: object }) => void)|string
    /**
     * Fires when a month name header in a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView) is clicked on.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {number} event.month The month index *(zero based)* clicked on.
     * @param {Date} event.date The date of the first of the month clicked on.
     */
    onMonthNameClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, month: number, date: Date }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement,null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement,null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate?: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Scheduler after a paste action is performed.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The pasted event records
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The pasted assignment records
     * @param {Scheduler.model.EventModel[]} event.pastedEventRecords (DEPRECATED) Use eventRecords instead
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The original copied event records
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecords The original copied assignment records
     * @param {Date} event.date date Pasted to this date
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The target resource record
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other paste events
     */
    onPaste?: ((event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], pastedEventRecords: EventModel[], originalEventRecords: EventModel[], originalAssignmentRecords: AssignmentModel[], date: Date, resourceRecord: ResourceModel, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fires on the owning Scheduler if a paste action is not allowed. Depending on if the EventStore is using
     * [singleAssignment](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore#config-singleAssignment) or the configuration of
     * [copyPasteAction](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/EventCopyPaste#config-copyPasteAction), either the `eventRecords` or the `assignmentRecords` param will be populated
     * with record copies.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Owner scheduler
     * @param {Scheduler.model.EventModel[]} event.eventRecords The event records about to be pasted
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment records about to be pasted
     * @param {Scheduler.model.EventModel[]} event.originalEventRecords The event records that were copied
     * @param {Scheduler.model.AssignmentModel[]} event.originalAssignmentRecords The assignment records that were copied
     * @param {Date} event.date The paste date
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The target resource record
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'event' to distinguish this event from other `pasteNotAllowed` events
     * @param {'overlappingEvents','resourceReadOnly'} event.reason A string id to use for displaying an error message to the user.
     */
    onPasteNotAllowed?: ((event: { source: Scheduler, eventRecords: EventModel[], assignmentRecords: AssignmentModel[], originalEventRecords: EventModel[], originalAssignmentRecords: AssignmentModel[], date: Date, resourceRecord: ResourceModel, isCut: boolean, entityName: string, reason: 'overlappingEvents'|'resourceReadOnly' }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when one of the views in this Calendar refreshes.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which refreshed.
     */
    onRefresh?: ((event: { source: typeof CalendarMixin }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fires when a click made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a context menu made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleContextMenu?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a dblclick made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date double clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleDblClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the schedule.
     * Allows manipulation of the items to show in the same way as in `processItems`. Returning `false` from a listener
     * prevents the menu from being shown.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Scheduler.model.EventModel} event.eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} event.resourceRecord Resource record
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {Scheduler.model.AssignmentModel} event.assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} event.eventElement
     */
    onScheduleMenuBeforeShow?: ((event: { source: Scheduler, items: Record<string, MenuItemConfig>, eventRecord: EventModel, resourceRecord: ResourceModel, date: Date, assignmentRecord: AssignmentModel, eventElement: HTMLElement }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Core.widget.MenuItem} event.item
     * @param {Scheduler.model.ResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.element
     */
    onScheduleMenuItem?: ((event: { source: Scheduler, item: MenuItem, resourceRecord: ResourceModel, date: Date, element: HTMLElement }) => void)|string
    /**
     * This event fires on the owning Scheduler or Gantt widget after showing the context menu for the schedule.
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Scheduler.model.ResourceModel} event.resourceRecord
     * @param {Date} event.date Clicked date, rounded according to viewPreset's settings
     * @param {HTMLElement} event.targetElement
     */
    onScheduleMenuShow?: ((event: { source: Scheduler, items: Record<string, MenuItemConfig>, menu: Menu, resourceRecord: ResourceModel, date: Date, targetElement: HTMLElement }) => void)|string
    /**
     * Fires when a mousedown made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mousedowned on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleMouseDown?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a mouseout made it's way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseouted. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleMouseOut?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a mouseover made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseovered. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleMouseOver?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a mouseup made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseupped on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleMouseUp?: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fired any time there is a change to the events selected in the Calendar.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance.
     * @param {'select','deselect','update','clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of the Events added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The new selection.
     */
    onSelectionChange?: ((event: { source: Calendar, action: 'select'|'deselect'|'update'|'clear', selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Fired when the sidebar is collapsed either through the UI or programatically.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     */
    onSidebarCollapse?: ((event: { source: Calendar }) => void)|string
    /**
     * Fired when the sidebar is expanded either through the UI or programatically.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     */
    onSidebarExpand?: ((event: { source: Calendar }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Scheduler instance
     * @param {Scheduler.model.TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderClick?: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Scheduler instance
     * @param {Scheduler.model.TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderContextMenu?: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string
    /**
     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source Scheduler instance
     * @param {Scheduler.model.TimeSpan} event.timeRangeRecord The record
     * @param {MouseEvent} event.domEvent Browser event
     */
    onTimeRangeHeaderDblClick?: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when one of the child views is painted. That is when it becomes visible.
     * Note that due to the slide-in animation, while the view is visible, it will not
     * yet be in its final position.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted
     * @param {boolean} event.firstPaint `true` if this is the first paint
     */
    onViewPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires when a week number is clicked. This will include the week number cells of a
     * [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView), the week number in the first cell
     * in each row of a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {number[]} event.week The `[year, week]` clicked on.
     * @param {Date} event.date The date clicked on.
     */
    onWeekNumberClick?: ((event: { source: typeof CalendarMixin, domEvent: Event, week: number[], date: Date }) => void)|string
}

/**
 * A configurable, aggregated view of an [EventStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore) which may comprise several
 * view types to display the events in different ways.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar)
 */
export class Calendar extends Panel {
    /**
     * Identifies an object as an instance of [Calendar](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar) class, or subclass thereof.
     */
    static readonly isCalendar: boolean
    /**
     * Identifies an object as an instance of [CalendarStores](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores) class, or subclass thereof.
     */
    static readonly isCalendarStores: boolean
    /**
     * Identifies an object as an instance of [Clipboardable](https://bryntum.com/products/calendar/docs/api/Core/mixin/Clipboardable) class, or subclass thereof.
     */
    static readonly isClipboardable: boolean
    /**
     * Identifies an object as an instance of [CrudManagerView](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/mixin/CrudManagerView) class, or subclass thereof.
     */
    static readonly isCrudManagerView: boolean
    /**
     * Identifies an object as an instance of [Delayable](https://bryntum.com/products/calendar/docs/api/Core/mixin/Delayable) class, or subclass thereof.
     */
    static readonly isDelayable: boolean
    /**
     * Identifies an object as an instance of [EventNavigation](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/EventNavigation) class, or subclass thereof.
     */
    static readonly isEventNavigation: boolean
    /**
     * Identifies an object as an instance of [EventSelection](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/EventSelection) class, or subclass thereof.
     */
    static readonly isEventSelection: boolean
    /**
     * Identifies an object as an instance of [Events](https://bryntum.com/products/calendar/docs/api/Core/mixin/Events) class, or subclass thereof.
     */
    static readonly isEvents: boolean
    /**
     * Identifies an object as an instance of [LoadMaskable](https://bryntum.com/products/calendar/docs/api/Core/mixin/LoadMaskable) class, or subclass thereof.
     */
    static readonly isLoadMaskable: boolean
    /**
     * Identifies an object as an instance of [Localizable](https://bryntum.com/products/calendar/docs/api/Core/localization/Localizable) class, or subclass thereof.
     */
    static readonly isLocalizable: boolean
    /**
     * Identifies an object as an instance of [ProjectConsumer](https://bryntum.com/products/calendar/docs/api/Scheduler/data/mixin/ProjectConsumer) class, or subclass thereof.
     */
    static readonly isProjectConsumer: boolean
    /**
     * Identifies an object as an instance of [RecurringEventEdit](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/mixin/RecurringEventEdit) class, or subclass thereof.
     */
    static readonly isRecurringEventEdit: boolean
    /**
     * Identifies an object as an instance of [RecurringEvents](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/RecurringEvents) class, or subclass thereof.
     */
    static readonly isRecurringEvents: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    static readonly isResponsive: boolean
    /**
     * An optional CSS class name to add to calendar date cells which encapsulate the calendar's
     * active [date](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-date).
     */
    activeDateCls: string
    /**
     * The currently focused event record.
     */
    readonly activeEvent: EventModel
    /**
     * Returns the lowest level of active view in the mode container.
     */
    activeSubView: Widget
    /**
     * Returns the currently active mode as a [Widget](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget) instance.
     */
    activeView: Widget
    /**
     * The [AssignmentStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/AssignmentStore) holding assignments linking resources to events.
     */
    readonly assignmentStore: AssignmentStore
    /**
     * Inline assignments, will be loaded into the [assignmentStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-assignmentStore).
     */
    assignments: AssignmentModel[]|AssignmentModelConfig[]
    /**
     * Get/set the CrudManager instance
     */
    crudManager: SchedulerCrudManager
    /**
     * The date which this Calendar encapsulates as its active date.
     */
    date: Date|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * view descriptions.
     */
    dateFormat: string
    /**
     * A reference to the [CalendarDatePicker](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker) which is shown in the [sidebar](#Calendar/view/Calendar#property-sidebar) by default.
     */
    readonly datePicker: CalendarDatePicker
    /**
     * The default Calendar to be used when creating new events which do not initially have a resource.
     */
    defaultCalendar: ResourceModel
    /**
     * Configure as `false` to preserve selection when clicking the empty schedule area.
     */
    deselectAllOnScheduleClick: boolean
    /**
     * Reference to the button that opens the event repeat settings dialog, if used
     */
    readonly editRecurrenceButton: RecurrenceLegendButton
    /**
     * When a child calendar view is being interacted with, this property
     * yields a reference to the child being interacted with.
     */
    readonly eventSource: typeof CalendarMixin
    /**
     * The [EventStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore) holding the events to be rendered into the Calendar.
     */
    readonly eventStore: EventStore
    /**
     * Inline events, will be loaded into the [eventStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-eventStore).
     */
    events: EventModel[]|EventModelConfig[]
    /**
     * After construction, this property can be used to access the Calendar's features and
     * reconfigure them.
     */
    features: CalendarFeaturesType
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-nonWorkingDays) for each calendar view
     */
    hideNonWorkingDays: boolean
    /**
     * Identifies an object as an instance of [Calendar](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar) class, or subclass thereof.
     */
    readonly isCalendar: boolean
    /**
     * Identifies an object as an instance of [CalendarStores](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores) class, or subclass thereof.
     */
    readonly isCalendarStores: boolean
    /**
     * Identifies an object as an instance of [Clipboardable](https://bryntum.com/products/calendar/docs/api/Core/mixin/Clipboardable) class, or subclass thereof.
     */
    readonly isClipboardable: boolean
    /**
     * Identifies an object as an instance of [CrudManagerView](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/mixin/CrudManagerView) class, or subclass thereof.
     */
    readonly isCrudManagerView: boolean
    /**
     * Identifies an object as an instance of [Delayable](https://bryntum.com/products/calendar/docs/api/Core/mixin/Delayable) class, or subclass thereof.
     */
    readonly isDelayable: boolean
    /**
     * Returns `true` if engine is in a stable calculated state, `false` otherwise.
     */
    isEngineReady: boolean
    /**
     * Identifies an object as an instance of [EventNavigation](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/EventNavigation) class, or subclass thereof.
     */
    readonly isEventNavigation: boolean
    /**
     * A template method (empty by default) allowing you to control if an event can be selected or not.
     */
    isEventSelectable: (event: EventModel) => boolean
    /**
     * Identifies an object as an instance of [EventSelection](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/EventSelection) class, or subclass thereof.
     */
    readonly isEventSelection: boolean
    /**
     * Identifies an object as an instance of [Events](https://bryntum.com/products/calendar/docs/api/Core/mixin/Events) class, or subclass thereof.
     */
    readonly isEvents: boolean
    /**
     * Identifies an object as an instance of [LoadMaskable](https://bryntum.com/products/calendar/docs/api/Core/mixin/LoadMaskable) class, or subclass thereof.
     */
    readonly isLoadMaskable: boolean
    /**
     * Identifies an object as an instance of [Localizable](https://bryntum.com/products/calendar/docs/api/Core/localization/Localizable) class, or subclass thereof.
     */
    readonly isLocalizable: boolean
    /**
     * Identifies an object as an instance of [ProjectConsumer](https://bryntum.com/products/calendar/docs/api/Scheduler/data/mixin/ProjectConsumer) class, or subclass thereof.
     */
    readonly isProjectConsumer: boolean
    /**
     * Identifies an object as an instance of [RecurringEventEdit](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/mixin/RecurringEventEdit) class, or subclass thereof.
     */
    readonly isRecurringEventEdit: boolean
    /**
     * Identifies an object as an instance of [RecurringEvents](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/RecurringEvents) class, or subclass thereof.
     */
    readonly isRecurringEvents: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    readonly isResponsive: boolean
    /**
     * Get the global LocaleHelper
     */
    readonly localeHelper: typeof LocaleHelper
    /**
     * Get the global LocaleManager
     */
    readonly localeManager: typeof LocaleManager
    /**
     * The maximum date to which the `endDate` of any child view may be navigated.
     */
    maxDate: Date
    /**
     * The minimum date to which the `startDate` of any child view may be navigated.
     */
    minDate: Date
    /**
     * Sets and gets which of the configured [modes](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-modes) is the current active view.
     */
    mode: string
    /**
     * The default settings applied to all child views.
     */
    modeDefaults: object
    /**
     * The [modes](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes) as widget instances.
     */
    modes: Record<string, Widget>
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     */
    nonWorkingDays: Record<number, boolean>
    /**
     * A [ProjectModel](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel) instance or a config object. The project holds all Scheduler data.
     * Can be omitted in favor of individual store configs or [crudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/SchedulerStores#config-crudManager) config.
     */
    project: ProjectModel|ProjectModelConfig
    /**
     * Get/set the calendar's read-only state. When set to `true`, any UIs for modifying data are disabled.
     */
    readOnly: boolean
    /**
     * Reference to the `Repeat` event field, if used
     */
    readonly recurrenceCombo: RecurrenceCombo
    /**
     * The confirmation dialog shown when a recurring event is edited.
     */
    recurrenceConfirmationPopup: RecurrenceConfirmationPopupConfig|RecurrenceConfirmationPopup
    /**
     * The [ResourceStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceStore) holding the resources to be rendered into the Calendar.
     */
    readonly resourceStore: ResourceStore
    /**
     * The [ResourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Scheduler/data/ResourceTimeRangeStore) holding resource time ranges.
     * These may be used by the [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) feature.
     */
    readonly resourceTimeRangeStore: ResourceTimeRangeStore
    /**
     * Inline resource time ranges, will be loaded into [resourceTimeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-resourceTimeRangeStore).
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]
    /**
     * Inline resources, will be loaded into the [resourceStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-resourceStore).
     */
    resources: ResourceModel[]|ResourceModelConfig[]
    /**
     * Set to `false` to not select the resource of the event when clicking an event bar.
     */
    selectResourceOnEventNavigate: boolean
    /**
     * Set to `false` to not select the row/resource when clicking the empty area in a time axis cell.
     */
    selectResourceOnScheduleClick: boolean
    /**
     * The [events](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) which are selected.
     */
    selectedEvents: EventModel[]
    /**
     * The [sidebar](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-sidebar) as an instance of [Sidebar](#Calendar/widget/Sidebar).
     */
    readonly sidebar: Container
    /**
     * A [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar) which displays and manages the calendar title
     * and the buttons which manipulate the Calendar's temporal navigation and
     * active mode.
     */
    readonly tbar: Toolbar
    /**
     * The [TimeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/data/TimeRangeStore) holding time ranges.
     * These may be used by the [TimeRanges](https://bryntum.com/products/calendar/docs/api/Calendar/feature/TimeRanges) feature.
     */
    readonly timeRangeStore: TimeRangeStore
    /**
     * Inline time ranges, will be loaded into the [timeRangeStore](https://bryntum.com/products/calendar/docs/api/Calendar/mixin/CalendarStores#property-timeRangeStore).
     */
    timeRanges: TimeRangeModel[]|TimeRangeModelConfig[]
    /**
     * By default, the day of week and week of month of the event's start date are used to create
     * helpful contextual recurrence types when editing a non-recurring event record and choosing
     * an initial recurrence type.
     */
    useContextualRecurrenceRules: boolean
    /**
     * A [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container) which contains the configured [modes](#Calendar/view/Calendar#config-modes) and
     * manages the currently active mode through its [layout](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-layout).
     */
    readonly viewContainer: Container
    /**
     * The [modes](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-modes) as an Array.
     */
    views: Widget[]
    /**
     * Fired when a change of view has completed. By default, view changes are animated and this
     * event fires when the view is fully visible.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance.
     * @param {Core.widget.Widget} event.prevActiveItem The previously active view.
     * @param {Core.widget.Widget} event.activeItem The new active view.
     * @param {boolean} event.containedFocus `true` if the outgoing view contained focus.
     */
    onActiveItemChange: ((event: { source: Calendar, prevActiveItem: Widget, activeItem: Widget, containedFocus: boolean }) => void)|string
    /**
     * Fired before a change of view is initiated.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance.
     * @param {Core.widget.Widget} event.prevActiveItem The previously active view.
     * @param {Core.widget.Widget} event.activeItem The new active view.
     */
    onBeforeActiveItemChange: ((event: { source: Calendar, prevActiveItem: Widget, activeItem: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or
     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which
     * case records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeAssignmentDelete)
     * @param {object} event Event object
     * @param {Scheduler.view.Scheduler} event.source The Scheduler instance
     * @param {Scheduler.model.AssignmentModel[]} event.assignmentRecords The assignment records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeAssignmentDelete: ((event: { source: Scheduler, assignmentRecords: AssignmentModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    onBeforeAssignmentSelectionChange: ((event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires whenever a child view's [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected and also when a [drag-create](#Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view The view in which the event is being created.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before a mode is created. The configuration block is passed to the handler for possible modification.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar
     * @param {AgendaViewConfig,DayResourceViewConfig,DayViewConfig,EventListConfig,MonthViewConfig,ResourceViewConfig,WeekViewConfig,YearViewConfig} event.config The configuration block of the mode about to be created. Any property, including the `type` may be changed.
     * @param {string} event.config.type The type of the mode about to be created.
     */
    onBeforeCreateMode: ((event: { source: Calendar, config: { type: string } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * This event fires on the owning Calendar before a drag creation gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.domEvent The browser event.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    onBeforeDragCreate: ((event: { source: Calendar, drag: DragContext, domEvent: Event, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag creation gesture is completed. Return `false` to
     * immediately veto the operation or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being created that has not yet been added in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateCreateFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateCreateFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onBeforeDragCreateEnd: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag move gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag move context.
     * @param {Event} event.domEvent The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being moved.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    onBeforeDragMove: ((event: { source: Calendar, drag: DragContext, domEvent: Event, eventRecord: EventModel, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag move gesture is completed. Return `false` to immediately veto the operation
     * or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record that has not yet been updated in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateMoveFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateMoveFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onBeforeDragMoveEnd: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag resize gesture is started. Return `false` to
     * veto the operation.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag resize context.
     * @param {Event} event.domEvent The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record being resized.
     * @param {Date} event.date The date at the drag DOM event position.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag is being started.
     */
    onBeforeDragResize: ((event: { source: Calendar, drag: DragContext, domEvent: Event, eventRecord: EventModel, date: Date, resourceRecord?: ResourceModel, feature: CalendarDrag, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Calendar before a drag resize gesture is completed. Return `false` to immediately veto the operation
     * or a Promise yielding `true` or `false` for async vetoing.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The `EventModel` record that has not yet been updated in the store.
     * @param {Date} event.newStartDate The new start date.
     * @param {Date} event.newEndDate The new end date.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateResizeFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateResizeFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onBeforeDragResizeEnd: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, newStartDate: Date, newEndDate: Date, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired on the owning Calendar when dropping an event from the calendar on the
     * external source <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>. Returning `false`
     * prevents the gesture from being completed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeDropExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being dragged.
     * @param {boolean} event.dropOnCalendar `true` if the drop gesture is over the client Calendar. This feature also allows drag *out* of the Calendar and onto the external event source if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) config is set.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    onBeforeDropExternal: ((event: { eventRecord: EventModel, dropOnCalendar: boolean, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the
     * event editor. Can for example be used to display a custom dialog to confirm deletion, in which case
     * records should be "manually" removed after confirmation:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-beforeEventDelete)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance
     * @param {Scheduler.model.EventModel[]} event.eventRecords The records about to be deleted
     * @param {object} event.context Additional removal context:
     * @param {Function} event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.
     * @param {boolean} event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.
     */
    onBeforeEventDelete: ((event: { source: Calendar, eventRecords: EventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of events that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    onBeforeEventSelectionChange: ((event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Calendar before print starts. Return `false` to cancel the print.
     * @param {object} event Event object
     * @param {object} event.config Print config
     */
    onBeforePrint: ((event: { config: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a cell overflow indicator is clicked in any view. This will include
     * the cells of a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView) and the `+ n more` overflow
     * indicator of cells in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView), and "all day" events section
     * of a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView).
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on.
     */
    onCellOverflowClick: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when data in any of the projects stores changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dataChange)
     * @param {object} event Event object
     * @param {typeof Scheduler.data.mixin.ProjectConsumer,any} event.source Owning component
     * @param {typeof Scheduler.model.mixin.ProjectModelMixin,any} event.project Project model
     * @param {Core.data.Store} event.store Affected store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange: ((event: { source: typeof ProjectConsumer|any, project: typeof ProjectModelMixin|any, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fires when the calendar changes the date that it orientates its views around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateChange)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar.
     * @param {Date} event.oldDate The previous Calendar date.
     * @param {Date} event.date The new Calendar date.
     */
    onDateChange: ((event: { source: Calendar, oldDate: Date, date: Date }) => void)|string
    /**
     * Fired when the eventStore is queried for events by date range, and the date range
     * requested is different from the last time the store was queried.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateRangeChange)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date
     * @param {Date} event.old.endDate the old end date
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date
     * @param {Date} event.new.endDate the new end date
     */
    onDateRangeChange: ((event: { source: Calendar, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires when the [LoadOnDemand](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand) feature has loaded a range of events.
     * @param {object} event Event object
     * @param {object} event.response The decoded JSON response.
     * @param {object} event.options The options object passed into the CrudManager [CrudManager](https://bryntum.com/products/calendar/docs/api/Scheduler/data/CrudManager) [load](https://bryntum.com/products/calendar/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load) method.
     * @param {Date} event.startDate The start date of the range to request.
     * @param {Date} event.endDate The end date of the range to request. <strong>Note that Dates are timestamps</strong>.
     */
    onDateRangeLoad: ((event: { response: object, options: object, startDate: Date, endDate: Date }) => void)|string
    /**
     * Fired <strong>every</strong> time the eventStore is queried for events by date range.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dateRangeRequested)
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     * @param {object} event.old The old date range
     * @param {Date} event.old.startDate the old start date
     * @param {Date} event.old.endDate the old end date
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date
     * @param {Date} event.new.endDate the new end date
     * @param {boolean} event.changed `true` if the date range is different from the last time a request was made
     */
    onDateRangeRequested: ((event: { source: Calendar, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date }, changed: boolean }) => void)|string
    /**
     * Fired by the active view after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     * @param {typeof CalendarMixin} event.view The view in which the event is being created.
     */
    onDayCellPopulated: ((event: { events: EventModel[], The: Date, view: typeof CalendarMixin }) => void)|string
    /**
     * Fires when a day number is clicked in a view which shows day numbers. This will include
     * the cells of a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView), the cell header of cells
     * in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView), and the day header in a
     * [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView).
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on.
     * @param {DayCell} event.cellData An object that contains data about the calendar cell for the date.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onDayNumberClick: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, cellData: DayCell, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * This event fires on the owning Calendar when a drag creation gesture is completed.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The new `EventModel` record added in the store.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateCreateFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateCreateFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onDragCreateEnd: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void)|string
    /**
     * This event fires on the owning Calendar when a drag move gesture is completed. The `eventRecord` has already been added
     * to the `eventStore` of the owning calendar.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The updated `EventModel` record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The `ResourceModel` record if the gesture was performed in a resource-type view.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateMoveFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateMoveFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onDragMoveEnd: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, resourceRecord?: ResourceModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void)|string
    /**
     * This event is fired on the owning Calendar when dragging an event from the calendar over the
     * external source <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dragMoveExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being dragged.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    onDragMoveExternal: ((event: { eventRecord: EventModel, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => void)|string
    /**
     * This event fires on the owning Calendar when a drag resize gesture is completed.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance that fired the event.
     * @param {Core.util.drag.DragContext} event.drag The drag create context.
     * @param {Event} event.event The browser event.
     * @param {Scheduler.model.EventModel} event.eventRecord The updated `EventModel` record.
     * @param {Calendar.feature.CalendarDrag} event.feature The Calendar drag feature instance.
     * @param {boolean,ValidateCreateResult} event.validation The result of the [validateResizeFn](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag#config-validateResizeFn) if one was provided.
     * @param {Core.widget.Widget} event.view The Calendar widget in which the drag completed.
     */
    onDragResizeEnd: ((event: { source: Calendar, drag: DragContext, event: Event, eventRecord: EventModel, feature: CalendarDrag, validation: boolean|ValidateCreateResult, view: Widget }) => void)|string
    /**
     * This event is fired on the owning Calendar after dropping an event from the calendar on the
     * external source has been completed <strong>if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) was configured</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-dropExternal)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel} event.eventRecord The event record that was dropped.
     * @param {boolean} event.dropOnCalendar `true` if the drop gesture is over the client Calendar. This feature also allows drag *out* of the Calendar and onto the external event source if the [droppable](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-droppable) config is set.
     * @param {HTMLElement} event.itemElement The element in which the drag gesture started.
     * @param {HTMLElement} event.targetElement The current over element.
     * @param {Event} event.domEvent The pointer event associated with the drag point.
     * @param {number} event.overIndex *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the index of the row being moved over;
     * @param {Core.data.Model} event.overRecord *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, the record being moved over;
     * @param {boolean} event.isAbove *If [grid](https://bryntum.com/products/calendar/docs/api/Calendar/feature/ExternalEventSource#config-grid) was specified*, `true` if the pointer position is above the halfway line of the over row.
     * @param {boolean} event.altKey `true` if the Alt key was down when the last event was processed.
     * @param {boolean} event.ctrlKey `true` if the Ctrl key was down when the last event was processed.
     * @param {boolean} event.metaKey `true` if the Meta key was down when the last event was processed.
     * @param {boolean} event.shiftKey `true` if the Shift key was down when the last event was processed.
     */
    onDropExternal: ((event: { eventRecord: EventModel, dropOnCalendar: boolean, itemElement: HTMLElement, targetElement: HTMLElement, domEvent: Event, overIndex: number, overRecord: Model, isAbove: boolean, altKey: boolean, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on in a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView) or a
     * [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow).
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has
     * created a new event and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The child view on which the event was initiated.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when an event bar is clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventClick: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is right-clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event right-clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource right-clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventContextMenu: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is double clicked in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event double clicked on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource double clicked on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventDblClick: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when a key is pressed while an event bar is focused.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event in which the key event was detected.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource in which the key event was detected if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventKeyDown: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is mousedowned in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mousedowned on.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mousedowned on if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseDown: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when cursor enters an event bar in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseEnter: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when cursor leaves an event bar in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseLeave: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is mouseouted in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseouted.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseouted if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseOut: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is mouseovered in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseovered.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseovered if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseOver: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when an event bar is mouseupped in any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date of the UI element which contains the event.
     * @param {HTMLElement} event.eventElement The UI element which represents the event.
     * @param {Scheduler.model.EventModel} event.eventRecord The event mouseupped.
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource mouseupped if the UI includes a resource.
     * @param {boolean} event.fromOverflowPopup `true` if the interaction was through the source view's [overflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#property-overflowPopup).
     */
    onEventMouseUp: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date, eventElement: HTMLElement, eventRecord: EventModel, resourceRecord: ResourceModel, fromOverflowPopup: boolean }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when the [LoadOnDemand](https://bryntum.com/products/calendar/docs/api/Calendar/feature/LoadOnDemand) feature detects that a request
     * for data from the server has failed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#event-loadOnDemandFail)
     * @param {object} event Event object
     * @param {Response} event.rawResponse The HTTP `fetch` response object.
     * @param {object} event.request The CrudManager load data block.
     * @param {object} event.response The decoded JSON response.
     */
    onLoadOnDemandFail: ((event: { rawResponse: Response, request: object, response: object }) => void)|string
    /**
     * Fires when a month name header in a [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView) is clicked on.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {number} event.month The month index *(zero based)* clicked on.
     * @param {Date} event.date The date of the first of the month clicked on.
     */
    onMonthNameClick: ((event: { source: typeof CalendarMixin, domEvent: Event, month: number, date: Date }) => void)|string
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement,null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement,null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Fires when one of the views in this Calendar refreshes.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which refreshed.
     */
    onRefresh: ((event: { source: typeof CalendarMixin }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fires when a click made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleClick: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a context menu made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleContextMenu: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a dblclick made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date double clicked on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleDblClick: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a mousedown made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mousedowned on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleMouseDown: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a mouseout made it's way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseouted. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleMouseOut: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a mouseover made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseovered. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleMouseOver: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fires when a mouseup made its way through to an empty part of any view.
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {Date} event.date The date mouseupped on. _Note that in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this will include granular time information. For other views, this is the *start* of the date.
     */
    onScheduleMouseUp: ((event: { source: typeof CalendarMixin, domEvent: Event, date: Date }) => void)|string
    /**
     * Fired any time there is a change to the events selected in the Calendar.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance.
     * @param {'select','deselect','update','clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of the Events added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The new selection.
     */
    onSelectionChange: ((event: { source: Calendar, action: 'select'|'deselect'|'update'|'clear', selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => void)|string
    /**
     * Fired when the sidebar is collapsed either through the UI or programatically.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     */
    onSidebarCollapse: ((event: { source: Calendar }) => void)|string
    /**
     * Fired when the sidebar is expanded either through the UI or programatically.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source This Calendar instance
     */
    onSidebarExpand: ((event: { source: Calendar }) => void)|string
    /**
     * Fires when one of the child views is painted. That is when it becomes visible.
     * Note that due to the slide-in animation, while the view is visible, it will not
     * yet be in its final position.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted
     * @param {boolean} event.firstPaint `true` if this is the first paint
     */
    onViewPaint: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires when a week number is clicked. This will include the week number cells of a
     * [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView), the week number in the first cell
     * in each row of a [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source The view which triggered the event.
     * @param {Event} event.domEvent The initiating DOM event.
     * @param {number[]} event.week The `[year, week]` clicked on.
     * @param {Date} event.date The date clicked on.
     */
    onWeekNumberClick: ((event: { source: typeof CalendarMixin, domEvent: Event, week: number[], date: Date }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {CalendarConfig} config
     */
    constructor(config?: CalendarConfig);
    /**
     * Get localized string, returns value of `text` if no localized string found.
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    static L(text: string, templateData?: object): string;
    /**
     * Convenience function to get an optional translation. The difference compared to `L()` is that it won't throw
     * an error when the translation is missing even if configured with `throwOnMissingLocale`
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    static optionalL(text: string, templateData?: object): string;
    /**
     * Convenience function that can be called directly on the class that mixes Localizable in
     * @param {string} text String key
     * @param {object} templateData Data to supply to template if localized string is a function
     */
    L(text: string, templateData?: object): string;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig,string} config An object containing listener definitions, or the event name to listen for
     * @param {object,Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Clears the clipboard data
     */
    clearClipboard(): Promise<void>;
    /**
     * Deselects all [events](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) and [assignments](#Scheduler/model/AssignmentModel).
     */
    clearEventSelection(): void;
    /**
     * Copy events (when using single assignment mode) or assignments (when using multi assignment mode) to clipboard to
     * paste later
     * @param {Scheduler.model.EventModel[],Scheduler.model.AssignmentModel[]} records Pass records to copy them, leave out to copying current selection
     * @param {boolean} isCut Copies by default, pass `true` to cut instead
     */
    copyEvents(records?: EventModel[]|AssignmentModel[], isCut?: boolean): Promise<void>;
    /**
     * Uses the current active mode to create an event on the specified date which conforms to that mode's
     * [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) setting.
     * @param {Date} date Optionally, the date to add the event at. Uses the Calendar's currently active date, as set in the [sidebar](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-sidebar)'s date picker. If there's no time component, and the current active mode is a calendar view, the [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)'s `startHour` will be used.
     */
    createEvent(date?: Date): void;
    /**
     * Deselects the passed [event](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) or [assignment](#Scheduler/model/AssignmentModel)
     * *if it is selected*.
     * @param {Scheduler.model.EventModel,Scheduler.model.AssignmentModel} eventOrAssignment The event or assignment to deselect.
     */
    deselect(eventOrAssignment: EventModel|AssignmentModel): void;
    /**
     * Deselects the passed [event](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) *if it is selected*.
     * @param {Scheduler.model.EventModel} event The event to deselect.
     */
    deselectEvent(event: EventModel): void;
    /**
     * Removes [events](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) from the selection.
     * @param {Scheduler.model.EventModel[]} events Events or assignments  to be deselected
     */
    deselectEvents(events: EventModel[]): void;
    /**
     * Executes the passed function for each child calendar view in [modes](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes)
     * @param {Function} fn The function to call.
     * @param {object[]} args The arguments to pass. Defaults to the view being called.
     * @param {object} thisObj The `this` reference for the function. Defaults to the view being called.
     */
    eachView(fn: Function, args?: object[], thisObj?: object): void;
    /**
     * Opens an editor for the passed event. This function is exposed on Scheduler and can be called as
     * `scheduler.editEvent()`.
     * @param {Scheduler.model.EventModel} eventRecord Event to edit
     * @param {Scheduler.model.ResourceModel} resourceRecord The Resource record for the event. This parameter is needed if the event is newly created for a resource and has not been assigned, or when using multi assignment.
     * @param {HTMLElement} element Element to anchor editor to (defaults to events element)
     */
    editEvent(eventRecord: EventModel, resourceRecord?: ResourceModel, element?: HTMLElement): void;
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Returns occurrences of the provided recurring event across the date range of this Scheduler.
     * @param {Scheduler.model.TimeSpan} recurringEvent Recurring event for which occurrences should be retrieved.
     */
    getOccurrencesFor(recurringEvent: TimeSpan): TimeSpan[];
    /**
     * Check if any listener is registered for the specified eventName
     * @param {string} eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Returns `true` if the [event](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) is selected.
     * @param {Scheduler.model.EventModel} event The event
     */
    isEventSelected(event: EventModel): boolean;
    /**
     * Determines if an event is within the time axis.
     * @param {Scheduler.model.EventModel} eventRecord The event to check
     */
    isInTimeAxis(eventRecord: EventModel): boolean;
    /**
     * Alias for [addListener](https://bryntum.com/products/calendar/docs/api/Core/mixin/Events#function-addListener). Adds an event listener. This method accepts parameters in the following format:
     * @param {BryntumListenerConfig,string} config An object containing listener definitions, or the event name to listen for
     * @param {object,Function} thisObj Default `this` reference for all listeners in the config object, or the handler function to call if providing a string as the first arg.
     * @param {object} oldThisObj The `this` reference if the old signature starting with a string event name is used..
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Paste events or assignments to specified date and resource
     * @param {Date} date Date where the events or assignments will be pasted
     * @param {Scheduler.model.ResourceModel} resourceRecord Resource to assign the pasted events or assignments to
     */
    pasteEvents(date?: Date, resourceRecord?: ResourceModel): Promise<void>;
    /**
     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when
     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and
     * DOM churn is kept to a minimum.
     */
    refresh(): void;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * @param {Core.mixin.Events} through Object to relay the events through, needs to mix Events mixin in
     * @param {string} prefix Prefix to add to event name
     * @param {boolean} transformCase Specify false to prevent making first letter of event name uppercase
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes an event listener. Same API signature as [addListener](https://bryntum.com/products/calendar/docs/api/Core/mixin/Events#function-addListener)
     * @param {object,string} config A config object or the event name
     * @param {object,Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    resolveEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Resume event triggering after a call to [suspendEvents()](https://bryntum.com/products/calendar/docs/api/Core/mixin/Events#function-suspendEvents). If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Selects the passed [event](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) or [assignment](#Scheduler/model/AssignmentModel)
     * *if it is not selected*. Selecting events results in all their assignments being selected.
     * @param {Scheduler.model.EventModel,Scheduler.model.AssignmentModel} eventOrAssignment The event or assignment to select
     * @param {boolean} preserveSelection Pass `true` to preserve any other selected events or assignments
     */
    select(eventOrAssignment: EventModel|AssignmentModel, preserveSelection?: boolean): void;
    /**
     * Selects the passed [event](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) *if it is not selected*. Selecting an event will
     * select all its assignments.
     * @param {Scheduler.model.EventModel} event The event to select
     * @param {boolean} preserveSelection Pass `true` to preserve any other selected events
     */
    selectEvent(event: EventModel, preserveSelection?: boolean): void;
    /**
     * Adds [events](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) to the selection.
     * @param {Scheduler.model.EventModel[]} events Events to be selected
     * @param {boolean} preserveSelection Pass `true` to preserve any other selected events
     */
    selectEvents(events: EventModel[], preserveSelection?: boolean): void;
    /**
     * Navigates forward in time in a step unit specific to the Calendar's [active view](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-activeView)
     * if the new date does not violate the Calendar's [maxDate](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-maxDate).
     */
    shiftNext(): void;
    /**
     * Navigates back in time in a step unit specific to the Calendar's [active view](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-activeView)
     * if the new date does not violate the Calendar's [minDate](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-minDate).
     */
    shiftPrevious(): void;
    /**
     * Navigates Calendar's [active view](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-activeView) to the current local date
     */
    shiftToNow(): void;
    /**
     * Shows the context menu.
     * @param {Event} event The initiating event.
     * @param {AlignSpec,HTMLElement} alignSpec Menu alignment specification, or an element to align to
     */
    showContextMenu(event: Event, alignSpec?: AlignSpec|HTMLElement): Promise<void>;
    /**
     * Prevents events from being triggered until [resumeEvents()](https://bryntum.com/products/calendar/docs/api/Core/mixin/Events#function-resumeEvents) is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {boolean} queue Specify true to queue events triggered while suspended
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {string} eventName Event name for which to trigger listeners
     * @param {{bubbles?: boolean, [key: string]: any}} param Single parameter passed on to listeners, source property will be added to it (this)
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for [removeListener](https://bryntum.com/products/calendar/docs/api/Core/mixin/Events#function-removeListener)
     * @param {object,string} config A config object or the event name
     * @param {object,Function} thisObj `this` reference for all listeners, or the listener function
     * @param {object} oldThisObj `this` The `this` object for the legacy way of adding listeners
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
    /**
     * Method that is triggered when applying a locale to the instance
     * (happens on the instance construction steps and when switching to another locale).
     */
    updateLocalization(): void;
    /**
     * Implement in subclass to take action when project is replaced.
     * @param {Scheduler.model.SchedulerProjectModel} project
     */
    updateProject(project: SchedulerProjectModel): void;
    /**
     * Accepts a callback that will be called when the underlying project is ready (no commit pending and current commit
     * finalized)
     * @param {Function} callback
     */
    whenProjectReady(callback: Function): void;
}

/**
 * Type with configuration options for [EventNavigation](https://bryntum.com/products/grid/docs/api/Calendar/view/mixin/EventNavigation) class.
 */
type EventNavigationClassConfig = {
    /**
     * Allow using [Delete] and [Backspace] to remove events/assignments
     */
    enableDeleteKey?: boolean
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement,null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement,null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate?: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
}

export class EventNavigationClass extends SchedulerEventNavigationClass {
    /**
     * Identifies an object as an instance of [EventNavigation](https://bryntum.com/products/calendar/docs/api/Calendar/view/mixin/EventNavigation) class, or subclass thereof.
     */
    static readonly isEventNavigation: boolean
    /**
     * The currently focused event record.
     */
    readonly activeEvent: EventModel
    /**
     * Identifies an object as an instance of [EventNavigation](https://bryntum.com/products/calendar/docs/api/Calendar/view/mixin/EventNavigation) class, or subclass thereof.
     */
    readonly isEventNavigation: boolean
    /**
     * Fired when a user gesture causes the active item to change.
     * @param {object} event Event object
     * @param {Event} event.event The browser event which instigated navigation. May be a click or key or focus event.
     * @param {HTMLElement,null} event.item The newly active item, or `null` if focus moved out.
     * @param {HTMLElement,null} event.oldItem The previously active item, or `null` if focus is moving in.
     */
    onNavigate: ((event: { event: Event, item: HTMLElement|null, oldItem: HTMLElement|null }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {EventNavigationClassConfig} config
     */
    constructor(config?: EventNavigationClassConfig);
}

export const EventNavigation : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & EventNavigationClass>

/**
 * Type with configuration options for [EventSelection](https://bryntum.com/products/grid/docs/api/Calendar/view/mixin/EventSelection) class.
 */
type EventSelectionClassConfig = {
    /**
     * Configure as `false` to preserve selection when clicking the empty schedule area.
     */
    deselectAllOnScheduleClick?: boolean
    /**
     * Configure as `true` to deselect a selected event upon click.
     */
    deselectOnClick?: boolean
    /**
     * Configure as `true`, or set property to `true` to disable event selection.
     */
    eventSelectionDisabled?: boolean
    /**
     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.
     */
    highlightPredecessors?: boolean
    /**
     * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.
     */
    highlightSuccessors?: boolean
    /**
     * A template method (empty by default) allowing you to control if an event can be selected or not.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/view/mixin/EventSelection#config-isEventSelectable)
     * @param {Scheduler.model.EventModel} event The event record
     * @returns {boolean} true if event can be selected, otherwise false
     */
    isEventSelectable?: (event: EventModel) => boolean
    /**
     * This flag controls whether Scheduler should preserve its selection of events when loading a new dataset
     * (if selected event ids are included in the newly loaded dataset).
     */
    maintainSelectionOnDatasetChange?: boolean
    /**
     * Configure as `true` to allow `CTRL+click` to select multiple events in the scheduler.
     */
    multiEventSelect?: boolean
    /**
     * Set to `false` to not select the resource of the event when clicking an event bar.
     */
    selectResourceOnEventNavigate?: boolean
    /**
     * Set to `false` to not select the row/resource when clicking the empty area in a time axis cell.
     */
    selectResourceOnScheduleClick?: boolean
    /**
     * Configure as `true` to trigger `selectionChange` when removing a selected event/assignment.
     */
    triggerSelectionChangeOnRemove?: boolean
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    onBeforeAssignmentSelectionChange?: ((event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of events that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    onBeforeEventSelectionChange?: ((event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired any time there is a change to the events selected in the Calendar.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance.
     * @param {'select','deselect','update','clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of the Events added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The new selection.
     */
    onSelectionChange?: ((event: { source: Calendar, action: 'select'|'deselect'|'update'|'clear', selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => void)|string
}

export class EventSelectionClass extends SchedulerEventSelectionClass {
    /**
     * Identifies an object as an instance of [EventSelection](https://bryntum.com/products/calendar/docs/api/Calendar/view/mixin/EventSelection) class, or subclass thereof.
     */
    static readonly isEventSelection: boolean
    /**
     * Configure as `false` to preserve selection when clicking the empty schedule area.
     */
    deselectAllOnScheduleClick: boolean
    /**
     * Identifies an object as an instance of [EventSelection](https://bryntum.com/products/calendar/docs/api/Calendar/view/mixin/EventSelection) class, or subclass thereof.
     */
    readonly isEventSelection: boolean
    /**
     * The [events](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) which are selected.
     */
    selectedEvents: EventModel[]
    /**
     * Fired any time there is going to be a change to the assignments selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of assignments that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of assignments that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected assignments, before applying `selected` and `deselected`.
     */
    onBeforeAssignmentSelectionChange: ((event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired any time there is going to be a change to the events selected in the Scheduler.
     * Returning `false` prevents the change
     * @param {object} event Event object
     * @param {string} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of events that will be added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of events that will be removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The currently selected events, before applying `selected` and `deselected`.
     */
    onBeforeEventSelectionChange: ((event: { action: string, selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired any time there is a change to the events selected in the Calendar.
     * @param {object} event Event object
     * @param {Calendar.view.Calendar} event.source The Calendar instance.
     * @param {'select','deselect','update','clear'} event.action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]} event.selected An array of the Events added to the selection.
     * @param {Scheduler.model.EventModel[]} event.deselected An array of the Event removed from the selection.
     * @param {Scheduler.model.EventModel[]} event.selection The new selection.
     */
    onSelectionChange: ((event: { source: Calendar, action: 'select'|'deselect'|'update'|'clear', selected: EventModel[], deselected: EventModel[], selection: EventModel[] }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {EventSelectionClassConfig} config
     */
    constructor(config?: EventSelectionClassConfig);
    /**
     * Deselects all [events](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel).
     */
    clearEventSelection(): void;
    /**
     * Deselects the passed [event](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel)*if it is selected*.
     * @param {Scheduler.model.EventModel} event The event to deselect.
     */
    deselect(event: EventModel): void;
    /**
     * Deselects the passed [event](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) *if it is selected*.
     * @param {Scheduler.model.EventModel} event The event to deselect.
     */
    deselectEvent(event: EventModel): void;
    /**
     * Removes [events](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) from the selection.
     * @param {Scheduler.model.EventModel[]} events Events to be deselected
     */
    deselectEvents(events: EventModel[]): void;
    /**
     * Returns `true` if the [event](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) is selected.
     * @param {Scheduler.model.EventModel} event The event
     */
    isEventSelected(event: EventModel): boolean;
    /**
     * Selects the passed [event](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) *if it is not selected*.
     * @param {Scheduler.model.EventModel} event The event to select
     * @param {boolean} preserveSelection Pass `true` to preserve any other selected events
     */
    select(event: EventModel, preserveSelection?: boolean): void;
    /**
     * Selects the passed [event](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) *if it is not selected*.
     * @param {Scheduler.model.EventModel} event The event select
     * @param {boolean} preserveSelection Pass `true` to preserve any other selected events
     */
    selectEvent(event: EventModel, preserveSelection?: boolean): void;
    /**
     * Adds [events](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel) to the selection.
     * @param {Scheduler.model.EventModel[]} events Events to be selected
     */
    selectEvents(events: EventModel[]): void;
}

export const EventSelection : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & EventSelectionClass>

/**
 * Type with available listeners functions for [AgendaView](https://bryntum.com/products/grid/docs/api/Calendar/widget/AgendaView) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type AgendaViewListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {Grid.column.Column[]} event.columns An array of columns to export
     * @param {Core.data.Model[]} event.rows An array of records to export
     * @param {string} event.lineDelimiter The CSV delimiter to separate lines
     * @param {string} event.columnDelimiter The CSV delimiter to separate values on one line
     */
    beforeCSVExport: (event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     */
    beforeCancelCellEdit: (event: { source: Grid, editorContext: GridLocation }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before the row editing is canceled, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeCancelRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.recordThe record being edited
     */
    beforeCancelRowEdit: (event: { grid: Grid, editorContext: { editor: Panel }, recordThe: Model }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {(Grid.util.GridLocation|Core.data.Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themselves will not get deleted, only visible column values).
     */
    beforeCellDelete: (event: { source: Grid, gridSelection: (GridLocation|Model)[] }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-field)). This property may be replaced to be a different [field](https://bryntum.com/products/calendar/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    beforeCellEditStart: (event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    beforeColumnDragStart: (event: { source: Grid, column: Column, event: Event }) => Promise<boolean>|boolean|void
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    beforeColumnDropFinalize: (event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => Promise<boolean>|boolean|void
    /**
     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns
     * `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    beforeColumnResize: (event: { source: Grid, column: Column, domEvent: Event }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    beforeCopy: (event: { source: Grid, cells: GridLocation[], data: string, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {XLSColumn[]} event.columns An array of columns to export
     * @param {any[][]} event.rows An array of records to export
     */
    beforeExcelExport: (event: { config: ExportConfig, columns: XLSColumn[], rows: any[] }) => Promise<boolean>|boolean|void
    /**
     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    beforeFillHandleDragStart: (event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value The cell value
     * @param {any} event.editorContext.oldValue The old value
     */
    beforeFinishCellEdit: (event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any, oldValue: any } }) => void
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeFinishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record being edited
     */
    beforeFinishRowEdit: (event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    beforePaste: (event: { source: Grid, clipboardData: string, targetCell: GridLocation, entityName: string }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    beforePdfExport: (event: { config: object }) => Promise<boolean>|boolean|void
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row about to be rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    beforeRenderRow: (event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    beforeRenderRows: (event: { source: Grid }) => void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * This event fires before row collapse is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeRowCollapse)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    beforeRowCollapse: (event: { record: Model }) => Promise<boolean>|boolean|void
    /**
     * This event fires before row expand is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeRowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    beforeRowExpand: (event: { record: Model }) => Promise<boolean>|boolean|void
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records to be deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records to be selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells to be selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    beforeSelectionChange: (event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => Promise<boolean>|boolean|void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The [Panel](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel) instance which contains the editor fields.
     */
    beforeStartRowEdit: (event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    beforeToggleGroup: (event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, domEvent: Event }) => Promise<boolean>|boolean|void
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    beforeToggleNode: (event: { source: Grid, record: Model, collapse: boolean }) => void
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    cancelCellEdit: (event: { source: Grid, editorContext: GridLocation, event: Event }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellClick: (event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellContextMenu: (event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellDblClick: (event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated: () => void
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuBeforeShow: (event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuItem: (event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuShow: (event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => void
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    cellMenuToggleItem: (event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered cell
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseEnter: (event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the cell that the mouse left
     * @param {Grid.column.Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseLeave: (event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseOut: (event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseOver: (event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been collapsed.
     */
    collapseNode: (event: { source: Grid, record: Model }) => void
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    columnDrag: (event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    columnDragStart: (event: { source: Grid, column: Column, event: Event }) => void
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    columnDrop: (event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => Promise<boolean>|boolean|void
    /**
     * This event is fired after a resize gesture is completed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The resized column
     * @param {Event} event.domEvent The browser event
     */
    columnResize: (event: { source: Grid, column: Column, domEvent: Event }) => void
    /**
     * This event is fired when a column resize gesture starts.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    columnResizeStart: (event: { source: Grid, column: Column, domEvent: Event }) => void
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     */
    contextMenuItem: (event: { source: Widget, menu: Menu, item: MenuItem }) => void
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    contextMenuToggleItem: (event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    copy: (event: { source: Grid, cells: GridLocation[], copiedDataString: string, isCut: boolean, entityName: string }) => void
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-dataChange)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owning grid
     * @param {Core.data.Store} event.store The originating store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    dataChange: (event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated: (event: { events: EventModel[], The: Date }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source
     * @param {GridLocationConfig[],Grid.util.GridLocation[]} event.selectedCells The cells that is currently being dragged over
     * @param {Core.data.Model[]} event.selectedRecords The records that is currently being dragged over
     */
    dragSelecting: (event: { source: Grid, selectedCells: GridLocationConfig[]|GridLocation[], selectedRecords: Model[] }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate: (event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been expanded.
     */
    expandNode: (event: { source: Grid, record: Model }) => void
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    fileDrop: (event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void
    /**
     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the
     * drag operation from applying data changes.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleBeforeDragFinalize: (event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void
    /**
     * Fired while dragging the FillHandle.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDrag: (event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void
    /**
     * Fired when a FillHandle drag operation is aborted.
     */
    fillHandleDragAbort: () => void
    /**
     * Fired after a FillHandle drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDragEnd: (event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void
    /**
     * Fired when dragging of the FillHandle starts.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDragStart: (event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    finishCellEdit: (event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-finishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record that has been edited
     */
    finishRowEdit: (event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    gridRowBeforeDragStart: (event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => Promise<boolean>|boolean|void
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    gridRowBeforeDropFinalize: (event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean>|boolean|void
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    gridRowDrag: (event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    gridRowDragAbort: (event: { source: GridBase, context: { records: Model[] }, event: MouseEvent }) => void
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    gridRowDragStart: (event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    gridRowDrop: (event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Grid.column.Column} event.column The column clicked on.
     */
    headerClick: (event: { domEvent: Event, column: Column }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuBeforeShow: (event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuItem: (event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuShow: (event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => void
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    headerMenuToggleItem: (event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Fires when row locking is enabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The created clone
     */
    lockRows: (event: { clone: GridBase }) => void
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    mouseOut: (event: { event: MouseEvent }) => void
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    mouseOver: (event: { event: MouseEvent }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Core.data.Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    paste: (event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: GridLocation, entityName: string }) => void
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    pdfExport: (event: { response?: Response, error?: Error }) => void
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange: (event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this AgendaView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.AgendaView} event.source The triggering instance.
     */
    refresh: (event: { source: AgendaView }) => void
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row that has been rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    renderRow: (event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    renderRows: (event: { source: Grid }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    responsive: (event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * This event fires when a row has finished collapsing.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    rowCollapse: (event: { record: Model }) => void
    /**
     * This event fires when a row expand has finished expanding.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-rowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     * @param {object} event.expandedElements An object with the Grid region name as property and the expanded body element as value
     * @param {Core.widget.Widget} event.widget In case of expanding a Widget, this will be a reference to the instance created by the actual expansion. If there is multiple Grid regions, use the `widgets` param instead.
     * @param {object} event.widgets In case of expanding a Widget, this will be an object with the Grid region name as property and the reference to the widget instance created by the actual expansion
     */
    rowExpand: (event: { record: Model, expandedElements: object, widget: Widget, widgets: object }) => void
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered row
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    rowMouseEnter: (event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    rowMouseLeave: (event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    scroll: (event: { source: Grid, scrollTop: number }) => void
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select','deselect'} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the new selection.
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the new selection.
     */
    selectionChange: (event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => void
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/calendar/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    selectionModeChange: (event: { selectionMode: object }) => void
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange: (event: { old?: object, new: object }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {Grid.view.GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal','vertical','both'} event.options.direction The direction of the split
     * @param {Grid.column.Column} event.options.atColumn The column to split at
     * @param {Core.data.Model} event.options.atRecord The record to split at
     */
    split: (event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterCollapseClick: (event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterDragEnd: (event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    splitterDragStart: (event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void
    /**
     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterExpandClick: (event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    startCellEdit: (event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     */
    startRowEdit: (event: { source: Grid, editorContext: { editor: Panel, column: Column, record: Model, cell: HTMLElement } }) => void
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    subGridCollapse: (event: { source: Grid, subGrid: SubGrid }) => void
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    subGridExpand: (event: { source: Grid, subGrid: SubGrid }) => void
    /**
     * Fired when one or more groups are expanded or collapsed
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {boolean} event.allRecords True if this event is part of toggling all groups
     */
    toggleGroup: (event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, allRecords?: boolean }) => void
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    toggleNode: (event: { record: Model, collapse: boolean }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
    /**
     * Fired when the date header stuck at the top of the view changes.
     * @param {object} event Event object
     * @param {Date} event.date The date which is at the top of the view
     */
    topDateChange: (event: { date: Date }) => void
    /**
     * Fires when row locking is disabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The locked clone that will be destroyed
     */
    unlockRows: (event: { clone: GridBase }) => void
    /**
     * Fires when un-splitting the Grid.
     */
    unsplit: () => void
}

/**
 * Type with listeners options for [AgendaView](https://bryntum.com/products/grid/docs/api/Calendar/widget/AgendaView) class.
 */
type AgendaViewListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {Grid.column.Column[]} event.columns An array of columns to export
     * @param {Core.data.Model[]} event.rows An array of records to export
     * @param {string} event.lineDelimiter The CSV delimiter to separate lines
     * @param {string} event.columnDelimiter The CSV delimiter to separate values on one line
     */
    beforeCSVExport?: ((event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     */
    beforeCancelCellEdit?: ((event: { source: Grid, editorContext: GridLocation }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the row editing is canceled, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeCancelRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.recordThe record being edited
     */
    beforeCancelRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, recordThe: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {(Grid.util.GridLocation|Core.data.Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themselves will not get deleted, only visible column values).
     */
    beforeCellDelete?: ((event: { source: Grid, gridSelection: (GridLocation|Model)[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-field)). This property may be replaced to be a different [field](https://bryntum.com/products/calendar/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    beforeCellEditStart?: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    beforeColumnDragStart?: ((event: { source: Grid, column: Column, event: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    beforeColumnDropFinalize?: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns
     * `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    beforeColumnResize?: ((event: { source: Grid, column: Column, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    beforeCopy?: ((event: { source: Grid, cells: GridLocation[], data: string, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {XLSColumn[]} event.columns An array of columns to export
     * @param {any[][]} event.rows An array of records to export
     */
    beforeExcelExport?: ((event: { config: ExportConfig, columns: XLSColumn[], rows: any[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    beforeFillHandleDragStart?: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value The cell value
     * @param {any} event.editorContext.oldValue The old value
     */
    beforeFinishCellEdit?: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any, oldValue: any } }) => void)|string
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeFinishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record being edited
     */
    beforeFinishRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    beforePaste?: ((event: { source: Grid, clipboardData: string, targetCell: GridLocation, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    beforePdfExport?: ((event: { config: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row about to be rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    beforeRenderRow?: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    beforeRenderRows?: ((event: { source: Grid }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * This event fires before row collapse is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeRowCollapse)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    beforeRowCollapse?: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires before row expand is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeRowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    beforeRowExpand?: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records to be deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records to be selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells to be selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    beforeSelectionChange?: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The [Panel](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel) instance which contains the editor fields.
     */
    beforeStartRowEdit?: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    beforeToggleGroup?: ((event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    beforeToggleNode?: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    cancelCellEdit?: ((event: { source: Grid, editorContext: GridLocation, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellClick?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellContextMenu?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellDblClick?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated?: (() => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuBeforeShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    cellMenuToggleItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered cell
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseEnter?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the cell that the mouse left
     * @param {Grid.column.Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseLeave?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseOut?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseOver?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been collapsed.
     */
    collapseNode?: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    columnDrag?: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    columnDragStart?: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    columnDrop?: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired after a resize gesture is completed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The resized column
     * @param {Event} event.domEvent The browser event
     */
    columnResize?: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event is fired when a column resize gesture starts.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    columnResizeStart?: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     */
    contextMenuItem?: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    contextMenuToggleItem?: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    copy?: ((event: { source: Grid, cells: GridLocation[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-dataChange)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owning grid
     * @param {Core.data.Store} event.store The originating store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    dataChange?: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source
     * @param {GridLocationConfig[],Grid.util.GridLocation[]} event.selectedCells The cells that is currently being dragged over
     * @param {Core.data.Model[]} event.selectedRecords The records that is currently being dragged over
     */
    dragSelecting?: ((event: { source: Grid, selectedCells: GridLocationConfig[]|GridLocation[], selectedRecords: Model[] }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been expanded.
     */
    expandNode?: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    fileDrop?: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the
     * drag operation from applying data changes.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleBeforeDragFinalize?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired while dragging the FillHandle.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDrag?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when a FillHandle drag operation is aborted.
     */
    fillHandleDragAbort?: (() => void)|string
    /**
     * Fired after a FillHandle drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDragEnd?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when dragging of the FillHandle starts.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDragStart?: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    finishCellEdit?: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-finishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record that has been edited
     */
    finishRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    gridRowBeforeDragStart?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    gridRowBeforeDropFinalize?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    gridRowDrag?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    gridRowDragAbort?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    gridRowDragStart?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    gridRowDrop?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Grid.column.Column} event.column The column clicked on.
     */
    headerClick?: ((event: { domEvent: Event, column: Column }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuBeforeShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    headerMenuToggleItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when row locking is enabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The created clone
     */
    lockRows?: ((event: { clone: GridBase }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    mouseOut?: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    mouseOver?: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Core.data.Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    paste?: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: GridLocation, entityName: string }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    pdfExport?: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this AgendaView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.AgendaView} event.source The triggering instance.
     */
    refresh?: ((event: { source: AgendaView }) => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row that has been rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    renderRow?: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    renderRows?: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    responsive?: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * This event fires when a row has finished collapsing.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    rowCollapse?: ((event: { record: Model }) => void)|string
    /**
     * This event fires when a row expand has finished expanding.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-rowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     * @param {object} event.expandedElements An object with the Grid region name as property and the expanded body element as value
     * @param {Core.widget.Widget} event.widget In case of expanding a Widget, this will be a reference to the instance created by the actual expansion. If there is multiple Grid regions, use the `widgets` param instead.
     * @param {object} event.widgets In case of expanding a Widget, this will be an object with the Grid region name as property and the reference to the widget instance created by the actual expansion
     */
    rowExpand?: ((event: { record: Model, expandedElements: object, widget: Widget, widgets: object }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered row
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    rowMouseEnter?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    rowMouseLeave?: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    scroll?: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select','deselect'} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the new selection.
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the new selection.
     */
    selectionChange?: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/calendar/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    selectionModeChange?: ((event: { selectionMode: object }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {Grid.view.GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal','vertical','both'} event.options.direction The direction of the split
     * @param {Grid.column.Column} event.options.atColumn The column to split at
     * @param {Core.data.Model} event.options.atRecord The record to split at
     */
    split?: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterCollapseClick?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterDragEnd?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    splitterDragStart?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterExpandClick?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    startCellEdit?: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     */
    startRowEdit?: ((event: { source: Grid, editorContext: { editor: Panel, column: Column, record: Model, cell: HTMLElement } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    subGridCollapse?: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    subGridExpand?: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fired when one or more groups are expanded or collapsed
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {boolean} event.allRecords True if this event is part of toggling all groups
     */
    toggleGroup?: ((event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, allRecords?: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    toggleNode?: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fired when the date header stuck at the top of the view changes.
     * @param {object} event Event object
     * @param {Date} event.date The date which is at the top of the view
     */
    topDateChange?: ((event: { date: Date }) => void)|string
    /**
     * Fires when row locking is disabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The locked clone that will be destroyed
     */
    unlockRows?: ((event: { clone: GridBase }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    unsplit?: (() => void)|string
}

type AgendaViewFeaturesType = {
    cellCopyPaste: CellCopyPaste
    cellEdit: CellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    excelExporter: GridExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GridGroupSummary
    headerMenu: HeaderMenu
    lockRows: GridLockRows
    mergeCells: MergeCells
    pdfExport: GridPdfExport
    print: GridPrint
    quickFind: QuickFind
    regionResize: RegionResize
    rowCopyPaste: RowCopyPaste
    rowEdit: RowEdit
    rowExpander: RowExpander
    rowReorder: GridRowReorder
    rowResize: GridRowResize
    search: Search
    sort: Sort
    split: GridSplit
    stickyCells: StickyCells
    stripe: Stripe
    summary: GridSummary
    tree: Tree
    treeGroup: TreeGroup
}

type AgendaViewFeaturesConfigType = {
    cellCopyPaste?: string|boolean|CellCopyPasteConfig
    cellEdit?: string|boolean|CellEditConfig
    cellMenu?: string|boolean|CellMenuConfig
    cellTooltip?: string|boolean|CellTooltipConfig
    columnAutoWidth?: string|boolean|ColumnAutoWidthConfig
    columnDragToolbar?: string|boolean|ColumnDragToolbarConfig
    columnPicker?: string|boolean|ColumnPickerConfig
    columnRename?: string|boolean|ColumnRenameConfig
    columnReorder?: string|boolean|ColumnReorderConfig
    columnResize?: string|boolean|ColumnResizeConfig
    excelExporter?: string|boolean|GridExcelExporterConfig
    fileDrop?: string|boolean|FileDropConfig
    fillHandle?: string|boolean|FillHandleConfig
    filter?: string|boolean|FilterConfig
    filterBar?: string|boolean|FilterBarConfig
    group?: string|boolean|GroupConfig
    groupSummary?: string|boolean|GridGroupSummaryConfig
    headerMenu?: string|boolean|HeaderMenuConfig
    lockRows?: string|boolean|GridLockRowsConfig
    mergeCells?: string|boolean|MergeCellsConfig
    pdfExport?: string|boolean|GridPdfExportConfig
    print?: string|boolean|GridPrintConfig
    quickFind?: string|boolean|QuickFindConfig
    regionResize?: string|boolean|RegionResizeConfig
    rowCopyPaste?: string|boolean|RowCopyPasteConfig
    rowEdit?: string|boolean|RowEditConfig
    rowExpander?: string|boolean|RowExpanderConfig
    rowReorder?: string|boolean|GridRowReorderConfig
    rowResize?: string|boolean|GridRowResizeConfig
    search?: string|boolean|SearchConfig
    sort?: string|boolean|SortConfig
    split?: string|boolean|GridSplitConfig
    stickyCells?: string|boolean|StickyCellsConfig
    stripe?: string|boolean|StripeConfig
    summary?: string|boolean|GridSummaryConfig
    tree?: string|boolean|TreeConfig
    treeGroup?: string|boolean|TreeGroupConfig
}

/**
 * Type with configuration options for [AgendaView](https://bryntum.com/products/grid/docs/api/Calendar/widget/AgendaView) class.
 */
type AgendaViewConfig = {
    type?: 'agendaview'|'agenda'
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * If no dates in the view's configured date range contain events, then by default, no date cells are rendered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-alwaysShowCurrentDate)
     */
    alwaysShowCurrentDate?: boolean
    /**
     * Set to `true` to animate row removals caused by filtering.
     */
    animateFilterRemovals?: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * When the [Tree](https://bryntum.com/products/calendar/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight?: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * Set to `false` to crop text in grid cells without ellipsis (...). When enabled, cells containing pure
     * use `display : block`, instead of `display : flex` to allow ellipsis to work.
     * <strong>NOTE</strong> Only supported in browsers that support `:has()` CSS selector
     */
    cellEllipsis?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines?: boolean
    /**
     * Column definitions.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-columns)
     */
    columns?: object|object[]
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent?: 'contextmenu'|'click'|'dblclick'
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-data)
     */
    data?: object[]|Model[]
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The date to orient this view's [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-date)
     */
    date?: Date
    /**
     * A callback function, or the name of a function in the ownership hierarchy which an
     * application may provide to filter out agenda rows for individual dates.
     * @param {DayCell} context Information about the day rows to be created.
     * @returns {boolean} Return `false` to not display a rows for the passed date.
     */
    dateFilter?: ((context: DayCell) => boolean)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion?: string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Set to `true` to destroy the store when the grid is destroyed.
     */
    destroyStore?: boolean
    /**
     * Set to `true` to not get a warning when calling [getState](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#function-getState) when there is a column
     * configured without an `id`. But the recommended action is to always configure columns with an `id` when
     * using states.
     */
    disableGridColumnIdWarning?: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning?: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-dragUnit)
     */
    dragUnit?: string
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when there is no data to display in the grid
     */
    emptyText?: string|DomConfig
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-enableSticky)
     */
    enableSticky?: boolean
    /**
     * Set to `true` to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection?: boolean
    /**
     * Set to `true` to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/calendar/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys?: boolean
    /**
     * The end date (Time component is zeroed) of this view. Note that in terms of full days,
     * this is exclusive, ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on
     * the 8th.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-endDate)
     */
    endDate?: Date
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * The height of event bars if this view creates event bars.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-eventHeight)
     */
    eventHeight?: number|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed
     * next to event bars in the custom columns which [EventList](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList)
     * based views use - [EventList](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList) and [AgendaView](#Calendar/widget/AgendaView).
     */
    eventListTimeFormat?: string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * The spacing between event bars in the default rendering of a day cell.
     */
    eventRowSpacing?: number|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * A function, or name of a function in the ownership hierarchy which is used to create
     * the time output next to event bars in an agenda cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-eventTimeRenderer)
     * @param {Scheduler.model.EventModel} eventRecord The event record for which to create a time string.
     * @param {Date} date The date of the cell in which the event is being rendered.
     * @returns {string,DomConfig,DomConfig[]}
     */
    eventTimeRenderer?: ((eventRecord: EventModel, date: Date) => string|DomConfig|DomConfig[])|string
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features?: AgendaViewFeaturesConfigType
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-fixedRowHeight)
     */
    fixedRowHeight?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * An object which names formula prefixes which will be applied to all columns configured with
     * `formula : true`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-formulaProviders)
     */
    formulaProviders?: Record<string, FormulaProviderConfig>
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-fullRowRefresh)
     */
    fullRowRefresh?: boolean
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) and
     * expected to return the desired height of that records row. If the function returns a falsy value, Grids
     * configured [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-rowHeight) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-getRowHeight)
     * @param {Core.data.Model} getRowHeight.record Record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight?: (getRowHeight: { record: Model }) => number
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * By default, long running events are repeated in all rows that the event covers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-hideEventOverflow)
     */
    hideEventOverflow?: boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters?: boolean
    /**
     * Specify `false` to display column headers
     */
    hideHeaders?: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar?: boolean
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * A CSS class to add to hovered row elements
     */
    hoverCls?: string
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#keyboard-shortcuts) for details
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * A [RangeMenu](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu) configuration block which configures the range choosing menu provided which
     * by default selects one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-listRangeMenu)
     */
    listRangeMenu?: RangeMenuConfig|null
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-listeners)
     */
    listeners?: AgendaViewListeners
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask?: string|MaskConfig|null
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/calendar/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-loadMaskDefaults)
     */
    loadMaskDefaults?: MaskConfig
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-loadMaskError)
     */
    loadMaskError?: MaskConfig|Mask|boolean
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime?: number
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-minHeight)
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * Grid monitors window resize by default.
     */
    monitorResize?: boolean
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * This view lines up the textual content of event bars by shifting event bars of
     * events which start before the bar's cell leftwards by the arrow width.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-offsetStartsBeforeEvents)
     */
    offsetStartsBeforeEvents?: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins?: Function[]
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange?: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll?: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * The time range around the [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-date) to display events for.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-range)
     */
    range?: string|DurationConfig
    /**
     * Set to `true` to make the grid read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-ref)
     */
    ref?: string
    /**
     * Configure this property to allow the widget/component to be resized. Pressing <kbd>Shift</kbd> while resizing will
     * constrain the aspect ratio.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-resizable)
     */
    resizable?: boolean|{
        minWidth?: number
        maxWidth?: number
        minHeight?: number
        maxHeight?: number
        handles?: object
    }
    /**
     * Set to `false` to only measure cell contents when double-clicking the edge between column headers.
     */
    resizeToFitIncludesHeader?: boolean
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-responsive)
     */
    responsive?: object
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels?: Record<string, number|string>
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be
     * overriden by specifying a [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from
     * a column [renderer](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-renderer).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-rowHeight)
     */
    rowHeight?: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines?: boolean
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-rtl)
     */
    rtl?: boolean
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/calendar/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/calendar/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager?: ScrollManagerConfig|ScrollManager
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [Scroller](https://bryntum.com/products/calendar/docs/api/Core/helper/util/Scroller).
     * See the [scrollerClass](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [Scroller](#Core/helper/util/Scroller).
     */
    scrollerClass?: typeof Scroller
    /**
     * Selection configuration settings, change these properties to control how selection works and what can be
     * selected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-selectionMode)
     */
    selectionMode?: GridSelectionMode
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * The "Settings" button which is a floating button which offers the Agenda [range selection menu](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#property-listRangeMenu)
     */
    settingsButton?: ButtonConfig|Button
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-shiftIncrement)
     */
    shiftIncrement?: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells whose
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-showDirty)
     */
    showDirty?: boolean|{
        duringEdit?: boolean
    }
    /**
     * By default, only cells for days which contain events are shown.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-showEmptyDates)
     */
    showEmptyDates?: boolean
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: boolean
    /**
     * The start date (Time component is zeroed) of this view.
     */
    startDate?: Date
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * The properties of this settings object controls how grid is restored from state data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-stateSettings)
     */
    stateSettings?: {
        restoreUnconfiguredColumns?: boolean
    }
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-store)
     */
    store?: Store|StoreConfig|AjaxStore|AjaxStoreConfig
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-subGridConfigs)
     */
    subGridConfigs?: Record<string, SubGridConfig>
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-syncMask)
     */
    syncMask?: string|MaskConfig|null
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration?: number
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {Grid.column.Column[]} event.columns An array of columns to export
     * @param {Core.data.Model[]} event.rows An array of records to export
     * @param {string} event.lineDelimiter The CSV delimiter to separate lines
     * @param {string} event.columnDelimiter The CSV delimiter to separate values on one line
     */
    onBeforeCSVExport?: ((event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     */
    onBeforeCancelCellEdit?: ((event: { source: Grid, editorContext: GridLocation }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the row editing is canceled, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeCancelRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.recordThe record being edited
     */
    onBeforeCancelRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, recordThe: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {(Grid.util.GridLocation|Core.data.Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themselves will not get deleted, only visible column values).
     */
    onBeforeCellDelete?: ((event: { source: Grid, gridSelection: (GridLocation|Model)[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-field)). This property may be replaced to be a different [field](https://bryntum.com/products/calendar/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart?: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart?: ((event: { source: Grid, column: Column, event: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize?: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns
     * `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    onBeforeColumnResize?: ((event: { source: Grid, column: Column, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy?: ((event: { source: Grid, cells: GridLocation[], data: string, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {XLSColumn[]} event.columns An array of columns to export
     * @param {any[][]} event.rows An array of records to export
     */
    onBeforeExcelExport?: ((event: { config: ExportConfig, columns: XLSColumn[], rows: any[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onBeforeFillHandleDragStart?: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value The cell value
     * @param {any} event.editorContext.oldValue The old value
     */
    onBeforeFinishCellEdit?: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any, oldValue: any } }) => void)|string
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeFinishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record being edited
     */
    onBeforeFinishRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste?: ((event: { source: Grid, clipboardData: string, targetCell: GridLocation, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport?: ((event: { config: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row about to be rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow?: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    onBeforeRenderRows?: ((event: { source: Grid }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * This event fires before row collapse is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeRowCollapse)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    onBeforeRowCollapse?: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires before row expand is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeRowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    onBeforeRowExpand?: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records to be deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records to be selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells to be selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange?: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The [Panel](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel) instance which contains the editor fields.
     */
    onBeforeStartRowEdit?: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup?: ((event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode?: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit?: ((event: { source: Grid, editorContext: GridLocation, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated?: (() => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    onCellMenuBeforeShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    onCellMenuItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    onCellMenuShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered cell
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseEnter?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the cell that the mouse left
     * @param {Grid.column.Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseLeave?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been collapsed.
     */
    onCollapseNode?: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag?: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart?: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop?: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired after a resize gesture is completed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The resized column
     * @param {Event} event.domEvent The browser event
     */
    onColumnResize?: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event is fired when a column resize gesture starts.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    onColumnResizeStart?: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     */
    onContextMenuItem?: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem?: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy?: ((event: { source: Grid, cells: GridLocation[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-dataChange)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owning grid
     * @param {Core.data.Store} event.store The originating store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange?: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source
     * @param {GridLocationConfig[],Grid.util.GridLocation[]} event.selectedCells The cells that is currently being dragged over
     * @param {Core.data.Model[]} event.selectedRecords The records that is currently being dragged over
     */
    onDragSelecting?: ((event: { source: Grid, selectedCells: GridLocationConfig[]|GridLocation[], selectedRecords: Model[] }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been expanded.
     */
    onExpandNode?: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop?: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the
     * drag operation from applying data changes.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleBeforeDragFinalize?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired while dragging the FillHandle.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDrag?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when a FillHandle drag operation is aborted.
     */
    onFillHandleDragAbort?: (() => void)|string
    /**
     * Fired after a FillHandle drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDragEnd?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when dragging of the FillHandle starts.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDragStart?: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit?: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-finishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record that has been edited
     */
    onFinishRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    onGridRowBeforeDragStart?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDragAbort?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    onGridRowDragStart?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Grid.column.Column} event.column The column clicked on.
     */
    onHeaderClick?: ((event: { domEvent: Event, column: Column }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    onHeaderMenuBeforeShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     */
    onHeaderMenuItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    onHeaderMenuShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when row locking is enabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The created clone
     */
    onLockRows?: ((event: { clone: GridBase }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut?: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver?: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Core.data.Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste?: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: GridLocation, entityName: string }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport?: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this AgendaView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.AgendaView} event.source The triggering instance.
     */
    onRefresh?: ((event: { source: AgendaView }) => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row that has been rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow?: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    onRenderRows?: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive?: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * This event fires when a row has finished collapsing.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    onRowCollapse?: ((event: { record: Model }) => void)|string
    /**
     * This event fires when a row expand has finished expanding.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-rowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     * @param {object} event.expandedElements An object with the Grid region name as property and the expanded body element as value
     * @param {Core.widget.Widget} event.widget In case of expanding a Widget, this will be a reference to the instance created by the actual expansion. If there is multiple Grid regions, use the `widgets` param instead.
     * @param {object} event.widgets In case of expanding a Widget, this will be an object with the Grid region name as property and the reference to the widget instance created by the actual expansion
     */
    onRowExpand?: ((event: { record: Model, expandedElements: object, widget: Widget, widgets: object }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered row
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseEnter?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseLeave?: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll?: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select','deselect'} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the new selection.
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange?: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/calendar/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange?: ((event: { selectionMode: object }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {Grid.view.GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal','vertical','both'} event.options.direction The direction of the split
     * @param {Grid.column.Column} event.options.atColumn The column to split at
     * @param {Core.data.Model} event.options.atRecord The record to split at
     */
    onSplit?: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterExpandClick?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit?: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     */
    onStartRowEdit?: ((event: { source: Grid, editorContext: { editor: Panel, column: Column, record: Model, cell: HTMLElement } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse?: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand?: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fired when one or more groups are expanded or collapsed
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {boolean} event.allRecords True if this event is part of toggling all groups
     */
    onToggleGroup?: ((event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, allRecords?: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode?: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fired when the date header stuck at the top of the view changes.
     * @param {object} event Event object
     * @param {Date} event.date The date which is at the top of the view
     */
    onTopDateChange?: ((event: { date: Date }) => void)|string
    /**
     * Fires when row locking is disabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The locked clone that will be destroyed
     */
    onUnlockRows?: ((event: { clone: GridBase }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit?: (() => void)|string
}

/**
 * This is normally used as a [mode](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes) of a Calendar (as seen in the live
 * demo below) but may be used standalone as a regular Widget.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView)
 */
export class AgendaView extends EventList {
    /**
     * Identifies an object as an instance of [AgendaView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView) class, or subclass thereof.
     */
    static readonly isAgendaView: boolean
    /**
     * If no dates in the view's configured date range contain events, then by default, no date cells are rendered.
     */
    alwaysShowCurrentDate: boolean
    /**
     * A callback function, or the name of a function in the ownership hierarchy which an
     * application may provide to filter out agenda rows for individual dates.
     */
    dateFilter: ((context: DayCell) => boolean)|string
    /**
     * Identifies an object as an instance of [AgendaView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView) class, or subclass thereof.
     */
    readonly isAgendaView: boolean
    /**
     * This view lines up the textual content of event bars by shifting event bars of
     * events which start before the bar's cell leftwards by the arrow width.
     */
    offsetStartsBeforeEvents: boolean
    /**
     * Returns the resource associated with this agenda view when used inside a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     */
    readonly resource: ResourceModel
    /**
     * The "Settings" button which is a floating button which offers the Agenda [range selection menu](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#property-listRangeMenu)
     */
    settingsButton: ButtonConfig|Button
    /**
     * By default, only cells for days which contain events are shown.
     */
    showEmptyDates: boolean
    /**
     * An object containing Features
     */
    features: AgendaViewFeaturesType
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records to be deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records to be selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells to be selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated: (() => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered cell
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the cell that the mouse left
     * @param {Grid.column.Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseLeave: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source
     * @param {GridLocationConfig[],Grid.util.GridLocation[]} event.selectedCells The cells that is currently being dragged over
     * @param {Core.data.Model[]} event.selectedRecords The records that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: GridLocationConfig[]|GridLocation[], selectedRecords: Model[] }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Grid.column.Column} event.column The column clicked on.
     */
    onHeaderClick: ((event: { domEvent: Event, column: Column }) => Promise<boolean>|boolean|void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires when this AgendaView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.AgendaView} event.source The triggering instance.
     */
    onRefresh: ((event: { source: AgendaView }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered row
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseLeave: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select','deselect'} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the new selection.
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/calendar/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange: ((event: { old?: object, new: object }) => void)|string
    /**
     * Fired when the date header stuck at the top of the view changes.
     * @param {object} event Event object
     * @param {Date} event.date The date which is at the top of the view
     */
    onTopDateChange: ((event: { date: Date }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {AgendaViewConfig} config
     */
    constructor(config?: AgendaViewConfig);
}

/**
 * Type with available listeners functions for [CalendarDatePicker](https://bryntum.com/products/grid/docs/api/Calendar/widget/CalendarDatePicker) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type CalendarDatePickerListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fires before this CalendarPanel refreshes in response to changes in its month.
     * @param {object} event Event object
     * @param {Core.widget.DatePicker} event.source This DatePicker.
     */
    beforeRefresh: (event: { source: DatePicker }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fires when the date of this CalendarPanel is set.
     * @param {object} event Event object
     * @param {Date} event.value The new date.
     * @param {Date} event.oldValue The old date.
     * @param {object} event.changes An object which contains properties which indicate what part of the date changed.
     * @param {boolean} event.changes.d True if the date changed in any way.
     * @param {boolean} event.changes.w True if the week changed (including same week in a different year).
     * @param {boolean} event.changes.m True if the month changed (including same month in a different year).
     * @param {boolean} event.changes.y True if the year changed.
     */
    dateChange: (event: { value: Date, oldValue: Date, changes: { d: boolean, w: boolean, m: boolean, y: boolean } }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this CalendarPanel refreshes.
     */
    refresh: () => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Fires when a date or date range is selected. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified,
     * this will fire upon deselection and selection of dates.
     * @param {object} event Event object
     * @param {Date[]} event.selection The selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {Date[]} event.oldSelection The previously selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {boolean} event.userAction This will be `true` if the change was caused by user interaction as opposed to programmatic setting.
     */
    selectionChange: (event: { selection: Date[], oldSelection: Date[], userAction: boolean }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [CalendarDatePicker](https://bryntum.com/products/grid/docs/api/Calendar/widget/CalendarDatePicker) class.
 */
type CalendarDatePickerListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before this CalendarPanel refreshes in response to changes in its month.
     * @param {object} event Event object
     * @param {Core.widget.DatePicker} event.source This DatePicker.
     */
    beforeRefresh?: ((event: { source: DatePicker }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when the date of this CalendarPanel is set.
     * @param {object} event Event object
     * @param {Date} event.value The new date.
     * @param {Date} event.oldValue The old date.
     * @param {object} event.changes An object which contains properties which indicate what part of the date changed.
     * @param {boolean} event.changes.d True if the date changed in any way.
     * @param {boolean} event.changes.w True if the week changed (including same week in a different year).
     * @param {boolean} event.changes.m True if the month changed (including same month in a different year).
     * @param {boolean} event.changes.y True if the year changed.
     */
    dateChange?: ((event: { value: Date, oldValue: Date, changes: { d: boolean, w: boolean, m: boolean, y: boolean } }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this CalendarPanel refreshes.
     */
    refresh?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Fires when a date or date range is selected. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified,
     * this will fire upon deselection and selection of dates.
     * @param {object} event Event object
     * @param {Date[]} event.selection The selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {Date[]} event.oldSelection The previously selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {boolean} event.userAction This will be `true` if the change was caused by user interaction as opposed to programmatic setting.
     */
    selectionChange?: ((event: { selection: Date[], oldSelection: Date[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [CalendarDatePicker](https://bryntum.com/products/grid/docs/api/Calendar/widget/CalendarDatePicker) class.
 */
type CalendarDatePickerConfig = {
    type?: 'datepicker'
    /**
     * The date that the user has navigated to using the UI *prior* to setting the widget's
     * value by selecting. The initial default is today's date. Can also be supplied as a `YYYY-MM-DD` date
     * string.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-activeDate)
     */
    activeDate?: Date|'today'|string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * Update assigned [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord?: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * A function (or the name of a function) which creates content in, and may mutate a day cell element.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cell The header element
     * @param {Date} renderData.date The date for the cell
     * @param {number} renderData.day The day for the cell (`0` to `6` for Sunday to Saturday)
     * @param {number[]} renderData.rowIndex The row index, 0 to month row count (6 if [sixWeeks](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-sixWeeks) is `true`)
     * @param {HTMLElement} renderData.row The row element encapsulating the week which the cell is a part of
     * @param {Core.widget.CalendarPanel} renderData.source The widget being rendered
     * @param {number[]} renderData.cellIndex The cell index in the whole panel. May be from `0` to up to `42`
     * @param {number[]} renderData.columnIndex The column index, `0` to `6`
     * @param {number[]} renderData.visibleColumnIndex The visible column index taking hidden non working days into account
     * @returns {string,DomConfig,void}
     */
    cellRenderer?: ((renderData: { cell: HTMLElement, date: Date, day: number, rowIndex: number[], row: HTMLElement, source: CalendarPanel, cellIndex: number[], columnIndex: number[], visibleColumnIndex: number[] }) => string|DomConfig|void)|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content?: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The initially selected date (or a `YYYY-MM-DD` date string).
     */
    date?: Date|string
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names.
     */
    dayNameFormat?: string
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * Configure as `true` to render non working days as [disabledDates](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-disabledDates).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-disableNonWorkingDays)
     */
    disableNonWorkingDays?: boolean
    /**
     * Configure this as true to disable pointer interaction with cells which are outside the
     * range of the current month.
     */
    disableOtherMonthCells?: boolean
    /**
     * Configure as `true` to render Saturdays and Sundays as [disabledDates](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-disabledDates).
     */
    disableWeekends?: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * The class name to add to disabled calendar cells.
     */
    disabledCls?: string
    /**
     * Either an array of `Date` objects which are to be disabled (or date strings), or
     * a function (or the name of a function), which, when passed a `Date` returns `true` if the
     * date is disabled.
     * @param {Date} date Date to check
     * @returns {boolean} Returns `true` if the provided date is disabled
     */
    disabledDates?: ((date: Date) => boolean)|string|Date[]|string[]
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * By default, the month and year are editable. Configure this as `false` to prevent that.
     */
    editMonth?: boolean
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is <strong>not</strong> `'count'`, setting this to
     * `true` means that a tooltip containing the event count will be shown on hover of
     * a day cell.
     */
    eventCountTip?: boolean
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is `'dots'`, this controls the layout of the dots
     * below the day number.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventDots)
     */
    eventDots?: {
        marginTop?: number
        max?: number
        gap?: number
        size?: number
        stripe?: boolean
    }
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventFilter)
     * @param {Scheduler.model.EventModel} event Event for filtering
     * @returns {boolean} Return `true` to include the passed event
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * The [event store](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore) from which the in-cell event presence
     * indicators are drawn.
     */
    eventStore?: EventStore
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * By default, disabled dates cannot be navigated to, and they are skipped over
     * during keyboard navigation. Configure this as `true` to enable navigation to
     * disabled dates.
     */
    focusDisabledDates?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * A function (or the name of a function) which creates content in, and may mutate a day header element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-headerRenderer)
     * @param {HTMLElement} cell The header element
     * @param {number} columnIndex The day column. Will be in the range `0` to `6`
     * @param {number} weekDay The canonical day number where Monday is `0` and Sunday is `6`
     * @returns {string,DomConfig,void}
     */
    headerRenderer?: ((cell: HTMLElement, columnIndex: number, weekDay: number) => string|DomConfig|void)|string
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Configure this as `true` to hide cells which are outside the range of the current month.
     */
    hideOtherMonthCells?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * Configure as `true` to add a highlighted border and background to the week row which
     * encapsulates the selected date.
     */
    highlightSelectedWeek?: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-html)
     * @param {Core.widget.Widget} widget The calling Widget
     * @returns {string}
     */
    html?: string|((widget: Widget) => string)|DomConfig|DomConfig[]|VueConfig
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls?: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * By default, the year is visible. Configure this as `false` to prevent that.
     */
    includeYear?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-listeners)
     */
    listeners?: CalendarDatePickerListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum selectable date. Selection of and navigation to dates after
     * this date will not be possible.
     */
    maxDate?: Date
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is `'dots'`, this is the maximum number of dots to show
     * below the date number in the cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-maxDots)
     * @deprecated 6.1.2 Use [eventDots](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#property-eventDots) instead.
     */
    maxDots?: number
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * By default, day cells flex to share available Panel width equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-minColumnWidth)
     */
    minColumnWidth?: number
    /**
     * The minimum selectable date. Selection of and navigation to dates prior
     * to this date will not be possible.
     */
    minDate?: Date
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * By default, week rows flex to share available Panel height equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-minRowHeight)
     */
    minRowHeight?: number|string
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * A [Month](https://bryntum.com/products/calendar/docs/api/Core/util/Month) Month utility object which encapsulates this Panel's month
     * and provides contextual information and navigation services.
     */
    month?: Month|MonthConfig
    /**
     * Configure as `true` to enable selecting multiple discontiguous date ranges using
     * click and Shift+click to create ranges and Ctrl+click to select/deselect individual dates.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-multiSelect)
     */
    multiSelect?: boolean|'range'|'simple'
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * The class name to add to calendar cells which are [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-nonWorkingDays).
     */
    nonWorkingDayCls?: string
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * The class name to add to calendar cells which are in the previous or next month.
     */
    otherMonthCls?: string
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-owner)
     */
    owner?: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-readOnly)
     */
    readOnly?: boolean
    /**
     * [Record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-record)
     */
    record?: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ref)
     */
    ref?: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is configured as `true`, this is an array of dates
     * which are selected. There may be multiple, discontiguous date ranges.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-selection)
     */
    selection?: Date[]|string[]
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * How to show presence of events in the configured [eventStore](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventStore) in the
     * day cells. Values may be:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents)
     */
    showEvents?: boolean|'count'|'dots'|'heatmap'
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * Configure as `true` to show a week number column at the start of the calendar block.
     */
    showWeekColumn?: boolean
    /**
     * Configure as `true` to always show a six-week calendar.
     */
    sixWeeks?: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-textContent)
     */
    textContent?: boolean
    /**
     * A config object to create a tooltip which will show on hover of a date cell including disabled, weekend,
     * and "other month" cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tip)
     */
    tip?: TooltipConfig
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-title)
     */
    title?: string
    /**
     * The class name to add to the calendar cell which contains today's date.
     */
    todayCls?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-weekRenderer)
     * @param {HTMLElement} weekCell The header element
     * @param {number[]} week An array containing `[year, weekNumber]`
     * @returns {string,DomConfig,void}
     */
    weekRenderer?: ((weekCell: HTMLElement, week: number[]) => string|DomConfig|void)|string
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * The class name to add to calendar cells which are weekend dates.
     */
    weekendCls?: string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-y)
     */
    y?: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before this CalendarPanel refreshes in response to changes in its month.
     * @param {object} event Event object
     * @param {Core.widget.DatePicker} event.source This DatePicker.
     */
    onBeforeRefresh?: ((event: { source: DatePicker }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when the date of this CalendarPanel is set.
     * @param {object} event Event object
     * @param {Date} event.value The new date.
     * @param {Date} event.oldValue The old date.
     * @param {object} event.changes An object which contains properties which indicate what part of the date changed.
     * @param {boolean} event.changes.d True if the date changed in any way.
     * @param {boolean} event.changes.w True if the week changed (including same week in a different year).
     * @param {boolean} event.changes.m True if the month changed (including same month in a different year).
     * @param {boolean} event.changes.y True if the year changed.
     */
    onDateChange?: ((event: { value: Date, oldValue: Date, changes: { d: boolean, w: boolean, m: boolean, y: boolean } }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this CalendarPanel refreshes.
     */
    onRefresh?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Fires when a date or date range is selected. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified,
     * this will fire upon deselection and selection of dates.
     * @param {object} event Event object
     * @param {Date[]} event.selection The selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {Date[]} event.oldSelection The previously selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {boolean} event.userAction This will be `true` if the change was caused by user interaction as opposed to programmatic setting.
     */
    onSelectionChange?: ((event: { selection: Date[], oldSelection: Date[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * A subclass of [DatePicker](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker) which is able to show the presence of
 * events in its cells if contained in a Calendar, and [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is set
 * to a truthy value.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker)
 */
export class CalendarDatePicker extends SchedulerDatePicker {
    /**
     * Identifies an object as an instance of [CalendarDatePicker](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker) class, or subclass thereof.
     */
    static readonly isCalendarDatePicker: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    static readonly isEventRenderer: boolean
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is <strong>not</strong> `'count'`, setting this to
     * `true` means that a tooltip containing the event count will be shown on hover of
     * a day cell.
     */
    eventCountTip: boolean
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is `'dots'`, this controls the layout of the dots
     * below the day number.
     */
    eventDots: {
        marginTop?: number
        max?: number
        gap?: number
        size?: number
        stripe?: boolean
    }
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     */
    filterEventResources: boolean
    /**
     * Identifies an object as an instance of [CalendarDatePicker](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker) class, or subclass thereof.
     */
    readonly isCalendarDatePicker: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    readonly isEventRenderer: boolean
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is `'dots'`, this is the maximum number of dots to show
     * below the date number in the cell.
     * @deprecated 6.1.2 Use [eventDots](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#property-eventDots) instead.
     */
    maxDots: number
    /**
     * How to show presence of events in the configured [eventStore](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventStore) in the
     * day cells. Values may be:
     */
    showEvents: boolean|'count'|'dots'|'heatmap'
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {CalendarDatePickerConfig} config
     */
    constructor(config?: CalendarDatePickerConfig);
    /**
     * This is the standard way to create a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig)
     * element definition object for creating event bars in all view types.
     * @param {object} renderData Context for the event bar config creation.
     * @param {Function} eventRenderer Optionally a function which created content HTML for the event body. Defaults to any [eventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer) configured into this view.
     */
    createEventDomConfig(renderData: {
        eventRecord: EventModel
        minimal: boolean
        date: Date
        eventEndDate?: Date
    }, eventRenderer?: Function): DomConfig;
}

/**
 * Type with available listeners functions for [CalendarRow](https://bryntum.com/products/grid/docs/api/Calendar/widget/CalendarRow) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type CalendarRowListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    beforeShowOverflowPopup: (event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    emptyCellClick: (event: { domEvent: Event, date: Date }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fires when this CalendarRow has completely changed its height.
     * This fires *after* the animation has finished.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     * @param {number} event.oldHeight The old height.
     * @param {number} event.height The new height.
     */
    heightChange: (event: { source: CalendarRow, oldHeight: number, height: number }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange: (event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this CalendarRow refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     */
    refresh: (event: { source: CalendarRow }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange: (event: { old?: object, new: object }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    showOverflowPopup: (event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void
}

/**
 * Type with listeners options for [CalendarRow](https://bryntum.com/products/grid/docs/api/Calendar/widget/CalendarRow) class.
 */
type CalendarRowListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    beforeShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    emptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fires when this CalendarRow has completely changed its height.
     * This fires *after* the animation has finished.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     * @param {number} event.oldHeight The old height.
     * @param {number} event.height The new height.
     */
    heightChange?: ((event: { source: CalendarRow, oldHeight: number, height: number }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this CalendarRow refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     */
    refresh?: ((event: { source: CalendarRow }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    showOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
}

/**
 * Type with configuration options for [CalendarRow](https://bryntum.com/products/grid/docs/api/Calendar/widget/CalendarRow) class.
 */
type CalendarRowConfig = {
    type?: 'calendarrow'
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * Set this to `false` to not use transition for this Widget as it changes height
     */
    animate?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * By default, this widget displays a maximum of [defaultEventRowCount](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-defaultEventRowCount) events
     * before showing overflow indicators, and becoming [expandable](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#function-toggleExpandCollapse).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-autoHeight)
     */
    autoHeight?: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-cls)
     */
    cls?: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The date to orient this view's [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-date)
     */
    date?: Date
    /**
     * A callback function which an application may provide to filter out day columns for
     * individual dates.
     * @param {DayCell} context Information about the day column to be created.
     * @returns {boolean} Return `false` to not display a column for the passed date.
     */
    dateFilter?: ((context: DayCell) => boolean)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names
     * in the header part of each calendar cell.
     */
    dayCellNameFormat?: string
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to sync with a day cell header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-dayHeaderRenderer)
     * @param {DomConfig} headerDomConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to sync the day header element.
     * @param {object} headerDomConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} headerDomConfig.style A CSS style definition object.
     * @param {object} headerDomConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} headerDomConfig.children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions the header content. There will be 2 `children` encapsulating the day name and the date.
     * @param {DayCell} cellData An object that contains data about the cell.
     * @returns {string}
     */
    dayHeaderRenderer?: ((headerDomConfig: { className: object, style: object, dataset: object, children: DomConfig[] }, cellData: DayCell) => string)|string
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string for day names (e.g., "ddd" for "Mon", "Tue", ...)
     */
    dayNameFormat?: string
    /**
     * Specify `true` to textually compress day number pairs. For example, compress "11/12" to "11/2". Also
     * when `true`, the [daySeparator](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-daySeparator) is trimmed of any whitespace.
     */
    dayNumberCompress?: boolean
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string for day numbers (e.g., "D" for "9", "10", ...)
     */
    dayNumberFormat?: string
    /**
     * The separator between day names and numbers. If a single string is provided, it applies to both day
     * names and day numbers. If an array of 2 strings is provided, the [0] element is the separator for day
     * names and [1] element is the separator for day numbers.
     */
    daySeparator?: string|string[]
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start of the first rendered
     * daily time block.
     */
    dayStartShift?: string|number
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * The number of events to show to define the height of this widget by default if this widget
     * [autoHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-autoHeight) is *not* defined as `true`. The widget may be expanded to accommodate all
     * the events if there are overflowing events.
     */
    defaultEventRowCount?: number
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-dragUnit)
     */
    dragUnit?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which will be used to create the content of a clickable
     * element which is present when no events are in a cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-emptyCellRenderer)
     * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.
     * @returns {DomConfig,void} DomConfig object representing the HTML markup
     */
    emptyCellRenderer?: ((dayCellRenderer: { cellData: DayCell }) => DomConfig|void)|object|string
    /**
     * The end date (Time component is zeroed) of this view. Note that in terms of full days,
     * this is exclusive, ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on
     * the 8th.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-endDate)
     */
    endDate?: Date
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * The height of event bars if this view creates event bars.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-eventHeight)
     */
    eventHeight?: number|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing?: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * When `true`, a full week of dates is rendered for a single day range. This should not be applied when
     * the `duration` spans multiple days.
     */
    fullWeek?: boolean
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * How much extra space in pixels or other DOM units to allow below the event bars to
     * facilitate drag-create gestures.
     */
    gutterHeight?: number|string
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Configure this as `true` to hide day columns which contain no events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-hideEmptyDays)
     */
    hideEmptyDays?: boolean
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-listeners)
     */
    listeners?: CalendarRowListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * By default, the day columns flex to all fit within the width of this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-minDayWidth)
     */
    minDayWidth?: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to create the "+n more" button which indicates that a day cell has
     * overflowing events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-overflowButtonRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to create the overflow button.
     * @param {string} domConfig.tag The tag name of the element to create.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {string} domConfig.text The inner content of the element. <strong>Note that this will be HTML encoded for XSS safety</strong>
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {number} overflowCount The number of overflowing events.
     * @returns {DomConfig,string,void}
     */
    overflowButtonRenderer?: (domConfig: { tag: string, className: object, text: string, style: object, dataset: object }, overflowCount: number) => DomConfig|string|void
    /**
     * How the view responds to clicking on a `+n more` button in an overflowing day cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-overflowClickAction)
     */
    overflowClickAction?: 'popup'|'expand'
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that this view
     * may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig
    /**
     * The pointer gesture which shows the popup containing any overflowing events
     * in the current view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-overflowPopupTrigger)
     */
    overflowPopupTrigger?: 'click'|'mouseover'|'hover'
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * The time range around the [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-date) to display events for.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-range)
     */
    range?: string|DurationConfig
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-ref)
     */
    ref?: string
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-shiftIncrement)
     */
    shiftIncrement?: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * The start date (Time component is zeroed) of this view.
     */
    startDate?: Date
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title?: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-ui)
     */
    ui?: string|object
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-y)
     */
    y?: number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onBeforeShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fires when this CalendarRow has completely changed its height.
     * This fires *after* the animation has finished.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     * @param {number} event.oldHeight The old height.
     * @param {number} event.height The new height.
     */
    onHeightChange?: ((event: { source: CalendarRow, oldHeight: number, height: number }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this CalendarRow refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     */
    onRefresh?: ((event: { source: CalendarRow }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
}

/**
 * This is normally used as the "All day events" section of a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView) or
 * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView). But it may be used standalone as a regular Widget.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow)
 */
export class CalendarRow extends Widget {
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    static readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow) class, or subclass thereof.
     */
    static readonly isCalendarRow: boolean
    /**
     * Identifies an object as an instance of [DateRangeOwner](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner) class, or subclass thereof.
     */
    static readonly isDateRangeOwner: boolean
    /**
     * Identifies an object as an instance of [DayCellRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer) class, or subclass thereof.
     */
    static readonly isDayCellRenderer: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    static readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    static readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    static readonly isResponsive: boolean
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     */
    animateTimeShift: boolean
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     */
    autoCreate: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * Setting this property may change the encapsulated range if the date is outside the current
     * range.
     */
    date: Date
    /**
     * A callback function which an application may provide to filter out day columns for
     * individual dates.
     */
    dateFilter: ((context: DayCell) => boolean)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The class name to add to calendar cells.
     */
    dayCellCls: string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     */
    defaultScrollOptions: BryntumScrollOptions
    /**
     * The textual description generated by the [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) if present, or by the
     * view's date (or date *range* if it has a range) and the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    readonly description: string
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     */
    dragUnit: string
    /**
     * The duration in total days that this view covers.
     */
    readonly duration: number
    /**
     * Gets the end date of the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) that this view covers.
     * Note that Date objects are time points, not a representation of a 24 hour period,
     * So `{startDate : '2020-10-24', endDate : '2020-10-25' }` spans the <strong>single</strong> day
     * 24th October 2020. The end point is `2020-10-25T00:00:00`
     */
    readonly endDate: Date
    /**
     * The number of <strong>visible</strong> events that this view currently displays in its date range.
     */
    readonly eventCount: number
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     */
    extendAllDayEndDay: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     */
    filterEventResources: boolean
    /**
     * The first *visible* event-bearing element in this view. So if the first day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * cell will be for the Monday.
     */
    firstVisibleCell: HTMLElement
    /**
     * The date of the first *visible* event-bearing element in this view. So if the first day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * date will be the date of the Monday.
     */
    firstVisibleDate: Date
    /**
     * Yields the default description value as calculated using the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#property-dateFormat) which
     * describes this object if no [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) was provided.
     */
    readonly formattedDescription: string
    /**
     * When `true`, a full week of dates is rendered for a single day range. This should not be applied when
     * the `duration` spans multiple days.
     */
    fullWeek: boolean
    /**
     * A Promise which will be in *Pending* state only when the `minHeight` is animating to a new value.
     */
    heightAnimation: Promise<any>
    /**
     * Configure this as `true` to hide day columns which contain no events.
     */
    hideEmptyDays: boolean
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays: boolean
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow) class, or subclass thereof.
     */
    readonly isCalendarRow: boolean
    /**
     * Identifies an object as an instance of [DateRangeOwner](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner) class, or subclass thereof.
     */
    readonly isDateRangeOwner: boolean
    /**
     * Identifies an object as an instance of [DayCellRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer) class, or subclass thereof.
     */
    readonly isDayCellRenderer: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    readonly isResponsive: boolean
    /**
     * The last *visible* event-bearing element in this view. So if the last day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * cell will be for the Friday.
     */
    lastVisibleCell: HTMLElement
    /**
     * The date of the last *visible* event-bearing element in this view. So if the last day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * date will be the date of the Friday.
     */
    lastVisibleDate: Date
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate: Date
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate: Date
    /**
     * Calendar mode that this view represents (eg. "day", "month" etc). Only accessible when used within a Calendar.
     */
    readonly modeName: string
    /**
     * The [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) instance that this view may show when events
     * for one day overflow the available space.
     */
    readonly overflowPopup: OverflowPopup
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     */
    pastEventCls: string
    /**
     * The time range encapsulated by the current [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-date).
     */
    range: string|DurationConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     */
    shiftIncrement: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat: string
    /**
     * Gets the start date of the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) that this view covers.
     */
    readonly startDate: Date
    /**
     * A String which describes how much the [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-next) and [previous](#Calendar/widget/mixin/CalendarMixin#function-previous)
     * methods will move this view forwards or backwards in time.
     */
    readonly stepUnit: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     */
    syncCalendarDate: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     */
    syncViewDate: boolean
    /**
     * This property yields the base selector to use to find visible cell elements in this view.
     */
    readonly visibleCellSelector: string
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onBeforeShowOverflowPopup: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when this CalendarRow has completely changed its height.
     * This fires *after* the animation has finished.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     * @param {number} event.oldHeight The old height.
     * @param {number} event.height The new height.
     */
    onHeightChange: ((event: { source: CalendarRow, oldHeight: number, height: number }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires when this CalendarRow refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     */
    onRefresh: ((event: { source: CalendarRow }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange: ((event: { old?: object, new: object }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onShowOverflowPopup: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {CalendarRowConfig} config
     */
    constructor(config?: CalendarRowConfig);
    /**
     * Determines what is under the cursor of the specified event or what is described by the given element.
     * @param {Event,Element} domEvent The event or element
     */
    calendarHitTest(domEvent: Event|Element): CalendarHit;
    /**
     * Creates an event on the specified date which conforms to this view's [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)
     * setting.
     * @param {Date} date The date to add the event at. If there's no time component, the [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)'s `startHour` will be used.
     */
    createEvent(date: Date): void;
    /**
     * This is the standard way to create a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig)
     * element definition object for creating event bars in all view types.
     * @param {object} renderData Context for the event bar config creation.
     * @param {Function} eventRenderer Optionally a function which created content HTML for the event body. Defaults to any [eventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer) configured into this view.
     */
    createEventDomConfig(renderData: {
        eventRecord: EventModel
        minimal: boolean
        date: Date
        eventEndDate?: Date
    }, eventRenderer?: Function): DomConfig;
    /**
     * Returns the cell associated with the passed date.
     * @param {Date,string} date The date to find the element for or a key in the format `YYYY-MM-DD`
     * @param {boolean} strict Only return the element if this view *owns* the date. (MonthView and YearView)
     */
    getDayElement(date: Date|string, strict: boolean): void;
    /**
     * Returns the outermost element which represents the first block of the passed event in the view. <em>If the
     * event is represented within the view</em>.
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the element for.
     * @param {Date} date Optionally, the event element at the specified date.
     */
    getEventElement(eventRecord: EventModel|string|number, date?: Date): HTMLElement;
    /**
     * Returns all outermost elements which represents the passed event in the view. <em>If the
     * event is represented within the view</em>
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the elements for.
     */
    getEventElements(eventRecord: EventModel|string|number): HTMLElement[];
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Returns the resource record for a DOM element or DOM event if the element is inside a view
     * which displays events for one resource such as a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     * or a [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView).
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getResourceRecord(elementOrEvent: HTMLElement|Event): ResourceModel;
    /**
     * Interface method used by an encapsulating Calendar view to implement the "next" button.
     */
    next(): void;
    /**
     * Called when new event is created.
     * Сan be overridden to supply default record values etc.
     * @param {Scheduler.model.EventModel} eventRecord Newly created event
     */
    onEventCreated(eventRecord: EventModel): void;
    /**
     * Interface method used by an encapsulating Calendar view to implement the "prev" button.
     */
    previous(): void;
    /**
     * Refreshes the UI after a change to the EventStore, or to a configuration that requires
     * the UI to change.
     */
    refresh(): void;
    /**
     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when
     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and
     * DOM churn is kept to a minimum.
     */
    refreshSoon(): void;
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    resolveEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Brings an event or a time into view.
     * @param {Scheduler.model.EventModel,Date,number} target The event to scroll to or a `Date` to read the hour value from, or an hour number.
     * @param {BryntumScrollOptions} options How to scroll.
     */
    scrollTo(target: EventModel|Date|number, options?: BryntumScrollOptions): Promise<any>;
    /**
     * If not [autoHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-autoHeight), this toggles between the collapsed state where it shows
     * the [defaultEventRowCount](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-defaultEventRowCount) even if more event rows exist, and the expanded state
     * (which is equivalent to [autoHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-autoHeight)) where all event rows are shown.
     */
    toggleExpandCollapse(): Promise<void>;
}

/**
 * Type with available listeners functions for [DayAgendaView](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayAgendaView) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type DayAgendaViewListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated: () => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated: (event: { events: EventModel[], The: Date }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate: (event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    layoutUpdate: (event: { source: DayView }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange: (event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    refresh: (event: { source: DayView }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange: (event: { old?: object, new: object }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    tickChange: (event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [DayAgendaView](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayAgendaView) class.
 */
type DayAgendaViewListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    layoutUpdate?: ((event: { source: DayView }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    refresh?: ((event: { source: DayView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    tickChange?: ((event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [DayAgendaView](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayAgendaView) class.
 */
type DayAgendaViewConfig = {
    type?: 'dayagenda'
    /**
     * An object or an array of button specifications which add clickable icon buttons to
     * the rendered event blocks which contain the following properties.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-actionButtons)
     */
    actionButtons?: ActionButtonsConfig[]|Record<string, ActionButtonsConfig>
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * A [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow) widget containing the horizontal series of calendar cells with the
     * day headers and any all-day, or day-spanning events which fall inside this view's time range.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-allDayEvents)
     */
    allDayEvents?: CalendarRow|CalendarRowConfig|null
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * By default, when mousewheel zooming out from *overflowing* the client height, it is not permitted to zoom
     * further out so that the hours *underflow* the client height.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-allowZoomUnderflow)
     */
    allowZoomUnderflow?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * The color of the borders (if any) between hour rows and day rows.
     */
    borderColor?: string
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * A function, or name of a function which is passed the [DayCell](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-DayCell) object which
     * describes the events and details of the day.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-columnHeaderRenderer)
     * @param {DayCell} cellData A [data block](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-DayCell) describing the date and the events for that date.
     * @returns {string,object}
     */
    columnHeaderRenderer?: ((cellData: DayCell) => string|object)|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * An object containing two properties, `start` and `end` representing the start and
     * end of core working hours.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-coreHours)
     * @param {Date} date Date for hours calculation
     * @returns {object[]}
     */
    coreHours?: object|((date: Date) => object[])|string
    /**
     * A function, or name of a function which produces a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to create the current time indicator
     * which is displayed in a day column which represents the current date. It is the developer's responsibility
     * to add CSS classes and the appropriate CSS rules to produce the desire appearance.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-currentTimeIndicatorRenderer)
     * @returns {DomConfig} An object which describes the DOM structure of the today indicator element.
     */
    currentTimeIndicatorRenderer?: (() => DomConfig)|string
    /**
     * By default, half hour, fifteen minute tick lines are rendered in a lower contrast
     * colour than hour lines.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-dashedSubticks)
     */
    dashedSubticks?: boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The date to orient this view's [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-date)
     */
    date?: Date
    /**
     * A callback function, or the name of a function in the ownership hierarchy which an
     * application may provide to filter out day columns for individual dates.
     * @param {DayCell} context Information about the day column to be created.
     * @returns {boolean} Return `false` to not display a column for the passed date.
     */
    dateFilter?: ((context: DayCell) => boolean)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to sync with a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-dayCellRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to sync the day column element.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions for the events in the day.
     * @param {DayCell} cellData An object that contains data about the cell.
     * @returns {string}
     */
    dayCellRenderer?: ((domConfig: { className: object, style: object, dataset: object }, children: DomConfig[], cellData: DayCell) => string)|string
    /**
     * Either the end hour of the day, or a *24 hour* `HH:MM` string denoting the end date of the last rendered time block.
     * You can also set this value to a ms timestamp representing time from midnight.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-dayEndTime)
     */
    dayEndTime?: string|number
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to sync with a day cell header <strong>in the all day row</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-dayHeaderRenderer)
     * @param {DomConfig} headerDomConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to sync the day header element.
     * @param {object} headerDomConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} headerDomConfig.style A CSS style definition object.
     * @param {object} headerDomConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} headerDomConfig.children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions the header content. There will be 2 `children` encapsulating the day name and the date.
     * @param {DayCell} cellData An object that contains data about the cell.
     * @returns {string}
     */
    dayHeaderRenderer?: ((headerDomConfig: { className: object, style: object, dataset: object, children: DomConfig[] }, cellData: DayCell) => string)|string
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start time for days. This
     * is midnight by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-dayStartShift)
     */
    dayStartShift?: string|number
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start of the first rendered
     * daily time block. You can also set this value to a ms timestamp representing time from midnight.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-dayStartTime)
     */
    dayStartTime?: string|number
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-dragUnit)
     */
    dragUnit?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * The end date (Time component is zeroed) of this view. Note that in terms of full days,
     * this is exclusive, ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on
     * the 8th.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-endDate)
     */
    endDate?: Date
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * Which direction to flow events in an hour row, vertically (the default), or horizontally.
     */
    eventFlowDirection?: 'column'|'row'
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * How much vertical space to leave between event bars in a cell.
     */
    eventSpacing?: number|string
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * By default, reconfiguring the [startDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-startDate) maintains the current duration
     * of the view and moves the [endDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-endDate).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-fixedDuration)
     */
    fixedDuration?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * How much space to leave empty at the right side of day columns to allow interaction such as
     * double click or drag.
     */
    gutterWidth?: number|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Set this to true to hide the borders between cells.
     */
    hideBorders?: boolean
    /**
     * Configure this as `true` to hide day columns which contain no events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-hideEmptyDays)
     */
    hideEmptyDays?: boolean
    /**
     * Set this to true to hide empty hour rows in this day agenda.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-hideEmptyHours)
     */
    hideEmptyHours?: boolean
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * Set this to true to hide the time cells in the day columns.
     */
    hideTimeAxis?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * The height <strong>in pixels</strong> of an *empty* hour row.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-hourHeight)
     */
    hourHeight?: number
    /**
     * An array which encapsulates a set of [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight) breakpoints which
     * dictate when subticks - intervening time indicators - are introduced into the DayView's
     * time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-hourHeightBreakpoints)
     */
    hourHeightBreakpoints?: number[]
    /**
     * How much vertical whitespace between the hour cells.
     */
    hourSpacing?: number|string
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * By default, drag-moving an event allows the drag gesture to move the event into other day columns.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-interDayDrag)
     */
    interDayDrag?: boolean
    /**
     * By default, drag-resizing an event (including creating a new event) allows the drag gesture to span multiple day
     * columns to make the event an inter day event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-interDayResize)
     */
    interDayResize?: boolean
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-listeners)
     */
    listeners?: DayAgendaViewListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum height the all day event row is allowed to grow within this view
     * when it is expanded to show all its "all day" events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-maxAllDayHeight)
     */
    maxAllDayHeight?: number|string
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * The minimum width of a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-minDayWidth)
     */
    minDayWidth?: number|string
    /**
     * The minimum height to which event blocks in a day cell may shrink. If an event has very
     * short duration, whatever the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight), and regardless of
     * [timeline zooming](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#function-zoomTo), the event block will never drop below this height.
     */
    minEventHeight?: number|string
    /**
     * The minimum event width when [eventFlowDirection](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-eventFlowDirection) is `'row'`.
     */
    minEventWidth?: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The minimum height <strong>in pixels</strong> to allow a zoom request to zoom out to.
     */
    minHourHeight?: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when all dates in the range have been filtered out.
     */
    noMatchingDates?: string|DomConfig
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that the
     * [allDayEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-allDayEvents) may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * The time range around the [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-date) to display events for.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-range)
     */
    range?: string|DurationConfig
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-ref)
     */
    ref?: string
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-shiftIncrement)
     */
    shiftIncrement?: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * Shows an all day header above the main schedule for All Day events.
     * Set to `false` to not show all day, or multi-day events in an all day header, but
     * to have them showing wrapping through the day cells.
     */
    showAllDayHeader?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Configure as `false` to hide the start time normally shown at the top of the events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-showTime)
     */
    showTime?: boolean|Record<('startTime'|'endTime'), boolean>
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * Affects drag drop and moving of events with regard to the [increment](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-increment)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate?: boolean
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: boolean
    /**
     * The start date (Time component is zeroed) of this view.
     */
    startDate?: Date
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * By default the hours across a multiple day view may have different heights because of different
     * event loads.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-syncHourHeights)
     */
    syncHourHeights?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * A function, or name of a function which yields a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object to use as a tick background element
     * for the tick context passed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-tickRenderer)
     * @param {object} tickContext An object containing the context for the tick being rendered.
     * @param {Date} tickContext.startTime The start time of the tick.
     * @param {Date} tickContext.endTime The end time of the tick.
     * @param {Scheduler.model.EventModel[]} tickContext.events The events that visually intersect with the tick.
     * @param {number} tickContext.tickIndex The zero-based overall tick index.
     * @param {number} tickContext.subtickIndex The zero-based subtick index *within* the hour.
     * @param {number} tickContext.subtickCount The total number of visible subticks in an hour.
     * @param {Scheduler.model.ResourceModel} tickContext.resourceRecord *If* this view is a resource view, the resource record.
     * @returns {DomConfig} The DOM config object to use for the tick.
     */
    tickRenderer?: ((tickContext: { startTime: Date, endTime: Date, events: EventModel[], tickIndex: number, subtickIndex: number, subtickCount: number, resourceRecord: ResourceModel }) => DomConfig)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in the
     * time axis at the left side of the view.
     */
    timeAxisTimeFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the initially visible start
     * time of the day. Defaults to 7am.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-visibleStartTime)
     */
    visibleStartTime?: string|number|null
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-y)
     */
    y?: number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    onLayoutUpdate?: ((event: { source: DayView }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    onRefresh?: ((event: { source: DayView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    onTickChange?: ((event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * This is normally used as a [mode](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes) of a Calendar (as seen in the live
 * demo below), but may be used standalone as a regular Widget.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView)
 */
export class DayAgendaView extends DayView {
    /**
     * Identifies an object as an instance of [DayAgendaView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView) class, or subclass thereof.
     */
    static readonly isDayAgendaView: boolean
    /**
     * The color of the borders (if any) between hour rows and day rows.
     */
    borderColor: string
    /**
     * Which direction to flow events in an hour row, vertically (the default), or horizontally.
     */
    eventFlowDirection: 'column'|'row'
    /**
     * How much vertical space to leave between event bars in a cell.
     */
    eventSpacing: number|string
    /**
     * How much space to leave empty at the right side of day columns to allow interaction such as
     * double click or drag.
     */
    gutterWidth: number|string
    /**
     * Set this to true to hide the borders between cells.
     */
    hideBorders: boolean
    /**
     * Set this to true to hide empty hour rows in this day agenda.
     */
    hideEmptyHours: boolean
    /**
     * Set this to true to hide the time cells in the day columns.
     */
    hideTimeAxis: boolean
    /**
     * The height <strong>in pixels</strong> of an *empty* hour row.
     */
    hourHeight: number
    /**
     * How much vertical whitespace between the hour cells.
     */
    hourSpacing: number|string
    /**
     * Identifies an object as an instance of [DayAgendaView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView) class, or subclass thereof.
     */
    readonly isDayAgendaView: boolean
    /**
     * The minimum event width when [eventFlowDirection](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#config-eventFlowDirection) is `'row'`.
     */
    minEventWidth: number|string
    /**
     * By default the hours across a multiple day view may have different heights because of different
     * event loads.
     */
    syncHourHeights: boolean
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated: (() => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayAgendaView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange: ((event: { old?: object, new: object }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {DayAgendaViewConfig} config
     */
    constructor(config?: DayAgendaViewConfig);
}

/**
 * Type with available listeners functions for [DayResourceCalendarRow](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayResourceCalendarRow) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type DayResourceCalendarRowListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    beforeShowOverflowPopup: (event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    emptyCellClick: (event: { domEvent: Event, date: Date }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fires when this CalendarRow has completely changed its height.
     * This fires *after* the animation has finished.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     * @param {number} event.oldHeight The old height.
     * @param {number} event.height The new height.
     */
    heightChange: (event: { source: CalendarRow, oldHeight: number, height: number }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange: (event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this CalendarRow refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     */
    refresh: (event: { source: CalendarRow }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange: (event: { old?: object, new: object }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    showOverflowPopup: (event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void
}

/**
 * Type with listeners options for [DayResourceCalendarRow](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayResourceCalendarRow) class.
 */
type DayResourceCalendarRowListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    beforeShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    emptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fires when this CalendarRow has completely changed its height.
     * This fires *after* the animation has finished.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     * @param {number} event.oldHeight The old height.
     * @param {number} event.height The new height.
     */
    heightChange?: ((event: { source: CalendarRow, oldHeight: number, height: number }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this CalendarRow refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     */
    refresh?: ((event: { source: CalendarRow }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    showOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
}

/**
 * Type with configuration options for [DayResourceCalendarRow](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayResourceCalendarRow) class.
 */
type DayResourceCalendarRowConfig = {
    type?: 'dayresourcecalendarrow'
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * Set this to `false` to not use transition for this Widget as it changes height
     */
    animate?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * By default, this widget displays a maximum of [defaultEventRowCount](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-defaultEventRowCount) events
     * before showing overflow indicators, and becoming [expandable](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#function-toggleExpandCollapse).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-autoHeight)
     */
    autoHeight?: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-cls)
     */
    cls?: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The date to orient this view's [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-date)
     */
    date?: Date
    /**
     * A callback function which an application may provide to filter out day columns for
     * individual dates.
     * @param {DayCell} context Information about the day column to be created.
     * @returns {boolean} Return `false` to not display a column for the passed date.
     */
    dateFilter?: ((context: DayCell) => boolean)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names
     * in the header part of each calendar cell.
     */
    dayCellNameFormat?: string
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to sync with a day cell header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-dayHeaderRenderer)
     * @param {DomConfig} headerDomConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to sync the day header element.
     * @param {object} headerDomConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} headerDomConfig.style A CSS style definition object.
     * @param {object} headerDomConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} headerDomConfig.children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions the header content. There will be 2 `children` encapsulating the day name and the date.
     * @param {DayCell} cellData An object that contains data about the cell.
     * @returns {string}
     */
    dayHeaderRenderer?: ((headerDomConfig: { className: object, style: object, dataset: object, children: DomConfig[] }, cellData: DayCell) => string)|string
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string for day names (e.g., "ddd" for "Mon", "Tue", ...)
     */
    dayNameFormat?: string
    /**
     * Specify `true` to textually compress day number pairs. For example, compress "11/12" to "11/2". Also
     * when `true`, the [daySeparator](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-daySeparator) is trimmed of any whitespace.
     */
    dayNumberCompress?: boolean
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string for day numbers (e.g., "D" for "9", "10", ...)
     */
    dayNumberFormat?: string
    /**
     * The separator between day names and numbers. If a single string is provided, it applies to both day
     * names and day numbers. If an array of 2 strings is provided, the [0] element is the separator for day
     * names and [1] element is the separator for day numbers.
     */
    daySeparator?: string|string[]
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start of the first rendered
     * daily time block.
     */
    dayStartShift?: string|number
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * The number of events to show to define the height of this widget by default if this widget
     * [autoHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow#config-autoHeight) is *not* defined as `true`. The widget may be expanded to accommodate all
     * the events if there are overflowing events.
     */
    defaultEventRowCount?: number
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-dragUnit)
     */
    dragUnit?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which will be used to create the content of a clickable
     * element which is present when no events are in a cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-emptyCellRenderer)
     * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.
     * @returns {DomConfig,void} DomConfig object representing the HTML markup
     */
    emptyCellRenderer?: ((dayCellRenderer: { cellData: DayCell }) => DomConfig|void)|object|string
    /**
     * The end date (Time component is zeroed) of this view. Note that in terms of full days,
     * this is exclusive, ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on
     * the 8th.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-endDate)
     */
    endDate?: Date
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * The height of event bars if this view creates event bars.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-eventHeight)
     */
    eventHeight?: number|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing?: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * When `true`, a full week of dates is rendered for a single day range. This should not be applied when
     * the `duration` spans multiple days.
     */
    fullWeek?: boolean
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * How much extra space in pixels or other DOM units to allow below the event bars to
     * facilitate drag-create gestures.
     */
    gutterHeight?: number|string
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Configure this as `true` to hide day columns which contain no events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-hideEmptyDays)
     */
    hideEmptyDays?: boolean
    /**
     * Configure this as `true` to hide resource columns which contain no events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-hideEmptyResources)
     */
    hideEmptyResources?: boolean
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-listeners)
     */
    listeners?: DayResourceCalendarRowListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * By default, the day columns flex to all fit within the width of this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-minDayWidth)
     */
    minDayWidth?: number
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to create the "+n more" button which indicates that a day cell has
     * overflowing events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-overflowButtonRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to create the overflow button.
     * @param {string} domConfig.tag The tag name of the element to create.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {string} domConfig.text The inner content of the element. <strong>Note that this will be HTML encoded for XSS safety</strong>
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {number} overflowCount The number of overflowing events.
     * @returns {DomConfig,string,void}
     */
    overflowButtonRenderer?: (domConfig: { tag: string, className: object, text: string, style: object, dataset: object }, overflowCount: number) => DomConfig|string|void
    /**
     * How the view responds to clicking on a `+n more` button in an overflowing day cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-overflowClickAction)
     */
    overflowClickAction?: 'popup'|'expand'
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that this view
     * may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig
    /**
     * The pointer gesture which shows the popup containing any overflowing events
     * in the current view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-overflowPopupTrigger)
     */
    overflowPopupTrigger?: 'click'|'mouseover'|'hover'
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * The time range around the [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-date) to display events for.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-range)
     */
    range?: string|DurationConfig
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-ref)
     */
    ref?: string
    /**
     * A callback function which an application may provide to filter out resource columns for
     * particular dates.
     * @param {DayCell} context Information about the day column to be created.
     * @returns {boolean} Return `false` to not display a column for the passed resource at the passed date.
     */
    resourceDateFilter?: ((context: DayCell) => boolean)|string
    /**
     * A function, or name of a function which renders extra content below the resource avatar/name.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-resourceHeaderExtraRenderer)
     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record
     * @param {Scheduler.model.EventModel[]} eventRecords The events for the passed resource for the date column.
     * @param {DayCell} cellData An object that contains data about the cell
     * @param {Scheduler.model.EventModel[]} cellData.resourceDayEvents The events for the passed resource for the day column
     * @returns {string}
     */
    resourceHeaderExtraRenderer?: ((resourceRecord: ResourceModel, eventRecords: EventModel[], cellData: { resourceDayEvents: EventModel[] }) => string)|string
    /**
     * A function, or name of a function which lets you fully replace the HTML shown in the resource header.
     * By default, a resource avatar and the resource name is shown.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-resourceHeaderRenderer)
     * @param {Scheduler.model.ResourceModel} options.resourceRecord The resource record
     * @param {DayCell} cellData An object that contains data about the cell
     * @param {Scheduler.model.EventModel[]} cellData.resourceDayEvents The events for the passed resource for the day column
     * @returns {string}
     */
    resourceHeaderRenderer?: ((options: { resourceRecord: ResourceModel }, cellData: { resourceDayEvents: EventModel[] }) => string)|string
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-shiftIncrement)
     */
    shiftIncrement?: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * Configure as `true` to show avatars of the resources (calendars) alongside
     * resource names in resource column headers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-showHeaderAvatars)
     */
    showHeaderAvatars?: boolean|'last'
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * The start date (Time component is zeroed) of this view.
     */
    startDate?: Date
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title?: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-ui)
     */
    ui?: string|object
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#config-y)
     */
    y?: number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onBeforeShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fires when this CalendarRow has completely changed its height.
     * This fires *after* the animation has finished.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     * @param {number} event.oldHeight The old height.
     * @param {number} event.height The new height.
     */
    onHeightChange?: ((event: { source: CalendarRow, oldHeight: number, height: number }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this CalendarRow refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.CalendarRow} event.source The triggering instance.
     */
    onRefresh?: ((event: { source: CalendarRow }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
}

/**
 * This is normally used as the "All day events" section of a [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView).
 * It is not designed to be used standalone as a regular Widget.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow)
 */
export class DayResourceCalendarRow extends CalendarRow {
    /**
     * Identifies an object as an instance of [DayResourceCalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow) class, or subclass thereof.
     */
    static readonly isDayResourceCalendarRow: boolean
    /**
     * Configure this as `true` to hide resource columns which contain no events.
     */
    hideEmptyResources: boolean
    /**
     * Identifies an object as an instance of [DayResourceCalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow) class, or subclass thereof.
     */
    readonly isDayResourceCalendarRow: boolean
    /**
     * A callback function which an application may provide to filter out resource columns for
     * particular dates.
     */
    resourceDateFilter: ((context: DayCell) => boolean)|string
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onBeforeShowOverflowPopup: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceCalendarRow#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange: ((event: { old?: object, new: object }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onShowOverflowPopup: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {DayResourceCalendarRowConfig} config
     */
    constructor(config?: DayResourceCalendarRowConfig);
}

/**
 * Type with available listeners functions for [DayResourceView](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayResourceView) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type DayResourceViewListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated: () => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated: (event: { events: EventModel[], The: Date }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate: (event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    layoutUpdate: (event: { source: DayView }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange: (event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    refresh: (event: { source: DayView }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange: (event: { old?: object, new: object }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    tickChange: (event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [DayResourceView](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayResourceView) class.
 */
type DayResourceViewListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    layoutUpdate?: ((event: { source: DayView }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    refresh?: ((event: { source: DayView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    tickChange?: ((event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [DayResourceView](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayResourceView) class.
 */
type DayResourceViewConfig = {
    type?: 'dayresource'
    /**
     * An object or an array of button specifications which add clickable icon buttons to
     * the rendered event blocks which contain the following properties.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-actionButtons)
     */
    actionButtons?: ActionButtonsConfig[]|Record<string, ActionButtonsConfig>
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * A [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow) widget containing the horizontal series of calendar cells with the
     * day headers and any all-day, or day-spanning events which fall inside this view's time range.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-allDayEvents)
     */
    allDayEvents?: CalendarRow|CalendarRowConfig|null
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * By default, when mousewheel zooming out from *overflowing* the client height, it is not permitted to zoom
     * further out so that the hours *underflow* the client height.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-allowZoomUnderflow)
     */
    allowZoomUnderflow?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * A function, or name of a function which is passed the [DayCell](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-DayCell) object which
     * describes the events and details of the day.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-columnHeaderRenderer)
     * @param {DayCell} cellData A [data block](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-DayCell) describing the date and the events for that date.
     * @returns {string,object}
     */
    columnHeaderRenderer?: ((cellData: DayCell) => string|object)|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * An object containing two properties, `start` and `end` representing the start and
     * end of core working hours.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-coreHours)
     * @param {Date} date Date for hours calculation
     * @returns {object[]}
     */
    coreHours?: object|((date: Date) => object[])|string
    /**
     * A function, or name of a function which produces a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to create the current time indicator
     * which is displayed in a day column which represents the current date. It is the developer's responsibility
     * to add CSS classes and the appropriate CSS rules to produce the desire appearance.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-currentTimeIndicatorRenderer)
     * @returns {DomConfig} An object which describes the DOM structure of the today indicator element.
     */
    currentTimeIndicatorRenderer?: (() => DomConfig)|string
    /**
     * By default, half hour, fifteen minute tick lines are rendered in a lower contrast
     * colour than hour lines.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-dashedSubticks)
     */
    dashedSubticks?: boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The date to orient this view's [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-date)
     */
    date?: Date
    /**
     * A callback function, or the name of a function in the ownership hierarchy which an
     * application may provide to filter out day columns for individual dates.
     * @param {DayCell} context Information about the day column to be created.
     * @returns {boolean} Return `false` to not display a column for the passed date.
     */
    dateFilter?: ((context: DayCell) => boolean)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to sync with a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-dayCellRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to sync the day column element.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions for the events in the day.
     * @param {DayCell} cellData An object that contains data about the cell.
     * @returns {string}
     */
    dayCellRenderer?: ((domConfig: { className: object, style: object, dataset: object }, children: DomConfig[], cellData: DayCell) => string)|string
    /**
     * Either the end hour of the day, or a *24 hour* `HH:MM` string denoting the end date of the last rendered time block.
     * You can also set this value to a ms timestamp representing time from midnight.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-dayEndTime)
     */
    dayEndTime?: string|number
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to sync with a day cell header <strong>in the all day row</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-dayHeaderRenderer)
     * @param {DomConfig} headerDomConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to sync the day header element.
     * @param {object} headerDomConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} headerDomConfig.style A CSS style definition object.
     * @param {object} headerDomConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} headerDomConfig.children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions the header content. There will be 2 `children` encapsulating the day name and the date.
     * @param {DayCell} cellData An object that contains data about the cell.
     * @returns {string}
     */
    dayHeaderRenderer?: ((headerDomConfig: { className: object, style: object, dataset: object, children: DomConfig[] }, cellData: DayCell) => string)|string
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start time for days. This
     * is midnight by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-dayStartShift)
     */
    dayStartShift?: string|number
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start of the first rendered
     * daily time block. You can also set this value to a ms timestamp representing time from midnight.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-dayStartTime)
     */
    dayStartTime?: string|number
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-dragUnit)
     */
    dragUnit?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * The end date (Time component is zeroed) of this view. Note that in terms of full days,
     * this is exclusive, ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on
     * the 8th.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-endDate)
     */
    endDate?: Date
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * Configuration to manage event layout class.
     * See [FluidDayLayout](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout) class docs to see all possible configurations.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-eventLayout)
     */
    eventLayout?: FluidDayLayoutConfig
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * Number of pixels to reduce the height of events by, to leave a gap between them.
     */
    eventSpacing?: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When set to `true`, the hours in the day will be sized so that they fit in the available
     * height.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-fitHours)
     */
    fitHours?: boolean|object
    /**
     * By default, reconfiguring the [startDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-startDate) maintains the current duration
     * of the view and moves the [endDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-endDate).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-fixedDuration)
     */
    fixedDuration?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Configure this as `true` to hide day columns which contain no events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-hideEmptyDays)
     */
    hideEmptyDays?: boolean
    /**
     * Configure this as `true` to hide resource columns which contain no events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-hideEmptyResources)
     */
    hideEmptyResources?: boolean
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * By default, when a resource leaf column drops to below 100 pixels wide, the resource avatar
     * hides.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-hideResourceNameWhenNarrow)
     */
    hideResourceNameWhenNarrow?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * The height <strong>in pixels</strong> of one hour cell in a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-hourHeight)
     */
    hourHeight?: number
    /**
     * An array which encapsulates a set of [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight) breakpoints which
     * dictate when subticks - intervening time indicators - are introduced into the DayView's
     * time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-hourHeightBreakpoints)
     */
    hourHeightBreakpoints?: number[]
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * A millisecond value to which to snap pointer times when clicking or dragging within a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-increment)
     */
    increment?: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * By default, drag-moving an event allows the drag gesture to move the event into other day columns.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-interDayDrag)
     */
    interDayDrag?: boolean
    /**
     * By default, drag-resizing an event (including creating a new event) allows the drag gesture to span multiple day
     * columns to make the event an inter day event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-interDayResize)
     */
    interDayResize?: boolean
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-listeners)
     */
    listeners?: DayResourceViewListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum height the all day event row is allowed to grow within this view
     * when it is expanded to show all its "all day" events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-maxAllDayHeight)
     */
    maxAllDayHeight?: number|string
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * The minimum width of a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-minDayWidth)
     */
    minDayWidth?: number|string
    /**
     * The minimum height to which event blocks in a day cell may shrink. If an event has very
     * short duration, whatever the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight), and regardless of
     * [timeline zooming](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#function-zoomTo), the event block will never drop below this height.
     */
    minEventHeight?: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The minimum height <strong>in pixels</strong> to allow a zoom request to zoom out to.
     */
    minHourHeight?: number
    /**
     * The minimum width of a resource column. This must be a non-zero value to ensure that space
     * is allocated even when there are many resources and a narrow viewport.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-minResourceWidth)
     */
    minResourceWidth?: number|string
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when all dates in the range have been filtered out.
     */
    noMatchingDates?: string|DomConfig
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that the
     * [allDayEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-allDayEvents) may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * The time range around the [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-date) to display events for.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-range)
     */
    range?: string|DurationConfig
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-ref)
     */
    ref?: string
    /**
     * A callback function which an application may provide to filter out resource columns for
     * particular dates.
     * @param {DayCell} context Information about the day column to be created.
     * @returns {boolean} Return `false` to not display a column for the passed resource at the passed date.
     */
    resourceDateFilter?: ((context: DayCell) => boolean)|string
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-shiftIncrement)
     */
    shiftIncrement?: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * Shows an all day header above the main schedule for All Day events.
     * Set to `false` to not show all day, or multi-day events in an all day header, but
     * to have them showing wrapping through the day cells.
     */
    showAllDayHeader?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * By default, resource avatars are shown in the resource header if there is horizontal space.
     * Configure this as `false` to inhibit this.
     */
    showAvatars?: boolean
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * By default <b>today's</b> date shows a current time line to indicate the current time. This
     * line is confined to the day cell for <b>today</b>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-showCurrentTime)
     */
    showCurrentTime?: boolean|{
        fullWidth?: boolean
        showTime?: boolean
        onTop?: boolean
    }
    /**
     * Configure as `true` to show avatars of the resources (calendars) alongside
     * resource names in resource column headers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-showHeaderAvatars)
     */
    showHeaderAvatars?: boolean|'last'
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Configure as `false` to hide the start time normally shown at the top of the events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-showTime)
     */
    showTime?: boolean|Record<('startTime'|'endTime'), boolean>
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * By default, the most granular time tick level in the DayView's time axis is five minutes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-sixMinuteTicks)
     */
    sixMinuteTicks?: boolean
    /**
     * Affects drag drop and moving of events with regard to the [increment](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-increment)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate?: boolean
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: boolean
    /**
     * The start date (Time component is zeroed) of this view.
     */
    startDate?: Date
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * A function, or name of a function which yields a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object to use as a tick background element
     * for the tick context passed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-tickRenderer)
     * @param {object} tickContext An object containing the context for the tick being rendered.
     * @param {Date} tickContext.startTime The start time of the tick.
     * @param {Date} tickContext.endTime The end time of the tick.
     * @param {Scheduler.model.EventModel[]} tickContext.events The events that visually intersect with the tick.
     * @param {number} tickContext.tickIndex The zero-based overall tick index.
     * @param {number} tickContext.subtickIndex The zero-based subtick index *within* the hour.
     * @param {number} tickContext.subtickCount The total number of visible subticks in an hour.
     * @param {Scheduler.model.ResourceModel} tickContext.resourceRecord *If* this view is a resource view, the resource record.
     * @returns {DomConfig} The DOM config object to use for the tick.
     */
    tickRenderer?: ((tickContext: { startTime: Date, endTime: Date, events: EventModel[], tickIndex: number, subtickIndex: number, subtickCount: number, resourceRecord: ResourceModel }) => DomConfig)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in the
     * time axis at the left side of the view.
     */
    timeAxisTimeFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * The type of rounding to apply when calculating a date from a pointer position in a day
     * column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-timeSnapType)
     */
    timeSnapType?: 'round'|'ceil'|'floor'
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the initially visible start
     * time of the day. Defaults to 7am.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-visibleStartTime)
     */
    visibleStartTime?: string|number|null
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-y)
     */
    y?: number
    /**
     * You can zoom in and out on the time axis using CTRL-key + mouse wheel
     * on mouse-based devices or pinch-zoom on touch devices.
     * See also the [hourHeightBreakpoints](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) config option.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#config-zoomOnMouseWheel)
     */
    zoomOnMouseWheel?: boolean|number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    onLayoutUpdate?: ((event: { source: DayView }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    onRefresh?: ((event: { source: DayView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    onTickChange?: ((event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * A calendar view showing resources grouped by date, it is normally used as a [mode](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes)
 * of a Calendar but may be used standalone as a regular Widget.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView)
 */
export class DayResourceView extends DayView {
    /**
     * Identifies an object as an instance of [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView) class, or subclass thereof.
     */
    static readonly isDayResourceView: boolean
    /**
     * Configure this as `true` to hide resource columns which contain no events.
     */
    hideEmptyResources: boolean
    /**
     * By default, when a resource leaf column drops to below 100 pixels wide, the resource avatar
     * hides.
     */
    hideResourceNameWhenNarrow: boolean
    /**
     * Identifies an object as an instance of [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView) class, or subclass thereof.
     */
    readonly isDayResourceView: boolean
    /**
     * The minimum width of a resource column. This must be a non-zero value to ensure that space
     * is allocated even when there are many resources and a narrow viewport.
     */
    minResourceWidth: number|string
    /**
     * A callback function which an application may provide to filter out resource columns for
     * particular dates.
     */
    resourceDateFilter: ((context: DayCell) => boolean)|string
    /**
     * By default, resource avatars are shown in the resource header if there is horizontal space.
     * Configure this as `false` to inhibit this.
     */
    showAvatars: boolean
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated: (() => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange: ((event: { old?: object, new: object }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {DayResourceViewConfig} config
     */
    constructor(config?: DayResourceViewConfig);
}

/**
 * Type with available listeners functions for [DayView](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayView) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type DayViewListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated: () => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated: (event: { events: EventModel[], The: Date }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate: (event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    layoutUpdate: (event: { source: DayView }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange: (event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    refresh: (event: { source: DayView }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange: (event: { old?: object, new: object }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    tickChange: (event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [DayView](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayView) class.
 */
type DayViewListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    layoutUpdate?: ((event: { source: DayView }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    refresh?: ((event: { source: DayView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    tickChange?: ((event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [DayView](https://bryntum.com/products/grid/docs/api/Calendar/widget/DayView) class.
 */
type DayViewConfig = {
    type?: 'dayview'|'day'
    /**
     * An object or an array of button specifications which add clickable icon buttons to
     * the rendered event blocks which contain the following properties.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-actionButtons)
     */
    actionButtons?: ActionButtonsConfig[]|Record<string, ActionButtonsConfig>
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * A [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow) widget containing the horizontal series of calendar cells with the
     * day headers and any all-day, or day-spanning events which fall inside this view's time range.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-allDayEvents)
     */
    allDayEvents?: CalendarRow|CalendarRowConfig|null
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * By default, when mousewheel zooming out from *overflowing* the client height, it is not permitted to zoom
     * further out so that the hours *underflow* the client height.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-allowZoomUnderflow)
     */
    allowZoomUnderflow?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * A function, or name of a function which is passed the [DayCell](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-DayCell) object which
     * describes the events and details of the day.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-columnHeaderRenderer)
     * @param {DayCell} cellData A [data block](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-DayCell) describing the date and the events for that date.
     * @returns {string,object}
     */
    columnHeaderRenderer?: ((cellData: DayCell) => string|object)|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * An object containing two properties, `start` and `end` representing the start and
     * end of core working hours.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-coreHours)
     * @param {Date} date Date for hours calculation
     * @returns {object[]}
     */
    coreHours?: object|((date: Date) => object[])|string
    /**
     * A function, or name of a function which produces a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to create the current time indicator
     * which is displayed in a day column which represents the current date. It is the developer's responsibility
     * to add CSS classes and the appropriate CSS rules to produce the desire appearance.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-currentTimeIndicatorRenderer)
     * @returns {DomConfig} An object which describes the DOM structure of the today indicator element.
     */
    currentTimeIndicatorRenderer?: (() => DomConfig)|string
    /**
     * By default, half hour, fifteen minute tick lines are rendered in a lower contrast
     * colour than hour lines.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-dashedSubticks)
     */
    dashedSubticks?: boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The date to orient this view's [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-date)
     */
    date?: Date
    /**
     * A callback function, or the name of a function in the ownership hierarchy which an
     * application may provide to filter out day columns for individual dates.
     * @param {DayCell} context Information about the day column to be created.
     * @returns {boolean} Return `false` to not display a column for the passed date.
     */
    dateFilter?: ((context: DayCell) => boolean)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to sync with a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-dayCellRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to sync the day column element.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions for the events in the day.
     * @param {DayCell} cellData An object that contains data about the cell.
     * @returns {string}
     */
    dayCellRenderer?: ((domConfig: { className: object, style: object, dataset: object }, children: DomConfig[], cellData: DayCell) => string)|string
    /**
     * Either the end hour of the day, or a *24 hour* `HH:MM` string denoting the end date of the last rendered time block.
     * You can also set this value to a ms timestamp representing time from midnight.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-dayEndTime)
     */
    dayEndTime?: string|number
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to sync with a day cell header <strong>in the all day row</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-dayHeaderRenderer)
     * @param {DomConfig} headerDomConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to sync the day header element.
     * @param {object} headerDomConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} headerDomConfig.style A CSS style definition object.
     * @param {object} headerDomConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} headerDomConfig.children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions the header content. There will be 2 `children` encapsulating the day name and the date.
     * @param {DayCell} cellData An object that contains data about the cell.
     * @returns {string}
     */
    dayHeaderRenderer?: ((headerDomConfig: { className: object, style: object, dataset: object, children: DomConfig[] }, cellData: DayCell) => string)|string
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start time for days. This
     * is midnight by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-dayStartShift)
     */
    dayStartShift?: string|number
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start of the first rendered
     * daily time block. You can also set this value to a ms timestamp representing time from midnight.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-dayStartTime)
     */
    dayStartTime?: string|number
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-dragUnit)
     */
    dragUnit?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * The end date (Time component is zeroed) of this view. Note that in terms of full days,
     * this is exclusive, ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on
     * the 8th.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-endDate)
     */
    endDate?: Date
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * Configuration to manage event layout class.
     * See [FluidDayLayout](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout) class docs to see all possible configurations.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-eventLayout)
     */
    eventLayout?: FluidDayLayoutConfig
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * Number of pixels to reduce the height of events by, to leave a gap between them.
     */
    eventSpacing?: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When set to `true`, the hours in the day will be sized so that they fit in the available
     * height.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-fitHours)
     */
    fitHours?: boolean|object
    /**
     * By default, reconfiguring the [startDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-startDate) maintains the current duration
     * of the view and moves the [endDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-endDate).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-fixedDuration)
     */
    fixedDuration?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Configure this as `true` to hide day columns which contain no events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hideEmptyDays)
     */
    hideEmptyDays?: boolean
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * The height <strong>in pixels</strong> of one hour cell in a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight)
     */
    hourHeight?: number
    /**
     * An array which encapsulates a set of [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight) breakpoints which
     * dictate when subticks - intervening time indicators - are introduced into the DayView's
     * time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints)
     */
    hourHeightBreakpoints?: number[]
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * A millisecond value to which to snap pointer times when clicking or dragging within a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-increment)
     */
    increment?: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * By default, drag-moving an event allows the drag gesture to move the event into other day columns.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-interDayDrag)
     */
    interDayDrag?: boolean
    /**
     * By default, drag-resizing an event (including creating a new event) allows the drag gesture to span multiple day
     * columns to make the event an inter day event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-interDayResize)
     */
    interDayResize?: boolean
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-listeners)
     */
    listeners?: DayViewListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum height the all day event row is allowed to grow within this view
     * when it is expanded to show all its "all day" events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-maxAllDayHeight)
     */
    maxAllDayHeight?: number|string
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * The minimum width of a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-minDayWidth)
     */
    minDayWidth?: number|string
    /**
     * The minimum height to which event blocks in a day cell may shrink. If an event has very
     * short duration, whatever the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight), and regardless of
     * [timeline zooming](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#function-zoomTo), the event block will never drop below this height.
     */
    minEventHeight?: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The minimum height <strong>in pixels</strong> to allow a zoom request to zoom out to.
     */
    minHourHeight?: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when all dates in the range have been filtered out.
     */
    noMatchingDates?: string|DomConfig
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that the
     * [allDayEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-allDayEvents) may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * The time range around the [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-date) to display events for.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-range)
     */
    range?: string|DurationConfig
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-ref)
     */
    ref?: string
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-shiftIncrement)
     */
    shiftIncrement?: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * Shows an all day header above the main schedule for All Day events.
     * Set to `false` to not show all day, or multi-day events in an all day header, but
     * to have them showing wrapping through the day cells.
     */
    showAllDayHeader?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * By default <b>today's</b> date shows a current time line to indicate the current time. This
     * line is confined to the day cell for <b>today</b>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-showCurrentTime)
     */
    showCurrentTime?: boolean|{
        fullWidth?: boolean
        showTime?: boolean
        onTop?: boolean
    }
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Configure as `false` to hide the start time normally shown at the top of the events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-showTime)
     */
    showTime?: boolean|Record<('startTime'|'endTime'), boolean>
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * By default, the most granular time tick level in the DayView's time axis is five minutes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-sixMinuteTicks)
     */
    sixMinuteTicks?: boolean
    /**
     * Affects drag drop and moving of events with regard to the [increment](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-increment)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate?: boolean
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: boolean
    /**
     * The start date (Time component is zeroed) of this view.
     */
    startDate?: Date
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * A function, or name of a function which yields a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object to use as a tick background element
     * for the tick context passed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-tickRenderer)
     * @param {object} tickContext An object containing the context for the tick being rendered.
     * @param {Date} tickContext.startTime The start time of the tick.
     * @param {Date} tickContext.endTime The end time of the tick.
     * @param {Scheduler.model.EventModel[]} tickContext.events The events that visually intersect with the tick.
     * @param {number} tickContext.tickIndex The zero-based overall tick index.
     * @param {number} tickContext.subtickIndex The zero-based subtick index *within* the hour.
     * @param {number} tickContext.subtickCount The total number of visible subticks in an hour.
     * @param {Scheduler.model.ResourceModel} tickContext.resourceRecord *If* this view is a resource view, the resource record.
     * @returns {DomConfig} The DOM config object to use for the tick.
     */
    tickRenderer?: ((tickContext: { startTime: Date, endTime: Date, events: EventModel[], tickIndex: number, subtickIndex: number, subtickCount: number, resourceRecord: ResourceModel }) => DomConfig)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in the
     * time axis at the left side of the view.
     */
    timeAxisTimeFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * The type of rounding to apply when calculating a date from a pointer position in a day
     * column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-timeSnapType)
     */
    timeSnapType?: 'round'|'ceil'|'floor'
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the initially visible start
     * time of the day. Defaults to 7am.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-visibleStartTime)
     */
    visibleStartTime?: string|number|null
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-y)
     */
    y?: number
    /**
     * You can zoom in and out on the time axis using CTRL-key + mouse wheel
     * on mouse-based devices or pinch-zoom on touch devices.
     * See also the [hourHeightBreakpoints](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) config option.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-zoomOnMouseWheel)
     */
    zoomOnMouseWheel?: boolean|number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    onLayoutUpdate?: ((event: { source: DayView }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    onRefresh?: ((event: { source: DayView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    onTickChange?: ((event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * This is normally used as a [mode](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes) of a Calendar (as seen in the live
 * demo below), but may be used standalone as a regular Widget.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView)
 */
export class DayView extends Panel {
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    static readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [DateRangeOwner](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner) class, or subclass thereof.
     */
    static readonly isDateRangeOwner: boolean
    /**
     * Identifies an object as an instance of [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) class, or subclass thereof.
     */
    static readonly isDayCellCollecter: boolean
    /**
     * Identifies an object as an instance of [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView) class, or subclass thereof.
     */
    static readonly isDayView: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    static readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    static readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    static readonly isResponsive: boolean
    /**
     * If [showAllDayHeader](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-showAllDayHeader) is not set to `false`, then this will be an instance
     * of [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow) which encapsulates the all day events at the top
     * of this view.
     */
    readonly allDayEvents: CalendarRow
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize: boolean
    /**
     * By default, when mousewheel zooming out from *overflowing* the client height, it is not permitted to zoom
     * further out so that the hours *underflow* the client height.
     */
    allowZoomUnderflow: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     */
    animateTimeShift: boolean
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     */
    autoCreate: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * An object containing two properties, `start` and `end` representing the start and
     * end of core working hours.
     */
    coreHours: object|((date: Date) => object[])|string
    /**
     * By default, half hour, fifteen minute tick lines are rendered in a lower contrast
     * colour than hour lines.
     */
    dashedSubticks: boolean
    /**
     * Setting this property may change the encapsulated range if the date is outside the current
     * range.
     */
    date: Date
    /**
     * A callback function, or the name of a function in the ownership hierarchy which an
     * application may provide to filter out day columns for individual dates.
     */
    dateFilter: ((context: DayCell) => boolean)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The class name to add to calendar cells.
     */
    dayCellCls: string
    /**
     * The <strong>configured</strong> end time of the day, expressed in ms (6pm would be represented as 18 * 60 * 60 * 1000).
     * You can set this value to either an hour value (1-24), a *24 hour* `HH:MM` string denoting the end of
     * the last rendered daily time block or to a ms timestamp representing time from midnight.
     */
    dayEndTime: string|number
    /**
     * The <strong>configured</strong> start time of the day, expressed in ms (8am would be represented as 8 * 60 * 60 * 1000).
     * You can set this value to either an hour value (0-23), a *24 hour* `HH:MM` string denoting the start of
     * the first rendered daily time block or to a ms timestamp representing time from midnight.
     */
    dayStartTime: number
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     */
    defaultScrollOptions: BryntumScrollOptions
    /**
     * The textual description generated by the [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) if present, or by the
     * view's date (or date *range* if it has a range) and the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    readonly description: string
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     */
    dragUnit: string
    /**
     * The duration in total days that this view covers.
     */
    readonly duration: number
    /**
     * Gets the end date of the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) that this view covers.
     * Note that Date objects are time points, not a representation of a 24 hour period,
     * So `{startDate : '2020-10-24', endDate : '2020-10-25' }` spans the <strong>single</strong> day
     * 24th October 2020. The end point is `2020-10-25T00:00:00`
     */
    readonly endDate: Date
    /**
     * The number of <strong>visible</strong> events that this view currently displays in its date range.
     */
    readonly eventCount: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     */
    extendAllDayEndDay: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     */
    filterEventResources: boolean
    /**
     * The first *visible* event-bearing element in this view. So if the first day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * cell will be for the Monday.
     */
    firstVisibleCell: HTMLElement
    /**
     * The date of the first *visible* event-bearing element in this view. So if the first day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * date will be the date of the Monday.
     */
    firstVisibleDate: Date
    /**
     * When set to `true`, the hours in the day will be sized so that they fit in the available
     * height.
     */
    fitHours: boolean|object
    /**
     * Yields the default description value as calculated using the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#property-dateFormat) which
     * describes this object if no [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) was provided.
     */
    readonly formattedDescription: string
    /**
     * Configure this as `true` to hide day columns which contain no events.
     */
    hideEmptyDays: boolean
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays: boolean
    /**
     * A Scroller which encapsulates horizontal scrolling of the view in case a [minDayWidth](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-minDayWidth)
     * setting causes the days to overflow the available width.
     */
    horizontalScroller: Scroller
    /**
     * The height <strong>in pixels</strong> of one hour cell in a day column.
     */
    hourHeight: number
    /**
     * An array which encapsulates a set of [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight) breakpoints which
     * dictate when subticks - intervening time indicators - are introduced into the DayView's
     * time axis.
     */
    hourHeightBreakpoints: number[]
    /**
     * A millisecond value to which to snap pointer times when clicking or dragging within a day column.
     */
    increment: string|number
    /**
     * By default, drag-moving an event allows the drag gesture to move the event into other day columns.
     */
    interDayDrag: boolean
    /**
     * By default, drag-resizing an event (including creating a new event) allows the drag gesture to span multiple day
     * columns to make the event an inter day event.
     */
    interDayResize: boolean
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [DateRangeOwner](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner) class, or subclass thereof.
     */
    readonly isDateRangeOwner: boolean
    /**
     * Identifies an object as an instance of [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) class, or subclass thereof.
     */
    readonly isDayCellCollecter: boolean
    /**
     * Identifies an object as an instance of [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView) class, or subclass thereof.
     */
    readonly isDayView: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    readonly isResponsive: boolean
    /**
     * The last *visible* event-bearing element in this view. So if the last day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * cell will be for the Friday.
     */
    lastVisibleCell: HTMLElement
    /**
     * The date of the last *visible* event-bearing element in this view. So if the last day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * date will be the date of the Friday.
     */
    lastVisibleDate: Date
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate: Date
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate: Date
    /**
     * The minimum width of a day column.
     */
    minDayWidth: number|string
    /**
     * The minimum height to which event blocks in a day cell may shrink. If an event has very
     * short duration, whatever the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight), and regardless of
     * [timeline zooming](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#function-zoomTo), the event block will never drop below this height.
     */
    minEventHeight: number|string
    /**
     * The minimum height <strong>in pixels</strong> to allow a zoom request to zoom out to.
     */
    minHourHeight: number
    /**
     * Calendar mode that this view represents (eg. "day", "month" etc). Only accessible when used within a Calendar.
     */
    readonly modeName: string
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when all dates in the range have been filtered out.
     */
    noMatchingDates: string|DomConfig
    /**
     * The [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) instance that the [allDayEvents](#Calendar/widget/DayView#property-allDayEvents)
     * may show when events for one day overflow the available space.
     */
    readonly overflowPopup: OverflowPopup
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     */
    pastEventCls: string
    /**
     * The time range encapsulated by the current [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-date).
     */
    range: string|DurationConfig
    /**
     * Returns the resource associated with this day view when used inside a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     */
    readonly resource: ResourceModel
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     */
    shiftIncrement: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat: string
    /**
     * By default <b>today's</b> date shows a current time line to indicate the current time. This
     * line is confined to the day cell for <b>today</b>.
     */
    showCurrentTime: boolean|{
        fullWidth?: boolean
        showTime?: boolean
        onTop?: boolean
    }
    /**
     * Configure as `false` to hide the start time normally shown at the top of the events.
     */
    showTime: boolean|Record<('startTime'|'endTime'), boolean>
    /**
     * By default, the most granular time tick level in the DayView's time axis is five minutes.
     */
    sixMinuteTicks: boolean
    /**
     * Affects drag drop and moving of events with regard to the [increment](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-increment)
     */
    snapRelativeToEventStartDate: boolean
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     */
    stackMultiDayEvents: boolean
    /**
     * Gets the start date of the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) that this view covers.
     */
    readonly startDate: Date
    /**
     * A String which describes how much the [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-next) and [previous](#Calendar/widget/mixin/CalendarMixin#function-previous)
     * methods will move this view forwards or backwards in time.
     */
    readonly stepUnit: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     */
    syncCalendarDate: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     */
    syncViewDate: boolean
    /**
     * The type of rounding to apply when calculating a date from a pointer position in a day
     * column.
     */
    timeSnapType: 'round'|'ceil'|'floor'
    /**
     * This property yields the base selector to use to find visible cell elements in this view.
     */
    readonly visibleCellSelector: string
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated: (() => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    onLayoutUpdate: ((event: { source: DayView }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    onRefresh: ((event: { source: DayView }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    onTickChange: ((event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {DayViewConfig} config
     */
    constructor(config?: DayViewConfig);
    /**
     * Determines what is under the cursor of the specified event or what is described by the given element.
     * @param {Event,Element} domEvent The event or element
     */
    calendarHitTest(domEvent: Event|Element): CalendarHit;
    /**
     * Creates an event on the specified date which conforms to this view's [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)
     * setting.
     * @param {Date} date The date to add the event at. If there's no time component, the [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)'s `startHour` will be used.
     */
    createEvent(date: Date): void;
    /**
     * This is the standard way to create a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig)
     * element definition object for creating event bars in all view types.
     * @param {object} renderData Context for the event bar config creation.
     * @param {Function} eventRenderer Optionally a function which created content HTML for the event body. Defaults to any [eventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer) configured into this view.
     */
    createEventDomConfig(renderData: {
        eventRecord: EventModel
        minimal: boolean
        date: Date
        eventEndDate?: Date
    }, eventRenderer?: Function): DomConfig;
    /**
     * Iterates the hours in the [configured day](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-dayStartTime), starting from the configured start hour,
     * calling the passed callback.
     * @param {Function,string} fn A function or the name of a function in the ownershop hierarchy to call.
     */
    eachHour(fn: Function|string): void;
    /**
     * Returns the cell associated with the passed date.
     * @param {Date,string} date The date to find the element for or a key in the format `YYYY-MM-DD`
     * @param {boolean} strict Only return the element if this view *owns* the date. (MonthView and YearView)
     */
    getDayElement(date: Date|string, strict: boolean): void;
    /**
     * Returns the outermost element which represents the first block of the passed event in the view. <em>If the
     * event is represented within the view</em>.
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the element for.
     * @param {Date} date Optionally, the event element at the specified date.
     */
    getEventElement(eventRecord: EventModel|string|number, date?: Date): HTMLElement;
    /**
     * Returns all outermost elements which represents the passed event in the view. <em>If the
     * event is represented within the view</em>
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the elements for.
     */
    getEventElements(eventRecord: EventModel|string|number): HTMLElement[];
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Returns the resource record for a DOM element or DOM event if the element is inside a view
     * which displays events for one resource such as a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     * or a [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView).
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getResourceRecord(elementOrEvent: HTMLElement|Event): ResourceModel;
    /**
     * Interface method used by an encapsulating Calendar view to implement the "next" button.
     */
    next(): void;
    /**
     * Called when new event is created.
     * Сan be overridden to supply default record values etc.
     * @param {Scheduler.model.EventModel} eventRecord Newly created event
     */
    onEventCreated(eventRecord: EventModel): void;
    /**
     * Interface method used by an encapsulating Calendar view to implement the "prev" button.
     */
    previous(): void;
    /**
     * Refreshes the UI after a change to the EventStore, or to a configuration that requires
     * the UI to change.
     */
    refresh(): void;
    /**
     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when
     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and
     * DOM churn is kept to a minimum.
     */
    refreshSoon(): void;
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    resolveEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Scrolls vertically to bring an event or a time into view.
     * @param {Scheduler.model.EventModel,Date,number} target The event to scroll to or a `Date` to read the hour value from, or an hour number.
     * @param {object} options How to scroll.
     */
    scrollTo(target: EventModel|Date|number, options?: {
        block?: 'start'|'end'|'center'|'nearest'
        edgeOffset?: number
        animate?: object|boolean|number
        highlight?: boolean
        focus?: boolean
        x?: boolean
        y?: boolean
    }): Promise<any>;
    /**
     * Zooms the timeline by incrementing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) by the requested pixel delta.
     * @param {number} reqDelta The number of pixels by which to increment the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight)
     * @param {number,string} zoomCenter The center time to zoom in to. This may be a number of pixels down the DayView viewport, or it may be a time to use as the center in the format `HH:MM:ss`. <strong>If omitted, the visual central time in the viewport is used</strong>. Note that this will usually require a layout update which happens in the next animation frame so to postprocess the new state of the view, the returned Promise must be awaited.
     */
    zoomBy(reqDelta: number, zoomCenter?: number|string): Promise<void>;
    /**
     * Zooms the timeline by setting the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) to the requested pixel value.
     * @param {number} newHourHeight The new [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) in pixels.
     * @param {number,string} zoomCenter The center time to zoom in to. This may be a number of pixels down the DayView viewport, or it may be a time to use as the center in the format `HH:MM:ss`. <strong>If omitted, the visual center of the viewport is used</strong>. Note that this will usually require a layout update which happens in the next animation frame so to postprocess the new state of the view, the returned Promise must be awaited.
     */
    zoomTo(newHourHeight: number, zoomCenter?: number|string): Promise<void>;
    /**
     * Zooms to fit all visible events within the vertical scroll viewport.
     * @param {object} options How to scroll.
     */
    zoomToFit(options?: {
        edgeOffset?: number
        animate?: object|boolean|number
    }): Promise<any>;
}

/**
 * Type with available listeners functions for [EventEditor](https://bryntum.com/products/grid/docs/api/Calendar/widget/EventEditor) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type EventEditorListenersTypes = {
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    beforeClose: (event: { source: Popup }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [EventEditor](https://bryntum.com/products/grid/docs/api/Calendar/widget/EventEditor) class.
 */
type EventEditorListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    beforeClose?: ((event: { source: Popup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [EventEditor](https://bryntum.com/products/grid/docs/api/Calendar/widget/EventEditor) class.
 */
type EventEditorConfig = {
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * By default, a Popup is transient, and will [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) when the user clicks or
     * taps outside its owned widgets and when focus moves outside its owned widgets.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-autoClose)
     */
    autoClose?: boolean
    /**
     * Auto show flag for Popup.
     * If truthy then Popup is shown automatically upon hover.
     */
    autoShow?: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord?: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Show a tool in the header to close this Popup.
     * The tool is available in the [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable?: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-closeAction)
     */
    closeAction?: 'hide'|'destroy'
    /**
     * Close popup when `ESC` key is pressed.
     */
    closeOnEscape?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content?: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * Set to `false` to prevent dragging the popup element.
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach popup.
     */
    forElement?: HTMLElement
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-html)
     * @param {Core.widget.Widget} widget The calling Widget
     * @returns {string}
     */
    html?: string|((widget: Widget) => string)|DomConfig|DomConfig[]|VueConfig
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls?: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-listeners)
     */
    listeners?: EventEditorListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized?: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-modal)
     */
    modal?: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-owner)
     */
    owner?: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-readOnly)
     */
    readOnly?: boolean
    /**
     * [Record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-record)
     */
    record?: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-ref)
     */
    ref?: string
    /**
     * Configure this property to allow the widget/component to be resized. Pressing <kbd>Shift</kbd> while resizing will
     * constrain the aspect ratio.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-resizable)
     */
    resizable?: boolean|{
        minWidth?: number
        maxWidth?: number
        minHeight?: number
        maxHeight?: number
        handles?: object
    }
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover. Can
     * also be provided as the button number (0: main button, 2: right button).
     */
    showOnClick?: boolean|number
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-textContent)
     */
    textContent?: boolean
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-title)
     */
    title?: string
    /**
     * A Function (or *name* of a function) which produces a customized Panel header based upon the event being edited.
     * @param {Scheduler.model.EventModel} eventRecord The record being edited
     * @returns {string} The Panel title.
     */
    titleRenderer?: ((eventRecord: EventModel) => string)|string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#config-y)
     */
    y?: number
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    onBeforeClose?: ((event: { source: Popup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Provided event editor dialog. This is not supposed to be used directly.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor)
 */
export abstract class EventEditor extends SchedulerEventEditor {
    /**
     * Identifies an object as an instance of [EventEditor](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor) class, or subclass thereof.
     */
    static readonly isEventEditor: boolean
    /**
     * Identifies an object as an instance of [EventEditor](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor) class, or subclass thereof.
     */
    readonly isEventEditor: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventEditor#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with available listeners functions for [EventList](https://bryntum.com/products/grid/docs/api/Calendar/widget/EventList) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type EventListListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {Grid.column.Column[]} event.columns An array of columns to export
     * @param {Core.data.Model[]} event.rows An array of records to export
     * @param {string} event.lineDelimiter The CSV delimiter to separate lines
     * @param {string} event.columnDelimiter The CSV delimiter to separate values on one line
     */
    beforeCSVExport: (event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     */
    beforeCancelCellEdit: (event: { source: Grid, editorContext: GridLocation }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before the row editing is canceled, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeCancelRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.recordThe record being edited
     */
    beforeCancelRowEdit: (event: { grid: Grid, editorContext: { editor: Panel }, recordThe: Model }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {(Grid.util.GridLocation|Core.data.Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themselves will not get deleted, only visible column values).
     */
    beforeCellDelete: (event: { source: Grid, gridSelection: (GridLocation|Model)[] }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-field)). This property may be replaced to be a different [field](https://bryntum.com/products/calendar/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    beforeCellEditStart: (event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    beforeColumnDragStart: (event: { source: Grid, column: Column, event: Event }) => Promise<boolean>|boolean|void
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    beforeColumnDropFinalize: (event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => Promise<boolean>|boolean|void
    /**
     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns
     * `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    beforeColumnResize: (event: { source: Grid, column: Column, domEvent: Event }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    beforeCopy: (event: { source: Grid, cells: GridLocation[], data: string, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {XLSColumn[]} event.columns An array of columns to export
     * @param {any[][]} event.rows An array of records to export
     */
    beforeExcelExport: (event: { config: ExportConfig, columns: XLSColumn[], rows: any[] }) => Promise<boolean>|boolean|void
    /**
     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    beforeFillHandleDragStart: (event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value The cell value
     * @param {any} event.editorContext.oldValue The old value
     */
    beforeFinishCellEdit: (event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any, oldValue: any } }) => void
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeFinishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record being edited
     */
    beforeFinishRowEdit: (event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    beforePaste: (event: { source: Grid, clipboardData: string, targetCell: GridLocation, entityName: string }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    beforePdfExport: (event: { config: object }) => Promise<boolean>|boolean|void
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row about to be rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    beforeRenderRow: (event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    beforeRenderRows: (event: { source: Grid }) => void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * This event fires before row collapse is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeRowCollapse)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    beforeRowCollapse: (event: { record: Model }) => Promise<boolean>|boolean|void
    /**
     * This event fires before row expand is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeRowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    beforeRowExpand: (event: { record: Model }) => Promise<boolean>|boolean|void
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records to be deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records to be selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells to be selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    beforeSelectionChange: (event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => Promise<boolean>|boolean|void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The [Panel](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel) instance which contains the editor fields.
     */
    beforeStartRowEdit: (event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    beforeToggleGroup: (event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, domEvent: Event }) => Promise<boolean>|boolean|void
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    beforeToggleNode: (event: { source: Grid, record: Model, collapse: boolean }) => void
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    cancelCellEdit: (event: { source: Grid, editorContext: GridLocation, event: Event }) => void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellClick: (event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellContextMenu: (event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellDblClick: (event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated: () => void
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuBeforeShow: (event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuItem: (event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuShow: (event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => void
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    cellMenuToggleItem: (event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered cell
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseEnter: (event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the cell that the mouse left
     * @param {Grid.column.Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseLeave: (event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseOut: (event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseOver: (event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been collapsed.
     */
    collapseNode: (event: { source: Grid, record: Model }) => void
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    columnDrag: (event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    columnDragStart: (event: { source: Grid, column: Column, event: Event }) => void
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    columnDrop: (event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => Promise<boolean>|boolean|void
    /**
     * This event is fired after a resize gesture is completed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The resized column
     * @param {Event} event.domEvent The browser event
     */
    columnResize: (event: { source: Grid, column: Column, domEvent: Event }) => void
    /**
     * This event is fired when a column resize gesture starts.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    columnResizeStart: (event: { source: Grid, column: Column, domEvent: Event }) => void
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     */
    contextMenuItem: (event: { source: Widget, menu: Menu, item: MenuItem }) => void
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    contextMenuToggleItem: (event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    copy: (event: { source: Grid, cells: GridLocation[], copiedDataString: string, isCut: boolean, entityName: string }) => void
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-dataChange)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owning grid
     * @param {Core.data.Store} event.store The originating store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    dataChange: (event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated: (event: { events: EventModel[], The: Date }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source
     * @param {GridLocationConfig[],Grid.util.GridLocation[]} event.selectedCells The cells that is currently being dragged over
     * @param {Core.data.Model[]} event.selectedRecords The records that is currently being dragged over
     */
    dragSelecting: (event: { source: Grid, selectedCells: GridLocationConfig[]|GridLocation[], selectedRecords: Model[] }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate: (event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been expanded.
     */
    expandNode: (event: { source: Grid, record: Model }) => void
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    fileDrop: (event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void
    /**
     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the
     * drag operation from applying data changes.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleBeforeDragFinalize: (event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void
    /**
     * Fired while dragging the FillHandle.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDrag: (event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void
    /**
     * Fired when a FillHandle drag operation is aborted.
     */
    fillHandleDragAbort: () => void
    /**
     * Fired after a FillHandle drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDragEnd: (event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void
    /**
     * Fired when dragging of the FillHandle starts.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDragStart: (event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    finishCellEdit: (event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-finishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record that has been edited
     */
    finishRowEdit: (event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    gridRowBeforeDragStart: (event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => Promise<boolean>|boolean|void
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    gridRowBeforeDropFinalize: (event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean>|boolean|void
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    gridRowDrag: (event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    gridRowDragAbort: (event: { source: GridBase, context: { records: Model[] }, event: MouseEvent }) => void
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    gridRowDragStart: (event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    gridRowDrop: (event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Grid.column.Column} event.column The column clicked on.
     */
    headerClick: (event: { domEvent: Event, column: Column }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuBeforeShow: (event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => Promise<boolean>|boolean|void
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuItem: (event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuShow: (event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => void
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    headerMenuToggleItem: (event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Fires when row locking is enabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The created clone
     */
    lockRows: (event: { clone: GridBase }) => void
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    mouseOut: (event: { event: MouseEvent }) => void
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    mouseOver: (event: { event: MouseEvent }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Core.data.Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    paste: (event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: GridLocation, entityName: string }) => void
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    pdfExport: (event: { response?: Response, error?: Error }) => void
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange: (event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row that has been rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    renderRow: (event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    renderRows: (event: { source: Grid }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    responsive: (event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * This event fires when a row has finished collapsing.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    rowCollapse: (event: { record: Model }) => void
    /**
     * This event fires when a row expand has finished expanding.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-rowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     * @param {object} event.expandedElements An object with the Grid region name as property and the expanded body element as value
     * @param {Core.widget.Widget} event.widget In case of expanding a Widget, this will be a reference to the instance created by the actual expansion. If there is multiple Grid regions, use the `widgets` param instead.
     * @param {object} event.widgets In case of expanding a Widget, this will be an object with the Grid region name as property and the reference to the widget instance created by the actual expansion
     */
    rowExpand: (event: { record: Model, expandedElements: object, widget: Widget, widgets: object }) => void
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered row
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    rowMouseEnter: (event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    rowMouseLeave: (event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    scroll: (event: { source: Grid, scrollTop: number }) => void
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select','deselect'} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the new selection.
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the new selection.
     */
    selectionChange: (event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => void
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/calendar/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    selectionModeChange: (event: { selectionMode: object }) => void
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange: (event: { old?: object, new: object }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {Grid.view.GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal','vertical','both'} event.options.direction The direction of the split
     * @param {Grid.column.Column} event.options.atColumn The column to split at
     * @param {Core.data.Model} event.options.atRecord The record to split at
     */
    split: (event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterCollapseClick: (event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterDragEnd: (event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    splitterDragStart: (event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void
    /**
     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterExpandClick: (event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    startCellEdit: (event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     */
    startRowEdit: (event: { source: Grid, editorContext: { editor: Panel, column: Column, record: Model, cell: HTMLElement } }) => void
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    subGridCollapse: (event: { source: Grid, subGrid: SubGrid }) => void
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    subGridExpand: (event: { source: Grid, subGrid: SubGrid }) => void
    /**
     * Fired when one or more groups are expanded or collapsed
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {boolean} event.allRecords True if this event is part of toggling all groups
     */
    toggleGroup: (event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, allRecords?: boolean }) => void
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    toggleNode: (event: { record: Model, collapse: boolean }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
    /**
     * Fires when row locking is disabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The locked clone that will be destroyed
     */
    unlockRows: (event: { clone: GridBase }) => void
    /**
     * Fires when un-splitting the Grid.
     */
    unsplit: () => void
}

/**
 * Type with listeners options for [EventList](https://bryntum.com/products/grid/docs/api/Calendar/widget/EventList) class.
 */
type EventListListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {Grid.column.Column[]} event.columns An array of columns to export
     * @param {Core.data.Model[]} event.rows An array of records to export
     * @param {string} event.lineDelimiter The CSV delimiter to separate lines
     * @param {string} event.columnDelimiter The CSV delimiter to separate values on one line
     */
    beforeCSVExport?: ((event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     */
    beforeCancelCellEdit?: ((event: { source: Grid, editorContext: GridLocation }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the row editing is canceled, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeCancelRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.recordThe record being edited
     */
    beforeCancelRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, recordThe: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {(Grid.util.GridLocation|Core.data.Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themselves will not get deleted, only visible column values).
     */
    beforeCellDelete?: ((event: { source: Grid, gridSelection: (GridLocation|Model)[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-field)). This property may be replaced to be a different [field](https://bryntum.com/products/calendar/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    beforeCellEditStart?: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    beforeColumnDragStart?: ((event: { source: Grid, column: Column, event: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    beforeColumnDropFinalize?: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns
     * `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    beforeColumnResize?: ((event: { source: Grid, column: Column, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    beforeCopy?: ((event: { source: Grid, cells: GridLocation[], data: string, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {XLSColumn[]} event.columns An array of columns to export
     * @param {any[][]} event.rows An array of records to export
     */
    beforeExcelExport?: ((event: { config: ExportConfig, columns: XLSColumn[], rows: any[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    beforeFillHandleDragStart?: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value The cell value
     * @param {any} event.editorContext.oldValue The old value
     */
    beforeFinishCellEdit?: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any, oldValue: any } }) => void)|string
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeFinishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record being edited
     */
    beforeFinishRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    beforePaste?: ((event: { source: Grid, clipboardData: string, targetCell: GridLocation, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    beforePdfExport?: ((event: { config: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row about to be rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    beforeRenderRow?: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    beforeRenderRows?: ((event: { source: Grid }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * This event fires before row collapse is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeRowCollapse)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    beforeRowCollapse?: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires before row expand is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeRowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    beforeRowExpand?: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records to be deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records to be selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells to be selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    beforeSelectionChange?: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The [Panel](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel) instance which contains the editor fields.
     */
    beforeStartRowEdit?: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    beforeToggleGroup?: ((event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    beforeToggleNode?: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    cancelCellEdit?: ((event: { source: Grid, editorContext: GridLocation, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellClick?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellContextMenu?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellDblClick?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated?: (() => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuBeforeShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    cellMenuShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    cellMenuToggleItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered cell
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseEnter?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the cell that the mouse left
     * @param {Grid.column.Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseLeave?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseOut?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    cellMouseOver?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been collapsed.
     */
    collapseNode?: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    columnDrag?: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    columnDragStart?: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    columnDrop?: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired after a resize gesture is completed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The resized column
     * @param {Event} event.domEvent The browser event
     */
    columnResize?: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event is fired when a column resize gesture starts.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    columnResizeStart?: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     */
    contextMenuItem?: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    contextMenuToggleItem?: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    copy?: ((event: { source: Grid, cells: GridLocation[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-dataChange)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owning grid
     * @param {Core.data.Store} event.store The originating store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    dataChange?: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source
     * @param {GridLocationConfig[],Grid.util.GridLocation[]} event.selectedCells The cells that is currently being dragged over
     * @param {Core.data.Model[]} event.selectedRecords The records that is currently being dragged over
     */
    dragSelecting?: ((event: { source: Grid, selectedCells: GridLocationConfig[]|GridLocation[], selectedRecords: Model[] }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been expanded.
     */
    expandNode?: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    fileDrop?: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the
     * drag operation from applying data changes.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleBeforeDragFinalize?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired while dragging the FillHandle.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDrag?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when a FillHandle drag operation is aborted.
     */
    fillHandleDragAbort?: (() => void)|string
    /**
     * Fired after a FillHandle drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDragEnd?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when dragging of the FillHandle starts.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    fillHandleDragStart?: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    finishCellEdit?: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-finishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record that has been edited
     */
    finishRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    gridRowBeforeDragStart?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    gridRowBeforeDropFinalize?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    gridRowDrag?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    gridRowDragAbort?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    gridRowDragStart?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    gridRowDrop?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Grid.column.Column} event.column The column clicked on.
     */
    headerClick?: ((event: { domEvent: Event, column: Column }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuBeforeShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    headerMenuShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    headerMenuToggleItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when row locking is enabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The created clone
     */
    lockRows?: ((event: { clone: GridBase }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    mouseOut?: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    mouseOver?: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Core.data.Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    paste?: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: GridLocation, entityName: string }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    pdfExport?: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row that has been rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    renderRow?: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    renderRows?: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    responsive?: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * This event fires when a row has finished collapsing.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    rowCollapse?: ((event: { record: Model }) => void)|string
    /**
     * This event fires when a row expand has finished expanding.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-rowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     * @param {object} event.expandedElements An object with the Grid region name as property and the expanded body element as value
     * @param {Core.widget.Widget} event.widget In case of expanding a Widget, this will be a reference to the instance created by the actual expansion. If there is multiple Grid regions, use the `widgets` param instead.
     * @param {object} event.widgets In case of expanding a Widget, this will be an object with the Grid region name as property and the reference to the widget instance created by the actual expansion
     */
    rowExpand?: ((event: { record: Model, expandedElements: object, widget: Widget, widgets: object }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered row
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    rowMouseEnter?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    rowMouseLeave?: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    scroll?: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select','deselect'} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the new selection.
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the new selection.
     */
    selectionChange?: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/calendar/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    selectionModeChange?: ((event: { selectionMode: object }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {Grid.view.GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal','vertical','both'} event.options.direction The direction of the split
     * @param {Grid.column.Column} event.options.atColumn The column to split at
     * @param {Core.data.Model} event.options.atRecord The record to split at
     */
    split?: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterCollapseClick?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterDragEnd?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    splitterDragStart?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    splitterExpandClick?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    startCellEdit?: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     */
    startRowEdit?: ((event: { source: Grid, editorContext: { editor: Panel, column: Column, record: Model, cell: HTMLElement } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    subGridCollapse?: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    subGridExpand?: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fired when one or more groups are expanded or collapsed
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {boolean} event.allRecords True if this event is part of toggling all groups
     */
    toggleGroup?: ((event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, allRecords?: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    toggleNode?: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when row locking is disabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The locked clone that will be destroyed
     */
    unlockRows?: ((event: { clone: GridBase }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    unsplit?: (() => void)|string
}

type EventListFeaturesType = {
    cellCopyPaste: CellCopyPaste
    cellEdit: CellEdit
    cellMenu: CellMenu
    cellTooltip: CellTooltip
    columnAutoWidth: ColumnAutoWidth
    columnDragToolbar: ColumnDragToolbar
    columnPicker: ColumnPicker
    columnRename: ColumnRename
    columnReorder: ColumnReorder
    columnResize: ColumnResize
    excelExporter: GridExcelExporter
    fileDrop: FileDrop
    fillHandle: FillHandle
    filter: Filter
    filterBar: FilterBar
    group: Group
    groupSummary: GridGroupSummary
    headerMenu: HeaderMenu
    lockRows: GridLockRows
    mergeCells: MergeCells
    pdfExport: GridPdfExport
    print: GridPrint
    quickFind: QuickFind
    regionResize: RegionResize
    rowCopyPaste: RowCopyPaste
    rowEdit: RowEdit
    rowExpander: RowExpander
    rowReorder: GridRowReorder
    rowResize: GridRowResize
    search: Search
    sort: Sort
    split: GridSplit
    stickyCells: StickyCells
    stripe: Stripe
    summary: GridSummary
    tree: Tree
    treeGroup: TreeGroup
}

type EventListFeaturesConfigType = {
    cellCopyPaste?: string|boolean|CellCopyPasteConfig
    cellEdit?: string|boolean|CellEditConfig
    cellMenu?: string|boolean|CellMenuConfig
    cellTooltip?: string|boolean|CellTooltipConfig
    columnAutoWidth?: string|boolean|ColumnAutoWidthConfig
    columnDragToolbar?: string|boolean|ColumnDragToolbarConfig
    columnPicker?: string|boolean|ColumnPickerConfig
    columnRename?: string|boolean|ColumnRenameConfig
    columnReorder?: string|boolean|ColumnReorderConfig
    columnResize?: string|boolean|ColumnResizeConfig
    excelExporter?: string|boolean|GridExcelExporterConfig
    fileDrop?: string|boolean|FileDropConfig
    fillHandle?: string|boolean|FillHandleConfig
    filter?: string|boolean|FilterConfig
    filterBar?: string|boolean|FilterBarConfig
    group?: string|boolean|GroupConfig
    groupSummary?: string|boolean|GridGroupSummaryConfig
    headerMenu?: string|boolean|HeaderMenuConfig
    lockRows?: string|boolean|GridLockRowsConfig
    mergeCells?: string|boolean|MergeCellsConfig
    pdfExport?: string|boolean|GridPdfExportConfig
    print?: string|boolean|GridPrintConfig
    quickFind?: string|boolean|QuickFindConfig
    regionResize?: string|boolean|RegionResizeConfig
    rowCopyPaste?: string|boolean|RowCopyPasteConfig
    rowEdit?: string|boolean|RowEditConfig
    rowExpander?: string|boolean|RowExpanderConfig
    rowReorder?: string|boolean|GridRowReorderConfig
    rowResize?: string|boolean|GridRowResizeConfig
    search?: string|boolean|SearchConfig
    sort?: string|boolean|SortConfig
    split?: string|boolean|GridSplitConfig
    stickyCells?: string|boolean|StickyCellsConfig
    stripe?: string|boolean|StripeConfig
    summary?: string|boolean|GridSummaryConfig
    tree?: string|boolean|TreeConfig
    treeGroup?: string|boolean|TreeGroupConfig
}

/**
 * Type with configuration options for [EventList](https://bryntum.com/products/grid/docs/api/Calendar/widget/EventList) class.
 */
type EventListConfig = {
    type?: 'eventlist'
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * Set to `true` to animate row removals caused by filtering.
     */
    animateFilterRemovals?: boolean
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * When the [Tree](https://bryntum.com/products/calendar/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight?: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * Set to `false` to crop text in grid cells without ellipsis (...). When enabled, cells containing pure
     * use `display : block`, instead of `display : flex` to allow ellipsis to work.
     * <strong>NOTE</strong> Only supported in browsers that support `:has()` CSS selector
     */
    cellEllipsis?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines?: boolean
    /**
     * Column definitions to add to the default columns, or column definitions which override
     * the provided, default columns.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-columns)
     */
    columns?: Record<string, CalendarColumnConfig>|CalendarColumnConfig[]
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent?: 'contextmenu'|'click'|'dblclick'
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-data)
     */
    data?: object[]|Model[]
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The date to orient this view's [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-date)
     */
    date?: Date
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion?: string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Set to `true` to destroy the store when the grid is destroyed.
     */
    destroyStore?: boolean
    /**
     * Set to `true` to not get a warning when calling [getState](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#function-getState) when there is a column
     * configured without an `id`. But the recommended action is to always configure columns with an `id` when
     * using states.
     */
    disableGridColumnIdWarning?: boolean
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning?: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-dragUnit)
     */
    dragUnit?: string
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when there is no data to display in the grid
     */
    emptyText?: string|DomConfig
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-enableSticky)
     */
    enableSticky?: boolean
    /**
     * Set to `true` to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection?: boolean
    /**
     * Set to `true` to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/calendar/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys?: boolean
    /**
     * The end date (Time component is zeroed) of this view. Note that in terms of full days,
     * this is exclusive, ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on
     * the 8th.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-endDate)
     */
    endDate?: Date
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * The height of event bars if this view creates event bars.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-eventHeight)
     */
    eventHeight?: number|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed
     * next to event bars in the custom columns which [EventList](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList)
     * based views use - [EventList](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList) and [AgendaView](#Calendar/widget/AgendaView).
     */
    eventListTimeFormat?: string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * A function, or name of a function in the ownership hierarchy which is used to create
     * the time output next to event bars in an agenda cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-eventTimeRenderer)
     * @param {Scheduler.model.EventModel} eventRecord The event record for which to create a time string.
     * @param {Date} date The date of the cell in which the event is being rendered.
     * @returns {string,DomConfig,DomConfig[]}
     */
    eventTimeRenderer?: ((eventRecord: EventModel, date: Date) => string|DomConfig|DomConfig[])|string
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * An object containing Feature configuration objects (or `true` if no configuration is required)
     * keyed by the Feature class name in all lowercase.
     */
    features?: EventListFeaturesConfigType
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-fixedRowHeight)
     */
    fixedRowHeight?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * An object which names formula prefixes which will be applied to all columns configured with
     * `formula : true`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-formulaProviders)
     */
    formulaProviders?: Record<string, FormulaProviderConfig>
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-fullRowRefresh)
     */
    fullRowRefresh?: boolean
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) and
     * expected to return the desired height of that records row. If the function returns a falsy value, Grids
     * configured [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-rowHeight) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-getRowHeight)
     * @param {Core.data.Model} getRowHeight.record Record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight?: (getRowHeight: { record: Model }) => number
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters?: boolean
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders?: boolean
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar?: boolean
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * A CSS class to add to hovered row elements
     */
    hoverCls?: string
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#keyboard-shortcuts) for details
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * A [RangeMenu](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu) configuration block which configures the range choosing menu provided which
     * by default selects one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-listRangeMenu)
     */
    listRangeMenu?: RangeMenuConfig|null
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-listeners)
     */
    listeners?: EventListListeners
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask?: string|MaskConfig|null
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/calendar/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-loadMaskDefaults)
     */
    loadMaskDefaults?: MaskConfig
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-loadMaskError)
     */
    loadMaskError?: MaskConfig|Mask|boolean
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime?: number
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-minHeight)
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * Grid monitors window resize by default.
     */
    monitorResize?: boolean
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins?: Function[]
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange?: boolean
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll?: PreserveScrollOptions|boolean
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * The time range around the [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-date) to display events for.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-range)
     */
    range?: string|DurationConfig
    /**
     * Set to `true` to make the grid read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-ref)
     */
    ref?: string
    /**
     * Configure this property to allow the widget/component to be resized. Pressing <kbd>Shift</kbd> while resizing will
     * constrain the aspect ratio.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-resizable)
     */
    resizable?: boolean|{
        minWidth?: number
        maxWidth?: number
        minHeight?: number
        maxHeight?: number
        handles?: object
    }
    /**
     * Set to `false` to only measure cell contents when double-clicking the edge between column headers.
     */
    resizeToFitIncludesHeader?: boolean
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-responsive)
     */
    responsive?: object
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels?: Record<string, number|string>
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be
     * overriden by specifying a [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from
     * a column [renderer](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-renderer).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-rowHeight)
     */
    rowHeight?: number
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines?: boolean
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-rtl)
     */
    rtl?: boolean
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/calendar/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/calendar/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager?: ScrollManagerConfig|ScrollManager
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [Scroller](https://bryntum.com/products/calendar/docs/api/Core/helper/util/Scroller).
     * See the [scrollerClass](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [Scroller](#Core/helper/util/Scroller).
     */
    scrollerClass?: typeof Scroller
    /**
     * Selection configuration settings, change these properties to control how selection works and what can be
     * selected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-selectionMode)
     */
    selectionMode?: GridSelectionMode
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-shiftIncrement)
     */
    shiftIncrement?: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells whose
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-showDirty)
     */
    showDirty?: boolean|{
        duringEdit?: boolean
    }
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: boolean
    /**
     * The start date (Time component is zeroed) of this view.
     */
    startDate?: Date
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * The properties of this settings object controls how grid is restored from state data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-stateSettings)
     */
    stateSettings?: {
        restoreUnconfiguredColumns?: boolean
    }
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-store)
     */
    store?: Store|StoreConfig|AjaxStore|AjaxStoreConfig
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-subGridConfigs)
     */
    subGridConfigs?: Record<string, SubGridConfig>
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-syncMask)
     */
    syncMask?: string|MaskConfig|null
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration?: number
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {Grid.column.Column[]} event.columns An array of columns to export
     * @param {Core.data.Model[]} event.rows An array of records to export
     * @param {string} event.lineDelimiter The CSV delimiter to separate lines
     * @param {string} event.columnDelimiter The CSV delimiter to separate values on one line
     */
    onBeforeCSVExport?: ((event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     */
    onBeforeCancelCellEdit?: ((event: { source: Grid, editorContext: GridLocation }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the row editing is canceled, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeCancelRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.recordThe record being edited
     */
    onBeforeCancelRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, recordThe: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`
     * buttons while [autoEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {(Grid.util.GridLocation|Core.data.Model)[]} event.gridSelection An array of cell selectors or records that will have their values deleted (the records themselves will not get deleted, only visible column values).
     */
    onBeforeCellDelete?: ((event: { source: Grid, gridSelection: (GridLocation|Model)[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-field)). This property may be replaced to be a different [field](https://bryntum.com/products/calendar/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.
     * @param {Function} event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.
     * @param {object} event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.
     * @param {any} event.editorContext.value Cell value
     */
    onBeforeCellEditStart?: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onBeforeColumnDragStart?: ((event: { source: Grid, column: Column, event: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onBeforeColumnDropFinalize?: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns
     * `false`.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    onBeforeColumnResize?: ((event: { source: Grid, column: Column, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.data The string data about to be copied or cut
     * @param {boolean} event.isCut `true` if this is a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other beforeCopy events
     */
    onBeforeCopy?: ((event: { source: Grid, cells: GridLocation[], data: string, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {ExportConfig} event.config Export config
     * @param {XLSColumn[]} event.columns An array of columns to export
     * @param {any[][]} event.rows An array of records to export
     */
    onBeforeExcelExport?: ((event: { config: ExportConfig, columns: XLSColumn[], rows: any[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onBeforeFillHandleDragStart?: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value The cell value
     * @param {any} event.editorContext.oldValue The old value
     */
    onBeforeFinishCellEdit?: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any, oldValue: any } }) => void)|string
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeFinishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record being edited
     */
    onBeforeFinishRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData about to be pasted
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other beforePaste events
     */
    onBeforePaste?: ((event: { source: Grid, clipboardData: string, targetCell: GridLocation, entityName: string }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before export started. Return `false` to cancel the export.
     * @param {object} event Event object
     * @param {object} event.config Export config
     */
    onBeforePdfExport?: ((event: { config: object }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row about to be rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onBeforeRenderRow?: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows are about to be rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    onBeforeRenderRows?: ((event: { source: Grid }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * This event fires before row collapse is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeRowCollapse)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    onBeforeRowCollapse?: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires before row expand is started.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeRowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    onBeforeRowExpand?: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records to be deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records to be selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells to be selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange?: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid before editing starts, return `false` to prevent editing
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {Core.widget.Field} event.editorContext.editor The [Panel](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel) instance which contains the editor fields.
     */
    onBeforeStartRowEdit?: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when a group is going to be expanded or collapsed using the UI.
     * Returning `false` from a listener prevents the operation
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {Event} event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.
     */
    onBeforeToggleGroup?: ((event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onBeforeToggleNode?: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string
    /**
     * Fires on the owning Grid when editing is cancelled
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Event} event.event Included if the cancellation was triggered by a DOM event
     */
    onCancelCellEdit?: ((event: { source: Grid, editorContext: GridLocation, event: Event }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated?: (() => void)|string
    /**
     * This event fires on the owning grid before the context menu is shown for a cell.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-cellMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    onCellMenuBeforeShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning grid when an item is selected in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    onCellMenuItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid after the context menu is shown for a cell.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     */
    onCellMenuShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => void)|string
    /**
     * This event fires on the owning grid when a check item is toggled in the cell context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {Core.data.Model} event.record Record
     * @param {boolean} event.checked Checked or not
     */
    onCellMenuToggleItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered cell
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseEnter?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the cell that the mouse left
     * @param {Grid.column.Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseLeave?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver?: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired before a parent node record is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been collapsed.
     */
    onCollapseNode?: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * This event is fired when a column is being dragged, and you can set the `valid` flag on t
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Event} event.event The browser event.
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     */
    onColumnDrag?: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string
    /**
     * This event is fired when a column drag gesture has started.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Event} event.event The browser event.
     */
    onColumnDragStart?: ((event: { source: Grid, column: Column, event: Event }) => void)|string
    /**
     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not
     * vetoed and the column was moved in the column store.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance.
     * @param {Grid.column.Column} event.column The dragged column.
     * @param {Grid.column.Column} event.insertBefore The column before which the dragged column will be inserted.
     * @param {Grid.column.Column} event.newParent The new parent column.
     * @param {boolean} event.valid true if the operation was not vetoed.
     * @param {Event} event.event The browser event.
     * @param {string} event.region The region where the column was dropped.
     */
    onColumnDrop?: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => Promise<boolean>|boolean|void)|string
    /**
     * This event is fired after a resize gesture is completed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The resized column
     * @param {Event} event.domEvent The browser event
     */
    onColumnResize?: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event is fired when a column resize gesture starts.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Grid.column.Column} event.column The column
     * @param {Event} event.domEvent The browser event
     */
    onColumnResizeStart?: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string
    /**
     * This event fires on the owning widget when an item is selected in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     */
    onContextMenuItem?: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string
    /**
     * This event fires on the owning widget when a check item is toggled in the context menu.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The owning widget
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {boolean} event.checked Checked or not
     */
    onContextMenuToggleItem?: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a copy action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation[]} event.cells The cells about to be copied or cut
     * @param {string} event.copiedDataString The concatenated data string that was copied or cut
     * @param {boolean} event.isCut `true` if this was a cut action
     * @param {string} event.entityName 'cell' to distinguish this event from other copy events
     */
    onCopy?: ((event: { source: Grid, cells: GridLocation[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string
    /**
     * Fired when data in the store changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-dataChange)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owning grid
     * @param {Core.data.Store} event.store The originating store
     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`
     * @param {Core.data.Model} event.record Changed record, for actions that affects exactly one record (`'update'`)
     * @param {Core.data.Model[]} event.records Changed records, passed for all actions except `'removeAll'`
     * @param {object} event.changes Passed for the `'update'` action, info on which record fields changed
     */
    onDataChange?: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source
     * @param {GridLocationConfig[],Grid.util.GridLocation[]} event.selectedCells The cells that is currently being dragged over
     * @param {Core.data.Model[]} event.selectedRecords The records that is currently being dragged over
     */
    onDragSelecting?: ((event: { source: Grid, selectedCells: GridLocationConfig[]|GridLocation[], selectedRecords: Model[] }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after a parent node record is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Core.data.Model} event.record The record which has been expanded.
     */
    onExpandNode?: ((event: { source: Grid, record: Model }) => void)|string
    /**
     * Fired when a file is dropped on the widget element
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The owning Grid instance
     * @param {DataTransferItem} event.file The dropped file descriptor
     * @param {DragEvent} event.domEvent The native DragEvent
     */
    onFileDrop?: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string
    /**
     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the
     * drag operation from applying data changes.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleBeforeDragFinalize?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired while dragging the FillHandle.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDrag?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when a FillHandle drag operation is aborted.
     */
    onFillHandleDragAbort?: (() => void)|string
    /**
     * Fired after a FillHandle drag operation.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.from The from cell
     * @param {Grid.util.GridLocation} event.to The to cell
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDragEnd?: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string
    /**
     * Fired when dragging of the FillHandle starts.
     * @param {object} event Event object
     * @param {Grid.util.GridLocation} event.cell Information about the column / record
     * @param {MouseEvent} event.domEvent The raw DOM event
     */
    onFillHandleDragStart?: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid when cell editing is finished
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onFinishCellEdit?: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-finishRowEdit)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Target grid
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Core.data.Model} event.record The record that has been edited
     */
    onFinishRowEdit?: ((event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    onGridRowBeforeDragStart?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a
     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowBeforeDropFinalize?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /
     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is
     * valid or invalid by setting `context.valid = false;`
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDrag?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a row drag operation is aborted
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent} event.event
     */
    onGridRowDragAbort?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when dragging starts.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {MouseEvent,TouchEvent} event.event
     */
    onGridRowDragStart?: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string
    /**
     * Fired after the row drop operation has completed, regardless of validity
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.source
     * @param {object} event.context
     * @param {boolean} event.context.valid true or false depending on whether the drop position was valid
     * @param {Core.data.Model} event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Core.data.Model} event.context.parent The parent record of the current drop position (only applicable for trees)
     * @param {Core.data.Model[]} event.context.records The dragged row records
     * @param {RecordPositionContext[]} event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values
     * @param {MouseEvent} event.event
     */
    onGridRowDrop?: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Grid.column.Column} event.column The column clicked on.
     */
    onHeaderClick?: ((event: { domEvent: Event, column: Column }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Grid before the context menu is shown for a header.
     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/HeaderMenu#config-processItems).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-headerMenuBeforeShow)
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    onHeaderMenuBeforeShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => Promise<boolean>|boolean|void)|string
    /**
     * This event fires on the owning Grid when an item is selected in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     */
    onHeaderMenuItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid after the context menu is shown for a header
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Record<string, MenuItemConfig>} event.items Menu item configs
     * @param {Grid.column.Column} event.column Column
     */
    onHeaderMenuShow?: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => void)|string
    /**
     * This event fires on the owning Grid when a check item is toggled in the header context menu.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid
     * @param {Core.widget.Menu} event.menu The menu
     * @param {Core.widget.MenuItem} event.item Selected menu item
     * @param {Grid.column.Column} event.column Column
     * @param {boolean} event.checked Checked or not
     */
    onHeaderMenuToggleItem?: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when row locking is enabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The created clone
     */
    onLockRows?: ((event: { clone: GridBase }) => void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut?: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver?: ((event: { event: MouseEvent }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fires on the owning Grid after a paste action is performed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {string} event.clipboardData The clipboardData that was pasted
     * @param {Core.data.Model[]} event.modifiedRecords The records which have been modified due to the paste action
     * @param {Grid.util.GridLocation} event.targetCell The cell from which the paste will be started
     * @param {string} event.entityName 'cell' to distinguish this event from other paste events
     */
    onPaste?: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: GridLocation, entityName: string }) => void)|string
    /**
     * Fires on the owning Grid when export has finished
     * @param {object} event Event object
     * @param {Response} event.response Optional response, if received
     * @param {Error} event.error Optional error, if exception occurred
     */
    onPdfExport?: ((event: { response?: Response, error?: Error }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires after a row is rendered.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {Grid.row.Row} event.row The row that has been rendered.
     * @param {Core.data.Model} event.record The record for the row.
     * @param {number} event.recordIndex The zero-based index of the record.
     */
    onRenderRow?: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string
    /**
     * Grid rows have been rendered
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source This grid.
     */
    onRenderRows?: ((event: { source: Grid }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive?: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * This event fires when a row has finished collapsing.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     */
    onRowCollapse?: ((event: { record: Model }) => void)|string
    /**
     * This event fires when a row expand has finished expanding.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-rowExpand)
     * @param {object} event Event object
     * @param {Core.data.Model} event.record Record
     * @param {object} event.expandedElements An object with the Grid region name as property and the expanded body element as value
     * @param {Core.widget.Widget} event.widget In case of expanding a Widget, this will be a reference to the instance created by the actual expansion. If there is multiple Grid regions, use the `widgets` param instead.
     * @param {object} event.widgets In case of expanding a Widget, this will be an object with the Grid region name as property and the reference to the widget instance created by the actual expansion
     */
    onRowExpand?: ((event: { record: Model, expandedElements: object, widget: Widget, widgets: object }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered row
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseEnter?: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseLeave?: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Grid has scrolled vertically
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance.
     * @param {number} event.scrollTop The vertical scroll position.
     */
    onScroll?: ((event: { source: Grid, scrollTop: number }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select','deselect'} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the new selection.
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange?: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/calendar/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange?: ((event: { selectionMode: object }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when splitting the Grid.
     * @param {object} event Event object
     * @param {Grid.view.GridBase[]} event.subViews The sub views created by the split
     * @param {object} event.options The options passed to the split call
     * @param {'horizontal','vertical','both'} event.options.direction The direction of the split
     * @param {Grid.column.Column} event.options.atColumn The column to split at
     * @param {Core.data.Model} event.options.atRecord The record to split at
     */
    onSplit?: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string
    /**
     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterCollapseClick?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired by the Grid after a sub-grid has been resized using the splitter
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The resized subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragEnd?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when a sub-grid resize gesture starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid about to be resized
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterDragStart?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string
    /**
     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,
     * if you want to implement your own behavior.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The Grid instance.
     * @param {Grid.view.SubGrid} event.subGrid The subgrid
     * @param {Event} event.domEvent The native DOM event
     */
    onSplitterExpandClick?: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Editor} event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     * @param {any} event.editorContext.value Cell value
     */
    onStartCellEdit?: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string
    /**
     * Fires on the owning Grid when editing starts
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source Owner grid
     * @param {Grid.util.GridLocation} event.editorContext Editing context
     * @param {Core.widget.Panel} event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.
     * @param {Grid.column.Column} event.editorContext.column Target column
     * @param {Core.data.Model} event.editorContext.record Target record
     * @param {HTMLElement} event.editorContext.cell Target cell
     */
    onStartRowEdit?: ((event: { source: Grid, editorContext: { editor: Panel, column: Column, record: Model, cell: HTMLElement } }) => void)|string
    /**
     * Fires after a sub grid is collapsed.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    onSubGridCollapse?: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fires after a sub grid is expanded.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The firing Grid instance
     * @param {Grid.view.SubGrid} event.subGrid The sub grid instance
     */
    onSubGridExpand?: ((event: { source: Grid, subGrid: SubGrid }) => void)|string
    /**
     * Fired when one or more groups are expanded or collapsed
     * @param {object} event Event object
     * @param {Core.data.Model} event.groupRecord [DEPRECATED] Use `groupRecords` param instead
     * @param {Core.data.Model[]} event.groupRecords The group records being toggled
     * @param {boolean} event.collapse Collapsed (true) or expanded (false)
     * @param {boolean} event.allRecords True if this event is part of toggling all groups
     */
    onToggleGroup?: ((event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, allRecords?: boolean }) => void)|string
    /**
     * Fired after a parent node record toggles its collapsed state.
     * @param {object} event Event object
     * @param {Core.data.Model} event.record The record being toggled.
     * @param {boolean} event.collapse `true` if the node is being collapsed.
     */
    onToggleNode?: ((event: { record: Model, collapse: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when row locking is disabled.
     * @param {object} event Event object
     * @param {Grid.view.GridBase} event.clone The locked clone that will be destroyed
     */
    onUnlockRows?: ((event: { clone: GridBase }) => void)|string
    /**
     * Fires when un-splitting the Grid.
     */
    onUnsplit?: (() => void)|string
}

/**
 * A Grid view of the EventStore.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList)
 */
export class EventList extends Grid {
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    static readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [DateRangeOwner](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner) class, or subclass thereof.
     */
    static readonly isDateRangeOwner: boolean
    /**
     * Identifies an object as an instance of [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) class, or subclass thereof.
     */
    static readonly isDayCellCollecter: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    static readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventList](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList) class, or subclass thereof.
     */
    static readonly isEventList: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    static readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    static readonly isResponsive: boolean
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     */
    animateTimeShift: boolean
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     */
    autoCreate: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * The number of events that this View currently encapsulates in its [date range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#config-range).
     * @deprecated Use [eventCount](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#property-eventCount) instead.
     */
    readonly count: number
    /**
     * Setting this property may change the encapsulated range if the date is outside the current
     * range.
     */
    date: Date
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The class name to add to calendar cells.
     */
    dayCellCls: string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     */
    defaultScrollOptions: BryntumScrollOptions
    /**
     * The textual description generated by the [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) if present, or by the
     * view's date (or date *range* if it has a range) and the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    readonly description: string
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     */
    dragUnit: string
    /**
     * The duration in total days that this view covers.
     */
    readonly duration: number
    /**
     * Gets the end date of the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) that this view covers.
     * Note that Date objects are time points, not a representation of a 24 hour period,
     * So `{startDate : '2020-10-24', endDate : '2020-10-25' }` spans the <strong>single</strong> day
     * 24th October 2020. The end point is `2020-10-25T00:00:00`
     */
    readonly endDate: Date
    /**
     * The number of <strong>visible</strong> events that this view currently displays in its date range.
     */
    readonly eventCount: number
    /**
     * A function, or name of a function in the ownership hierarchy which is used to create
     * the time output next to event bars in an agenda cell.
     */
    eventTimeRenderer: ((eventRecord: EventModel, date: Date) => string|DomConfig|DomConfig[])|string
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     */
    extendAllDayEndDay: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     */
    filterEventResources: boolean
    /**
     * The first *visible* event-bearing element in this view. So if the first day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * cell will be for the Monday.
     */
    firstVisibleCell: HTMLElement
    /**
     * The date of the first *visible* event-bearing element in this view. So if the first day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * date will be the date of the Monday.
     */
    firstVisibleDate: Date
    /**
     * Yields the default description value as calculated using the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#property-dateFormat) which
     * describes this object if no [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) was provided.
     */
    readonly formattedDescription: string
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays: boolean
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [DateRangeOwner](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner) class, or subclass thereof.
     */
    readonly isDateRangeOwner: boolean
    /**
     * Identifies an object as an instance of [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) class, or subclass thereof.
     */
    readonly isDayCellCollecter: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventList](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList) class, or subclass thereof.
     */
    readonly isEventList: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    readonly isResponsive: boolean
    /**
     * The last *visible* event-bearing element in this view. So if the last day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * cell will be for the Friday.
     */
    lastVisibleCell: HTMLElement
    /**
     * The date of the last *visible* event-bearing element in this view. So if the last day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * date will be the date of the Friday.
     */
    lastVisibleDate: Date
    /**
     * This property yields a [RangeMenu](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu) configuration block which encapsulates the range choices
     * which this widget may be set to encapsulate:
     */
    readonly listRangeMenu: RangeMenuConfig
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate: Date
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate: Date
    /**
     * Calendar mode that this view represents (eg. "day", "month" etc). Only accessible when used within a Calendar.
     */
    readonly modeName: string
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     */
    pastEventCls: string
    /**
     * The time range encapsulated by the current [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-date).
     */
    range: string|DurationConfig
    /**
     * Returns the resource associated with this event list when used inside a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     */
    readonly resource: ResourceModel
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     */
    shiftIncrement: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat: string
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     */
    stackMultiDayEvents: boolean
    /**
     * Gets the start date of the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) that this view covers.
     */
    readonly startDate: Date
    /**
     * A String which describes how much the [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-next) and [previous](#Calendar/widget/mixin/CalendarMixin#function-previous)
     * methods will move this view forwards or backwards in time.
     */
    readonly stepUnit: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     */
    syncCalendarDate: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     */
    syncViewDate: boolean
    /**
     * This property yields the base selector to use to find visible cell elements in this view.
     */
    readonly visibleCellSelector: string
    /**
     * An object containing Features
     */
    features: EventListFeaturesType
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fires before the selection changes. Returning `false` from a listener prevents the change
     * @param {object} event Event object
     * @param {string} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records to be deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records to be selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the current selection, before applying `selected` and `deselected`
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells to be deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells to be selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`
     */
    onBeforeSelectionChange: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when user clicks in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user activates contextmenu in a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellContextMenu: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user double clicks a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellDblClick: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated: (() => void)|string
    /**
     * Fired when the mouse enters a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered cell
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the cell that the mouse left
     * @param {Grid.column.Column} event.column The column representing the cell that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseLeave: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when a user moves the mouse out of a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOut: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when user moves the mouse over a grid cell
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid The grid instance
     * @param {Core.data.Model} event.record The record representing the row
     * @param {Grid.column.Column} event.column The column to which the cell belongs
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {HTMLElement} event.target The target element
     * @param {MouseEvent} event.event The native DOM event
     */
    onCellMouseOver: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until
     * mouse up. This event can be listened for to perform actions while drag selecting.
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source
     * @param {GridLocationConfig[],Grid.util.GridLocation[]} event.selectedCells The cells that is currently being dragged over
     * @param {Core.data.Model[]} event.selectedRecords The records that is currently being dragged over
     */
    onDragSelecting: ((event: { source: Grid, selectedCells: GridLocationConfig[]|GridLocation[], selectedRecords: Model[] }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fired when a grid header is clicked on.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-headerClick)
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Grid.column.Column} event.column The column clicked on.
     */
    onHeaderClick: ((event: { domEvent: Event, column: Column }) => Promise<boolean>|boolean|void)|string
    /**
     * Mouse moved out from element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOut: ((event: { event: MouseEvent }) => void)|string
    /**
     * Mouse moved in over element in grid
     * @param {object} event Event object
     * @param {MouseEvent} event.event The native browser event
     */
    onMouseOver: ((event: { event: MouseEvent }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Grid resize lead to a new responsive level being applied
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.grid Grid that was resized
     * @param {string} event.level New responsive level (small, large, etc)
     * @param {number} event.width New width in px
     * @param {string} event.oldLevel Old responsive level
     * @param {number} event.oldWidth Old width in px
     */
    onResponsive: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the mouse enters a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the hovered row
     * @param {Grid.column.Column} event.column The column currently hovered
     * @param {HTMLElement} event.cellElement The cell HTML element
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseEnter: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * Fired when the mouse leaves a row
     * @param {object} event Event object
     * @param {Grid.view.Grid} event.source The grid instance
     * @param {Core.data.Model} event.record The record representing the row that the mouse left
     * @param {HTMLElement} event.cellElement The cell HTML element that the mouse left
     * @param {MouseEvent} event.event The native DOM event
     */
    onRowMouseLeave: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string
    /**
     * The selection has been changed.
     * @param {object} event Event object
     * @param {'select','deselect'} event.action `'select'`/`'deselect'`
     * @param {'row','cell'} event.mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} event.source
     * @param {Core.data.Model[]} event.deselected The records deselected in this operation.
     * @param {Core.data.Model[]} event.selected The records selected in this operation.
     * @param {Core.data.Model[]} event.selection The records in the new selection.
     * @param {Grid.util.GridLocation[]} event.deselectedCells The cells deselected in this operation.
     * @param {Grid.util.GridLocation[]} event.selectedCells The cells selected in this operation.
     * @param {Grid.util.GridLocation[]} event.cellSelection The cells in the new selection.
     */
    onSelectionChange: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => void)|string
    /**
     * The selectionMode configuration has been changed.
     * @param {object} event Event object
     * @param {object} event.selectionMode The new [selectionMode](https://bryntum.com/products/calendar/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)
     */
    onSelectionModeChange: ((event: { selectionMode: object }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange: ((event: { old?: object, new: object }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {EventListConfig} config
     */
    constructor(config?: EventListConfig);
    /**
     * This method produces the date details block in [AgendaView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/AgendaView) cells
     * as a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {Date} date
     */
    agendaEventDateRenderer(date: Date): DomConfig;
    /**
     * Determines what is under the cursor of the specified event or what is described by the given element.
     * @param {Event,Element} domEvent The event or element
     */
    calendarHitTest(domEvent: Event|Element): CalendarHit;
    /**
     * Creates the Month utility object. We use it to track what week we are looking at.
     */
    changeMonth(): void;
    /**
     * Creates an event on the specified date which conforms to this view's [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)
     * setting.
     * @param {Date} date The date to add the event at. If there's no time component, the [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)'s `startHour` will be used.
     */
    createEvent(date: Date): void;
    /**
     * This is the standard way to create a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig)
     * element definition object for creating event bars in all view types.
     * @param {object} renderData Context for the event bar config creation.
     * @param {Function} eventRenderer Optionally a function which created content HTML for the event body. Defaults to any [eventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer) configured into this view.
     */
    createEventDomConfig(renderData: {
        eventRecord: EventModel
        minimal: boolean
        date: Date
        eventEndDate?: Date
    }, eventRenderer?: Function): DomConfig;
    /**
     * Produces the time details next to the event bar in [EventList](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList) and [AgendaView](#Calendar/widget/AgendaView).
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Date} forDate The date cell into which the event is being rendered.
     */
    defaultEventTimeRenderer(eventRecord: EventModel, forDate: Date): string;
    /**
     * This method produces the event time details next to the event bar in
     * [EventList](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventList) and [AgendaView](#Calendar/widget/AgendaView)
     * as a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object.
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Date} forDate The date cell into which the event is being rendered.
     */
    eventListEventTimeRenderer(eventRecord: EventModel, forDate: Date): DomConfig;
    /**
     * Returns the cell associated with the passed date.
     * @param {Date,string} date The date to find the element for or a key in the format `YYYY-MM-DD`
     * @param {boolean} strict Only return the element if this view *owns* the date. (MonthView and YearView)
     */
    getDayElement(date: Date|string, strict: boolean): void;
    /**
     * Returns the outermost element which represents the first block of the passed event in the view. <em>If the
     * event is represented within the view</em>.
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the element for.
     * @param {Date} date Optionally, the event element at the specified date.
     */
    getEventElement(eventRecord: EventModel|string|number, date?: Date): HTMLElement;
    /**
     * Returns all outermost elements which represents the passed event in the view. <em>If the
     * event is represented within the view</em>
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the elements for.
     */
    getEventElements(eventRecord: EventModel|string|number): HTMLElement[];
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Returns the resource record for a DOM element or DOM event if the element is inside a view
     * which displays events for one resource such as a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     * or a [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView).
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getResourceRecord(elementOrEvent: HTMLElement|Event): ResourceModel;
    /**
     * Interface method used by an encapsulating Calendar view to implement the "next" button.
     */
    next(): void;
    /**
     * This is added as a listener by the CalendarStores mixin.
     */
    onCalendarStoreChange(): void;
    /**
     * Called when new event is created.
     * Сan be overridden to supply default record values etc.
     * @param {Scheduler.model.EventModel} eventRecord Newly created event
     */
    onEventCreated(eventRecord: EventModel): void;
    /**
     * When the date we have been told to look at changes, recalculate the date range.
     * If the date range changes, this will cause a refill of our grid store from the
     * master event store.
     */
    onMonthChange(): void;
    /**
     * Interface method used by an encapsulating Calendar view to implement the "prev" button.
     */
    previous(): void;
    /**
     * Refreshes the UI after a change to the EventStore, or to a configuration that requires
     * the UI to change.
     */
    refresh(): void;
    /**
     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when
     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and
     * DOM churn is kept to a minimum.
     */
    refreshSoon(): void;
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    resolveEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Scrolls vertically to bring an event or a time into view.
     * @param {Scheduler.model.EventModel,Date,string} target The event to scroll to or a `Date`, or `YYYY-MM-DD` date to scroll to.
     * @param {object} options How to scroll.
     */
    scrollTo(target: EventModel|Date|string, options?: {
        block?: string
        edgeOffset?: number
        animate?: object|boolean|number
        highlight?: boolean|Function
        focus?: boolean
        y?: boolean
    }): Promise<any>;
    /**
     * When an EventStore arrives, chain off a slave store from that which we can then
     * filter to only show the week we are focused upon.
     */
    updateEventStore(): void;
}

/**
 * Type with available listeners functions for [EventTip](https://bryntum.com/products/grid/docs/api/Calendar/widget/EventTip) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type EventTipListenersTypes = {
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    beforeClose: (event: { source: Popup }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before tooltip widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Tooltip} event.source The Tooltip
     */
    beforeShow: (event: { source: Tooltip }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Core.widget.Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    pointerOver: (event: { sourceThe: Tooltip, event: Event }) => Promise<boolean>|boolean|void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [EventTip](https://bryntum.com/products/grid/docs/api/Calendar/widget/EventTip) class.
 */
type EventTipListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    beforeClose?: ((event: { source: Popup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before tooltip widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Tooltip} event.source The Tooltip
     */
    beforeShow?: ((event: { source: Tooltip }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Core.widget.Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    pointerOver?: ((event: { sourceThe: Tooltip, event: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [EventTip](https://bryntum.com/products/grid/docs/api/Calendar/widget/EventTip) class.
 */
type EventTipConfig = {
    type?: 'eventTooltip'|'eventtooltip'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * Keep the tooltip open if user moves the mouse over it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-allowOver)
     */
    allowOver?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * Set to `true` to anchor tooltip to the triggering target. If set to `false`, the tooltip
     * will align to the mouse position. When set to `false`, it will also set `anchor: false`
     * to hide anchor arrow.
     */
    anchorToTarget?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/calendar/docs/api/Core/widget/Tooltip#function-hide) when the user clicks or
     * taps outside its widget. Configure as `false` to make a Tooltip non-transient when user clicks outside it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-autoClose)
     */
    autoClose?: boolean
    /**
     * By default, a Tooltip is transient, and will [hide](https://bryntum.com/products/calendar/docs/api/Core/widget/Tooltip#function-hide) when the mouse exits the target
     * element. Configure as `false` to make a Tooltip non-transient.
     */
    autoHide?: boolean
    /**
     * Show immediately when created
     */
    autoShow?: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord?: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Show a tool in the header to close this Popup.
     * The tool is available in the [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable?: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-closeAction)
     */
    closeAction?: 'hide'|'destroy'
    /**
     * Close popup when `ESC` key is pressed.
     */
    closeOnEscape?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content?: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format dates displayed in this tooltip.
     */
    dateFormat?: string
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
     * target. If the tooltip is anchored to its target, then moving the mouse during this time
     * resets the timer so that the tooltip will remain visible.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-dismissDelay)
     */
    dismissDelay?: number
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * Set to `false` to prevent dragging the popup element.
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * The event record for this tip to display
     */
    eventRecord?: EventModel
    /**
     * By default, the end date of an all day event is displayed in the tooltip UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
     * (see [hoverDelay](https://bryntum.com/products/calendar/docs/api/Core/widget/Tooltip#config-hoverDelay)) to show itself.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-forElement)
     */
    forElement?: HTMLElement
    /**
     * A CSS selector which targets child elements of the [forElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Tooltip#config-forElement) that should produce a
     * tooltip when hovered over.
     */
    forSelector?: string
    /**
     * A method, or the *name* of a method called to update the tooltip's content when the
     * cursor is moved over a target. It receives one argument containing context about the
     * tooltip and show operation. The function should return a string, or a Promise yielding
     * a string.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-getHtml)
     * @param {object} context
     * @param {Core.widget.Tooltip} context.tip The tooltip instance
     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement
     * @param {HTMLElement} context.activeTarget The target element that triggered the show
     * @param {Event} context.event The raw DOM event
     * @returns {string,Promise<any>}
     */
    getHtml?: ((context: { tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }) => string|Promise<any>)|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-hideDelay)
     */
    hideDelay?: number|boolean
    /**
     * By default, when moving rapidly from target to target, if, when mouseovering
     * a new target, the tip is still visible, the tooltip does not hide, it remains
     * visible, but updates its content however it is configured to do so.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-hideOnDelegateChange)
     */
    hideOnDelegateChange?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * The amount of time to hover before showing
     */
    hoverDelay?: number
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-html)
     * @param {Core.widget.Widget} widget The calling Widget
     * @returns {string}
     */
    html?: string|((widget: Widget) => string)|DomConfig|DomConfig[]|VueConfig
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls?: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-listeners)
     */
    listeners?: EventTipListeners
    /**
     * The message to show while an async tooltip is fetching its content.
     */
    loadingMsg?: string
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized?: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-modal)
     */
    modal?: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * Horizontal offset from mouse when [anchorToTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-mouseOffsetX)
     */
    mouseOffsetX?: number
    /**
     * Vertical offset from mouse when [anchorToTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/Tooltip#config-anchorToTarget) is `false`
     */
    mouseOffsetY?: number
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-owner)
     */
    owner?: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-readOnly)
     */
    readOnly?: boolean
    /**
     * [Record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-record)
     */
    record?: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-ref)
     */
    ref?: string
    /**
     * A function, or name of a function in the ownership hierarchy which is used to create
     * the content of the tooltip's body.
     * @param {object} data Contextual data about the current tooltip activation
     * @param {HTMLElement} data.activeTarget The event bar element being aligned to
     * @param {Scheduler.model.EventModel} data.eventRecord The event record
     * @param {Event} data.event The DOM event which initiated the tooltip show
     * @param {Calendar.widget.EventTip} data.tip The tooltip instance being shown
     * @returns {string,DomConfig} The content of the body element.
     */
    renderer?: ((data: { activeTarget: HTMLElement, eventRecord: EventModel, event: Event, tip: EventTip }) => string|DomConfig)|string
    /**
     * Configure this property to allow the widget/component to be resized. Pressing <kbd>Shift</kbd> while resizing will
     * constrain the aspect ratio.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-resizable)
     */
    resizable?: boolean|{
        minWidth?: number
        maxWidth?: number
        minHeight?: number
        maxHeight?: number
        handles?: object
    }
    /**
     * By default, if the tip's target event is in a cluster of overlapping events and therefore
     * narrow, activating the tip will expand it to full width temporarily.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-revealEventsInCluster)
     */
    revealEventsInCluster?: boolean
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover. Can
     * also be provided as the button number (0: main button, 2: right button).
     */
    showOnClick?: boolean|number
    /**
     * Show on hover
     */
    showOnHover?: boolean
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-textContent)
     */
    textContent?: boolean
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in this tooltip.
     */
    timeFormat?: string
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-title)
     */
    title?: string
    /**
     * A function, or name of a function in the ownership hierarchy which is used to create
     * the content of the tooltip's header.
     * @param {Scheduler.model.EventModel} eventRecord The event record
     * @returns {string,DomConfig} The content of the header element.
     */
    titleRenderer?: ((eventRecord: EventModel) => string|DomConfig)|string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, once a tooltip is shown aligned as requested, it stays put.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-trackMouse)
     */
    trackMouse?: boolean
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#config-y)
     */
    y?: number
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    onBeforeClose?: ((event: { source: Popup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before tooltip widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Tooltip} event.source The Tooltip
     */
    onBeforeShow?: ((event: { source: Tooltip }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @param {object} event Event object
     * @param {Core.widget.Tooltip} event.sourceThe tooltip instance.
     * @param {Event} event.event The mouseover event.
     */
    onPointerOver?: ((event: { sourceThe: Tooltip, event: Event }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Displays a tooltip containing extra info and options on either event click or event hover.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip)
 */
export class EventTip extends Tooltip {
    /**
     * Identifies an object as an instance of [EventTip](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip) class, or subclass thereof.
     */
    static readonly isEventTip: boolean
    /**
     * The event which the tooltip feature has been shown for.
     */
    readonly eventRecord: EventModel
    /**
     * By default, the end date of an all day event is displayed in the tooltip UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     */
    extendAllDayEndDay: boolean
    /**
     * Identifies an object as an instance of [EventTip](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip) class, or subclass thereof.
     */
    readonly isEventTip: boolean
    /**
     * A function, or name of a function in the ownership hierarchy which is used to create
     * the content of the tooltip's body.
     */
    renderer: ((data: { activeTarget: HTMLElement, eventRecord: EventModel, event: Event, tip: EventTip }) => string|DomConfig)|string
    /**
     * By default, if the tip's target event is in a cluster of overlapping events and therefore
     * narrow, activating the tip will expand it to full width temporarily.
     */
    revealEventsInCluster: boolean
    /**
     * A function, or name of a function in the ownership hierarchy which is used to create
     * the content of the tooltip's header.
     */
    titleRenderer: ((eventRecord: EventModel) => string|DomConfig)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/EventTip#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {EventTipConfig} config
     */
    constructor(config?: EventTipConfig);
}

/**
 * Type with available listeners functions for [ModeSelector](https://bryntum.com/products/grid/docs/api/Calendar/widget/ModeSelector) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type ModeSelectorListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
}

/**
 * Type with listeners options for [ModeSelector](https://bryntum.com/products/grid/docs/api/Calendar/widget/ModeSelector) class.
 */
type ModeSelectorListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
}

/**
 * Type with configuration options for [ModeSelector](https://bryntum.com/products/grid/docs/api/Calendar/widget/ModeSelector) class.
 */
type ModeSelectorConfig = {
    type?: 'calendarModeSelector'|'calendarmodeselector'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * Update assigned [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord?: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * The button or button config object that will display a popup menu to select the calendar mode.
     */
    button?: Button
    /**
     * The button group or button group config object that will display the calendar modes, one per button.
     */
    buttonBar?: ButtonGroup
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-cls)
     */
    cls?: string|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content?: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-html)
     * @param {Core.widget.Widget} widget The calling Widget
     * @returns {string}
     */
    html?: string|((widget: Widget) => string)|DomConfig|DomConfig[]|VueConfig
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls?: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-listeners)
     */
    listeners?: ModeSelectorListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * Set to `false` to prevent this widget from assuming is [minified](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-minified) form automatically (for
     * example, due to [overflow](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar#config-overflow) handling.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-minifiable)
     */
    minifiable?: boolean
    /**
     * Set to `true` to present this widget in its minimal form.
     */
    minified?: boolean
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-owner)
     */
    owner?: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-readOnly)
     */
    readOnly?: boolean
    /**
     * [Record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-record)
     */
    record?: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-ref)
     */
    ref?: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-textContent)
     */
    textContent?: boolean
    /**
     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
     */
    title?: string
    /**
     * The config property that will be used as the readable title for each mode.
     */
    titleProperty?: string
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-ui)
     */
    ui?: string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-y)
     */
    y?: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
}

/**
 * Displays a UI which allows selection of calendar modes. The modes can be displayed as a [ButtonGroup](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup) or a single
 * [Button](https://bryntum.com/products/calendar/docs/api/Core/widget/Button) with a [menu](#Core/widget/Button#config-menu). Which presentation is used depends on
 * the [minified](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#config-minified) config property. By default, this is set
 * [responsively](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) in order to present the best UI for different
 * screen sizes.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector)
 */
export class ModeSelector extends Container {
    /**
     * Identifies an object as an instance of [ModeSelector](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector) class, or subclass thereof.
     */
    static readonly isModeSelector: boolean
    /**
     * The [Button](https://bryntum.com/products/calendar/docs/api/Core/widget/Button) that will toggle the display of non-working days.
     */
    readonly includeWeekendsButton: Button
    /**
     * The [MenuItem](https://bryntum.com/products/calendar/docs/api/Core/widget/MenuItem) that will toggle the display of non-working days when the Calendar UI is narrow
     * and the modes are selected using a menu.
     */
    readonly includeWeekendsMenuItem: Button
    /**
     * Identifies an object as an instance of [ModeSelector](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector) class, or subclass thereof.
     */
    readonly isModeSelector: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ModeSelector#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {ModeSelectorConfig} config
     */
    constructor(config?: ModeSelectorConfig);
}

/**
 * Type with available listeners functions for [MonthAgendaView](https://bryntum.com/products/grid/docs/api/Calendar/widget/MonthAgendaView) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type MonthAgendaViewListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fires before this CalendarPanel refreshes in response to changes in its month.
     * @param {object} event Event object
     * @param {Core.widget.DatePicker} event.source This DatePicker.
     */
    beforeRefresh: (event: { source: DatePicker }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fires when the date of this CalendarPanel is set.
     * @param {object} event Event object
     * @param {Date} event.value The new date.
     * @param {Date} event.oldValue The old date.
     * @param {object} event.changes An object which contains properties which indicate what part of the date changed.
     * @param {boolean} event.changes.d True if the date changed in any way.
     * @param {boolean} event.changes.w True if the week changed (including same week in a different year).
     * @param {boolean} event.changes.m True if the month changed (including same month in a different year).
     * @param {boolean} event.changes.y True if the year changed.
     */
    dateChange: (event: { value: Date, oldValue: Date, changes: { d: boolean, w: boolean, m: boolean, y: boolean } }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this CalendarPanel refreshes.
     */
    refresh: () => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Fires when a date or date range is selected. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified,
     * this will fire upon deselection and selection of dates.
     * @param {object} event Event object
     * @param {Date[]} event.selection The selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {Date[]} event.oldSelection The previously selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {boolean} event.userAction This will be `true` if the change was caused by user interaction as opposed to programmatic setting.
     */
    selectionChange: (event: { selection: Date[], oldSelection: Date[], userAction: boolean }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [MonthAgendaView](https://bryntum.com/products/grid/docs/api/Calendar/widget/MonthAgendaView) class.
 */
type MonthAgendaViewListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before this CalendarPanel refreshes in response to changes in its month.
     * @param {object} event Event object
     * @param {Core.widget.DatePicker} event.source This DatePicker.
     */
    beforeRefresh?: ((event: { source: DatePicker }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when the date of this CalendarPanel is set.
     * @param {object} event Event object
     * @param {Date} event.value The new date.
     * @param {Date} event.oldValue The old date.
     * @param {object} event.changes An object which contains properties which indicate what part of the date changed.
     * @param {boolean} event.changes.d True if the date changed in any way.
     * @param {boolean} event.changes.w True if the week changed (including same week in a different year).
     * @param {boolean} event.changes.m True if the month changed (including same month in a different year).
     * @param {boolean} event.changes.y True if the year changed.
     */
    dateChange?: ((event: { value: Date, oldValue: Date, changes: { d: boolean, w: boolean, m: boolean, y: boolean } }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this CalendarPanel refreshes.
     */
    refresh?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Fires when a date or date range is selected. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified,
     * this will fire upon deselection and selection of dates.
     * @param {object} event Event object
     * @param {Date[]} event.selection The selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {Date[]} event.oldSelection The previously selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {boolean} event.userAction This will be `true` if the change was caused by user interaction as opposed to programmatic setting.
     */
    selectionChange?: ((event: { selection: Date[], oldSelection: Date[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [MonthAgendaView](https://bryntum.com/products/grid/docs/api/Calendar/widget/MonthAgendaView) class.
 */
type MonthAgendaViewConfig = {
    type?: 'monthagenda'
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-activationKey)
     */
    activationKey?: string
    /**
     * The date that the user has navigated to using the UI *prior* to setting the widget's
     * value by selecting. The initial default is today's date. Can also be supplied as a `YYYY-MM-DD` date
     * string.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-activeDate)
     */
    activeDate?: Date|'today'|string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * A function or the name of a function in the ownership hierarchy which, when passed the active date produces a
     * title for the agenda part of the view. Defaults to having *no header*.
     * @param {Date} date The date which the Agenda part of the view is displaying.
     * @returns {string} The content of the agenda header below the month view.
     */
    agendHeaderRenderer?: ((date: Date) => string)|string
    /**
     * A config object to reconfigure the default child view which displays the selected date's events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-agenda)
     * @param {'agendaview','dayview','dayagenda'} type The type of view to display the day's events below the month.
     */
    agenda?: AgendaViewConfig|DayViewConfig|DayAgendaViewConfig|{type: 'agendaview'|'dayview'|'dayagenda'}|AgendaView|DayView|DayAgendaView
    /**
     * A [date formatting string](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) which produces a title for the agenda part of the view.
     */
    agendaDateFormat?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * A function (or the name of a function) which creates content in, and may mutate a day cell element.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cell The header element
     * @param {Date} renderData.date The date for the cell
     * @param {number} renderData.day The day for the cell (`0` to `6` for Sunday to Saturday)
     * @param {number[]} renderData.rowIndex The row index, 0 to month row count (6 if [sixWeeks](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-sixWeeks) is `true`)
     * @param {HTMLElement} renderData.row The row element encapsulating the week which the cell is a part of
     * @param {Core.widget.CalendarPanel} renderData.source The widget being rendered
     * @param {number[]} renderData.cellIndex The cell index in the whole panel. May be from `0` to up to `42`
     * @param {number[]} renderData.columnIndex The column index, `0` to `6`
     * @param {number[]} renderData.visibleColumnIndex The visible column index taking hidden non working days into account
     * @returns {string,DomConfig,void}
     */
    cellRenderer?: ((renderData: { cell: HTMLElement, date: Date, day: number, rowIndex: number[], row: HTMLElement, source: CalendarPanel, cellIndex: number[], columnIndex: number[], visibleColumnIndex: number[] }) => string|DomConfig|void)|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The initially selected date (or a `YYYY-MM-DD` date string).
     */
    date?: Date|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names.
     */
    dayNameFormat?: string
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Configure as `true` to render non working days as [disabledDates](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-disabledDates).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-disableNonWorkingDays)
     */
    disableNonWorkingDays?: boolean
    /**
     * Configure this as true to disable pointer interaction with cells which are outside the
     * range of the current month.
     */
    disableOtherMonthCells?: boolean
    /**
     * Configure as `true` to render Saturdays and Sundays as [disabledDates](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-disabledDates).
     */
    disableWeekends?: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * The class name to add to disabled calendar cells.
     */
    disabledCls?: string
    /**
     * Either an array of `Date` objects which are to be disabled (or date strings), or
     * a function (or the name of a function), which, when passed a `Date` returns `true` if the
     * date is disabled.
     * @param {Date} date Date to check
     * @returns {boolean} Returns `true` if the provided date is disabled
     */
    disabledDates?: ((date: Date) => boolean)|string|Date[]|string[]
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-dragUnit)
     */
    dragUnit?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * By default, the month and year are editable. Configure this as `false` to prevent that.
     */
    editMonth?: boolean
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is <strong>not</strong> `'count'`, setting this to
     * `true` means that a tooltip containing the event count will be shown on hover of
     * a day cell.
     */
    eventCountTip?: boolean
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is `'dots'`, this controls the layout of the dots
     * below the day number.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-eventDots)
     */
    eventDots?: {
        marginTop?: number
        max?: number
        gap?: number
        size?: number
        stripe?: boolean
    }
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-eventFilter)
     * @param {Scheduler.model.EventModel} event Event for filtering
     * @returns {boolean} Return `true` to include the passed event
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * The [event store](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore) from which the in-cell event presence
     * indicators are drawn.
     */
    eventStore?: EventStore
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * By default, disabled dates cannot be navigated to, and they are skipped over
     * during keyboard navigation. Configure this as `true` to enable navigation to
     * disabled dates.
     */
    focusDisabledDates?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * A function (or the name of a function) which creates content in, and may mutate a day header element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-headerRenderer)
     * @param {HTMLElement} cell The header element
     * @param {number} columnIndex The day column. Will be in the range `0` to `6`
     * @param {number} weekDay The canonical day number where Monday is `0` and Sunday is `6`
     * @returns {string,DomConfig,void}
     */
    headerRenderer?: ((cell: HTMLElement, columnIndex: number, weekDay: number) => string|DomConfig|void)|string
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * Configure this as `true` to hide cells which are outside the range of the current month.
     */
    hideOtherMonthCells?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * Configure as `true` to add a highlighted border and background to the week row which
     * encapsulates the selected date.
     */
    highlightSelectedWeek?: boolean
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * By default, the year is visible. Configure this as `false` to prevent that.
     */
    includeYear?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-listeners)
     */
    listeners?: MonthAgendaViewListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum selectable date. Selection of and navigation to dates after
     * this date will not be possible.
     */
    maxDate?: Date
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is `'dots'`, this is the maximum number of dots to show
     * below the date number in the cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-maxDots)
     * @deprecated 6.1.2 Use [eventDots](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#property-eventDots) instead.
     */
    maxDots?: number
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * By default, day cells flex to share available Panel width equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-minColumnWidth)
     */
    minColumnWidth?: number
    /**
     * The minimum selectable date. Selection of and navigation to dates prior
     * to this date will not be possible.
     */
    minDate?: Date
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * By default, week rows flex to share available Panel height equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-minRowHeight)
     */
    minRowHeight?: number|string
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * A [Month](https://bryntum.com/products/calendar/docs/api/Core/util/Month) Month utility object which encapsulates this Panel's month
     * and provides contextual information and navigation services.
     */
    month?: Month|MonthConfig
    /**
     * Configure as `true` to enable selecting multiple discontiguous date ranges using
     * click and Shift+click to create ranges and Ctrl+click to select/deselect individual dates.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-multiSelect)
     */
    multiSelect?: boolean|'range'|'simple'
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * The class name to add to calendar cells which are [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-nonWorkingDays).
     */
    nonWorkingDayCls?: string
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * The class name to add to calendar cells which are in the previous or next month.
     */
    otherMonthCls?: string
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-ref)
     */
    ref?: string
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is configured as `true`, this is an array of dates
     * which are selected. There may be multiple, discontiguous date ranges.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-selection)
     */
    selection?: Date[]|string[]
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#function-next) or [previous](#Calendar/widget/MonthAgendaView#function-previous) is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-shiftIncrement)
     */
    shiftIncrement?: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * How to show presence of events in the configured [eventStore](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventStore) in the
     * day cells. Values may be:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-showEvents)
     */
    showEvents?: boolean|'count'|'dots'|'heatmap'
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * Configure as `true` to show a week number column at the start of the calendar block.
     */
    showWeekColumn?: boolean
    /**
     * Configure as `true` to always show a six-week calendar.
     */
    sixWeeks?: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * A config object to create a tooltip which will show on hover of a date cell including disabled, weekend,
     * and "other month" cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-tip)
     */
    tip?: TooltipConfig
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-title)
     */
    title?: string
    /**
     * The class name to add to the calendar cell which contains today's date.
     */
    todayCls?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-weekRenderer)
     * @param {HTMLElement} weekCell The header element
     * @param {number[]} week An array containing `[year, weekNumber]`
     * @returns {string,DomConfig,void}
     */
    weekRenderer?: ((weekCell: HTMLElement, week: number[]) => string|DomConfig|void)|string
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * The class name to add to calendar cells which are weekend dates.
     */
    weekendCls?: string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#config-y)
     */
    y?: number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before this CalendarPanel refreshes in response to changes in its month.
     * @param {object} event Event object
     * @param {Core.widget.DatePicker} event.source This DatePicker.
     */
    onBeforeRefresh?: ((event: { source: DatePicker }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when the date of this CalendarPanel is set.
     * @param {object} event Event object
     * @param {Date} event.value The new date.
     * @param {Date} event.oldValue The old date.
     * @param {object} event.changes An object which contains properties which indicate what part of the date changed.
     * @param {boolean} event.changes.d True if the date changed in any way.
     * @param {boolean} event.changes.w True if the week changed (including same week in a different year).
     * @param {boolean} event.changes.m True if the month changed (including same month in a different year).
     * @param {boolean} event.changes.y True if the year changed.
     */
    onDateChange?: ((event: { value: Date, oldValue: Date, changes: { d: boolean, w: boolean, m: boolean, y: boolean } }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this CalendarPanel refreshes.
     */
    onRefresh?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Fires when a date or date range is selected. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified,
     * this will fire upon deselection and selection of dates.
     * @param {object} event Event object
     * @param {Date[]} event.selection The selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {Date[]} event.oldSelection The previously selected dates. If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is specified this may be a two element array specifying start and end dates.
     * @param {boolean} event.userAction This will be `true` if the change was caused by user interaction as opposed to programmatic setting.
     */
    onSelectionChange?: ((event: { selection: Date[], oldSelection: Date[], userAction: boolean }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * A Calendar view class which displays a compact month calendar suitable for display on a phone sized screen.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView)
 */
export class MonthAgendaView extends CalendarDatePicker {
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    static readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    static readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    static readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [MonthAgendaView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView) class, or subclass thereof.
     */
    static readonly isMonthAgendaView: boolean
    /**
     * A config object to reconfigure the default child view which displays the selected date's events.
     */
    agenda: AgendaViewConfig|DayViewConfig|DayAgendaViewConfig|{type: 'agendaview'|'dayview'|'dayagenda'}|AgendaView|DayView|DayAgendaView
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     */
    animateTimeShift: boolean
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     */
    autoCreate: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The class name to add to calendar cells.
     */
    dayCellCls: string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     */
    defaultScrollOptions: BryntumScrollOptions
    /**
     * The textual description generated by the [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) if present, or by the
     * view's date (or date *range* if it has a range) and the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    readonly description: string
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     */
    dragUnit: string
    /**
     * The duration in total days that this view covers.
     */
    readonly duration: number
    /**
     * The number of <strong>visible</strong> events that this view currently displays in its date range.
     */
    readonly eventCount: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     */
    extendAllDayEndDay: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     */
    filterEventResources: boolean
    /**
     * The first *visible* event-bearing element in this view. So if the first day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * cell will be for the Monday.
     */
    firstVisibleCell: HTMLElement
    /**
     * The date of the first *visible* event-bearing element in this view. So if the first day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * date will be the date of the Monday.
     */
    firstVisibleDate: Date
    /**
     * Yields the default description value as calculated using the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#property-dateFormat) which
     * describes this object if no [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) was provided.
     */
    readonly formattedDescription: string
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays: boolean
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [MonthAgendaView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView) class, or subclass thereof.
     */
    readonly isMonthAgendaView: boolean
    /**
     * The last *visible* event-bearing element in this view. So if the last day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * cell will be for the Friday.
     */
    lastVisibleCell: HTMLElement
    /**
     * The date of the last *visible* event-bearing element in this view. So if the last day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * date will be the date of the Friday.
     */
    lastVisibleDate: Date
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate: Date
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate: Date
    /**
     * Calendar mode that this view represents (eg. "day", "month" etc). Only accessible when used within a Calendar.
     */
    readonly modeName: string
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     */
    pastEventCls: string
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#function-next) or [previous](#Calendar/widget/MonthAgendaView#function-previous) is called.
     */
    shiftIncrement: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat: string
    /**
     * A String which describes how much the [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-next) and [previous](#Calendar/widget/mixin/CalendarMixin#function-previous)
     * methods will move this view forwards or backwards in time.
     */
    readonly stepUnit: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     */
    syncCalendarDate: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     */
    syncViewDate: boolean
    /**
     * This property yields the base selector to use to find visible cell elements in this view.
     */
    readonly visibleCellSelector: string
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthAgendaView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {MonthAgendaViewConfig} config
     */
    constructor(config?: MonthAgendaViewConfig);
    /**
     * Determines what is under the cursor of the specified event or what is described by the given element.
     * @param {Event,Element} domEvent The event or element
     */
    calendarHitTest(domEvent: Event|Element): CalendarHit;
    /**
     * Creates an event on the specified date which conforms to this view's [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)
     * setting.
     * @param {Date} date The date to add the event at. If there's no time component, the [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)'s `startHour` will be used.
     */
    createEvent(date: Date): void;
    /**
     * This is the standard way to create a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig)
     * element definition object for creating event bars in all view types.
     * @param {object} renderData Context for the event bar config creation.
     * @param {Function} eventRenderer Optionally a function which created content HTML for the event body. Defaults to any [eventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer) configured into this view.
     */
    createEventDomConfig(renderData: {
        eventRecord: EventModel
        minimal: boolean
        date: Date
        eventEndDate?: Date
    }, eventRenderer?: Function): DomConfig;
    /**
     * Returns the cell associated with the passed date.
     * @param {Date,string} date The date to find the element for or a key in the format `YYYY-MM-DD`
     * @param {boolean} strict Only return the element if this view *owns* the date. (MonthView and YearView)
     */
    getDayElement(date: Date|string, strict: boolean): void;
    /**
     * Returns the outermost element which represents the first block of the passed event in the view. <em>If the
     * event is represented within the view</em>.
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the element for.
     * @param {Date} date Optionally, the event element at the specified date.
     */
    getEventElement(eventRecord: EventModel|string|number, date?: Date): HTMLElement;
    /**
     * Returns all outermost elements which represents the passed event in the view. <em>If the
     * event is represented within the view</em>
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the elements for.
     */
    getEventElements(eventRecord: EventModel|string|number): HTMLElement[];
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Returns the resource record for a DOM element or DOM event if the element is inside a view
     * which displays events for one resource such as a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     * or a [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView).
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getResourceRecord(elementOrEvent: HTMLElement|Event): ResourceModel;
    /**
     * Moves this view forwards in time by its configured (or intrinsic if it's a
     * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) or a [YearView](#Calendar/widget/YearView)) duration.
     */
    next(): void;
    /**
     * Called when new event is created.
     * Сan be overridden to supply default record values etc.
     * @param {Scheduler.model.EventModel} eventRecord Newly created event
     */
    onEventCreated(eventRecord: EventModel): void;
    /**
     * Moves this view backwards in time by its configured (or intrinsic if it's a
     * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) or a [YearView](#Calendar/widget/YearView)) duration.
     */
    previous(): void;
    /**
     * Refreshes the UI after a change to the EventStore, or to a configuration that requires
     * the UI to change.
     */
    refresh(): void;
    /**
     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when
     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and
     * DOM churn is kept to a minimum.
     */
    refreshSoon(): void;
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    resolveEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Brings an event or a time into view. Optionally visually highlights the target.
     * @param {Scheduler.model.EventModel,Date} target The event or Date to scroll to.
     * @param {object} options How to scroll.
     */
    scrollTo(target: EventModel|Date, options?: {
        block?: 'start'|'end'|'center'|'nearest'
        edgeOffset?: number
        animate?: object|boolean|number
        highlight?: boolean|Function
        focus?: boolean
        x?: boolean
        y?: boolean
    }): Promise<any>;
}

/**
 * Type with available listeners functions for [MonthView](https://bryntum.com/products/grid/docs/api/Calendar/widget/MonthView) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type MonthViewListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fires before this CalendarPanel refreshes in response to changes in its month.
     * @param {object} event Event object
     * @param {Core.widget.DatePicker} event.source This DatePicker.
     */
    beforeRefresh: (event: { source: DatePicker }) => void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    beforeShowOverflowPopup: (event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated: () => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fires when the date of this CalendarPanel is set.
     * @param {object} event Event object
     * @param {Date} event.value The new date.
     * @param {Date} event.oldValue The old date.
     * @param {object} event.changes An object which contains properties which indicate what part of the date changed.
     * @param {boolean} event.changes.d True if the date changed in any way.
     * @param {boolean} event.changes.w True if the week changed (including same week in a different year).
     * @param {boolean} event.changes.m True if the month changed (including same month in a different year).
     * @param {boolean} event.changes.y True if the year changed.
     */
    dateChange: (event: { value: Date, oldValue: Date, changes: { d: boolean, w: boolean, m: boolean, y: boolean } }) => void
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated: (event: { events: EventModel[], The: Date }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    emptyCellClick: (event: { domEvent: Event, date: Date }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate: (event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this CalendarPanel refreshes.
     */
    refresh: () => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    showOverflowPopup: (event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
    /**
     * This event is fired as soon as a week row is requested to be flexed. The animated
     * transition to the new height will still be in progress, but the row's flex style is
     * set to its evenly shared flex value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-weekFlex)
     * @param {object} event Event object
     * @param {Date} event.weekStart The start date of the week being reverted to a flexed height.
     * @param {HTMLElement} event.element The week row being reverted to a flexed height.
     */
    weekFlex: (event: { weekStart: Date, element: HTMLElement }) => void
    /**
     * This event is fired as soon as a week row is requested to be shrinkwrapped.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-weekShrinkwrap)
     * @param {object} event Event object
     * @param {Date} event.weekStart The start date of the week being shrinkwrapped.
     * @param {HTMLElement} event.element The week row being shrinkwrapped.
     */
    weekShrinkwrap: (event: { weekStart: Date, element: HTMLElement }) => void
}

/**
 * Type with listeners options for [MonthView](https://bryntum.com/products/grid/docs/api/Calendar/widget/MonthView) class.
 */
type MonthViewListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before this CalendarPanel refreshes in response to changes in its month.
     * @param {object} event Event object
     * @param {Core.widget.DatePicker} event.source This DatePicker.
     */
    beforeRefresh?: ((event: { source: DatePicker }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    beforeShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when the date of this CalendarPanel is set.
     * @param {object} event Event object
     * @param {Date} event.value The new date.
     * @param {Date} event.oldValue The old date.
     * @param {object} event.changes An object which contains properties which indicate what part of the date changed.
     * @param {boolean} event.changes.d True if the date changed in any way.
     * @param {boolean} event.changes.w True if the week changed (including same week in a different year).
     * @param {boolean} event.changes.m True if the month changed (including same month in a different year).
     * @param {boolean} event.changes.y True if the year changed.
     */
    dateChange?: ((event: { value: Date, oldValue: Date, changes: { d: boolean, w: boolean, m: boolean, y: boolean } }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    emptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this CalendarPanel refreshes.
     */
    refresh?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    showOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * This event is fired as soon as a week row is requested to be flexed. The animated
     * transition to the new height will still be in progress, but the row's flex style is
     * set to its evenly shared flex value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-weekFlex)
     * @param {object} event Event object
     * @param {Date} event.weekStart The start date of the week being reverted to a flexed height.
     * @param {HTMLElement} event.element The week row being reverted to a flexed height.
     */
    weekFlex?: ((event: { weekStart: Date, element: HTMLElement }) => void)|string
    /**
     * This event is fired as soon as a week row is requested to be shrinkwrapped.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-weekShrinkwrap)
     * @param {object} event Event object
     * @param {Date} event.weekStart The start date of the week being shrinkwrapped.
     * @param {HTMLElement} event.element The week row being shrinkwrapped.
     */
    weekShrinkwrap?: ((event: { weekStart: Date, element: HTMLElement }) => void)|string
}

/**
 * Type with configuration options for [MonthView](https://bryntum.com/products/grid/docs/api/Calendar/widget/MonthView) class.
 */
type MonthViewConfig = {
    type?: 'monthview'|'month'
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * By default, weeks rows all flex to share the available height equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-autoRowHeight)
     */
    autoRowHeight?: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * A function (or the name of a function) which creates content in, and may mutate a day cell element.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cell The header element
     * @param {Date} renderData.date The date for the cell
     * @param {number} renderData.day The day for the cell (`0` to `6` for Sunday to Saturday)
     * @param {number[]} renderData.rowIndex The row index, 0 to month row count (6 if [sixWeeks](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-sixWeeks) is `true`)
     * @param {HTMLElement} renderData.row The row element encapsulating the week which the cell is a part of
     * @param {Core.widget.CalendarPanel} renderData.source The widget being rendered
     * @param {number[]} renderData.cellIndex The cell index in the whole panel. May be from `0` to up to `42`
     * @param {number[]} renderData.columnIndex The column index, `0` to `6`
     * @param {number[]} renderData.visibleColumnIndex The visible column index taking hidden non working days into account
     * @returns {string,DomConfig,void}
     */
    cellRenderer?: ((renderData: { cell: HTMLElement, date: Date, day: number, rowIndex: number[], row: HTMLElement, source: CalendarPanel, cellIndex: number[], columnIndex: number[], visibleColumnIndex: number[] }) => string|DomConfig|void)|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The date which this CalendarPanel encapsulates.
     */
    date?: Date|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names
     * in the header part of each calendar cell.
     */
    dayCellNameFormat?: string
    /**
     * This may be specified to create the content for the date and day name section of calendar cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-dayCellRenderer)
     * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.
     * @param {DomConfig} dayCellDomConfig An object to sync the day cell element.
     * @param {object} dayCellDomConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} dayCellDomConfig.style A CSS style definition object.
     * @param {object} dayCellDomConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} dayCellDomConfig.children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions for the content of the cell.
     * @returns {string,object,object[]} The definition of the cell header content.
     */
    dayCellRenderer?: (dayCellRenderer: { cellData: DayCell }, dayCellDomConfig: { className: object, style: object, dataset: object, children: DomConfig[] }) => string|object|object[]
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names
     * in the header row above the calendar cells.
     */
    dayNameFormat?: string
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Configure as `true` to render non working days as [disabledDates](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-disabledDates).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-disableNonWorkingDays)
     */
    disableNonWorkingDays?: boolean
    /**
     * Configure this as true to disable pointer interaction with cells which are outside the
     * range of the current month.
     */
    disableOtherMonthCells?: boolean
    /**
     * Configure as `true` to render Saturdays and Sundays as [disabledDates](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-disabledDates).
     */
    disableWeekends?: boolean
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * The class name to add to disabled calendar cells.
     */
    disabledCls?: string
    /**
     * Either an array of `Date` objects which are to be disabled (or date strings), or
     * a function (or the name of a function), which, when passed a `Date` returns `true` if the
     * date is disabled.
     * @param {Date} date Date to check
     * @returns {boolean} Returns `true` if the provided date is disabled
     */
    disabledDates?: ((date: Date) => boolean)|string|Date[]|string[]
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-dragUnit)
     */
    dragUnit?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which will be used to create the content of a clickable
     * element which is present when no events are in a cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-emptyCellRenderer)
     * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.
     * @returns {DomConfig,void} DomConfig object representing the HTML markup
     */
    emptyCellRenderer?: ((dayCellRenderer: { cellData: DayCell }) => DomConfig|void)|object|string
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * The height of event bars in this view. This can be a numeric value in pixels or a CSS unit measure such
     * as `'2em'`.
     */
    eventHeight?: number|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing?: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * A function (or the name of a function) which creates content in, and may mutate a day header element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-headerRenderer)
     * @param {HTMLElement} cell The header element
     * @param {number} columnIndex The day column. Will be in the range `0` to `6`
     * @param {number} weekDay The canonical day number where Monday is `0` and Sunday is `6`
     * @returns {string,DomConfig,void}
     */
    headerRenderer?: ((cell: HTMLElement, columnIndex: number, weekDay: number) => string|DomConfig|void)|string
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * Configure this as `true` to hide cells which are outside the range of the current month.
     */
    hideOtherMonthCells?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-listeners)
     */
    listeners?: MonthViewListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The maximum number of events to show in a cell when the row is shrinkwrapped.
     * Use this to keep rows to a sane size when using [autoRowHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-autoRowHeight),
     * or the [WeekExpander](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander) feature.
     */
    maxEventsPerCell?: number
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * By default, day cells flex to share available Panel width equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-minColumnWidth)
     */
    minColumnWidth?: number
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * By default, week rows flex to share available Panel height equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-minRowHeight)
     */
    minRowHeight?: number|string
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * A [Month](https://bryntum.com/products/calendar/docs/api/Core/util/Month) Month utility object which encapsulates this Panel's month
     * and provides contextual information and navigation services.
     */
    month?: Month|MonthConfig
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * The class name to add to calendar cells which are [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-nonWorkingDays).
     */
    nonWorkingDayCls?: string
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * The class name to add to calendar cells which are in the previous or next month.
     */
    otherMonthCls?: string
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to create the "+n more" button which indicates that a day cell has
     * overflowing events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-overflowButtonRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to create the overflow button.
     * @param {string} domConfig.tag The tag name of the element to create.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {string} domConfig.text The inner content of the element. <strong>Note that this will be HTML encoded for XSS safety</strong>
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {number} overflowCount The number of overflowing events.
     * @returns {DomConfig,string,void}
     */
    overflowButtonRenderer?: (domConfig: { tag: string, className: object, text: string, style: object, dataset: object }, overflowCount: number) => DomConfig|string|void
    /**
     * How the view responds to clicking on a `+n more` button in an overflowing day cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-overflowClickAction)
     */
    overflowClickAction?: 'popup'|'expand'
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that this view
     * may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig
    /**
     * The pointer gesture which shows the popup containing any overflowing events
     * in the current view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-overflowPopupTrigger)
     */
    overflowPopupTrigger?: 'click'|'mouseover'|'hover'
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * By default, rows which have been modified by the [WeekExpander](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander)
     * feature, <strong>not by the [autoRowHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-autoRowHeight) setting</strong>, to shinkwrap large content
     * are reset to flexed height on month change.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-persistShrinkWrappedRows)
     */
    persistShrinkWrappedRows?: boolean
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-ref)
     */
    ref?: string
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * Configure as `true` to show a week number column at the start of the calendar block.
     */
    showWeekColumn?: boolean
    /**
     * Configure as `false` to hide the week number shown at the top-left of each day cell
     */
    showWeekNumber?: boolean
    /**
     * Configure as `true` to always show a six-week calendar.
     */
    sixWeeks?: boolean
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * A config object to create a tooltip which will show on hover of a date cell including disabled, weekend,
     * and "other month" cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-tip)
     */
    tip?: TooltipConfig
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-title)
     */
    title?: string
    /**
     * The class name to add to the calendar cell which contains today's date.
     */
    todayCls?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-weekRenderer)
     * @param {HTMLElement} weekCell The header element
     * @param {number[]} week An array containing `[year, weekNumber]`
     * @returns {string,DomConfig,void}
     */
    weekRenderer?: ((weekCell: HTMLElement, week: number[]) => string|DomConfig|void)|string
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * The class name to add to calendar cells which are weekend dates.
     */
    weekendCls?: string
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-y)
     */
    y?: number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before this CalendarPanel refreshes in response to changes in its month.
     * @param {object} event Event object
     * @param {Core.widget.DatePicker} event.source This DatePicker.
     */
    onBeforeRefresh?: ((event: { source: DatePicker }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onBeforeShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when the date of this CalendarPanel is set.
     * @param {object} event Event object
     * @param {Date} event.value The new date.
     * @param {Date} event.oldValue The old date.
     * @param {object} event.changes An object which contains properties which indicate what part of the date changed.
     * @param {boolean} event.changes.d True if the date changed in any way.
     * @param {boolean} event.changes.w True if the week changed (including same week in a different year).
     * @param {boolean} event.changes.m True if the month changed (including same month in a different year).
     * @param {boolean} event.changes.y True if the year changed.
     */
    onDateChange?: ((event: { value: Date, oldValue: Date, changes: { d: boolean, w: boolean, m: boolean, y: boolean } }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this CalendarPanel refreshes.
     */
    onRefresh?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * This event is fired as soon as a week row is requested to be flexed. The animated
     * transition to the new height will still be in progress, but the row's flex style is
     * set to its evenly shared flex value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-weekFlex)
     * @param {object} event Event object
     * @param {Date} event.weekStart The start date of the week being reverted to a flexed height.
     * @param {HTMLElement} event.element The week row being reverted to a flexed height.
     */
    onWeekFlex?: ((event: { weekStart: Date, element: HTMLElement }) => void)|string
    /**
     * This event is fired as soon as a week row is requested to be shrinkwrapped.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-weekShrinkwrap)
     * @param {object} event Event object
     * @param {Date} event.weekStart The start date of the week being shrinkwrapped.
     * @param {HTMLElement} event.element The week row being shrinkwrapped.
     */
    onWeekShrinkwrap?: ((event: { weekStart: Date, element: HTMLElement }) => void)|string
}

/**
 * This is normally used as a [mode](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes) of a Calendar (as seen in the live
 * demo below) but may be used standalone as a regular Widget.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView)
 */
export class MonthView extends CalendarPanel {
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    static readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) class, or subclass thereof.
     */
    static readonly isDayCellCollecter: boolean
    /**
     * Identifies an object as an instance of [DayCellRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer) class, or subclass thereof.
     */
    static readonly isDayCellRenderer: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    static readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    static readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView) class, or subclass thereof.
     */
    static readonly isMonthView: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    static readonly isResponsive: boolean
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     */
    animateTimeShift: boolean
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     */
    autoCreate: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * By default, weeks rows all flex to share the available height equally.
     */
    autoRowHeight: boolean
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The class name to add to calendar cells.
     */
    dayCellCls: string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     */
    defaultScrollOptions: BryntumScrollOptions
    /**
     * The textual description generated by the [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) if present, or by the
     * view's date (or date *range* if it has a range) and the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    readonly description: string
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     */
    dragUnit: string
    /**
     * The duration in total days that this view covers.
     */
    readonly duration: number
    /**
     * The number of <strong>visible</strong> events that this view currently displays in its date range.
     */
    readonly eventCount: number
    /**
     * The height of event bars in this view. This can be a numeric value in pixels or a CSS unit measure such
     * as `'2em'`.
     */
    eventHeight: number|string
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     */
    extendAllDayEndDay: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     */
    filterEventResources: boolean
    /**
     * The first *visible* event-bearing element in this view. So if the first day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * cell will be for the Monday.
     */
    firstVisibleCell: HTMLElement
    /**
     * The date of the first *visible* event-bearing element in this view. So if the first day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * date will be the date of the Monday.
     */
    firstVisibleDate: Date
    /**
     * Yields the default description value as calculated using the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#property-dateFormat) which
     * describes this object if no [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) was provided.
     */
    readonly formattedDescription: string
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays: boolean
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) class, or subclass thereof.
     */
    readonly isDayCellCollecter: boolean
    /**
     * Identifies an object as an instance of [DayCellRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer) class, or subclass thereof.
     */
    readonly isDayCellRenderer: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [MonthView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView) class, or subclass thereof.
     */
    readonly isMonthView: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    readonly isResponsive: boolean
    /**
     * The last *visible* event-bearing element in this view. So if the last day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * cell will be for the Friday.
     */
    lastVisibleCell: HTMLElement
    /**
     * The date of the last *visible* event-bearing element in this view. So if the last day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * date will be the date of the Friday.
     */
    lastVisibleDate: Date
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate: Date
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate: Date
    /**
     * Calendar mode that this view represents (eg. "day", "month" etc). Only accessible when used within a Calendar.
     */
    readonly modeName: string
    /**
     * The [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) instance that this view may show when events
     * for one day overflow the available space.
     */
    readonly overflowPopup: OverflowPopup
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     */
    pastEventCls: string
    /**
     * By default, rows which have been modified by the [WeekExpander](https://bryntum.com/products/calendar/docs/api/Calendar/feature/WeekExpander)
     * feature, <strong>not by the [autoRowHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#config-autoRowHeight) setting</strong>, to shinkwrap large content
     * are reset to flexed height on month change.
     */
    persistShrinkWrappedRows: boolean
    /**
     * Returns the resource associated with this month view when used inside a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     */
    readonly resource: ResourceModel
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat: string
    /**
     * Configure as `false` to hide the week number shown at the top-left of each day cell
     */
    showWeekNumber: boolean
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     */
    stackMultiDayEvents: boolean
    /**
     * A String which describes how much the [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-next) and [previous](#Calendar/widget/mixin/CalendarMixin#function-previous)
     * methods will move this view forwards or backwards in time.
     */
    readonly stepUnit: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     */
    syncCalendarDate: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     */
    syncViewDate: boolean
    /**
     * This property yields the base selector to use to find visible cell elements in this view.
     */
    readonly visibleCellSelector: string
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onBeforeShowOverflowPopup: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated: (() => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onShowOverflowPopup: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
    /**
     * This event is fired as soon as a week row is requested to be flexed. The animated
     * transition to the new height will still be in progress, but the row's flex style is
     * set to its evenly shared flex value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-weekFlex)
     * @param {object} event Event object
     * @param {Date} event.weekStart The start date of the week being reverted to a flexed height.
     * @param {HTMLElement} event.element The week row being reverted to a flexed height.
     */
    onWeekFlex: ((event: { weekStart: Date, element: HTMLElement }) => void)|string
    /**
     * This event is fired as soon as a week row is requested to be shrinkwrapped.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/MonthView#event-weekShrinkwrap)
     * @param {object} event Event object
     * @param {Date} event.weekStart The start date of the week being shrinkwrapped.
     * @param {HTMLElement} event.element The week row being shrinkwrapped.
     */
    onWeekShrinkwrap: ((event: { weekStart: Date, element: HTMLElement }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {MonthViewConfig} config
     */
    constructor(config?: MonthViewConfig);
    /**
     * Determines what is under the cursor of the specified event or what is described by the given element.
     * @param {Event,Element} domEvent The event or element
     */
    calendarHitTest(domEvent: Event|Element): CalendarHit;
    /**
     * Creates an event on the specified date which conforms to this view's [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)
     * setting.
     * @param {Date} date The date to add the event at. If there's no time component, the [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)'s `startHour` will be used.
     */
    createEvent(date: Date): void;
    /**
     * This is the standard way to create a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig)
     * element definition object for creating event bars in all view types.
     * @param {object} renderData Context for the event bar config creation.
     * @param {Function} eventRenderer Optionally a function which created content HTML for the event body. Defaults to any [eventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer) configured into this view.
     */
    createEventDomConfig(renderData: {
        eventRecord: EventModel
        minimal: boolean
        date: Date
        eventEndDate?: Date
    }, eventRenderer?: Function): DomConfig;
    /**
     * Causes the week row referenced by the parameter (Either a Date, or the <strong>zero-based</strong> row index)
     * to become flexed in height to share the available height of the Calendar equally with other
     * flexed rows.
     * @param {Date,number} date Either the date of a day within the week, or the <strong>zero based</strong> week row to flex.
     */
    flexWeekRow(date: Date|number): Promise<void>;
    /**
     * Returns the cell associated with the passed date.
     * @param {Date,string} date The date to find the element for or a key in the format `YYYY-MM-DD`
     * @param {boolean} strict Only return the element if this view *owns* the date. (MonthView and YearView)
     */
    getDayElement(date: Date|string, strict: boolean): void;
    /**
     * Returns the outermost element which represents the first block of the passed event in the view. <em>If the
     * event is represented within the view</em>.
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the element for.
     * @param {Date} date Optionally, the event element at the specified date.
     */
    getEventElement(eventRecord: EventModel|string|number, date?: Date): HTMLElement;
    /**
     * Returns all outermost elements which represents the passed event in the view. <em>If the
     * event is represented within the view</em>
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the elements for.
     */
    getEventElements(eventRecord: EventModel|string|number): HTMLElement[];
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Returns the resource record for a DOM element or DOM event if the element is inside a view
     * which displays events for one resource such as a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     * or a [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView).
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getResourceRecord(elementOrEvent: HTMLElement|Event): ResourceModel;
    /**
     * Moves this view forwards in time by its configured (or intrinsic if it's a
     * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) or a [YearView](#Calendar/widget/YearView)) duration.
     */
    next(): void;
    /**
     * Called when new event is created.
     * Сan be overridden to supply default record values etc.
     * @param {Scheduler.model.EventModel} eventRecord Newly created event
     */
    onEventCreated(eventRecord: EventModel): void;
    /**
     * Moves this view backwards in time by its configured (or intrinsic if it's a
     * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) or a [YearView](#Calendar/widget/YearView)) duration.
     */
    previous(): void;
    /**
     * Refreshes the UI after a change to the EventStore, or to a configuration that requires
     * the UI to change.
     */
    refresh(): void;
    /**
     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when
     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and
     * DOM churn is kept to a minimum.
     */
    refreshSoon(): void;
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    resolveEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Brings an event or a time into view. Optionally visually highlights the target.
     * @param {Scheduler.model.EventModel,Date} target The event or Date to scroll to.
     * @param {object} options How to scroll.
     */
    scrollTo(target: EventModel|Date, options?: {
        block?: 'start'|'end'|'center'|'nearest'
        edgeOffset?: number
        animate?: object|boolean|number
        highlight?: boolean|Function
        focus?: boolean
        x?: boolean
        y?: boolean
    }): Promise<any>;
    /**
     * Causes the week row referenced by the parameter (Either a Date, or the <strong>zero based</strong> row index)
     * to size itself to exactly wrap the maximum number of events for any day of that week.
     * @param {Date,number} week Either the date of a day within the week, or the <strong>zero based</strong> week row to shrinkwrap.
     */
    shrinkwrapWeekRow(week: Date|number): void;
}

/**
 * Type with available listeners functions for [OverflowPopup](https://bryntum.com/products/grid/docs/api/Calendar/widget/OverflowPopup) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type OverflowPopupListenersTypes = {
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    beforeClose: (event: { source: Popup }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [OverflowPopup](https://bryntum.com/products/grid/docs/api/Calendar/widget/OverflowPopup) class.
 */
type OverflowPopupListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    beforeClose?: ((event: { source: Popup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [OverflowPopup](https://bryntum.com/products/grid/docs/api/Calendar/widget/OverflowPopup) class.
 */
type OverflowPopupConfig = {
    type?: 'overflowpopup'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * By default, a Popup is transient, and will [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) when the user clicks or
     * taps outside its owned widgets and when focus moves outside its owned widgets.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-autoClose)
     */
    autoClose?: boolean
    /**
     * Auto show flag for Popup.
     * If truthy then Popup is shown automatically upon hover.
     */
    autoShow?: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord?: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Show a tool in the header to close this Popup.
     * The tool is available in the [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable?: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-closeAction)
     */
    closeAction?: 'hide'|'destroy'
    /**
     * Close popup when `ESC` key is pressed.
     */
    closeOnEscape?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content?: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-format-static) format string to use to
     * create the [title](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-title) of this dialog.
     */
    dateFormat?: string
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * Set to `false` to prevent dragging the popup element.
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * A [Widget](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget) config object used to show the inner list of overflowing events
     * shown in this popup.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-eventList)
     */
    eventList?: object
    /**
     * An empty function by default, but provided so that you can override it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered.
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element.
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element.
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy.
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @returns {string,DomConfig,DomConfig[],void} A simple string, or a DomConfig object defining the actual HTML
     */
    eventRenderer?: (detail: { eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, eventColor: string } }) => string|DomConfig|DomConfig[]|void
    /**
     * A function which compares events to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare.
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare.
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach popup.
     */
    forElement?: HTMLElement
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-html)
     * @param {Core.widget.Widget} widget The calling Widget
     * @returns {string}
     */
    html?: string|((widget: Widget) => string)|DomConfig|DomConfig[]|VueConfig
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls?: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-listeners)
     */
    listeners?: OverflowPopupListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized?: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-modal)
     */
    modal?: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * By default an event overflow popup shows all the events for the activated date.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-onlyShowOverflow)
     */
    onlyShowOverflow?: boolean
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-owner)
     */
    owner?: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-readOnly)
     */
    readOnly?: boolean
    /**
     * [Record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-record)
     */
    record?: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-ref)
     */
    ref?: string
    /**
     * Configure this property to allow the widget/component to be resized. Pressing <kbd>Shift</kbd> while resizing will
     * constrain the aspect ratio.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-resizable)
     */
    resizable?: boolean|{
        minWidth?: number
        maxWidth?: number
        minHeight?: number
        maxHeight?: number
        handles?: object
    }
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover. Can
     * also be provided as the button number (0: main button, 2: right button).
     */
    showOnClick?: boolean|number
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-textContent)
     */
    textContent?: boolean
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#config-y)
     */
    y?: number
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    onBeforeClose?: ((event: { source: Popup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * This class is not supposed to be used directly. It is used by Calendar views which need to show
 * more events than will fit into a day cell.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup)
 */
export class OverflowPopup extends Popup {
    /**
     * Identifies an object as an instance of [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) class, or subclass thereof.
     */
    static readonly isOverflowPopup: boolean
    /**
     * The date for which overflow is being shown.
     */
    readonly activeDate: Date
    /**
     * A data block containing information about the day for which overflow is being shown.
     */
    readonly cellData: DayCell
    /**
     * Identifies an object as an instance of [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) class, or subclass thereof.
     */
    readonly isOverflowPopup: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {OverflowPopupConfig} config
     */
    constructor(config?: OverflowPopupConfig);
}

/**
 * Type with available listeners functions for [RangeMenu](https://bryntum.com/products/grid/docs/api/Calendar/widget/RangeMenu) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type RangeMenuListenersTypes = {
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    beforeClose: (event: { source: Popup }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * A descendant menu item has been activated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-item)
     * @param {object} event Event object
     * @param {Core.widget.MenuItem} event.item The menu item which is being actioned.
     * @param {Core.widget.Menu} event.menu Menu containing the menu item
     */
    item: (event: { item: MenuItem, menu: Menu }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * The checked state of a descendant menu item has changed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-toggle)
     * @param {object} event Event object
     * @param {Core.widget.MenuItem} event.item The menu item whose checked state changed.
     * @param {Core.widget.Menu} event.menu Menu containing the menu item
     * @param {boolean} event.checked The *new* checked state.
     */
    toggle: (event: { item: MenuItem, menu: Menu, checked: boolean }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [RangeMenu](https://bryntum.com/products/grid/docs/api/Calendar/widget/RangeMenu) class.
 */
type RangeMenuListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    beforeClose?: ((event: { source: Popup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * A descendant menu item has been activated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-item)
     * @param {object} event Event object
     * @param {Core.widget.MenuItem} event.item The menu item which is being actioned.
     * @param {Core.widget.Menu} event.menu Menu containing the menu item
     */
    item?: ((event: { item: MenuItem, menu: Menu }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * The checked state of a descendant menu item has changed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-toggle)
     * @param {object} event Event object
     * @param {Core.widget.MenuItem} event.item The menu item whose checked state changed.
     * @param {Core.widget.Menu} event.menu Menu containing the menu item
     * @param {boolean} event.checked The *new* checked state.
     */
    toggle?: ((event: { item: MenuItem, menu: Menu, checked: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [RangeMenu](https://bryntum.com/products/grid/docs/api/Calendar/widget/RangeMenu) class.
 */
type RangeMenuConfig = {
    type?: 'rangemenu'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * By default, a Popup is transient, and will [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) when the user clicks or
     * taps outside its owned widgets and when focus moves outside its owned widgets.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-autoClose)
     */
    autoClose?: boolean
    /**
     * Auto show flag for Popup.
     * If truthy then Popup is shown automatically upon hover.
     */
    autoShow?: boolean
    /**
     * Update assigned [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord?: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Show a tool in the header to close this Popup.
     * The tool is available in the [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools) object
     * under the name `close`. It uses the CSS class `b-popup-close` to apply a
     * default close icon. This may be customized with your own CSS rules.
     */
    closable?: boolean
    /**
     * The action to take when calling the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method.
     * By default, the popup is hidden.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-closeAction)
     */
    closeAction?: 'hide'|'destroy'
    /**
     * Close popup when `ESC` key is pressed.
     */
    closeOnEscape?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content?: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * Set to `false` to prevent dragging the popup element.
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Specify false to prevent the menu from getting focus when hovering items
     */
    focusOnHover?: boolean
    /**
     * By default a Popup is focused when it is shown.
     * Configure this as `false` to prevent automatic focus on show.
     */
    focusOnToFront?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * DOM element to attach popup.
     */
    forElement?: HTMLElement
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-html)
     * @param {Core.widget.Widget} widget The calling Widget
     * @returns {string}
     */
    html?: string|((widget: Widget) => string)|DomConfig|DomConfig[]|VueConfig
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls?: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-listeners)
     */
    listeners?: RangeMenuListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * Show a tool in the header to maximize this popup
     */
    maximizable?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * Set to `true` to make this widget take all available space in the visible viewport.
     */
    maximized?: boolean
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * Optionally show an opaque mask below this Popup when shown.
     * Configure this as `true` to show the mask.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-modal)
     */
    modal?: boolean|{
        closeOnMaskTap?: boolean
        transparent?: boolean
    }
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-owner)
     */
    owner?: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-readOnly)
     */
    readOnly?: boolean
    /**
     * [Record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-record)
     */
    record?: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-ref)
     */
    ref?: string
    /**
     * Configure this property to allow the widget/component to be resized. Pressing <kbd>Shift</kbd> while resizing will
     * constrain the aspect ratio.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-resizable)
     */
    resizable?: boolean|{
        minWidth?: number
        maxWidth?: number
        minHeight?: number
        maxHeight?: number
        handles?: object
    }
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover. Can
     * also be provided as the button number (0: main button, 2: right button).
     */
    showOnClick?: boolean|number
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-textContent)
     */
    textContent?: boolean
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Popup is circular - that is it does not exit.
     * Configure this as `false` to allow tabbing out of the Popup.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#config-y)
     */
    y?: number
    /**
     * Fired when the [close](https://bryntum.com/products/calendar/docs/api/Core/widget/Popup#function-close) method is called and the popup is not hidden.
     * May be vetoed by returning `false` from a handler.
     * @param {object} event Event object
     * @param {Core.widget.Popup} event.source This Popup
     */
    onBeforeClose?: ((event: { source: Popup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * A descendant menu item has been activated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-item)
     * @param {object} event Event object
     * @param {Core.widget.MenuItem} event.item The menu item which is being actioned.
     * @param {Core.widget.Menu} event.menu Menu containing the menu item
     */
    onItem?: ((event: { item: MenuItem, menu: Menu }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * The checked state of a descendant menu item has changed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-toggle)
     * @param {object} event Event object
     * @param {Core.widget.MenuItem} event.item The menu item whose checked state changed.
     * @param {Core.widget.Menu} event.menu Menu containing the menu item
     * @param {boolean} event.checked The *new* checked state.
     */
    onToggle?: ((event: { item: MenuItem, menu: Menu, checked: boolean }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * A menu for selecting a time range for a Calendar mode.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu)
 */
export class RangeMenu extends Menu {
    /**
     * Identifies an object as an instance of [RangeMenu](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu) class, or subclass thereof.
     */
    static readonly isRangeMenu: boolean
    /**
     * Identifies an object as an instance of [RangeMenu](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu) class, or subclass thereof.
     */
    readonly isRangeMenu: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/RangeMenu#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
}

/**
 * Type with available listeners functions for [ResourceView](https://bryntum.com/products/grid/docs/api/Calendar/widget/ResourceView) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type ResourceViewListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this ResourceView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.ResourceView} event.source The triggering instance.
     */
    refresh: (event: { source: ResourceView }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
    /**
     * Fires when a new sub view is created.
     * @param {object} event Event object
     * @param {Calendar.widget.ResourceView} event.source The triggering instance.
     * @param {typeof CalendarMixin} event.view The newly created sub view.
     */
    viewCreate: (event: { source: ResourceView, view: typeof CalendarMixin }) => void
}

/**
 * Type with listeners options for [ResourceView](https://bryntum.com/products/grid/docs/api/Calendar/widget/ResourceView) class.
 */
type ResourceViewListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this ResourceView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.ResourceView} event.source The triggering instance.
     */
    refresh?: ((event: { source: ResourceView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when a new sub view is created.
     * @param {object} event Event object
     * @param {Calendar.widget.ResourceView} event.source The triggering instance.
     * @param {typeof CalendarMixin} event.view The newly created sub view.
     */
    viewCreate?: ((event: { source: ResourceView, view: typeof CalendarMixin }) => void)|string
}

/**
 * Type with configuration options for [ResourceView](https://bryntum.com/products/grid/docs/api/Calendar/widget/ResourceView) class.
 */
type ResourceViewConfig = {
    type?: 'resourceview'|'resource'
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-dragUnit)
     */
    dragUnit?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * The height of event bars if this view creates event bars.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-eventHeight)
     */
    eventHeight?: number|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Set to `true` to hide non-working days
     */
    hideNonWorkingDays?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * When [ResourceTimeRangeModel](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceTimeRangeModel)s are included in the data, they
     * are only rendered in subviews of [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)s and normal
     * [TimeRangeModel](https://bryntum.com/products/calendar/docs/api/Calendar/model/TimeRangeModel)s are <strong>not</strong> rendered in subviews of
     * [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)s.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-includeTimeRanges)
     */
    includeTimeRanges?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-listeners)
     */
    listeners?: ResourceViewListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * A field name or a function returning a string to be displayed below resource name in the resource view
     * headers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-meta)
     * @param {Scheduler.model.ResourceModel} resource Displayed resource
     * @returns {string} Text to be displayed below resource name
     */
    meta?: string|((resource: ResourceModel) => string)
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * <strong>If</strong> the displayed [view](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-view) is a [DateRangeOwner](#Calendar/widget/mixin/DateRangeOwner),
     * this may be used to set the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range)
     * of all child views.
     */
    range?: string|DurationConfig
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-ref)
     */
    ref?: string
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * The width of a resource calendar panel (view always stretches to fill window)
     */
    resourceWidth?: number|string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * Display an avatar in the resource view headers, either as an image or using resource initials.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-showAvatars)
     */
    showAvatars?: boolean
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * By default, the resource views are displayed in the order that the resources appear
     * in the project's `resourceStore`, so they will appear in a stable position, meaning
     * when a view is filtered out, then filtering it in will replace it in the same position.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-stableResourceOrder)
     */
    stableResourceOrder?: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * A config object used to configure the sub views. The default `type` used is `'weekview'`
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-view)
     */
    view?: CalendarContainerItemConfig|Record<string, any>
    /**
     * The space to leave between each subview.
     */
    viewGap?: string|number
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-y)
     */
    y?: number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this ResourceView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.ResourceView} event.source The triggering instance.
     */
    onRefresh?: ((event: { source: ResourceView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
    /**
     * Fires when a new sub view is created.
     * @param {object} event Event object
     * @param {Calendar.widget.ResourceView} event.source The triggering instance.
     * @param {typeof CalendarMixin} event.view The newly created sub view.
     */
    onViewCreate?: ((event: { source: ResourceView, view: typeof CalendarMixin }) => void)|string
}

/**
 * A Calendar view which encapsulates a series of child Calendar views, one for each resource (often
 * referred to as "calendar") in the project.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
 */
export class ResourceView extends Panel {
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    static readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    static readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    static readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView) class, or subclass thereof.
     */
    static readonly isResourceView: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    static readonly isResponsive: boolean
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     */
    animateTimeShift: boolean
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     */
    autoCreate: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The class name to add to calendar cells.
     */
    dayCellCls: string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     */
    defaultScrollOptions: BryntumScrollOptions
    /**
     * The textual description generated by the [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) if present, or by the
     * view's date (or date *range* if it has a range) and the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    readonly description: string
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     */
    dragUnit: string
    /**
     * The duration in total days that this view covers.
     */
    readonly duration: number
    /**
     * The number of <strong>visible</strong> events that this view currently displays in its date range.
     */
    readonly eventCount: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     */
    extendAllDayEndDay: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     */
    filterEventResources: boolean
    /**
     * The first *visible* event-bearing element in this view. So if the first day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * cell will be for the Monday.
     */
    firstVisibleCell: HTMLElement
    /**
     * The date of the first *visible* event-bearing element in this view. So if the first day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * date will be the date of the Monday.
     */
    firstVisibleDate: Date
    /**
     * Yields the default description value as calculated using the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#property-dateFormat) which
     * describes this object if no [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) was provided.
     */
    readonly formattedDescription: string
    /**
     * Set to `true` to hide non-working days
     */
    hideNonWorkingDays: boolean
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView) class, or subclass thereof.
     */
    readonly isResourceView: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    readonly isResponsive: boolean
    /**
     * The last *visible* event-bearing element in this view. So if the last day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * cell will be for the Friday.
     */
    lastVisibleCell: HTMLElement
    /**
     * The date of the last *visible* event-bearing element in this view. So if the last day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * date will be the date of the Friday.
     */
    lastVisibleDate: Date
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate: Date
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate: Date
    /**
     * Calendar mode that this view represents (eg. "day", "month" etc). Only accessible when used within a Calendar.
     */
    readonly modeName: string
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     */
    pastEventCls: string
    /**
     * <strong>If</strong> the displayed [view](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#config-view) is a [DateRangeOwner](#Calendar/widget/mixin/DateRangeOwner),
     * this may be used to set the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range)
     * of all child views.
     */
    range: string|DurationConfig
    /**
     * The width of a resource calendar panel (view always stretches to fill window)
     */
    resourceWidth: number|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat: string
    /**
     * A String which describes how much the [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-next) and [previous](#Calendar/widget/mixin/CalendarMixin#function-previous)
     * methods will move this view forwards or backwards in time.
     */
    readonly stepUnit: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     */
    syncCalendarDate: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     */
    syncViewDate: boolean
    /**
     * A config object used to configure the sub views. The default `type` used is `'weekview'`
     */
    view: CalendarContainerItemConfig|Record<string, any>
    /**
     * The space to leave between each subview.
     */
    viewGap: string|number
    /**
     * Yields the views which this ResourceView owns.
     */
    readonly views: CalendarMixinClass[]
    /**
     * This property yields the base selector to use to find visible cell elements in this view.
     */
    readonly visibleCellSelector: string
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when this ResourceView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.ResourceView} event.source The triggering instance.
     */
    onRefresh: ((event: { source: ResourceView }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fires when a new sub view is created.
     * @param {object} event Event object
     * @param {Calendar.widget.ResourceView} event.source The triggering instance.
     * @param {typeof CalendarMixin} event.view The newly created sub view.
     */
    onViewCreate: ((event: { source: ResourceView, view: typeof CalendarMixin }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {ResourceViewConfig} config
     */
    constructor(config?: ResourceViewConfig);
    /**
     * Determines what is under the cursor of the specified event or what is described by the given element.
     * @param {Event,Element} domEvent The event or element
     */
    calendarHitTest(domEvent: Event|Element): CalendarHit;
    /**
     * Creates an event on the specified date which conforms to this view's [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)
     * setting.
     * @param {Date} date The date to add the event at. If there's no time component, the [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)'s `startHour` will be used.
     */
    createEvent(date: Date): void;
    /**
     * This is the standard way to create a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig)
     * element definition object for creating event bars in all view types.
     * @param {object} renderData Context for the event bar config creation.
     * @param {Function} eventRenderer Optionally a function which created content HTML for the event body. Defaults to any [eventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer) configured into this view.
     */
    createEventDomConfig(renderData: {
        eventRecord: EventModel
        minimal: boolean
        date: Date
        eventEndDate?: Date
    }, eventRenderer?: Function): DomConfig;
    /**
     * Executes the passed function for each child view corresponding to each resource in the `resourceStore`.
     * @param {Function} fn The function to call.
     * @param {object[]} args The arguments to pass. Defaults to the view being called followed by its index.
     * @param {object} thisObj The `this` reference for the function. Defaults to the view being called.
     */
    eachView(fn: Function, args?: object[], thisObj?: object): void;
    /**
     * Returns the cell associated with the passed date.
     * @param {Date,string} date The date to find the element for or a key in the format `YYYY-MM-DD`
     * @param {boolean} strict Only return the element if this view *owns* the date. (MonthView and YearView)
     */
    getDayElement(date: Date|string, strict: boolean): void;
    /**
     * Returns the outermost element which represents the first block of the passed event in the view. <em>If the
     * event is represented within the view</em>.
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the element for.
     * @param {Date} date Optionally, the event element at the specified date.
     */
    getEventElement(eventRecord: EventModel|string|number, date?: Date): HTMLElement;
    /**
     * Returns all outermost elements which represents the passed event in the view. <em>If the
     * event is represented within the view</em>
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the elements for.
     */
    getEventElements(eventRecord: EventModel|string|number): HTMLElement[];
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Returns the resource record for a DOM element or DOM event if the element is inside a view
     * which displays events for one resource such as a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     * or a [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView).
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getResourceRecord(elementOrEvent: HTMLElement|Event): ResourceModel;
    /**
     * Moves this view forwards in time by its configured (or intrinsic if it's a
     * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) or a [YearView](#Calendar/widget/YearView)) duration.
     */
    next(): void;
    /**
     * Called when new event is created.
     * Сan be overridden to supply default record values etc.
     * @param {Scheduler.model.EventModel} eventRecord Newly created event
     */
    onEventCreated(eventRecord: EventModel): void;
    /**
     * Moves this view backwards in time by its configured (or intrinsic if it's a
     * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) or a [YearView](#Calendar/widget/YearView)) duration.
     */
    previous(): void;
    /**
     * Refreshes the UI after a change to the EventStore, or to a configuration that requires
     * the UI to change.
     */
    refresh(): void;
    /**
     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when
     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and
     * DOM churn is kept to a minimum.
     */
    refreshSoon(): void;
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    resolveEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Brings an event or a time into view. Optionally visually highlights the target.
     * @param {Scheduler.model.EventModel,Date} target The event or Date to scroll to.
     * @param {object} options How to scroll.
     */
    scrollTo(target: EventModel|Date, options?: {
        block?: 'start'|'end'|'center'|'nearest'
        edgeOffset?: number
        animate?: object|boolean|number
        highlight?: boolean|Function
        focus?: boolean
        x?: boolean
        y?: boolean
    }): Promise<any>;
}

/**
 * Type with available listeners functions for [Sidebar](https://bryntum.com/products/grid/docs/api/Calendar/widget/Sidebar) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type SidebarListenersTypes = {
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [Sidebar](https://bryntum.com/products/grid/docs/api/Calendar/widget/Sidebar) class.
 */
type SidebarListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [Sidebar](https://bryntum.com/products/grid/docs/api/Calendar/widget/Sidebar) class.
 */
type SidebarConfig = {
    type?: 'sidebar'
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * Update assigned [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord?: boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content?: string
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * If the [datePicker](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-datePicker) is set to [multiSelect](#Core/widget/DatePicker#config-multiSelect), setting this
     * to `true` shows a background highlight effect on the week rows that your selected range encompasses to help
     * the end user visualze the time ranges being evaluated.
     */
    highlightMultiSelectSpan?: boolean
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-html)
     * @param {Core.widget.Widget} widget The calling Widget
     * @returns {string}
     */
    html?: string|((widget: Widget) => string)|DomConfig|DomConfig[]|VueConfig
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls?: string|object
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-listeners)
     */
    listeners?: SidebarListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-owner)
     */
    owner?: Widget
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-readOnly)
     */
    readOnly?: boolean
    /**
     * [Record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-record)
     */
    record?: Model
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-ref)
     */
    ref?: string
    /**
     * A configuration object specifying options to change how the sidebar's resourcefilter is configured.
     */
    resourceFilter?: ResourceFilterConfig|null
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * May be configured with `'left'` or `'right'` to dock the Sidebar to either side.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-side)
     */
    side?: 'left'|'right'
    /**
     * If the [datePicker](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-datePicker) is set to [multiSelect](#Core/widget/DatePicker#config-multiSelect), then
     * by default, cooperating views (See [datePicker](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-datePicker)) will have their
     * navigation `shiftIncrement` set to navigate week-by-week when using the `Next` and `Previous` buttons.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-snapMultiSelectNavigation)
     */
    snapMultiSelectNavigation?: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-textContent)
     */
    textContent?: boolean
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#config-y)
     */
    y?: number
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * This class is not supposed to be used directly. This widget provides the utility UI as the
 * [sidebar](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-sidebar) of a [Calendar](#Calendar/view/Calendar) widget.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar)
 */
export class Sidebar extends Panel {
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    static readonly isResponsive: boolean
    /**
     * Identifies an object as an instance of [Sidebar](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar) class, or subclass thereof.
     */
    static readonly isSidebar: boolean
    /**
     * If the [datePicker](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-datePicker) is set to [multiSelect](#Core/widget/DatePicker#config-multiSelect), setting this
     * to `true` shows a background highlight effect on the week rows that your selected range encompasses to help
     * the end user visualze the time ranges being evaluated.
     */
    highlightMultiSelectSpan: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    readonly isResponsive: boolean
    /**
     * Identifies an object as an instance of [Sidebar](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar) class, or subclass thereof.
     */
    readonly isSidebar: boolean
    /**
     * The resource filtering widget which hides and shows events based upon
     * whether they are assigned to the selected resources.
     */
    resourceFilter: ResourceFilter
    /**
     * If the [datePicker](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#property-datePicker) is set to [multiSelect](#Core/widget/DatePicker#config-multiSelect), then
     * by default, cooperating views (See [datePicker](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-datePicker)) will have their
     * navigation `shiftIncrement` set to navigate week-by-week when using the `Next` and `Previous` buttons.
     */
    snapMultiSelectNavigation: boolean
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {SidebarConfig} config
     */
    constructor(config?: SidebarConfig);
}

/**
 * Type with available listeners functions for [WeekView](https://bryntum.com/products/grid/docs/api/Calendar/widget/WeekView) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type WeekViewListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated: () => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated: (event: { events: EventModel[], The: Date }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate: (event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    layoutUpdate: (event: { source: DayView }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange: (event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    refresh: (event: { source: DayView }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange: (event: { old?: object, new: object }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    tickChange: (event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [WeekView](https://bryntum.com/products/grid/docs/api/Calendar/widget/WeekView) class.
 */
type WeekViewListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    layoutUpdate?: ((event: { source: DayView }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    rangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    refresh?: ((event: { source: DayView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    shiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    tickChange?: ((event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [WeekView](https://bryntum.com/products/grid/docs/api/Calendar/widget/WeekView) class.
 */
type WeekViewConfig = {
    type?: 'weekview'|'week'
    /**
     * An object or an array of button specifications which add clickable icon buttons to
     * the rendered event blocks which contain the following properties.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-actionButtons)
     */
    actionButtons?: ActionButtonsConfig[]|Record<string, ActionButtonsConfig>
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * A [CalendarRow](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarRow) widget containing the horizontal series of calendar cells with the
     * day headers and any all-day, or day-spanning events which fall inside this view's time range.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-allDayEvents)
     */
    allDayEvents?: CalendarRow|CalendarRowConfig|null
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * By default, when mousewheel zooming out from *overflowing* the client height, it is not permitted to zoom
     * further out so that the hours *underflow* the client height.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-allowZoomUnderflow)
     */
    allowZoomUnderflow?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * A function, or name of a function which is passed the [DayCell](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-DayCell) object which
     * describes the events and details of the day.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-columnHeaderRenderer)
     * @param {DayCell} cellData A [data block](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#typedef-DayCell) describing the date and the events for that date.
     * @returns {string,object}
     */
    columnHeaderRenderer?: ((cellData: DayCell) => string|object)|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * An object containing two properties, `start` and `end` representing the start and
     * end of core working hours.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-coreHours)
     * @param {Date} date Date for hours calculation
     * @returns {object[]}
     */
    coreHours?: object|((date: Date) => object[])|string
    /**
     * A function, or name of a function which produces a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to create the current time indicator
     * which is displayed in a day column which represents the current date. It is the developer's responsibility
     * to add CSS classes and the appropriate CSS rules to produce the desire appearance.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-currentTimeIndicatorRenderer)
     * @returns {DomConfig} An object which describes the DOM structure of the today indicator element.
     */
    currentTimeIndicatorRenderer?: (() => DomConfig)|string
    /**
     * By default, half hour, fifteen minute tick lines are rendered in a lower contrast
     * colour than hour lines.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-dashedSubticks)
     */
    dashedSubticks?: boolean
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * The date to orient this view's [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-date)
     */
    date?: Date
    /**
     * A callback function, or the name of a function in the ownership hierarchy which an
     * application may provide to filter out day columns for individual dates.
     * @param {DayCell} context Information about the day column to be created.
     * @returns {boolean} Return `false` to not display a column for the passed date.
     */
    dateFilter?: ((context: DayCell) => boolean)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to sync with a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-dayCellRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to sync the day column element.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions for the events in the day.
     * @param {DayCell} cellData An object that contains data about the cell.
     * @returns {string}
     */
    dayCellRenderer?: ((domConfig: { className: object, style: object, dataset: object }, children: DomConfig[], cellData: DayCell) => string)|string
    /**
     * Either the end hour of the day, or a *24 hour* `HH:MM` string denoting the end date of the last rendered time block.
     * You can also set this value to a ms timestamp representing time from midnight.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-dayEndTime)
     */
    dayEndTime?: string|number
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to sync with a day cell header <strong>in the all day row</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-dayHeaderRenderer)
     * @param {DomConfig} headerDomConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to sync the day header element.
     * @param {object} headerDomConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} headerDomConfig.style A CSS style definition object.
     * @param {object} headerDomConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} headerDomConfig.children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions the header content. There will be 2 `children` encapsulating the day name and the date.
     * @param {DayCell} cellData An object that contains data about the cell.
     * @returns {string}
     */
    dayHeaderRenderer?: ((headerDomConfig: { className: object, style: object, dataset: object, children: DomConfig[] }, cellData: DayCell) => string)|string
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start time for days. This
     * is midnight by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-dayStartShift)
     */
    dayStartShift?: string|number
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the start of the first rendered
     * daily time block. You can also set this value to a ms timestamp representing time from midnight.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-dayStartTime)
     */
    dayStartTime?: string|number
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-dragUnit)
     */
    dragUnit?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * The end date (Time component is zeroed) of this view. Note that in terms of full days,
     * this is exclusive, ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on
     * the 8th.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-endDate)
     */
    endDate?: Date
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * Configuration to manage event layout class.
     * See [FluidDayLayout](https://bryntum.com/products/calendar/docs/api/Calendar/layout/day/FluidDayLayout) class docs to see all possible configurations.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-eventLayout)
     */
    eventLayout?: FluidDayLayoutConfig
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * Number of pixels to reduce the height of events by, to leave a gap between them.
     */
    eventSpacing?: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When set to `true`, the hours in the day will be sized so that they fit in the available
     * height.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-fitHours)
     */
    fitHours?: boolean|object
    /**
     * By default, reconfiguring the [startDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-startDate) maintains the current duration
     * of the view and moves the [endDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-endDate).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-fixedDuration)
     */
    fixedDuration?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Configure this as `true` to hide day columns which contain no events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-hideEmptyDays)
     */
    hideEmptyDays?: boolean
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * The height <strong>in pixels</strong> of one hour cell in a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-hourHeight)
     */
    hourHeight?: number
    /**
     * An array which encapsulates a set of [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight) breakpoints which
     * dictate when subticks - intervening time indicators - are introduced into the DayView's
     * time axis.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-hourHeightBreakpoints)
     */
    hourHeightBreakpoints?: number[]
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * A millisecond value to which to snap pointer times when clicking or dragging within a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-increment)
     */
    increment?: string|number
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * By default, drag-moving an event allows the drag gesture to move the event into other day columns.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-interDayDrag)
     */
    interDayDrag?: boolean
    /**
     * By default, drag-resizing an event (including creating a new event) allows the drag gesture to span multiple day
     * columns to make the event an inter day event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-interDayResize)
     */
    interDayResize?: boolean
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-listeners)
     */
    listeners?: WeekViewListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum height the all day event row is allowed to grow within this view
     * when it is expanded to show all its "all day" events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-maxAllDayHeight)
     */
    maxAllDayHeight?: number|string
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * The minimum width of a day column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-minDayWidth)
     */
    minDayWidth?: number|string
    /**
     * The minimum height to which event blocks in a day cell may shrink. If an event has very
     * short duration, whatever the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeight), and regardless of
     * [timeline zooming](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#function-zoomTo), the event block will never drop below this height.
     */
    minEventHeight?: number|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The minimum height <strong>in pixels</strong> to allow a zoom request to zoom out to.
     */
    minHourHeight?: number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when all dates in the range have been filtered out.
     */
    noMatchingDates?: string|DomConfig
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that the
     * [allDayEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-allDayEvents) may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * The time range around the [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-date) to display events for.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-range)
     */
    range?: string|DurationConfig
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-ref)
     */
    ref?: string
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-shiftIncrement)
     */
    shiftIncrement?: string|DurationConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * Shows an all day header above the main schedule for All Day events.
     * Set to `false` to not show all day, or multi-day events in an all day header, but
     * to have them showing wrapping through the day cells.
     */
    showAllDayHeader?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * By default <b>today's</b> date shows a current time line to indicate the current time. This
     * line is confined to the day cell for <b>today</b>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-showCurrentTime)
     */
    showCurrentTime?: boolean|{
        fullWidth?: boolean
        showTime?: boolean
        onTop?: boolean
    }
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Configure as `false` to hide the start time normally shown at the top of the events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-showTime)
     */
    showTime?: boolean|Record<('startTime'|'endTime'), boolean>
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * By default, the most granular time tick level in the DayView's time axis is five minutes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-sixMinuteTicks)
     */
    sixMinuteTicks?: boolean
    /**
     * Affects drag drop and moving of events with regard to the [increment](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-increment)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-snapRelativeToEventStartDate)
     */
    snapRelativeToEventStartDate?: boolean
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: boolean
    /**
     * The start date (Time component is zeroed) of this view.
     */
    startDate?: Date
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * A function, or name of a function which yields a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object to use as a tick background element
     * for the tick context passed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-tickRenderer)
     * @param {object} tickContext An object containing the context for the tick being rendered.
     * @param {Date} tickContext.startTime The start time of the tick.
     * @param {Date} tickContext.endTime The end time of the tick.
     * @param {Scheduler.model.EventModel[]} tickContext.events The events that visually intersect with the tick.
     * @param {number} tickContext.tickIndex The zero-based overall tick index.
     * @param {number} tickContext.subtickIndex The zero-based subtick index *within* the hour.
     * @param {number} tickContext.subtickCount The total number of visible subticks in an hour.
     * @param {Scheduler.model.ResourceModel} tickContext.resourceRecord *If* this view is a resource view, the resource record.
     * @returns {DomConfig} The DOM config object to use for the tick.
     */
    tickRenderer?: ((tickContext: { startTime: Date, endTime: Date, events: EventModel[], tickIndex: number, subtickIndex: number, subtickCount: number, resourceRecord: ResourceModel }) => DomConfig)|string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in the
     * time axis at the left side of the view.
     */
    timeAxisTimeFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * The type of rounding to apply when calculating a date from a pointer position in a day
     * column.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-timeSnapType)
     */
    timeSnapType?: 'round'|'ceil'|'floor'
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * Either the start hour of the day, or a *24 hour* `HH:MM` string denoting the initially visible start
     * time of the day. Defaults to 7am.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-visibleStartTime)
     */
    visibleStartTime?: string|number|null
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-y)
     */
    y?: number
    /**
     * You can zoom in and out on the time axis using CTRL-key + mouse wheel
     * on mouse-based devices or pinch-zoom on touch devices.
     * See also the [hourHeightBreakpoints](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) config option.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#config-zoomOnMouseWheel)
     */
    zoomOnMouseWheel?: boolean|number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Fires when this DayView changes an aspect of its layout. This happens when changing
     * [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight), [minDayWidth](#Calendar/widget/DayView#property-minDayWidth), and when the available
     * day container height changes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    onLayoutUpdate?: ((event: { source: DayView }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this DayView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.DayView} event.source The triggering instance.
     */
    onRefresh?: ((event: { source: DayView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when changing the [hourHeight](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#property-hourHeight) causes an
     * [hour height breakpoint](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView#config-hourHeightBreakpoints) to be crossed
     * and the displayed subTick intervals in the time axis change.
     * @param {object} event Event object
     * @param {object} event.old The old hour height tick resolution object.
     * @param {number} event.old.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.old.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     * @param {object} event.new The new hour height tick resolution object.
     * @param {number} event.new.level The level `0` to `4` where `0` is the default with no subTick times displayed, and `4` means every 5 minute time is displayed.
     * @param {string} event.new.step The time duration of visible subTicks. This is a string in the format required by [parseDuration](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-parseDuration-static)
     */
    onTickChange?: ((event: { old: { level: number, step: string }, new: { level: number, step: string } }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * This is normally used as a [mode](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes) of a Calendar (as seen in the live
 * demo below) but may be used standalone as a regular Widget.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView)
 */
export class WeekView extends DayView {
    /**
     * Identifies an object as an instance of [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) class, or subclass thereof.
     */
    static readonly isWeekView: boolean
    /**
     * Identifies an object as an instance of [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) class, or subclass thereof.
     */
    readonly isWeekView: boolean
    /**
     * Returns the resource associated with this week view when used inside a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     */
    readonly resource: ResourceModel
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated: (() => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange: ((event: { old?: object, new: object }) => void)|string
}

/**
 * Type with available listeners functions for [YearView](https://bryntum.com/products/grid/docs/api/Calendar/widget/YearView) class.
 * Could be used for callbacks typings in TypeScript application.
 */
type YearViewListenersTypes = {
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate: (event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate: (event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy: (event: { source: Base }) => void
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide: (event: { source: Widget }) => Promise<boolean>|boolean|void
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord: (event: { source: Container, record: Model }) => void
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow: (event: { source: Widget|any }) => Promise<boolean>|boolean|void
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    beforeShowOverflowPopup: (event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave: (event: { event: { state: object } }) => Promise<boolean>|boolean|void
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll: (event: {[key: string]: any, type: string}) => void
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated: () => void
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse: (event: { source: Panel }) => void
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated: (event: { events: EventModel[], The: Date }) => void
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy: (event: { source: Base }) => void
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange: (event: { source: Container, dirty: boolean }) => void
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    emptyCellClick: (event: { domEvent: Event, date: Date }) => void
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated: (event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate: (event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand: (event: { source: Panel }) => void
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut: (event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide: (event: { source: Widget }) => void
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint: (event: { source: Widget, firstPaint: boolean }) => void
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly: (event: { readOnly: boolean }) => void
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose: () => void
    /**
     * Fires when this YearView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.YearView} event.source The triggering instance.
     */
    refresh: (event: { source: YearView }) => void
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize: (event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange: (event: { source: Widget, state: string, oldState: string }) => void
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show: (event: { source: Widget }) => void
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    showOverflowPopup: (event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick: (event: { source: Tool, tool: Tool }) => void
}

/**
 * Type with listeners options for [YearView](https://bryntum.com/products/grid/docs/api/Calendar/widget/YearView) class.
 */
type YearViewListeners = {
    /**
     * The `this` object for listener methods
     */
    thisObj?: object
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    beforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    beforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    beforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    beforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    beforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    beforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    beforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    beforeShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    beforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    catchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    cellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    collapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    dayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    destroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    dirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    emptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    eventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    eventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    expand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    focusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    hide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    paint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    readOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    recompose?: (() => void)|string
    /**
     * Fires when this YearView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.YearView} event.source The triggering instance.
     */
    refresh?: ((event: { source: YearView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    resize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    responsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    show?: ((event: { source: Widget }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    showOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    toolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * Type with configuration options for [YearView](https://bryntum.com/products/grid/docs/api/Calendar/widget/YearView) class.
 */
type YearViewConfig = {
    type?: 'yearview'|'year'
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-activationKey)
     */
    activationKey?: string
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-adopt)
     */
    adopt?: HTMLElement|string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-align)
     */
    align?: AlignSpec|string
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: HTMLElement|string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaDescription)
     */
    ariaDescription?: string
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaLabel)
     */
    ariaLabel?: string
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bbar)
     */
    bbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bodyCls)
     */
    bodyCls?: string|object
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bubbleEvents)
     */
    bubbleEvents?: object
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-callOnFunctions)
     */
    callOnFunctions?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: boolean
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-cls)
     */
    cls?: string|object
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: boolean
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-collapsible)
     */
    collapsible?: boolean|PanelCollapserConfig|PanelCollapserOverlayConfig
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: HTMLElement|Widget|Rectangle
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-contentElementCls)
     */
    contentElementCls?: string|object
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string>
    /**
     * A date which specifies the year to display. All types of calendar view have a `date`
     * config which they use to set their visible date range according to their configuration
     * and type.
     */
    date?: Date
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names
     * in the header part of each calendar cell.
     */
    dayCellNameFormat?: string
    /**
     * An empty function by default, but provided so that you can override it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dayCellRenderer)
     * @param {object} cellData An object that contains data about the cell.
     * @param {Date} cellData.date The Date of this cell
     * @param {Scheduler.model.EventModel[]} cellData.events The array of events in this cell
     * @param {DomConfig} cellData.cellConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object that contains data about the cells element.
     * @param {string} cellData.cellConfig.style The style property is an object containing style properties for the cell header element.
     * @param {string} cellData.cellConfig.cls The cls property is an object whose property names will be added to the cell element if the property value is truthy.
     * @returns {DomConfig,string,void}
     */
    dayCellRenderer?: (cellData: { date: Date, events: EventModel[], cellConfig: { style: string, cls: string } }) => DomConfig|string|void
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: ((widget: Widget) => boolean)|string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: CalendarContainerItemConfig
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-disabled)
     */
    disabled?: boolean|'inert'
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dock)
     */
    dock?: 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dragUnit)
     */
    dragUnit?: string
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-draggable)
     */
    draggable?: boolean|{
        handleSelector?: string
    }
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: boolean}
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-elementAttributes)
     */
    elementAttributes?: Record<string, string|null>
    /**
     * A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which will be used to create the content of a clickable
     * element which is present when no events are in a cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-emptyCellRenderer)
     * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.
     * @returns {DomConfig,void} DomConfig object representing the HTML markup
     */
    emptyCellRenderer?: ((dayCellRenderer: { cellData: DayCell }) => DomConfig|void)|object|string
    /**
     * When [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopupTrigger) is not a mouseover gesture, setting this to
     * a truthy value means that a tooltip containing the event count will be shown on hover of
     * a day cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventCountTip)
     */
    eventCountTip?: boolean|Record<string, boolean|string>
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents) is `'dots'`, this controls the layout of the dots
     * below the day number.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventDots)
     */
    eventDots?: {
        marginTop?: number
        max?: number
        gap?: number
        size?: number
        stripe?: boolean
    }
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * The height of event bars if this view creates event bars.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventHeight)
     */
    eventHeight?: number|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing?: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: number|string
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: boolean
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-footer)
     */
    footer?: {
        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'
        html?: string
        cls?: string
    }|string
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-header)
     */
    header?: string|boolean|PanelHeader
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string|number
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: boolean
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-hideAnimation)
     */
    hideAnimation?: boolean|object
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-hideWhenEmpty)
     */
    hideWhenEmpty?: boolean
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: boolean
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: HTMLElement|string
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: HTMLElement|string
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-items)
     */
    items?: Record<string, CalendarContainerItemConfig|MenuItemConfig|boolean|null>|(CalendarContainerItemConfig|MenuItemConfig|Widget)[]
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig>
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-layout)
     */
    layout?: string|CalendarContainerLayoutConfig
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-layoutStyle)
     */
    layoutStyle?: object
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-lazyItems)
     */
    lazyItems?: Record<string, CalendarContainerItemConfig>|CalendarContainerItemConfig[]|Widget[]
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-listeners)
     */
    listeners?: YearViewListeners
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-localeClass)
     */
    localeClass?: typeof Base
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: boolean
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-localizableProperties)
     */
    localizableProperties?: string[]
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: number|string
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: boolean|string|MaskConfig
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents) is `'dots'`, this is the maximum number of dots to show
     * below the date number in the cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-maxDots)
     * @deprecated 6.1.2 Use [eventDots](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#property-eventDots) instead.
     */
    maxDots?: number
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string|number
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-maximizeOnMobile)
     */
    maximizeOnMobile?: number|string
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string|number
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string|number
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-monitorResize)
     */
    monitorResize?: boolean
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-namedItems)
     */
    namedItems?: Record<string, CalendarContainerItemConfig>
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to create the "+n more" button which indicates that a day cell has
     * overflowing events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowButtonRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to create the overflow button.
     * @param {string} domConfig.tag The tag name of the element to create.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {string} domConfig.text The inner content of the element. <strong>Note that this will be HTML encoded for XSS safety</strong>
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {number} overflowCount The number of overflowing events.
     * @returns {DomConfig,string,void}
     */
    overflowButtonRenderer?: (domConfig: { tag: string, className: object, text: string, style: object, dataset: object }, overflowCount: number) => DomConfig|string|void
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that this view
     * may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig
    /**
     * The pointer gesture which shows the popup containing any overflowing events
     * in the current view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopupTrigger)
     */
    overflowPopupTrigger?: 'click'|'mouseover'|'hover'
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-owner)
     */
    owner?: Widget
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-positioned)
     */
    positioned?: boolean
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: boolean
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-readOnly)
     */
    readOnly?: boolean
    /**
     * An identifier by which this widget will be registered in the [widgetMap](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-widgetMap)
     * of all ancestor containers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ref)
     */
    ref?: string
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in
     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the
     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-responsive)
     */
    responsive?: object
    /**
     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do
     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.
     */
    responsiveRoot?: boolean
    /**
     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally
     * and should not be assigned directly.
     */
    responsiveState?: string
    /**
     * The widget whose size and other properties drive this object's responsive behavior. If this config is not
     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be
     * used. If there is no such ancestor, then the instance using this mixin is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-responsiveTarget)
     */
    responsiveTarget?: string|Widget
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ripple)
     */
    ripple?: boolean|{
        delegate?: string
        color?: string
        radius?: number
        clip?: string
    }
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: ShadowRoot|HTMLElement
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-rtl)
     */
    rtl?: boolean
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: 'hide'|'realign'|null
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-scrollable)
     */
    scrollable?: boolean|ScrollerConfig|Scroller
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showAnimation)
     */
    showAnimation?: boolean|object
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * How to indicate the presence of events for a date. The default is `heatmap` which adds
     * classes depending on how many events intersect the date.Values may be:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents)
     */
    showEvents?: boolean|'heatmap'|'dots'
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: boolean
    /**
     * By default, all months show six week rows. Pass `false` to only render as many rows
     * as needed.
     */
    sixWeeks?: boolean
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: boolean
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateId)
     */
    stateId?: string
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateProvider)
     */
    stateProvider?: StateProvider
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateful)
     */
    stateful?: boolean|object|string[]
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-statefulEvents)
     */
    statefulEvents?: object|string[]
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: boolean
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-strips)
     */
    strips?: Record<string, CalendarContainerItemConfig>
    /**
     * Custom style spec to add to element
     */
    style?: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tab)
     */
    tab?: boolean|TabConfig
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[]|Widget[]
    /**
     * The tag name of this Widget's root element
     */
    tag?: string
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tbar)
     */
    tbar?: (CalendarContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-textAlign)
     */
    textAlign?: 'left'|'center'|'right'|'start'|'end'
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-title)
     */
    title?: string
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tools)
     */
    tools?: Record<string, ToolConfig>|null
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tooltip)
     */
    tooltip?: string|TooltipConfig|null
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: boolean
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ui)
     */
    ui?: 'plain'|'toolbar'|string|object
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string|number
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-x)
     */
    x?: number
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-y)
     */
    y?: number
    /**
     * The year to display
     */
    year?: number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a widget is hidden. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being hidden.
     */
    onBeforeHide?: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before this container will load record values into its child fields. This is useful if you
     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container
     * @param {Core.data.Model} event.record The record
     */
    onBeforeSetRecord?: ((event: { source: Container, record: Model }) => void)|string
    /**
     * Triggered before a widget is shown. Return `false` to prevent the action.
     * @param {object} event Event object
     * @param {Core.widget.Widget,any} event.source The widget being shown
     */
    onBeforeShow?: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onBeforeShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave?: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll?: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated?: (() => void)|string
    /**
     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onCollapse?: ((event: { source: Panel }) => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy?: ((event: { source: Base }) => void)|string
    /**
     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes
     * @param {object} event Event object
     * @param {Core.widget.Container} event.source The container.
     * @param {boolean} event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.
     */
    onDirtyStateChange?: ((event: { source: Container, dirty: boolean }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.
     * @param {object} event Event object
     * @param {Core.widget.Panel} event.source This Panel.
     */
    onExpand?: ((event: { source: Panel }) => void)|string
    /**
     * Fired when focus enters this Widget.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusIn?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
     * focus moving from within this Widget's ownership tree, even if there are floating widgets
     * will not trigger this event. This is when focus exits this widget completely.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {HTMLElement} event.fromElement The element which lost focus.
     * @param {HTMLElement} event.toElement The element which gained focus.
     * @param {Core.widget.Widget} event.fromWidget The widget which lost focus.
     * @param {Core.widget.Widget} event.toWidget The widget which gained focus.
     * @param {boolean} event.backwards `true` if the `toElement` is before the `fromElement` in document order.
     */
    onFocusOut?: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string
    /**
     * Triggered after a widget was hidden
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onHide?: ((event: { source: Widget }) => void)|string
    /**
     * Triggered when a widget which had been in a non-visible state for any reason
     * achieves visibility.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-paint)
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget being painted.
     * @param {boolean} event.firstPaint `true` if this is the first paint.
     */
    onPaint?: ((event: { source: Widget, firstPaint: boolean }) => void)|string
    /**
     * Fired when a Widget's read only state is toggled
     * @param {object} event Event object
     * @param {boolean} event.readOnly Read only or not
     */
    onReadOnly?: ((event: { readOnly: boolean }) => void)|string
    /**
     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call
     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.
     */
    onRecompose?: (() => void)|string
    /**
     * Fires when this YearView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.YearView} event.source The triggering instance.
     */
    onRefresh?: ((event: { source: YearView }) => void)|string
    /**
     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source This Widget
     * @param {number} event.width The new width
     * @param {number} event.height The new height
     * @param {number} event.oldWidth The old width
     * @param {number} event.oldHeight The old height
     */
    onResize?: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange?: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Triggered after a widget is shown.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget
     */
    onShow?: ((event: { source: Widget }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
    /**
     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.
     * @param {object} event Event object
     * @param {Core.widget.Tool} event.source This Panel.
     * @param {Core.widget.Tool} event.tool The tool which is being clicked.
     */
    onToolClick?: ((event: { source: Tool, tool: Tool }) => void)|string
}

/**
 * This is normally used as a [mode](https://bryntum.com/products/calendar/docs/api/Calendar/view/Calendar#config-modes) of a Calendar (as seen in the live
 * demo below) but may be used standalone as a regular Widget.
 * ...
 * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView)
 */
export class YearView extends Panel {
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    static readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) class, or subclass thereof.
     */
    static readonly isDayCellCollecter: boolean
    /**
     * Identifies an object as an instance of [DayCellRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer) class, or subclass thereof.
     */
    static readonly isDayCellRenderer: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    static readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    static readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    static readonly isResponsive: boolean
    /**
     * Identifies an object as an instance of [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView) class, or subclass thereof.
     */
    static readonly isYearView: boolean
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     */
    animateTimeShift: boolean
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     */
    autoCreate: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The class name to add to calendar cells.
     */
    dayCellCls: string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     */
    defaultScrollOptions: BryntumScrollOptions
    /**
     * The textual description generated by the [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) if present, or by the
     * view's date (or date *range* if it has a range) and the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    readonly description: string
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     */
    dragUnit: string
    /**
     * The duration in total days that this view covers.
     */
    readonly duration: number
    /**
     * The number of <strong>visible</strong> events that this view currently displays in its date range.
     */
    readonly eventCount: number
    /**
     * When [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopupTrigger) is not a mouseover gesture, setting this to
     * a truthy value means that a tooltip containing the event count will be shown on hover of
     * a day cell.
     */
    eventCountTip: boolean|Record<string, boolean|string>
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents) is `'dots'`, this controls the layout of the dots
     * below the day number.
     */
    eventDots: {
        marginTop?: number
        max?: number
        gap?: number
        size?: number
        stripe?: boolean
    }
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     */
    extendAllDayEndDay: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     */
    filterEventResources: boolean
    /**
     * The first *visible* event-bearing element in this view. So if the first day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * cell will be for the Monday.
     */
    firstVisibleCell: HTMLElement
    /**
     * The date of the first *visible* event-bearing element in this view. So if the first day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * date will be the date of the Monday.
     */
    firstVisibleDate: Date
    /**
     * Yields the default description value as calculated using the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#property-dateFormat) which
     * describes this object if no [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) was provided.
     */
    readonly formattedDescription: string
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays: boolean
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) class, or subclass thereof.
     */
    readonly isDayCellCollecter: boolean
    /**
     * Identifies an object as an instance of [DayCellRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer) class, or subclass thereof.
     */
    readonly isDayCellRenderer: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    readonly isEventRenderer: boolean
    /**
     * Identifies an object as an instance of [Responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive) class, or subclass thereof.
     */
    readonly isResponsive: boolean
    /**
     * Identifies an object as an instance of [YearView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView) class, or subclass thereof.
     */
    readonly isYearView: boolean
    /**
     * The last *visible* event-bearing element in this view. So if the last day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * cell will be for the Friday.
     */
    lastVisibleCell: HTMLElement
    /**
     * The date of the last *visible* event-bearing element in this view. So if the last day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * date will be the date of the Friday.
     */
    lastVisibleDate: Date
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate: Date
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents) is `'dots'`, this is the maximum number of dots to show
     * below the date number in the cell.
     * @deprecated 6.1.2 Use [eventDots](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#property-eventDots) instead.
     */
    maxDots: number
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate: Date
    /**
     * Calendar mode that this view represents (eg. "day", "month" etc). Only accessible when used within a Calendar.
     */
    readonly modeName: string
    /**
     * The [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) instance that this view may show when events
     * for one day overflow the available space.
     */
    readonly overflowPopup: OverflowPopup
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     */
    pastEventCls: string
    /**
     * Returns the resource associated with this year view when used inside a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     */
    readonly resource: ResourceModel
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat: string
    /**
     * How to indicate the presence of events for a date. The default is `heatmap` which adds
     * classes depending on how many events intersect the date.Values may be:
     */
    showEvents: boolean|'heatmap'|'dots'
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     */
    stackMultiDayEvents: boolean
    /**
     * A String which describes how much the [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-next) and [previous](#Calendar/widget/mixin/CalendarMixin#function-previous)
     * methods will move this view forwards or backwards in time.
     */
    readonly stepUnit: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     */
    syncCalendarDate: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     */
    syncViewDate: boolean
    /**
     * This property yields the base selector to use to find visible cell elements in this view.
     */
    readonly visibleCellSelector: string
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires before an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onBeforeDestroy: ((event: { source: Base }) => void)|string
    /**
     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` is to be changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onBeforeResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onBeforeShowOverflowPopup: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateApply: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.
     * @param {object} event Event object
     * @param {object} event.event The Bryntum event object
     * @param {object} event.event.state State object config
     */
    onBeforeStateSave: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string
    /**
     * Fires when any other event is fired from the object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-catchAll)
     * @param {object} event Event object
     * @param {{[key: string]: any, type: string}} event.event The Object that contains event details
     * @param {string} event.event.type The type of the event which is caught by the listener
     */
    onCatchAll: ((event: {[key: string]: any, type: string}) => void)|string
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated: (() => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when an object is destroyed.
     * @param {object} event Event object
     * @param {Core.Base} event.source The Object that is being destroyed.
     */
    onDestroy: ((event: { source: Base }) => void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Fires when this YearView refreshes.
     * @param {object} event Event object
     * @param {Calendar.widget.YearView} event.source The triggering instance.
     */
    onRefresh: ((event: { source: YearView }) => void)|string
    /**
     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.
     * @param {object} event Event object
     * @param {Core.widget.Widget} event.source The widget whose `responsiveState` has changed
     * @param {string} event.state The new value for the widget's `responsiveState`
     * @param {string} event.oldState The previous value for the widget's `responsiveState`
     */
    onResponsiveStateChange: ((event: { source: Widget, state: string, oldState: string }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onShowOverflowPopup: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {YearViewConfig} config
     */
    constructor(config?: YearViewConfig);
    /**
     * Determines what is under the cursor of the specified event or what is described by the given element.
     * @param {Event,Element} domEvent The event or element
     */
    calendarHitTest(domEvent: Event|Element): CalendarHit;
    /**
     * Creates an event on the specified date which conforms to this view's [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)
     * setting.
     * @param {Date} date The date to add the event at. If there's no time component, the [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)'s `startHour` will be used.
     */
    createEvent(date: Date): void;
    /**
     * This is the standard way to create a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig)
     * element definition object for creating event bars in all view types.
     * @param {object} renderData Context for the event bar config creation.
     * @param {Function} eventRenderer Optionally a function which created content HTML for the event body. Defaults to any [eventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer) configured into this view.
     */
    createEventDomConfig(renderData: {
        eventRecord: EventModel
        minimal: boolean
        date: Date
        eventEndDate?: Date
    }, eventRenderer?: Function): DomConfig;
    /**
     * Returns the cell associated with the passed date.
     * @param {Date,string} date The date to find the element for or a key in the format `YYYY-MM-DD`
     * @param {boolean} strict Only return the element if this view *owns* the date. (MonthView and YearView)
     */
    getDayElement(date: Date|string, strict: boolean): void;
    /**
     * Returns the outermost element which represents the first block of the passed event in the view. <em>If the
     * event is represented within the view</em>.
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the element for.
     * @param {Date} date Optionally, the event element at the specified date.
     */
    getEventElement(eventRecord: EventModel|string|number, date?: Date): HTMLElement;
    /**
     * Returns all outermost elements which represents the passed event in the view. <em>If the
     * event is represented within the view</em>
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the elements for.
     */
    getEventElements(eventRecord: EventModel|string|number): HTMLElement[];
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Returns the resource record for a DOM element or DOM event if the element is inside a view
     * which displays events for one resource such as a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     * or a [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView).
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getResourceRecord(elementOrEvent: HTMLElement|Event): ResourceModel;
    /**
     * Moves this view forwards in time by its configured (or intrinsic if it's a
     * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) or a [YearView](#Calendar/widget/YearView)) duration.
     */
    next(): void;
    /**
     * Called when new event is created.
     * Сan be overridden to supply default record values etc.
     * @param {Scheduler.model.EventModel} eventRecord Newly created event
     */
    onEventCreated(eventRecord: EventModel): void;
    /**
     * Moves this view backwards in time by its configured (or intrinsic if it's a
     * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) or a [YearView](#Calendar/widget/YearView)) duration.
     */
    previous(): void;
    /**
     * Refreshes the UI after a change to the EventStore, or to a configuration that requires
     * the UI to change.
     */
    refresh(): void;
    /**
     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when
     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and
     * DOM churn is kept to a minimum.
     */
    refreshSoon(): void;
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    resolveEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Brings an event or a time into view. Optionally visually highlights the target.
     * @param {Scheduler.model.EventModel,Date} target The event or Date to scroll to.
     * @param {object} options How to scroll.
     */
    scrollTo(target: EventModel|Date, options?: {
        block?: 'start'|'end'|'center'|'nearest'
        edgeOffset?: number
        animate?: object|boolean|number
        highlight?: boolean|Function
        focus?: boolean
        x?: boolean
        y?: boolean
    }): Promise<any>;
}

/**
 * Type with configuration options for [CalendarMixin](https://bryntum.com/products/grid/docs/api/Calendar/widget/mixin/CalendarMixin) class.
 */
type CalendarMixinClassConfig = {
    /**
     * A key to use to activate this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-activationKey)
     */
    activationKey?: string
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate?: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove?: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize?: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-animateTimeShift)
     */
    animateTimeShift?: boolean
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)
     */
    autoCreate?: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat?: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator?: string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-defaultScrollOptions)
     */
    defaultScrollOptions?: BryntumScrollOptions
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat)
     */
    descriptionFormat?: string|string[]|boolean[]
    /**
     * A function that provides the textual description for this view. If provided, this function overrides the
     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionRenderer)
     * @param {Core.widget.Widget} view The active view in case the function is in another scope.
     * @returns {string} Description string
     */
    descriptionRenderer?: (view: Widget) => string
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-dragUnit)
     */
    dragUnit?: string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * The height of event bars if this view creates event bars.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventHeight)
     */
    eventHeight?: number|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function which compares events which some views use to decide upon rendering order.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare
     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare
     * @returns {number}
     */
    eventSorter?: (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-extendAllDayEndDay)
     */
    extendAllDayEndDay?: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays?: boolean
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate?: Date|string
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate?: Date|string
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, boolean>
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-pastEventCls)
     */
    pastEventCls?: string
    /**
     * Configure as `true` to make the view read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-readOnly)
     */
    readOnly?: boolean
    /**
     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config
     * to create URLs using the resource's
     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or
     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-resourceImagePath)
     */
    resourceImagePath?: string
    /**
     * A button configuration object to use for the automatically created mode selector button for this mode.
     */
    selectorButton?: ButtonConfig
    /**
     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.
     */
    selectorMenuItem?: MenuItemConfig
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat?: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat?: string
    /**
     * The class name to add to events which have duration less than or equal to
     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).
     */
    shortEventCls?: string
    /**
     * The duration at which below and equal to this value, an event's encapsulating element gets
     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration)
     */
    shortEventDuration?: string|number
    /**
     * <strong>Not applicable in a `DayView`</strong>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet)
     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon
     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`
     */
    showBullet?: boolean|{bar?: boolean, noBar?: boolean}
    /**
     * Configure as `true` to show avatars of the assigned resources (calendars) at the
     * start of the event bar.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars)
     */
    showResourceAvatars?: boolean|string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-syncCalendarDate)
     */
    syncCalendarDate?: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-syncViewDate)
     */
    syncViewDate?: boolean
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events
     */
    timeFormat?: string
    /**
     * A title text used by the Calendar's mode selector button. If not specified, the mode name is used.
     */
    title?: string
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate?: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate?: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated?: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
}

export class CalendarMixinClass {
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    static readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    static readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    static readonly isEventRenderer: boolean
    /**
     * Configure this as `false` to disable drag-creating events in this view.
     */
    allowDragCreate: boolean
    /**
     * Configure this as `false` to disable drag-moving events in this view.
     */
    allowDragMove: boolean
    /**
     * Configure this as `false` to disable drag-resizing events in this view.
     */
    allowDragResize: boolean
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     */
    animateTimeShift: boolean
    /**
     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a
     * new event at the mouse or touch event's time point.
     */
    autoCreate: {
        gesture?: string
        newName?: Function|string
        step?: string
        snapType?: 'round'|'ceil'|'floor'
        duration?: string
        startHour?: number
    }|string|boolean
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.
     */
    dateFormat: string
    /**
     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    dateSeparator: string
    /**
     * The class name to add to calendar cells.
     */
    dayCellCls: string
    /**
     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.
     */
    defaultScrollOptions: BryntumScrollOptions
    /**
     * The textual description generated by the [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) if present, or by the
     * view's date (or date *range* if it has a range) and the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).
     */
    readonly description: string
    /**
     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.
     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will
     * be used.
     */
    descriptionFormat: string|string[]|boolean[]
    /**
     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events
     * in this view.
     */
    dragUnit: string
    /**
     * The duration in total days that this view covers.
     */
    readonly duration: number
    /**
     * The number of <strong>visible</strong> events that this view currently displays in its date range.
     */
    readonly eventCount: number
    /**
     * By default, the end date of an all day event is displayed in the UI as
     * the last calendar date on which the event falls. For most end users, this is the
     * expected value.
     */
    extendAllDayEndDay: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     */
    filterEventResources: boolean
    /**
     * The first *visible* event-bearing element in this view. So if the first day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * cell will be for the Monday.
     */
    firstVisibleCell: HTMLElement
    /**
     * The date of the first *visible* event-bearing element in this view. So if the first day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the first visible
     * date will be the date of the Monday.
     */
    firstVisibleDate: Date
    /**
     * Yields the default description value as calculated using the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#property-dateFormat) which
     * describes this object if no [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) was provided.
     */
    readonly formattedDescription: string
    /**
     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)
     */
    hideNonWorkingDays: boolean
    /**
     * Identifies an object as an instance of [CalendarMixin](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin) class, or subclass thereof.
     */
    readonly isCalendarMixin: boolean
    /**
     * Identifies an object as an instance of [Describable](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable) class, or subclass thereof.
     */
    readonly isDescribable: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    readonly isEventRenderer: boolean
    /**
     * The last *visible* event-bearing element in this view. So if the last day defined in the
     * range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * cell will be for the Friday.
     */
    lastVisibleCell: HTMLElement
    /**
     * The date of the last *visible* event-bearing element in this view. So if the last day defined
     * in the range is a Sunday, and [hideNonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-hideNonWorkingDays) is set, then the last visible
     * date will be the date of the Friday.
     */
    lastVisibleDate: Date
    /**
     * The maximum date to which the `endDate` of this view may be navigated.
     */
    maxDate: Date
    /**
     * The minimum date to which the `startDate` of this view may be navigated.
     */
    minDate: Date
    /**
     * Calendar mode that this view represents (eg. "day", "month" etc). Only accessible when used within a Calendar.
     */
    readonly modeName: string
    /**
     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.
     */
    pastEventCls: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for
     * abbreviated view descriptions.
     */
    shortDateFormat: string
    /**
     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for
     * abbreviated view descriptions.
     */
    shortDateTimeFormat: string
    /**
     * A String which describes how much the [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-next) and [previous](#Calendar/widget/mixin/CalendarMixin#function-previous)
     * methods will move this view forwards or backwards in time.
     */
    readonly stepUnit: string
    /**
     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)
     */
    syncCalendarDate: boolean
    /**
     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)
     */
    syncViewDate: boolean
    /**
     * This property yields the base selector to use to find visible cell elements in this view.
     */
    readonly visibleCellSelector: string
    /**
     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected
     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#event-beforeAutoCreate)
     * @param {object} event Event object
     * @param {Event} event.domEvent The DOM event which initiated the creation.
     * @param {Date} event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)
     * @param {Scheduler.model.ResourceModel} event.resourceRecord The resource if the UI includes a resource.
     * @param {typeof CalendarMixin} event.view This view.
     */
    onBeforeAutoCreate: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string
    /**
     * Triggered before a view's orientating date changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#event-beforeChangeDate)
     * @param {object} event Event object
     * @param {Date} event.oldDate The current orientating date of this view.
     * @param {Date} event.date The new date to which this view is to be orientated.
     */
    onBeforeChangeDate: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event
     * and added it to the event store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#event-eventAutoCreated)
     * @param {object} event Event object
     * @param {typeof CalendarMixin} event.source This Calendar view instance.
     * @param {Scheduler.model.EventModel} event.eventRecord The new event record.
     */
    onEventAutoCreated: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {CalendarMixinClassConfig} config
     */
    constructor(config?: CalendarMixinClassConfig);
    /**
     * Determines what is under the cursor of the specified event or what is described by the given element.
     * @param {Event,Element} domEvent The event or element
     */
    calendarHitTest(domEvent: Event|Element): CalendarHit;
    /**
     * Creates an event on the specified date which conforms to this view's [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)
     * setting.
     * @param {Date} date The date to add the event at. If there's no time component, the [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate)'s `startHour` will be used.
     */
    createEvent(date: Date): void;
    /**
     * This is the standard way to create a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig)
     * element definition object for creating event bars in all view types.
     * @param {object} renderData Context for the event bar config creation.
     * @param {Function} eventRenderer Optionally a function which created content HTML for the event body. Defaults to any [eventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer) configured into this view.
     */
    createEventDomConfig(renderData: {
        eventRecord: EventModel
        minimal: boolean
        date: Date
        eventEndDate?: Date
    }, eventRenderer?: Function): DomConfig;
    /**
     * Returns the cell associated with the passed date.
     * @param {Date,string} date The date to find the element for or a key in the format `YYYY-MM-DD`
     * @param {boolean} strict Only return the element if this view *owns* the date. (MonthView and YearView)
     */
    getDayElement(date: Date|string, strict: boolean): void;
    /**
     * Returns the outermost element which represents the first block of the passed event in the view. <em>If the
     * event is represented within the view</em>.
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the element for.
     * @param {Date} date Optionally, the event element at the specified date.
     */
    getEventElement(eventRecord: EventModel|string|number, date?: Date): HTMLElement;
    /**
     * Returns all outermost elements which represents the passed event in the view. <em>If the
     * event is represented within the view</em>
     * @param {Scheduler.model.EventModel,string,number} eventRecord The event, or event ID to find the elements for.
     */
    getEventElements(eventRecord: EventModel|string|number): HTMLElement[];
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Returns the resource record for a DOM element or DOM event if the element is inside a view
     * which displays events for one resource such as a [ResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/ResourceView)
     * or a [DayResourceView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayResourceView).
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    getResourceRecord(elementOrEvent: HTMLElement|Event): ResourceModel;
    /**
     * Moves this view forwards in time by its configured (or intrinsic if it's a
     * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) or a [YearView](#Calendar/widget/YearView)) duration.
     */
    next(): void;
    /**
     * Called when new event is created.
     * Сan be overridden to supply default record values etc.
     * @param {Scheduler.model.EventModel} eventRecord Newly created event
     */
    onEventCreated(eventRecord: EventModel): void;
    /**
     * Moves this view backwards in time by its configured (or intrinsic if it's a
     * [WeekView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/WeekView) or a [YearView](#Calendar/widget/YearView)) duration.
     */
    previous(): void;
    /**
     * Refreshes the UI after a change to the EventStore, or to a configuration that requires
     * the UI to change.
     */
    refresh(): void;
    /**
     * Schedules a refresh of the UI for the next animation frame. This is a useful method to call when
     * making multiple data changes, so that each change merely *schedules* a refresh for the next AF and
     * DOM churn is kept to a minimum.
     */
    refreshSoon(): void;
    /**
     * Returns the event record for a DOM element or DOM event.
     * @param {HTMLElement,Event} elementOrEvent The DOM node to lookup, or a DOM event whose target to lookup.
     */
    resolveEventRecord(elementOrEvent: HTMLElement|Event): EventModel;
    /**
     * Brings an event or a time into view. Optionally visually highlights the target.
     * @param {Scheduler.model.EventModel,Date} target The event or Date to scroll to.
     * @param {object} options How to scroll.
     */
    scrollTo(target: EventModel|Date, options?: {
        block?: 'start'|'end'|'center'|'nearest'
        edgeOffset?: number
        animate?: object|boolean|number
        highlight?: boolean|Function
        focus?: boolean
        x?: boolean
        y?: boolean
    }): Promise<any>;
}

export const CalendarMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & CalendarMixinClass>

/**
 * Type with configuration options for [DateRangeOwner](https://bryntum.com/products/grid/docs/api/Calendar/widget/mixin/DateRangeOwner) class.
 */
type DateRangeOwnerClassConfig = {
    /**
     * The date to orient this view's [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) around.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-date)
     */
    date?: Date
    /**
     * The end date (Time component is zeroed) of this view. Note that in terms of full days,
     * this is exclusive, ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on
     * the 8th.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-endDate)
     */
    endDate?: Date
    /**
     * The time range around the [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-date) to display events for.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range)
     */
    range?: string|DurationConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-shiftIncrement)
     */
    shiftIncrement?: string|DurationConfig
    /**
     * The start date (Time component is zeroed) of this view.
     */
    startDate?: Date
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange?: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange?: ((event: { old?: object, new: object }) => void)|string
}

export class DateRangeOwnerClass {
    /**
     * Identifies an object as an instance of [DateRangeOwner](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner) class, or subclass thereof.
     */
    static readonly isDateRangeOwner: boolean
    /**
     * Setting this property may change the encapsulated range if the date is outside the current
     * range.
     */
    date: Date
    /**
     * Gets the end date of the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) that this view covers.
     * Note that Date objects are time points, not a representation of a 24 hour period,
     * So `{startDate : '2020-10-24', endDate : '2020-10-25' }` spans the <strong>single</strong> day
     * 24th October 2020. The end point is `2020-10-25T00:00:00`
     */
    readonly endDate: Date
    /**
     * Identifies an object as an instance of [DateRangeOwner](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner) class, or subclass thereof.
     */
    readonly isDateRangeOwner: boolean
    /**
     * The time range encapsulated by the current [date](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-date).
     */
    range: string|DurationConfig
    /**
     * The time range to move by when [next](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#function-next) or [previous](#Calendar/widget/mixin/DateRangeOwner#function-previous) is called.
     */
    shiftIncrement: string|DurationConfig
    /**
     * Gets the start date of the [range](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#config-range) that this view covers.
     */
    readonly startDate: Date
    /**
     * Fired when the range of dates encapsulated by this view changes.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#event-rangeChange)
     * @param {object} event Event object
     * @param {typeof DateRangeOwner} event.source This calendar view instance.
     * @param {object} event.old The old date range <strong>if any</strong>.
     * @param {Date} event.old.startDate the old start date.
     * @param {Date} event.old.endDate the old end date.
     * @param {object} event.new The new date range
     * @param {Date} event.new.startDate the new start date.
     * @param {Date} event.new.endDate the new end date.
     */
    onRangeChange: ((event: { source: typeof DateRangeOwner, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string
    /**
     * Fired when the [shiftIncrement](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DateRangeOwner#property-shiftIncrement) of this view changes.
     * @param {object} event Event object
     * @param {object} event.old The shift increment *if any*.
     * @param {object} event.new The shift increment
     */
    onShiftIncrementChange: ((event: { old?: object, new: object }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {DateRangeOwnerClassConfig} config
     */
    constructor(config?: DateRangeOwnerClassConfig);
    /**
     * Interface method used by an encapsulating Calendar view to implement the "next" button.
     */
    next(): void;
    /**
     * Interface method used by an encapsulating Calendar view to implement the "prev" button.
     */
    previous(): void;
}

export const DateRangeOwner : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & DateRangeOwnerClass>

/**
 * Type with configuration options for [DayCellCollecter](https://bryntum.com/products/grid/docs/api/Calendar/widget/mixin/DayCellCollecter) class.
 */
type DayCellCollecterClassConfig = {
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * Return `true` to include the passed event, or a *falsy* value to exclude the event.
     * @param {Scheduler.model.EventModel} event the passed event
     * @returns {boolean}
     */
    eventFilter?: ((event: EventModel) => boolean)|string
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#config-stackMultiDayEvents)
     */
    stackMultiDayEvents?: boolean
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated?: (() => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated?: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate?: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
}

export class DayCellCollecterClass {
    /**
     * Identifies an object as an instance of [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) class, or subclass thereof.
     */
    static readonly isDayCellCollecter: boolean
    /**
     * Identifies an object as an instance of [DayCellCollecter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter) class, or subclass thereof.
     */
    readonly isDayCellCollecter: boolean
    /**
     * Set to `true` to stack multi-day events within each cell in the order of their start time.
     */
    stackMultiDayEvents: boolean
    /**
     * Fired when a new set of events has been gathered for this view's date range.
     */
    onCellMapPopulated: (() => void)|string
    /**
     * Fired after one day cell's events are collected in sorted order according to the
     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#event-dayCellPopulated)
     * @param {object} event Event object
     * @param {Scheduler.model.EventModel[]} event.events The events to be shown for the passed date
     * @param {Date} event.The date the events are to be shown in.
     */
    onDayCellPopulated: ((event: { events: EventModel[], The: Date }) => void)|string
    /**
     * Fires when a day spanning event is found, and the date to which its encapsulating event bar
     * extends has been calculated.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellCollecter#event-eventPropagate)
     * @param {object} event Event object
     * @param {Date} event.eventEndDate The end date for which to calculate the propagate end date.
     * @param {Date} event.propagateEndDate The system-calculated end point of the event bar.
     * @param {boolean} event.isAllDay `true` if the event is an all day event, or spans multiple days.
     * @param {boolean} event.isOverflow `true` if this is being called as part of further propagation.
     * @param {boolean} event.overflows `true` if the event extends into future cells.
     * @param {Scheduler.model.EventModel} event.eventRecord The event record being propagated.
     * @param {Date} event.date The date from which the event is being propagated.
     */
    onEventPropagate: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {DayCellCollecterClassConfig} config
     */
    constructor(config?: DayCellCollecterClassConfig);
}

export const DayCellCollecter : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & DayCellCollecterClass>

/**
 * Type with configuration options for [DayCellRenderer](https://bryntum.com/products/grid/docs/api/Calendar/widget/mixin/DayCellRenderer) class.
 */
type DayCellRendererClassConfig = {
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names
     * in the header part of each calendar cell.
     */
    dayCellNameFormat?: string
    /**
     * This may be specified to create the content for the date and day name section of calendar cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-dayCellRenderer)
     * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.
     * @param {DomConfig} dayCellDomConfig An object to sync the day cell element.
     * @param {object} dayCellDomConfig.className An object who's truthy property names will be applied as class names.
     * @param {object} dayCellDomConfig.style A CSS style definition object.
     * @param {object} dayCellDomConfig.dataset The DOM data properties to set.
     * @param {DomConfig[]} dayCellDomConfig.children The [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) definitions for the content of the cell.
     * @returns {string,object,object[]} The definition of the cell header content.
     */
    dayCellRenderer?: (dayCellRenderer: { cellData: DayCell }, dayCellDomConfig: { className: object, style: object, dataset: object, children: DomConfig[] }) => string|object|object[]
    /**
     * A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which will be used to create the content of a clickable
     * element which is present when no events are in a cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-emptyCellRenderer)
     * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.
     * @returns {DomConfig,void} DomConfig object representing the HTML markup
     */
    emptyCellRenderer?: ((dayCellRenderer: { cellData: DayCell }) => DomConfig|void)|object|string
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing?: number
    /**
     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which
     * will be used to create the "+n more" button which indicates that a day cell has
     * overflowing events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowButtonRenderer)
     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to create the overflow button.
     * @param {string} domConfig.tag The tag name of the element to create.
     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.
     * @param {string} domConfig.text The inner content of the element. <strong>Note that this will be HTML encoded for XSS safety</strong>
     * @param {object} domConfig.style A CSS style definition object.
     * @param {object} domConfig.dataset The DOM data properties to set.
     * @param {number} overflowCount The number of overflowing events.
     * @returns {DomConfig,string,void}
     */
    overflowButtonRenderer?: (domConfig: { tag: string, className: object, text: string, style: object, dataset: object }, overflowCount: number) => DomConfig|string|void
    /**
     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that this view
     * may show when events for one day overflow the available space.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopup)
     */
    overflowPopup?: OverflowPopupConfig
    /**
     * The pointer gesture which shows the popup containing any overflowing events
     * in the current view.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger)
     */
    overflowPopupTrigger?: 'click'|'mouseover'|'hover'
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onBeforeShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick?: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onShowOverflowPopup?: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
}

export class DayCellRendererClass {
    /**
     * Identifies an object as an instance of [DayCellRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer) class, or subclass thereof.
     */
    static readonly isDayCellRenderer: boolean
    /**
     * How much vertical space in pixels to leave between event bars in a cell.
     */
    eventSpacing: number
    /**
     * Identifies an object as an instance of [DayCellRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer) class, or subclass thereof.
     */
    readonly isDayCellRenderer: boolean
    /**
     * The [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) instance that this view may show when events
     * for one day overflow the available space.
     */
    readonly overflowPopup: OverflowPopup
    /**
     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onBeforeShowOverflowPopup: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string
    /**
     * Fired when an empty cell content area is clicked on. If the handler returns
     * `false` the current pointer event is not processed further.
     * @param {object} event Event object
     * @param {Event} event.domEvent The triggering DOM event.
     * @param {Date} event.date The date which has no visible events
     */
    onEmptyCellClick: ((event: { domEvent: Event, date: Date }) => void)|string
    /**
     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a
     * "+ n more" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.
     * @param {object} event Event object
     * @param {HTMLElement} event.cell The day cell for which the overflow popup is going to be shown.
     * @param {DayCell} event.cellData An object that contains data about the cell.
     * @param {Date} event.date The date which has overflowing events
     * @param {Calendar.widget.OverflowPopup} event.overflowPopup The overflow `Popup`.
     */
    onShowOverflowPopup: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {DayCellRendererClassConfig} config
     */
    constructor(config?: DayCellRendererClassConfig);
}

export const DayCellRenderer : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & DayCellRendererClass>

export class DaySelectableClass {
    /**
     * Identifies an object as an instance of [DaySelectable](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DaySelectable) class, or subclass thereof.
     */
    static readonly isDaySelectable: boolean
    /**
     * Identifies an object as an instance of [DaySelectable](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DaySelectable) class, or subclass thereof.
     */
    readonly isDaySelectable: boolean
}

export const DaySelectable : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & DaySelectableClass>

/**
 * Type with configuration options for [EventRenderer](https://bryntum.com/products/grid/docs/api/Calendar/widget/mixin/EventRenderer) class.
 */
type EventRendererClassConfig = {
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string }, showBullet: boolean }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: boolean, bodyColor: string, showBullet: boolean } }) => DomConfig|DomConfig[]|string|void)|string
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-filterEventResources)
     */
    filterEventResources?: boolean
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel)|string
}

export class EventRendererClass {
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    static readonly isEventRenderer: boolean
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     */
    filterEventResources: boolean
    /**
     * Identifies an object as an instance of [EventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer) class, or subclass thereof.
     */
    readonly isEventRenderer: boolean
    /**
     * Creates an instance of the class using the supplied configuration
     * @param {EventRendererClassConfig} config
     */
    constructor(config?: EventRendererClassConfig);
    /**
     * This is the standard way to create a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig)
     * element definition object for creating event bars in all view types.
     * @param {object} renderData Context for the event bar config creation.
     * @param {Function} eventRenderer Optionally a function which created content HTML for the event body. Defaults to any [eventRenderer](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/EventRenderer#config-eventRenderer) configured into this view.
     */
    createEventDomConfig(renderData: {
        eventRecord: EventModel
        minimal: boolean
        date: Date
        eventEndDate?: Date
    }, eventRenderer?: Function): DomConfig;
}

export const EventRenderer : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & EventRendererClass>

type CalendarContainerItemConfig = SchedulerContainerItemConfig|AgendaViewConfig|CalendarConfig|CalendarDatePickerConfig|DayAgendaViewConfig|DayResourceViewConfig|DayViewConfig|ModeSelectorConfig|MonthAgendaViewConfig|MonthViewConfig|RangeMenuConfig|ResourceViewConfig|WeekViewConfig|YearViewConfig|Record<string, any>

type CalendarInputFieldConfig = SchedulerInputFieldConfig|Record<string, any>

type CalendarColumnConfig = SchedulerColumnConfig|AgendaColumnConfig|EventColumnConfig|Record<string, any>

type CalendarModelFieldConfig = SchedulerModelFieldConfig|Record<string, any>

type CalendarContainerLayoutConfig = SchedulerContainerLayoutConfig|Record<string, any>

type CalendarContainerItem = SchedulerContainerItem|AgendaView|Calendar|CalendarDatePicker|DayAgendaView|DayResourceView|DayView|ModeSelector|MonthAgendaView|MonthView|RangeMenu|ResourceView|WeekView|YearView|any

type CalendarColumn = SchedulerColumn|AgendaColumn|EventColumn|any
