import CalendarMixin from './mixin/CalendarMixin.js';
import DateHelper from '../../Core/helper/DateHelper.js';
import CalendarDatePicker from './CalendarDatePicker.js';
import './AgendaView.js';
import Duration from '../../Core/data/Duration.js';
import DomHelper from '../../Core/helper/DomHelper.js';

/**
 * @module Calendar/widget/MonthAgendaView
 */

/**
 * A Calendar view class which displays a compact month calendar suitable for display on a phone sized screen.
 *
 * By default, its `next` and `previous` methods as called by the Calendar's "forward" and "backward" buttons
 * move by a single day. This can be reconfigured using the {@link #config-shiftIncrement} property.
 *
 * The date cells display their event load in different ways, depending on the {@link #property-showEvents} setting:
 *
 * * `false` - Do not show events in cells.
 * * `true` - Show a themeable bullet to indicate the presence of events for a date.
 * * `'count'` - Show a themeable badge containing the event count for a date.
 * * `'dots'` - Show small event-coloured bullets up to a maximum of {@link #config-maxDots} to indicate event presence.
 * * `'heatmap'` - Show warmer background colors the more events are present for a date.
 *
 * By default a single day {@link Calendar.widget.AgendaView} is displayed below it containing the events
 * for the selected date:
 *
 * {@inlineexample Calendar/widget/CalendarMonthAgendaView.js}
 *
 * You may use the `type` property of the {@link #config-agenda} config property to request that the view below the
 * month may be a {@link Calendar.widget.DayView} or a {@link Calendar.widget.DayAgendaView}
 *
 * @extends Calendar/widget/CalendarDatePicker
 * @mixes Calendar/widget/mixin/CalendarMixin
 * @classtype monthagenda
 * @typingswidget
 */
export default class MonthAgendaView extends CalendarDatePicker.mixin(CalendarMixin) {
    static $name = 'MonthAgendaView';

    static type = 'monthagenda';

    // Delayables are not inherited, so we need to restore the delayables from DatePicker
    static delayable = {
        refresh : 'raf'
    };

    static configurable = {
        // region Hidden configs
        /**
         * @hideconfigs shortEventDuration, eventHeight, eventSpacing
         */
        // endRegion

        title            : 'L{MonthView.Month}',
        showEvents       : 'dots',
        tbar             : null,
        animateTimeShift : false,
        eventHeight      : 'auto',
        trapFocus        : false,
        focusable        : true,

        /**
         * The time range to move by when {@link #function-next} or {@link #function-previous} is called.
         *
         * Valid values are:
         * - day
         * - week
         * - month
         * - year
         * - decade
         *
         * This may also be specified as a duration with a magnitude part and a unit part. For
         * example `'1m'` would mean one month.
         *
         * In this view, probably the choices should be:
         * - '1 day'
         * - '1 month'
         *
         * @prp {DurationConfig}
         * @accepts {String|DurationConfig}
         * @default '1 day'
         */
        shiftIncrement : { unit : 'day', magnitude : 1 },

        /**
         * A {@link Core.helper.DateHelper date formatting string} which produces a title for the agenda part of the view.
         * @config {String}
         */
        agendaDateFormat : 'dddd DD MMMM YYYY',

        /**
         * A function or the name of a function in the ownership hierarchy which, when passed the active date produces a
         * title for the agenda part of the view. Defaults to having *no header*.
         * @config {Function|String}
         * @param {Date} date The date which the Agenda part of the view is displaying.
         * @returns {String} The content of the agenda header below the month view.
         */
        agendHeaderRenderer : null,

        /**
         * A config object to reconfigure the default child view which displays the selected date's events.
         *
         * By default, an {@link Calendar.widget.AgendaView} with a {@link Calendar.widget.AgendaView#config-range}
         * of `'1 day'` is used. You may specify other `type`s such as `'dayview'` or `'dayagenda'`:
         *
         * ```javascript
         * modes : {
         *     month : {
         *         // Our month view shows a MonthAgenda view on phones
         *         // And when it does, the child "agenda" is a full DayView
         *         type   : matchMedia('(max-width : 600)').matches ? 'monthagenda' : 'monthview',
         *         agenda : {
         *             type         : 'dayview',
         *             dayStartTime : 8
         *         }
         *     }
         * }
         * ```
         *
         * @prp {Calendar.widget.AgendaView|Calendar.widget.DayView|Calendar.widget.DayAgendaView}
         * @accepts {AgendaViewConfig|DayViewConfig|DayAgendaViewConfig|Object}
         * @param {'agendaview'|'dayview'|'dayagenda'} type The type of view to display the day's events below the month.
         * @default
         */
        agenda : {
            type : 'agendaview'
        }
    };

    checkAutoCreateGesture(domEvent) {
        // Creating only works in the agenda, not the DatePicker part
        if (this.agenda.eventContentElement.contains(domEvent.target)) {
            super.checkAutoCreateGesture(...arguments);
        }
    }

    get description() {
        const
            { date } = this.agenda,
            today    = DateHelper.clearTime(new Date());

        if (!(today - date)) {
            return this.L('L{Calendar.Today}');
        }
        if (!DateHelper.diff(date, DateHelper.add(today, 1, 'd'))) {
            return this.L('L{Calendar.Tomorrow}');
        }
        return super.description;
    }

    agendaHeaderRenderer(date) {
    }

    changeShiftIncrement(shiftIncrement) {
        return Duration.from(shiftIncrement);
    }

    get stepUnit() {
        const { shiftIncrement } = this;

        if (shiftIncrement) {
            // If just one unit, return the unit name
            return shiftIncrement.magnitude === 1 ? DateHelper.getLocalizedNameOfUnit(shiftIncrement.unit) : `${shiftIncrement.magnitude} ${DateHelper.getLocalizedNameOfUnit(shiftIncrement.unit, true)}`;
        }
        return this.agenda.stepUnit;
    }

    getEventElement() {
        return this.agenda.getEventElement(...arguments);
    }

    next() {
        const
            {
                date,
                animateTimeShift
            }       = this,
            newDate = DateHelper.add(date, Duration.from(this.shiftIncrement));

        this.animateTimeShift = newDate.getMonth() !== date.getMonth();
        this.date = newDate;
        this.animateTimeShift = animateTimeShift;
    }

    previous() {
        const
            {
                date,
                animateTimeShift
            }       = this,
            newDate = DateHelper.add(date, Duration.from(this.shiftIncrement).negate());

        this.animateTimeShift = newDate.getMonth() !== date.getMonth();
        this.date = newDate;
        this.animateTimeShift = animateTimeShift;
    }

    changeAgenda(agenda, was) {
        was && (this.remove(was));

        if (agenda) {
            const
                me       = this,
                { date } = me;

            agenda = MonthAgendaView.reconfigure(was, MonthAgendaView.mergeConfigs({
                date,
                flex    : 1,
                project : me.project,
                title   : me.callback(me.agendaHeaderRenderer, me, [date]),
                ref     : 'agenda',
                cls     : {
                    'b-monthagenda-agenda' : 1
                },
                range                    : 'day',
                settingsButton           : null,
                alwaysShowCurrentDate    : true,
                consumeGridPointerEvents : false,
                defaultScrollOptions     : {
                    block : 'start'
                },
                internalListeners : {
                    topDateChange : 'onAgendaTopDateChange',
                    rangeChange   : 'onAgendaRangeChange',
                    thisObj       : me
                }
            }, agenda), me);

            me.add(agenda);

            // If we showing event dots, they should appear in the same order
            // as in the agenda.
            me.eventSorter = agenda.eventSorter;

            const { classList } = agenda.element;
            classList.remove('b-slide-vertical');
            classList.add('b-slide-horizontal');
        }
        else {
            was?.destroy();
        }

        return agenda;
    }

    // Keep our date synced with the stuck top date of the Agenda
    onAgendaTopDateChange({ source, date }) {
        // Don't update every date change during an animated scroll - it looks bad
        if (!source.scrollable.scrollAnimation) {
            // Do not scroll the agenda in response to this!
            source.preventScroll = true;
            this.date = date;
            source.preventScroll = false;
        }
    }

    // When the Agenda changes range, keep our date at the top if possible
    onAgendaRangeChange({ source }) {
        if (source.isAgendaView && source.store.count > 1) {
            const date = new Date(Math.min(Math.max(this.date, source.store.first.date), source.store.last.date));

            source.scrollTo(date, {
                animate : false,
                block   : 'start'
            });
        }
    }

    createCellData() {
        return this.agenda.createCellData(...arguments);
    }

    updateDate(date, was) {
        const { agenda } = this;

        this.selection = date;
        super.updateDate(date);

        // At config time will be called during ingestion of agenda
        if (agenda) {
            agenda.date = date;
            agenda.title = this.callback(this.agendaHeaderRenderer, this, [date]);
            // Only slide left/right if it's a single day child view
            if (agenda.duration === 1) {
                DomHelper.slideIn(agenda.element, date - was);
            }
        }
    }

    getDateFromDomEvent(e) {
        return super.getDateFromDomEvent(e) || this.agenda.getDateFromDomEvent(e);
    }
}

MonthAgendaView.initClass();
