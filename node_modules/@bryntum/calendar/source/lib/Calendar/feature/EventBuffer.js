import Duration from '../../Core/data/Duration.js';
import DateHelper from '../../Core/helper/DateHelper.js';
import CalendarFeature from './CalendarFeature.js';

/**
 * @module Calendar/feature/EventBuffer
 */
const wrapFieldDefinitions = {
    wrapStartDate : {
        get() {
            return DateHelper.add(this.startDate, Duration.from(this.preamble).negate());
        }
    },
    wrapEndDate : {
        get() {
            return DateHelper.add(this.endDate, Duration.from(this.postamble));
        }
    },
    outerStartDate : {
        get() {
            return this.wrapStartDate;
        }
    },
    outerEndDate : {
        get() {
            return this.wrapEndDate;
        }
    }
};

/**
 * A Feature that allows showing additional time before & after an event, to visualize things like travel time - or the time you
 * need to prepare a room for a meeting + clean it up after.
 *
 * The feature relies on two new model fields: `preamble` and `postamble` which are used to calculate overall start and
 * end dates used to position the event. These fields must be a parseable duration as documented in {@link Core.data.Duration}.
 * for example:
 *
 * ```JSON
 * {
 *     "name"      : "Do a job",
 *     "startDate" : "2024-08-10T10:00",
 *     "endDate"   : "2024-08-10T11:00",
 *     "preamble"  : "60min",
 *     "postamble" : "30min"
 * }
 * ```
 *
 * If `preamble` is not present, it is considered that there is no preamble. If `postamble` is not present,
 * it is considered that there is no postamble.
 *
 * When used, this feature adds two new, read-only properties to the event records:
 *
 * - outerStartDate The time at which the preamble begins.
 * - outerEndDate The time at which the postamble ends.
 *
 * {@inlineexample Calendar/feature/EventBuffer.js}
 *
 * This feature is **disabled** by default
 *
 * @demo Calendar/travel-time
 * @extends Calendar/feature/CalendarFeature
 * @classtype eventBuffer
 * @feature
 */
export default class EventBuffer extends CalendarFeature {

    static $name = 'EventBuffer';

    static type = 'eventBuffer';

    static configurable = {
        /**
         * Show buffer duration labels
         * @config {Boolean}
         * @default
         */
        showDuration : true,

        /**
         * A function which lets you customize the visual appearance of the preamble and postamble elements.
         *
         * <div class="note">
         * You should never modify any records inside this method.
         * </div>
         *
         * @config {Function}
         * @param {Object} data
         * @param {Scheduler.model.EventModel} data.eventRecord The event record
         * @param {Scheduler.model.ResourceModel} data.resourceRecord The resource record (only available in resource views)
         * @param {Object} data.preambleConfig A config object for the preamble
         * @param {String} data.preambleConfig.icon A CSS class for the icon to show (e.g. car / bicycle)
         * @param {Object|String} data.preambleConfig.cls A CSS object for the preamble element
         * @param {String} data.preambleConfig.text The text to display
         * @param {String} data.preambleConfig.tooltip Extra information to display when hovering the `text`
         * @param {Object} data.postambleConfig A config object for the postamble
         * @param {String} data.postambleConfig.icon A CSS class for the icon to show (e.g. car / bicycle)
         * @param {Object|String} data.postambleConfig.cls A CSS object for the postamble element
         * @param {String} data.postambleConfig.text The text to display
         * @param {String} data.postambleConfig.tooltip Extra information to display when hovering the `text`
         * @returns {void}
         */
        renderer : null
    };

    static get pluginConfig() {
        return {
            chain : ['onEventDataGenerated']
        };
    }

    onEventDataGenerated({ eventRecord, resourceRecord, view }, { children }) {
        // Add the extra date fields to the model definition
        if (!Object.getOwnPropertyDescriptor(eventRecord.constructor.prototype, 'wrapStartDate')) {
            Object.defineProperties(eventRecord.constructor.prototype, wrapFieldDefinitions);
        }

        if (this.enabled && view.isDayView) {
            const
                {
                    showDuration,
                    renderer
                }                = this,
                preambleConfig   = {},
                postambleConfig  = {};

            // Parse unconverted durations if the data field has not been ingested
            // using a convert function. If they have, this just returns the Duration.
            let preamble  = Duration.from(eventRecord.preamble),
                postamble = Duration.from(eventRecord.postamble);

            renderer && view.callback(renderer, view, [{ eventRecord, resourceRecord, preambleConfig, postambleConfig }]);

            if (!preamble?.magnitude) {
                preamble = null;
            }

            if (!postamble?.magnitude) {
                postamble = null;
            }

            const
                preambleMinutes  = preamble  ? DateHelper.as('minute', preamble) : 0,
                postambleMinutes = postamble ? DateHelper.as('minute', postamble) : 0;

            if (preamble) {
                const domConfig = {
                    className : {
                        'b-cal-event-buffer' : 1,
                        'b-cal-preamble'     : 1,
                        [preambleConfig.cls] : preambleConfig.cls
                    },
                    style : {
                        height : `calc(var(--hour-height) * ${preambleMinutes / 60} + 1px)`
                    },
                    children : showDuration ? [{
                        className : 'b-travel-time-label',
                        children  : [
                            preambleConfig.icon ? {
                                tag       : 'i',
                                className : preambleConfig.icon
                            } : undefined,
                            {
                                tag       : 'span',
                                className : 'b-buffer-label',
                                text      : preambleConfig.text ?? preamble.toString()
                            }
                        ]
                    }] : undefined
                };

                if (showDuration && preambleConfig.tooltip) {
                    domConfig.children[0].dataset = { btip : preambleConfig.tooltip };
                }
                children.push(domConfig);
            }

            if (postamble) {
                const domConfig = {
                    className : {
                        'b-cal-event-buffer'  : 1,
                        'b-cal-postamble'     : 1,
                        [postambleConfig.cls] : postambleConfig.cls
                    },
                    style : {
                        height : `calc(var(--hour-height) * ${postambleMinutes / 60} + 1px)`
                    },
                    children : showDuration ? [{
                        className : 'b-travel-time-label',
                        children  : [
                            postambleConfig.icon ? {
                                tag       : 'i',
                                className : postambleConfig.icon
                            } : undefined,
                            {
                                tag       : 'span',
                                className : 'b-buffer-label',
                                text      : postambleConfig.text ?? postamble.toString()
                            }
                        ]
                    }] : undefined
                };

                if (showDuration && postambleConfig.tooltip) {
                    domConfig.children[0].dataset = { btip : postambleConfig.tooltip };
                }
                children.push(domConfig);
            }
        }
    }

    updateShowDuration() {
        if (!this.isConfiguring) {
            this.client.eachView('refresh');
        }
    }

    doDisable() {
        if (!this.isConfiguring) {
            this.client.eachView('refresh');
        }
    }
}

// Register this feature type with its Factory
CalendarFeature.register(EventBuffer.type, EventBuffer);
