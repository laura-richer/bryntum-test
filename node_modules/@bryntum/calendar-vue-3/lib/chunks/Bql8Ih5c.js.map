{"version":3,"file":"Bql8Ih5c.js","sources":["../../src/components/BryntumYearView.vue"],"sourcesContent":["<!-- Vue 3 wrapper for Bryntum YearView -->\n\n<template>\n    <div ref=\"refElement\">\n\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n/* eslint-disable no-undef */\n\nimport { getCurrentInstance, onBeforeUnmount, onMounted, provide, ref, watch, toRaw } from 'vue';\n\nimport type { AlignSpec, Base, BryntumScrollOptions, ButtonConfig, CalendarMixin, Container, ContainerItemConfig, ContainerLayoutConfig, DayCell, DomConfig, EventBar, EventModel, KeyMapConfig, MaskConfig, MenuItemConfig, Model, OverflowPopup, OverflowPopupConfig, PagingToolbarConfig, Panel, PanelCollapserConfig, PanelCollapserOverlayConfig, PanelHeader, Rectangle, ResourceModel, Scroller, ScrollerConfig, StateProvider, TabConfig, Tool, ToolConfig, ToolbarConfig, ToolbarItems, TooltipConfig, Widget, YearViewListeners } from '@bryntum/calendar';\nimport { YearView } from '@bryntum/calendar';\n\nimport { WrapperHelper } from '../helper/WrapperHelper';\n\ndefineProps<{\n    // Configs\n    /**\n     * A key to use to activate this view.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-activationKey)\n     */\n    activationKey ? : string\n    /**\n     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's\n     * content will be placed inside this element.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-adopt)\n     */\n    adopt ? : HTMLElement|string\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-align)\n     */\n    align ? : AlignSpec|string\n    /**\n     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a\n     * flexbox layout. This config allows you to set this widget's\n     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.\n     */\n    alignSelf ? : string\n    /**\n     * Configure this as `false` to disable drag-creating events in this view.\n     */\n    allowDragCreate ? : Boolean\n    /**\n     * Configure this as `false` to disable drag-moving events in this view.\n     */\n    allowDragMove ? : Boolean\n    /**\n     * Configure this as `false` to disable drag-resizing events in this view.\n     */\n    allowDragResize ? : Boolean\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*\n     * `true` to show a connector arrow pointing to the align target.\n     */\n    anchor ? : Boolean\n    /**\n     * By default, when navigating through time, the next time\n     * block will be animated in from the appropriate direction.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-animateTimeShift)\n     */\n    animateTimeShift ? : Boolean\n    /**\n     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at\n     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).\n     */\n    appendTo ? : HTMLElement|string\n    /**\n     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject\n     * into an element which will be linked using the `aria-describedby` attribute.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaDescription)\n     */\n    ariaDescription ? : string\n    /**\n     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as\n     * the `aria-label` attribute.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaLabel)\n     */\n    ariaLabel ? : string\n    /**\n     * The `aria-live` value for this widget.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ariaLive)\n     * @deprecated Will be removed in 7.0\n     */\n    ariaLive ? : string\n    /**\n     * If this config is set, then the `gesture` configured (which defaults to `dblclick`) creates a\n     * new event at the mouse or touch event's time point.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-autoCreate)\n     */\n    autoCreate ? : {\n        gesture?: string\n        newName?: Function|string\n        step?: string\n        snapType?: 'round'|'ceil'|'floor'\n        duration?: string\n        startHour?: number\n    }|string|Boolean\n    /**\n     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),\n     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bbar)\n     */\n    bbar ? : (ContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null\n    /**\n     * Custom CSS classes to add to the panel's body element.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bodyCls)\n     */\n    bodyCls ? : string|object\n    /**\n     * An object where property names with a truthy value indicate which events should bubble up the ownership\n     * hierarchy when triggered.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-bubbleEvents)\n     */\n    bubbleEvents ? : object\n    /**\n     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-callOnFunctions)\n     */\n    callOnFunctions ? : Boolean\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * Set to `true` to centre the Widget in browser viewport space.\n     */\n    centered ? : Boolean\n    /**\n     * Custom CSS classes to add to element.\n     * May be specified as a space separated string, or as an object in which property names\n     * with truthy values are used as the class names:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-cls)\n     */\n    cls ? : string|object\n    /**\n     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is\n     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).\n     */\n    collapsed ? : Boolean\n    /**\n     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-collapsible)\n     */\n    collapsible ? : Boolean|PanelCollapserConfig|PanelCollapserOverlayConfig\n    config ? : object\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*\n     * Element, Widget or Rectangle to which this Widget is constrained.\n     */\n    constrainTo ? : HTMLElement|Widget|Rectangle\n    /**\n     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).\n     * May be specified as a space separated string, or as an object in which property names\n     * with truthy values are used as the class names:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-contentElementCls)\n     */\n    contentElementCls ? : string|object\n    /**\n     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)\n     */\n    dataset ? : Record<string, string>\n    /**\n     * A date which specifies the year to display. All types of calendar view have a `date`\n     * config which they use to set their visible date range according to their configuration\n     * and type.\n     */\n    date ? : Date\n    /**\n     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for view descriptions.\n     */\n    dateFormat ? : string\n    /**\n     * A string used to separate start and end dates in the [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionFormat).\n     */\n    dateSeparator ? : string\n    /**\n     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names\n     * in the header part of each calendar cell.\n     */\n    dayCellNameFormat ? : string\n    /**\n     * An empty function by default, but provided so that you can override it.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dayCellRenderer)\n     * @param {object} cellData An object that contains data about the cell.\n     * @param {Date} cellData.date The Date of this cell\n     * @param {Scheduler.model.EventModel[]} cellData.events The array of events in this cell\n     * @param {DomConfig} cellData.cellConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object that contains data about the cells element.\n     * @param {string} cellData.cellConfig.style The style property is an object containing style properties for the cell header element.\n     * @param {string} cellData.cellConfig.cls The cls property is an object whose property names will be added to the cell element if the property value is truthy.\n     * @returns {DomConfig,string,void}\n     */\n    dayCellRenderer ? : (cellData: { date: Date, events: EventModel[], cellConfig: { style: string, cls: string } }) => DomConfig|string|void\n    /**\n     * The name of the property to set when a single value is to be applied to this Widget. Such as when used\n     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.\n     */\n    defaultBindProperty ? : string\n    /**\n     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which\n     * focus should be directed by default.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-defaultFocus)\n     * @param {Core.widget.Widget} widget Widget passed to method\n     * @returns {boolean} truthy value if widget is the default one\n     */\n    defaultFocus ? : ((widget: Widget) => Boolean)|string\n    /**\n     * A config object containing default settings to apply to all child widgets.\n     */\n    defaults ? : ContainerItemConfig\n    /**\n     * Options to add into scroll options when the [scrollTo](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#function-scrollTo) method is called.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-defaultScrollOptions)\n     */\n    defaultScrollOptions ? : BryntumScrollOptions\n    /**\n     * The date format used by the default [descriptionRenderer](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-descriptionRenderer) for rendering the view's description.\n     * If this value is `null`, the [dateFormat](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/Describable#config-dateFormat) (and potentially [dateSeparator](#Scheduler/view/mixin/Describable#config-dateSeparator)) will\n     * be used.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-descriptionFormat)\n     */\n    descriptionFormat ? : string|string[]|Boolean[]\n    /**\n     * A function that provides the textual description for this view. If provided, this function overrides the\n     * [descriptionFormat](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-descriptionFormat).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-descriptionRenderer)\n     * @param {Core.widget.Widget} view The active view in case the function is in another scope.\n     * @returns {string} Description string\n     */\n    descriptionRenderer ? : (view: Widget) => string\n    /**\n     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget\n     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-disabled)\n     */\n    disabled ? : Boolean|'inert'\n    /**\n     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)\n     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,\n     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's\n     * body. Such widgets are called \"edge strips\".\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dock)\n     */\n    dock ? : 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´\n     * property which controls when a drag should start.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-draggable)\n     */\n    draggable ? : Boolean|{\n        handleSelector?: string\n    }\n    /**\n     * The [durationUnit](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-durationUnit) to use when drag-creating events\n     * in this view.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-dragUnit)\n     */\n    dragUnit ? : string\n    /**\n     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-drawer)\n     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.\n     * @param {string,number} size The size of the drawer in its collapsible axis.\n     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.\n     */\n    drawer ? : Boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: Boolean}\n    /**\n     * An object specifying attributes to assign to the root element of this widget.\n     * Set `null` value to attribute to remove it.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-elementAttributes)\n     */\n    elementAttributes ? : Record<string, string|null>\n    /**\n     * A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which will be used to create the content of a clickable\n     * element which is present when no events are in a cell.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-emptyCellRenderer)\n     * @param {DayCell} dayCellRenderer.cellData An object that contains data about the cell.\n     * @returns {DomConfig,void} DomConfig object representing the HTML markup\n     */\n    emptyCellRenderer ? : ((dayCellRenderer: { cellData: DayCell }) => DomConfig|void)|object|string\n    /**\n     * When [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopupTrigger) is not a mouseover gesture, setting this to\n     * a truthy value means that a tooltip containing the event count will be shown on hover of\n     * a day cell.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventCountTip)\n     */\n    eventCountTip ? : Boolean|Record<string, Boolean|string>\n    /**\n     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents) is `'dots'`, this controls the layout of the dots\n     * below the day number.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventDots)\n     */\n    eventDots ? : {\n        marginTop?: number\n        max?: number\n        gap?: number\n        size?: number\n        stripe?: Boolean\n    }\n    /**\n     * A function, or the name of a function in the ownership hierarchy to filter which events\n     * are collected into the day cell data blocks.\n     * Return `true` to include the passed event, or a *falsy* value to exclude the event.\n     * @param {Scheduler.model.EventModel} event the passed event\n     * @returns {boolean}\n     */\n    eventFilter ? : ((event: EventModel) => Boolean)|string\n    /**\n     * A function, or the name of a function in the ownership hierarchy which you\n     * can specify to customize event DOM content.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventHeaderRenderer)\n     * @param {object} detail An object that contains data about the event being rendered\n     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event\n     * @param {Scheduler.model.EventModel} detail.eventRecord The event record\n     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record\n     * @param {object} detail.renderData A data object containing properties that will be used to create the event element\n     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element\n     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy\n     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used\n     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered\n     * @param {string} detail.renderData.eventColor Color to be applied to the event\n     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar\n     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups\n     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible\n     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a \"bullet\" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.\n     * @returns {DomConfig,DomConfig[],string,void}\n     */\n    eventHeaderRenderer ? : ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: Boolean, bodyColor: string }, showBullet: Boolean }) => DomConfig|DomConfig[]|string|void)|string\n    /**\n     * The height of event bars if this view creates event bars.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventHeight)\n     */\n    eventHeight ? : number|string\n    /**\n     * A function, or the name of a function in the ownership hierarchy which you\n     * can specify to customize event DOM content.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventRenderer)\n     * @param {object} detail An object that contains data about the event being rendered\n     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event\n     * @param {Scheduler.model.EventModel} detail.eventRecord The event record\n     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record\n     * @param {object} detail.renderData A data object containing properties that will be used to create the event element\n     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element\n     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy\n     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used\n     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered\n     * @param {string} detail.renderData.eventColor Color to be applied to the event\n     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar\n     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups\n     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible\n     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a \"bullet\" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.\n     * @returns {DomConfig,DomConfig[],string,void}\n     */\n    eventRenderer ? : ((detail: { view: typeof CalendarMixin, eventRecord: EventModel, resourceRecord: ResourceModel, renderData: { style: object, cls: object, iconStyle: object, iconCls: object, eventColor: string, dataset: object, solidBar: Boolean, bodyColor: string, showBullet: Boolean } }) => DomConfig|DomConfig[]|string|void)|string\n    /**\n     * A function which compares events which some views use to decide upon rendering order.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-eventSorter)\n     * @param {Scheduler.model.EventModel,EventBar} lhs The left side value to conpare\n     * @param {Scheduler.model.EventModel,EventBar} rhs The right side value to conpare\n     * @returns {number}\n     */\n    eventSorter ? : (lhs: EventModel|EventBar, rhs: EventModel|EventBar) => number\n    /**\n     * How much vertical space in pixels to leave between event bars in a cell.\n     */\n    eventSpacing ? : number\n    /**\n     * By default, the end date of an all day event is displayed in the UI as\n     * the last calendar date on which the event falls. For most end users, this is the\n     * expected value.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-extendAllDayEndDay)\n     */\n    extendAllDayEndDay ? : Boolean\n    extraData ? : any\n    /**\n     * If this is set to `true`, then when determining which assigned resource of a multi assigned event\n     * to use to create the event UI, the first resource which is still selected in the\n     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-filterEventResources)\n     */\n    filterEventResources ? : Boolean\n    /**\n     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a\n     * flexbox layout. This config allows you to set this widget's\n     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.\n     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.\n     * numeric-only values are interpreted as the `flex-grow` value.\n     */\n    flex ? : number|string\n    /**\n     * Set to `true` to move the widget out of the document flow and position it\n     * absolutely in browser viewport space.\n     */\n    floating ? : Boolean\n    /**\n     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,\n     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-footer)\n     */\n    footer ? : {\n        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'\n        html?: string\n        cls?: string\n    }|string\n    /**\n     * A Function (or name of a function in the ownership hierarchy) which returns the\n     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-getPrimaryResource)\n     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.\n     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.\n     */\n    getPrimaryResource ? : ((eventRecord: EventModel) => ResourceModel)|string\n    /**\n     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-header)\n     */\n    header ? : string|Boolean|PanelHeader\n    /**\n     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which\n     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases\n     * this config is convenient.\n     */\n    height ? : string|number\n    /**\n     * Configure with true to make widget initially hidden.\n     */\n    hidden ? : Boolean\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-hideAnimation)\n     */\n    hideAnimation ? : Boolean|object\n    /**\n     * Configure as `true` to hide [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-nonWorkingDays)\n     */\n    hideNonWorkingDays ? : Boolean\n    /**\n     * Specify `true` to make this container hide when it has no visible children (Either empty\n     * or all children hidden).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-hideWhenEmpty)\n     */\n    hideWhenEmpty ? : Boolean\n    /**\n     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById\n     */\n    id ? : string\n    /**\n     * Determines if the widgets read-only state should be controlled by its parent.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ignoreParentReadOnly)\n     */\n    ignoreParentReadOnly ? : Boolean\n    /**\n     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.\n     */\n    insertBefore ? : HTMLElement|string\n    /**\n     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.\n     */\n    insertFirst ? : HTMLElement|string\n    /**\n     * An optional CSS class to add to child items of this container.\n     */\n    itemCls ? : string\n    /**\n     * An object containing typed child widget config objects or Widgets. May also be specified\n     * as an array.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-items)\n     */\n    items ? : Record<string, ContainerItemConfig|MenuItemConfig|Boolean|null>|(ContainerItemConfig|MenuItemConfig|Widget)[]\n    /**\n     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name\n     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values\n     * are the name of the instance method to call when the keystroke is received.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-keyMap)\n     */\n    keyMap ? : Record<string, KeyMapConfig>\n    /**\n     * The short name of a helper class which manages rendering and styling of child items.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-layout)\n     */\n    layout ? : string|ContainerLayoutConfig\n    /**\n     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-layoutStyle)\n     */\n    layoutStyle ? : object\n    /**\n     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into\n     * instances only when this Container is rendered, rather than eagerly at construct time.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-lazyItems)\n     */\n    lazyItems ? : Record<string, ContainerItemConfig>|ContainerItemConfig[]|Widget[]\n    /**\n     * The listener set for this object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-listeners)\n     */\n    listeners ? : YearViewListeners\n    /**\n     * A class translations of which are used for translating this entity.\n     * This is often used when translations of an item are defined on its container class.\n     * For example:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-localeClass)\n     */\n    localeClass ? : typeof Base\n    /**\n     * Set to `false` to disable localization of this object.\n     */\n    localizable ? : Boolean\n    /**\n     * List of properties which values should be translated automatically upon a locale applying.\n     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),\n     * you could use 'localeKey' meta configuration.\n     * Example:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-localizableProperties)\n     */\n    localizableProperties ? : string[]\n    /**\n     * Widget's margin. This may be configured as a single number or a `TRBL` format string.\n     * numeric-only values are interpreted as pixels.\n     */\n    margin ? : number|string\n    /**\n     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the\n     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these\n     * values.\n     */\n    maskDefaults ? : MaskConfig\n    /**\n     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a\n     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.\n     */\n    masked ? : Boolean|string|MaskConfig\n    /**\n     * The maximum date to which the `endDate` of this view may be navigated.\n     */\n    maxDate ? : Date|string\n    /**\n     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents) is `'dots'`, this is the maximum number of dots to show\n     * below the date number in the cell.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-maxDots)\n     * @deprecated 6.1.2 Use [eventDots](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#property-eventDots) instead.\n     */\n    maxDots ? : number\n    /**\n     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.\n     */\n    maxHeight ? : string|number\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-maximizeOnMobile)\n     */\n    maximizeOnMobile ? : number|string\n    /**\n     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.\n     */\n    maxWidth ? : string|number\n    /**\n     * The minimum date to which the `startDate` of this view may be navigated.\n     */\n    minDate ? : Date|string\n    /**\n     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.\n     */\n    minHeight ? : string|number\n    /**\n     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.\n     */\n    minWidth ? : string|number\n    /**\n     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)\n     * is used to monitor this element for size changes caused by either style manipulation, or by CSS\n     * layout.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-monitorResize)\n     */\n    monitorResize ? : Boolean\n    /**\n     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)\n     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default\n     * value defined like this:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-namedItems)\n     */\n    namedItems ? : Record<string, ContainerItemConfig>\n    /**\n     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).\n     */\n    nonWorkingDays ? : Record<number, Boolean>\n    /**\n     * A function, or name of a function which is passed the [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) object which\n     * will be used to create the \"+n more\" button which indicates that a day cell has\n     * overflowing events.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowButtonRenderer)\n     * @param {DomConfig} domConfig A [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) config object which is used to create the overflow button.\n     * @param {string} domConfig.tag The tag name of the element to create.\n     * @param {object} domConfig.className An object who's truthy property names will be applied as class names.\n     * @param {string} domConfig.text The inner content of the element. <strong>Note that this will be HTML encoded for XSS safety</strong>\n     * @param {object} domConfig.style A CSS style definition object.\n     * @param {object} domConfig.dataset The DOM data properties to set.\n     * @param {number} overflowCount The number of overflowing events.\n     * @returns {DomConfig,string,void}\n     */\n    overflowButtonRenderer ? : (domConfig: { tag: string, className: object, text: string, style: object, dataset: object }, overflowCount: number) => DomConfig|string|void\n    /**\n     * A config object used to create the [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) that this view\n     * may show when events for one day overflow the available space.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopup)\n     */\n    overflowPopup ? : OverflowPopupConfig\n    /**\n     * The pointer gesture which shows the popup containing any overflowing events\n     * in the current view.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-overflowPopupTrigger)\n     */\n    overflowPopupTrigger ? : 'click'|'mouseover'|'hover'\n    /**\n     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the\n     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case\n     * the owner is <strong>always</strong> the encapsulating Container.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-owner)\n     */\n    owner ? : Widget\n    /**\n     * The class name to add to events which have an end date in the past. Defaults to `'b-past-event'`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-pastEventCls)\n     */\n    pastEventCls ? : string\n    /**\n     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must\n     * not participate in the standard layout of that widget, and must be positioned relatively to that\n     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-positioned)\n     */\n    positioned ? : Boolean\n    /**\n     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a\n     * menu on click etc, since the tooltip would be displayed at the same time.\n     */\n    preventTooltipOnTouch ? : Boolean\n    /**\n     * Whether this widget is read-only.  This is only valid if the widget is an input\n     * field, <strong>or contains input fields at any depth</strong>.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-readOnly)\n     */\n    readOnly ? : Boolean\n    relayStoreEvents ? : Boolean\n    /**\n     * Path to load resource images from. Used by the [showResourceAvatars](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showResourceAvatars) config\n     * to create URLs using the resource's\n     * [image](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-image) or\n     * [imageUrl](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel#field-imageUrl) fields:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-resourceImagePath)\n     */\n    resourceImagePath ? : string\n    /**\n     * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in\n     * this object is a state name (see [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState)) and its corresponding value is the\n     * associated [ResponsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#typedef-ResponsiveState) object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-responsive)\n     */\n    responsive ? : object\n    /**\n     * Set to `true` to mark this instance as the default [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) for descendants that do\n     * not specify an explicit [responsiveTarget](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveTarget) of their own.\n     */\n    responsiveRoot ? : Boolean\n    /**\n     * The name of the active state of the [responsive](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsive) config. This is assigned internally\n     * and should not be assigned directly.\n     */\n    responsiveState ? : string\n    /**\n     * The widget whose size and other properties drive this object's responsive behavior. If this config is not\n     * specified, the closest ancestor that specified [responsiveRoot=true](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveRoot) will be\n     * used. If there is no such ancestor, then the instance using this mixin is used.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-responsiveTarget)\n     */\n    responsiveTarget ? : string|Widget\n    /**\n     * Configure as `true` to have the component display a translucent ripple when its\n     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the\n     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ripple)\n     */\n    ripple ? : Boolean|{\n        delegate?: string\n        color?: string\n        radius?: number\n        clip?: string\n    }\n    /**\n     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`\n     */\n    rootElement ? : ShadowRoot|HTMLElement\n    /**\n     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-rtl)\n     */\n    rtl ? : Boolean\n    /**\n     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll\n     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are\n     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to\n     * CSS overflow properties thus:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-scrollable)\n     */\n    scrollable ? : Boolean|ScrollerConfig|Scroller\n    /**\n     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).\n     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.\n     */\n    scrollAction ? : 'hide'|'realign'|null\n    /**\n     * A button configuration object to use for the automatically created mode selector button for this mode.\n     */\n    selectorButton ? : ButtonConfig\n    /**\n     * A menu item configuration object to use for the automatically created mode selector menu item for this mode.\n     */\n    selectorMenuItem ? : MenuItemConfig\n    /**\n     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date output for\n     * abbreviated view descriptions.\n     */\n    shortDateFormat ? : string\n    /**\n     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to use to create date and time output for\n     * abbreviated view descriptions.\n     */\n    shortDateTimeFormat ? : string\n    /**\n     * The class name to add to events which have duration less than or equal to\n     * [shortEventDuration](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventDuration).\n     */\n    shortEventCls ? : string\n    /**\n     * The duration at which below and equal to this value, an event's encapsulating element gets\n     * the [shortEventCls](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-shortEventCls) added to it so that small event bars can have style rearrangements.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-shortEventDuration)\n     */\n    shortEventDuration ? : string|number\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showAnimation)\n     */\n    showAnimation ? : Boolean|object\n    /**\n     * <strong>Not applicable in a `DayView`</strong>\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showBullet)\n     * @param {boolean} bar This is `false` by default. Set this to `true` in modes where a solid event bar should show a bullet icon\n     * @param {boolean} noBar This is `true` by default. Events with no background colour, use this to show the event's defined `eventColor`\n     */\n    showBullet ? : Boolean|{bar?: Boolean, noBar?: Boolean}\n    /**\n     * How to indicate the presence of events for a date. The default is `heatmap` which adds\n     * classes depending on how many events intersect the date.Values may be:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showEvents)\n     */\n    showEvents ? : Boolean|'heatmap'|'dots'\n    /**\n     * Configure as `true` to show avatars of the assigned resources (calendars) at the\n     * start of the event bar.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-showResourceAvatars)\n     */\n    showResourceAvatars ? : Boolean|string\n    /**\n     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)\n     */\n    showTooltipWhenDisabled ? : Boolean\n    /**\n     * By default, all months show six week rows. Pass `false` to only render as many rows\n     * as needed.\n     */\n    sixWeeks ? : Boolean\n    /**\n     * Set to `true` to stack multi-day events within each cell in the order of their start time.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stackMultiDayEvents)\n     */\n    stackMultiDayEvents ? : Boolean\n    /**\n     * This value can be one of the following:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateful)\n     */\n    stateful ? : Boolean|object|string[]\n    /**\n     * The events that, when fired by this component, should trigger it to save its state by calling\n     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-statefulEvents)\n     */\n    statefulEvents ? : object|string[]\n    /**\n     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is\n     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)\n     * (if explicitly specified) will be used as the `stateId`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateId)\n     */\n    stateId ? : string\n    /**\n     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`\n     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-stateProvider)\n     */\n    stateProvider ? : StateProvider\n    /**\n     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),\n     * without falling back to `ref`.\n     */\n    strictRecordMapping ? : Boolean\n    /**\n     * An object containing widgets keyed by name. By default (when no `type` is given), strips are\n     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use\n     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-strips)\n     */\n    strips ? : Record<string, ContainerItemConfig>\n    /**\n     * The converse of [syncViewDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncViewDate)\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-syncCalendarDate)\n     */\n    syncCalendarDate ? : Boolean\n    /**\n     * The converse of [syncCalendarDate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-syncCalendarDate)\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-syncViewDate)\n     */\n    syncViewDate ? : Boolean\n    /**\n     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a\n     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for\n     * this widget:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tab)\n     */\n    tab ? : Boolean|TabConfig\n    /**\n     * When this container is used as a tab in a TabPanel, these items are added to the\n     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tabBarItems)\n     */\n    tabBarItems ? : ToolbarItems[]|Widget[]\n    /**\n     * The tag name of this Widget's root element\n     */\n    tag ? : string\n    /**\n     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),\n     * or array of config objects representing the child items of a Toolbar.\n     * This creates a toolbar docked to the top of the panel immediately below the header.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tbar)\n     */\n    tbar ? : (ContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null\n    /**\n     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-textAlign)\n     */\n    textAlign ? : 'left'|'center'|'right'|'start'|'end'\n    /**\n     * A [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string used to format the time displayed in events\n     */\n    timeFormat ? : string\n    /**\n     * A title to display in the header or owning TabPanel. Causes creation and docking of a header\n     * to the top if no header is configured.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-title)\n     */\n    title ? : string\n    /**\n     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each\n     * property name is the reference by which an instantiated tool may be retrieved from the live\n     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tools)\n     */\n    tools ? : Record<string, ToolConfig>|null\n    /**\n     * Tooltip for the widget, either as a string or as a Tooltip config object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-tooltip)\n     */\n    tooltip ? : string|TooltipConfig|null\n    /**\n     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel\n     * forwards or backwards.\n     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.\n     */\n    trapFocus ? : Boolean\n    type ? : 'yearview'|'year'\n    /**\n     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified\n     * as a space separated string, an array of strings, or as an object in which property names with truthy\n     * values are used as the class names.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-ui)\n     */\n    ui ? : 'plain'|'toolbar'|string|object\n    /**\n     * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).\n     */\n    weekStartDay ? : number\n    /**\n     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).\n     * Higher weights go further down.\n     */\n    weight ? : number\n    /**\n     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which\n     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases\n     * this config is convenient.\n     */\n    width ? : string|number\n    /**\n     * The x position for the widget.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-x)\n     */\n    x ? : number\n    /**\n     * The y position for the widget.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#config-y)\n     */\n    y ? : number\n    /**\n     * The year to display\n     */\n    year ? : number\n\n}>();\n\nconst emit = defineEmits<{\n    /**\n     * This event fires whenever the [autoCreate gesture](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) is detected\n     * and also when a [drag-create](https://bryntum.com/products/calendar/docs/api/Calendar/feature/CalendarDrag) gesture is detected.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-beforeAutoCreate)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Event} params.event.domEvent The DOM event which initiated the creation.\n     * @param {Date} params.event.date The starting time of the event to be created. If this is in a `DayView, this will be snapped according to the specification in [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#property-autoCreate)\n     * @param {Scheduler.model.ResourceModel} params.event.resourceRecord The resource if the UI includes a resource.\n     * @param {typeof CalendarMixin} params.event.view This view.\n     */\n    (e: 'beforeAutoCreate', params: ((event: { domEvent: Event, date: Date, resourceRecord: ResourceModel, view: typeof CalendarMixin }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Triggered before a view's orientating date changes.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-beforeChangeDate)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Date} params.event.oldDate The current orientating date of this view.\n     * @param {Date} params.event.date The new date to which this view is to be orientated.\n     */\n    (e: 'beforeChangeDate', params: ((event: { oldDate: Date, date: Date }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires before an object is destroyed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.Base} params.event.source The Object that is being destroyed.\n     */\n    (e: 'beforeDestroy', params: ((event: { source: Base }) => void)|string): void\n    /**\n     * Triggered before a widget is hidden. Return `false` to prevent the action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget being hidden.\n     */\n    (e: 'beforeHide', params: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Triggered before a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget whose `responsiveState` is to be changed\n     * @param {string} params.event.state The new value for the widget's `responsiveState`\n     * @param {string} params.event.oldState The previous value for the widget's `responsiveState`\n     */\n    (e: 'beforeResponsiveStateChange', params: ((event: { source: Widget, state: string, oldState: string }) => void)|string): void\n    /**\n     * Fired before this container will load record values into its child fields. This is useful if you\n     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Container} params.event.source The container\n     * @param {Core.data.Model} params.event.record The record\n     */\n    (e: 'beforeSetRecord', params: ((event: { source: Container, record: Model }) => void)|string): void\n    /**\n     * Triggered before a widget is shown. Return `false` to prevent the action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget,any} params.event.source The widget being shown\n     */\n    (e: 'beforeShow', params: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) is shown when an a\n     * \"+ n more\" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {HTMLElement} params.event.cell The day cell for which the overflow popup is going to be shown.\n     * @param {DayCell} params.event.cellData An object that contains data about the cell.\n     * @param {Date} params.event.date The date which has overflowing events\n     * @param {Calendar.widget.OverflowPopup} params.event.overflowPopup The overflow `Popup`.\n     */\n    (e: 'beforeShowOverflowPopup', params: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {object} params.event.event The Bryntum event object\n     * @param {object} params.event.event.state State object config\n     */\n    (e: 'beforeStateApply', params: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {object} params.event.event The Bryntum event object\n     * @param {object} params.event.event.state State object config\n     */\n    (e: 'beforeStateSave', params: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires when any other event is fired from the object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-catchAll)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {{[key: string]: any, type: string}} params.event.event The Object that contains event details\n     * @param {string} params.event.event.type The type of the event which is caught by the listener\n     */\n    (e: 'catchAll', params: ((event: {[key: string]: any, type: string}) => void)|string): void\n    /**\n     * Fired when a new set of events has been gathered for this view's date range.\n     */\n    (e: 'cellMapPopulated', params: (() => void)|string): void\n    /**\n     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Panel} params.event.source This Panel.\n     */\n    (e: 'collapse', params: ((event: { source: Panel }) => void)|string): void\n    /**\n     * Fired after one day cell's events are collected in sorted order according to the\n     * [eventSorter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-eventSorter)\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-dayCellPopulated)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.model.EventModel[]} params.event.events The events to be shown for the passed date\n     * @param {Date} params.event.The date the events are to be shown in.\n     */\n    (e: 'dayCellPopulated', params: ((event: { events: EventModel[], The: Date }) => void)|string): void\n    /**\n     * Fires when an object is destroyed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.Base} params.event.source The Object that is being destroyed.\n     */\n    (e: 'destroy', params: ((event: { source: Base }) => void)|string): void\n    /**\n     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Container} params.event.source The container.\n     * @param {boolean} params.event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.\n     */\n    (e: 'dirtyStateChange', params: ((event: { source: Container, dirty: boolean }) => void)|string): void\n    /**\n     * Fired when an empty cell content area is clicked on. If the handler returns\n     * `false` the current pointer event is not processed further.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Event} params.event.domEvent The triggering DOM event.\n     * @param {Date} params.event.date The date which has no visible events\n     */\n    (e: 'emptyCellClick', params: ((event: { domEvent: Event, date: Date }) => void)|string): void\n    /**\n     * Fired when an [autoCreate](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-autoCreate) gesture has created a new event\n     * and added it to the event store.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-eventAutoCreated)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {typeof CalendarMixin} params.event.source This Calendar view instance.\n     * @param {Scheduler.model.EventModel} params.event.eventRecord The new event record.\n     */\n    (e: 'eventAutoCreated', params: ((event: { source: typeof CalendarMixin, eventRecord: EventModel }) => void)|string): void\n    /**\n     * Fires when a day spanning event is found, and the date to which its encapsulating event bar\n     * extends has been calculated.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-eventPropagate)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Date} params.event.eventEndDate The end date for which to calculate the propagate end date.\n     * @param {Date} params.event.propagateEndDate The system-calculated end point of the event bar.\n     * @param {boolean} params.event.isAllDay `true` if the event is an all day event, or spans multiple days.\n     * @param {boolean} params.event.isOverflow `true` if this is being called as part of further propagation.\n     * @param {boolean} params.event.overflows `true` if the event extends into future cells.\n     * @param {Scheduler.model.EventModel} params.event.eventRecord The event record being propagated.\n     * @param {Date} params.event.date The date from which the event is being propagated.\n     */\n    (e: 'eventPropagate', params: ((event: { eventEndDate: Date, propagateEndDate: Date, isAllDay: boolean, isOverflow: boolean, overflows: boolean, eventRecord: EventModel, date: Date }) => void)|string): void\n    /**\n     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Panel} params.event.source This Panel.\n     */\n    (e: 'expand', params: ((event: { source: Panel }) => void)|string): void\n    /**\n     * Fired when focus enters this Widget.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source This Widget\n     * @param {HTMLElement} params.event.fromElement The element which lost focus.\n     * @param {HTMLElement} params.event.toElement The element which gained focus.\n     * @param {Core.widget.Widget} params.event.fromWidget The widget which lost focus.\n     * @param {Core.widget.Widget} params.event.toWidget The widget which gained focus.\n     * @param {boolean} params.event.backwards `true` if the `toElement` is before the `fromElement` in document order.\n     */\n    (e: 'focusIn', params: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string): void\n    /**\n     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.\n     * focus moving from within this Widget's ownership tree, even if there are floating widgets\n     * will not trigger this event. This is when focus exits this widget completely.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source This Widget\n     * @param {HTMLElement} params.event.fromElement The element which lost focus.\n     * @param {HTMLElement} params.event.toElement The element which gained focus.\n     * @param {Core.widget.Widget} params.event.fromWidget The widget which lost focus.\n     * @param {Core.widget.Widget} params.event.toWidget The widget which gained focus.\n     * @param {boolean} params.event.backwards `true` if the `toElement` is before the `fromElement` in document order.\n     */\n    (e: 'focusOut', params: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string): void\n    /**\n     * Triggered after a widget was hidden\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget\n     */\n    (e: 'hide', params: ((event: { source: Widget }) => void)|string): void\n    /**\n     * Triggered when a widget which had been in a non-visible state for any reason\n     * achieves visibility.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/YearView#event-paint)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget being painted.\n     * @param {boolean} params.event.firstPaint `true` if this is the first paint.\n     */\n    (e: 'paint', params: ((event: { source: Widget, firstPaint: boolean }) => void)|string): void\n    /**\n     * Fired when a Widget's read only state is toggled\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {boolean} params.event.readOnly Read only or not\n     */\n    (e: 'readOnly', params: ((event: { readOnly: boolean }) => void)|string): void\n    /**\n     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call\n     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.\n     */\n    (e: 'recompose', params: (() => void)|string): void\n    /**\n     * Fires when this YearView refreshes.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Calendar.widget.YearView} params.event.source The triggering instance.\n     */\n    (e: 'refresh', params: ((event: { source: YearView }) => void)|string): void\n    /**\n     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source This Widget\n     * @param {number} params.event.width The new width\n     * @param {number} params.event.height The new height\n     * @param {number} params.event.oldWidth The old width\n     * @param {number} params.event.oldHeight The old height\n     */\n    (e: 'resize', params: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string): void\n    /**\n     * Triggered when a new [responsiveState](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Responsive#config-responsiveState) is applied.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget whose `responsiveState` has changed\n     * @param {string} params.event.state The new value for the widget's `responsiveState`\n     * @param {string} params.event.oldState The previous value for the widget's `responsiveState`\n     */\n    (e: 'responsiveStateChange', params: ((event: { source: Widget, state: string, oldState: string }) => void)|string): void\n    /**\n     * Triggered after a widget is shown.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget\n     */\n    (e: 'show', params: ((event: { source: Widget }) => void)|string): void\n    /**\n     * Fired after an [OverflowPopup](https://bryntum.com/products/calendar/docs/api/Calendar/widget/OverflowPopup) has been shown when an a\n     * \"+ n more\" overflow button is activated by an [overflowPopupTrigger](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/DayCellRenderer#config-overflowPopupTrigger) event.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {HTMLElement} params.event.cell The day cell for which the overflow popup is going to be shown.\n     * @param {DayCell} params.event.cellData An object that contains data about the cell.\n     * @param {Date} params.event.date The date which has overflowing events\n     * @param {Calendar.widget.OverflowPopup} params.event.overflowPopup The overflow `Popup`.\n     */\n    (e: 'showOverflowPopup', params: ((event: { cell: HTMLElement, cellData: DayCell, date: Date, overflowPopup: OverflowPopup }) => void)|string): void\n    /**\n     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Tool} params.event.source This Panel.\n     * @param {Core.widget.Tool} params.event.tool The tool which is being clicked.\n     */\n    (e: 'toolClick', params: ((event: { source: Tool, tool: Tool }) => void)|string): void\n}>();\n\nconst widgetData = {\n    instanceClass : YearView,\n    instanceName  : 'YearView',\n\n    configNames   : [\n        'activationKey',\n        'adopt',\n        'align',\n        'anchor',\n        'ariaDescription',\n        'ariaLabel',\n        'bbar',\n        'bodyCls',\n        'bubbleEvents',\n        'callOnFunctions',\n        'centered',\n        'collapsible',\n        'config',\n        'constrainTo',\n        'contentElementCls',\n        'date',\n        'dayCellNameFormat',\n        'dayCellRenderer',\n        'defaultBindProperty',\n        'defaultFocus',\n        'defaults',\n        'descriptionRenderer',\n        'dock',\n        'draggable',\n        'drawer',\n        'elementAttributes',\n        'emptyCellRenderer',\n        'eventFilter',\n        'eventHeaderRenderer',\n        'eventHeight',\n        'eventRenderer',\n        'eventSorter',\n        'floating',\n        'footer',\n        'getPrimaryResource',\n        'header',\n        'hideAnimation',\n        'hideWhenEmpty',\n        'ignoreParentReadOnly',\n        'itemCls',\n        'lazyItems',\n        'listeners',\n        'localeClass',\n        'localizable',\n        'localizableProperties',\n        'maskDefaults',\n        'masked',\n        'monitorResize',\n        'namedItems',\n        'nonWorkingDays',\n        'overflowButtonRenderer',\n        'overflowPopup',\n        'overflowPopupTrigger',\n        'owner',\n        'positioned',\n        'preventTooltipOnTouch',\n        'relayStoreEvents',\n        'resourceImagePath',\n        'responsive',\n        'responsiveRoot',\n        'responsiveState',\n        'responsiveTarget',\n        'ripple',\n        'rootElement',\n        'scrollAction',\n        'selectorButton',\n        'selectorMenuItem',\n        'shortEventCls',\n        'shortEventDuration',\n        'showAnimation',\n        'showBullet',\n        'showResourceAvatars',\n        'showTooltipWhenDisabled',\n        'sixWeeks',\n        'stateful',\n        'statefulEvents',\n        'stateId',\n        'stateProvider',\n        'strips',\n        'tab',\n        'tabBarItems',\n        'tag',\n        'tbar',\n        'textAlign',\n        'timeFormat',\n        'trapFocus',\n        'type',\n        'ui',\n        'weekStartDay',\n        'weight',\n        'year'\n    ],\n    propertyConfigNames : [\n        'alignSelf',\n        'allowDragCreate',\n        'allowDragMove',\n        'allowDragResize',\n        'animateTimeShift',\n        'appendTo',\n        'ariaLive',\n        'autoCreate',\n        'cls',\n        'collapsed',\n        'dataset',\n        'dateFormat',\n        'dateSeparator',\n        'defaultScrollOptions',\n        'descriptionFormat',\n        'disabled',\n        'dragUnit',\n        'eventCountTip',\n        'eventDots',\n        'eventSpacing',\n        'extendAllDayEndDay',\n        'extraData',\n        'filterEventResources',\n        'flex',\n        'height',\n        'hidden',\n        'hideNonWorkingDays',\n        'id',\n        'insertBefore',\n        'insertFirst',\n        'items',\n        'keyMap',\n        'layout',\n        'layoutStyle',\n        'margin',\n        'maxDate',\n        'maxDots',\n        'maxHeight',\n        'maximizeOnMobile',\n        'maxWidth',\n        'minDate',\n        'minHeight',\n        'minWidth',\n        'onBeforeAutoCreate',\n        'onBeforeChangeDate',\n        'onBeforeDestroy',\n        'onBeforeHide',\n        'onBeforeResponsiveStateChange',\n        'onBeforeSetRecord',\n        'onBeforeShow',\n        'onBeforeShowOverflowPopup',\n        'onBeforeStateApply',\n        'onBeforeStateSave',\n        'onCatchAll',\n        'onCellMapPopulated',\n        'onCollapse',\n        'onDayCellPopulated',\n        'onDestroy',\n        'onDirtyStateChange',\n        'onEmptyCellClick',\n        'onEventAutoCreated',\n        'onEventPropagate',\n        'onExpand',\n        'onFocusIn',\n        'onFocusOut',\n        'onHide',\n        'onPaint',\n        'onReadOnly',\n        'onRecompose',\n        'onRefresh',\n        'onResize',\n        'onResponsiveStateChange',\n        'onShow',\n        'onShowOverflowPopup',\n        'onToolClick',\n        'pastEventCls',\n        'readOnly',\n        'rtl',\n        'scrollable',\n        'shortDateFormat',\n        'shortDateTimeFormat',\n        'showEvents',\n        'stackMultiDayEvents',\n        'strictRecordMapping',\n        'syncCalendarDate',\n        'syncViewDate',\n        'title',\n        'tools',\n        'tooltip',\n        'width',\n        'x',\n        'y'\n    ],\n    propertyNames : [\n        'anchorSize',\n        'dayCellCls',\n        'firstVisibleCell',\n        'firstVisibleDate',\n        'focusVisible',\n        'hasChanges',\n        'isSettingValues',\n        'isValid',\n        'lastVisibleCell',\n        'lastVisibleDate',\n        'parent',\n        'record',\n        'state',\n        'values'\n    ],\n    eventNames : [\n        'beforeAutoCreate',\n        'beforeChangeDate',\n        'beforeDestroy',\n        'beforeHide',\n        'beforeResponsiveStateChange',\n        'beforeSetRecord',\n        'beforeShow',\n        'beforeShowOverflowPopup',\n        'beforeStateApply',\n        'beforeStateSave',\n        'catchAll',\n        'cellMapPopulated',\n        'collapse',\n        'dayCellPopulated',\n        'destroy',\n        'dirtyStateChange',\n        'emptyCellClick',\n        'eventAutoCreated',\n        'eventPropagate',\n        'expand',\n        'focusIn',\n        'focusOut',\n        'hide',\n        'paint',\n        'readOnly',\n        'recompose',\n        'refresh',\n        'resize',\n        'responsiveStateChange',\n        'show',\n        'showOverflowPopup',\n        'toolClick'\n    ]\n};\n\nconst instance: {\n    value?: YearView\n} = {};\n\nconst refElement = ref<HTMLDivElement>()!;\n// Storage for teleports (in-cell Vue component instances) automatically renderer by template\nconst teleports = ref(new Map());\n\n// Provide teleports for processCellContent\nprovide('teleports', teleports);\n\nonMounted(() => {\n\n    const me = getCurrentInstance()!;\n\n    instance.value = WrapperHelper.createWidget<typeof YearView>({\n        me,\n        widgetData,\n        emit,\n        element : refElement.value!,\n        toRaw\n    });\n\n    const watcher = (prop: string, callback: any) => watch(() => me.props[prop], callback);\n    WrapperHelper.watchProps(instance.value, widgetData, watcher);\n});\n\nonBeforeUnmount(() => {\n    // @ts-ignore\n    instance.value?.destroy?.();\n});\n\ndefineExpose({\n    instance,\n    refElement,\n    teleports\n});\n\n</script>\n"],"names":["emit","__emit","widgetData","YearView","instance","refElement","ref","teleports","provide","onMounted","me","getCurrentInstance","WrapperHelper","toRaw","watcher","prop","callback","watch","onBeforeUnmount","_b","_a","__expose"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAw/BA,UAAMA,IAAOC,GAiUPC,IAAa;AAAA,MACf,eAAgBC;AAAA,MAChB,cAAgB;AAAA,MAEhB,aAAgqBAAsB;AAAA,QACleAAgB;AAAA,QACZ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,YAAa;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAAA,IAER,GAEMC,IAEF,CAAC,GAECC,IAAaC,EAAoB,GAEjCC,IAAYD,EAAQ,oBAAA,KAAK;AAG/B,WAAAE,EAAQ,aAAaD,CAAS,GAE9BE,EAAU,MAAM;AAEZ,YAAMC,IAAKC,EAAmB;AAErB,MAAAP,EAAA,QAAQQ,EAAc,aAA8B;AAAA,QACzD,IAAAF;AAAA,QACA,YAAAR;AAAA,QACA,MAAAF;AAAA,QACA,SAAUK,EAAW;AAAA,QACrB,OAAAQ;AAAA,MAAA,CACH;AAEK,YAAAC,IAAU,CAACC,GAAcC,MAAkBC,EAAM,MAAMP,EAAG,MAAMK,CAAI,GAAGC,CAAQ;AACrF,MAAAJ,EAAc,WAAWR,EAAS,OAAOF,GAAYY,CAAO;AAAA,IAAA,CAC/D,GAEDI,EAAgB,MAAM;;AAElB,OAAAC,KAAAC,IAAAhB,EAAS,UAAT,gBAAAgB,EAAgB,YAAhB,QAAAD,EAAA,KAAAC;AAAA,IAA0B,CAC7B,GAEYC,EAAA;AAAA,MACT,UAAAjB;AAAA,MACA,YAAAC;AAAA,MACA,WAAAE;AAAA,IAAA,CACH;;;;;;"}