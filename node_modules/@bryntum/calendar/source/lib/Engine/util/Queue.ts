let counter = 1

export default class Queue {
    name            = ''

    length          = 0

    finishedStep    = 0

    stacks          = []

    ongoing         : Promise<any> = Promise.resolve()

    handleReject    : (error : Error | any) => any = () => {}

    constructor (name = `Queue #${counter++}`) {
        this.name = name
    }

    debug (message) {
        if (globalThis.bryntum?.DEBUG) {
            console.log(this.name, message)
        }
    }

    queue (fn : () => Promise<any>, handleReject = this.handleReject) : Promise<any> {
        const currentStep = this.length++

        if (globalThis.bryntum?.DEBUG) {
            const stack = new Error().stack

            this.stacks.push(stack)
            this.debug(`Queued fn #${currentStep}`)
            this.debug(stack)
        }

        const result = this.ongoing.then(async () => {
            this.debug(`Running queued fn #${currentStep}`)

            const result = await fn()

            this.finishedStep++
            this.debug(`Finished queued fn #${currentStep}`)

            return result
        })

        this.ongoing = result.catch(handleReject)

        return result
    }
}
