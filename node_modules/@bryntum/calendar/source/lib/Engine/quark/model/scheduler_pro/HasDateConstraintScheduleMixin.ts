import { AnyConstructor, Mixin } from '../../../../ChronoGraph/class/BetterMixin.js'
import { CalculationIterator } from '../../../../ChronoGraph/primitives/Calculation.js'
import { ConstraintIntervalSide, ConstraintType, Direction } from '../../../scheduling/Types.js'
import { ConstrainedScheduleMixin } from "./ConstrainedScheduleMixin.js"
import { DateConstraintInterval, HasDateConstraintMixin } from "./HasDateConstraintMixin.js"

/**
 * This mixin implements a schedule for date-based based constraint for the event.
 */
export class HasDateConstraintScheduleMixin extends Mixin(
    [ ConstrainedScheduleMixin ],
    (base : AnyConstructor<ConstrainedScheduleMixin, typeof ConstrainedScheduleMixin>) => {

    const superProto : InstanceType<typeof base> = base.prototype


    class HasDateConstraintScheduleMixin extends base {
        event       : HasDateConstraintMixin


        * calculateStartDateConstraintIntervals () : CalculationIterator<this[ 'startDateConstraintIntervals' ]> {
            const intervals : this[ 'startDateConstraintIntervals' ] = yield* superProto.calculateStartDateConstraintIntervals.call(this)

            const manuallyScheduled : boolean       = yield this.event.$.manuallyScheduled
            const constraintType : ConstraintType   = yield this.event.$.constraintType
            const constraintDate : Date             = yield this.event.$.constraintDate

            // manually scheduled task ignores its constraints
            if (!manuallyScheduled && constraintType && constraintDate) {
                yield* this.event.createStartDateConstraintsInterval(constraintType, constraintDate, this, intervals)
            }

            return intervals
        }


        * calculateEndDateConstraintIntervals () : CalculationIterator<this[ 'endDateConstraintIntervals' ]> {
            const intervals : this[ 'endDateConstraintIntervals' ] = yield* superProto.calculateEndDateConstraintIntervals.call(this)

            const manuallyScheduled : boolean       = yield this.event.$.manuallyScheduled
            const constraintType : ConstraintType   = yield this.event.$.constraintType
            const constraintDate : Date             = yield this.event.$.constraintDate

            // manually scheduled task ignores its constraints
            if (!manuallyScheduled && constraintType && constraintDate) {
                yield* this.event.createEndDateConstraintsInterval(constraintType, constraintDate, this, intervals)
            }

            return intervals
        }
    }

    return HasDateConstraintScheduleMixin
}){}
