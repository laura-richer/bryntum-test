@import '../../variables';

:root {
    --row-splice-duration : 300ms;
}

//region Row & cell

.b-grid-row {
    display        : flex;
    flex-direction : row;
    align-items    : stretch;
    position       : absolute;
    left           : 0;
    overflow       : hidden;
    border-bottom  : 1px solid $grid-cell-border-color;
    // default row height, will be read during initial render, but after that rows set height in style
    height         : $grid-row-height;

    // Blink-only right now. Layouts triggered inside the row won't cause document layout.
    // Must be "layout", not "strict", otherwise the cell won't "stretch" the row.
    contain        : layout;

    // Our dummy row into which export rows are rendered is out of view on screens
    @media screen {
        &.b-export-row {
            transform : translate(-99999px, -99999px);
        }
    }

    .b-grid-subgrid & {
        min-width : 100%;
    }

    // If the column widths overflow, we have to ensure that the row expands to show them all.
    // it will not stretch to accommodate cells size with flex-basis.
    .b-grid-subgrid.b-horizontal-overflow & {
        min-width : max(var(--total-column-width, 100%), 100%);
    }

    // In case of abort in drag from grid scenario
    &.b-aborting {
        transition : background-color 0.2s, transform 0.3s;
    }

    // During a RowManager.insert operation, rows should animate into position.
    // Rows may be positioned using transform or top.
    .b-splicing-rows & {
        &:is(.b-adding,.b-removing,.b-repositioning) {
            transition     : transform var(--row-splice-duration), top var(--row-splice-duration);
            z-index        : -1;
            // Should not trigger and mouse events on a row being removed
            pointer-events : none;
        }
    }

    .b-rtl & {
        left  : auto;
        right : 0;
    }

    &.b-selected {
        background-color : $grid-row-selected-background-color;

        .b-grid-cell.b-checkbox-selection {
            background-color : $checkbox-selection-selected-background;
        }
    }

    &.b-removing {
        animation : row-removing var(--row-splice-duration) forwards;
    }

    &.b-adding {
        animation : row-adding var(--row-splice-duration) forwards;
    }

    // TimeRanges for example use `cls: '.b-fa .b-fa-xx'` to apply an icon. If that range is used as a row of a grid,
    // the b-fa rule will mess up the row
    &.b-fa {
        // Make row display correctly
        display : flex;

        // Ditch icon
        &::before {
            content : none;
        }
    }

    &.b-row-placeholder {
        .b-grid-cell {
            color     : transparent; // Could be overridden by style
            clip-path : inset(1em 1em 1em 1em); // Need to match trbl positions below
        }

        .b-grid-cell > *:not(.b-editor) {
            display : none;
        }

        .b-grid-cell::after {
            content       : '';
            background    : $grid-row-placeholder-color;
            position      : absolute;
            inset         : 1em;
            border-radius : 5px;
        }
    }
}

.b-grid-refreshing .b-grid-row {
    transition : none;
}

.b-grid-row:not(.b-selected) {
    .b-grid-cell.b-selected {
        background-color : $grid-row-selected-cell-background-color;

        &.b-hover {
            background-color : $grid-focus-row-selected-cell-background-color;
        }

        &.b-checkbox-selection {
            background-color : $checkbox-selection-selected-background;
        }
    }
}

.b-grid-cell {
    position          : relative;
    display           : flex;
    align-items       : center;
    color             : $grid-cell-color;
    font-weight       : $grid-cell-font-weight;
    padding           : 0 $grid-cell-inline-padding;
    overflow          : hidden;
    white-space       : nowrap;
    flex-shrink       : 0;
    text-overflow     : ellipsis;
    border-inline-end : 1px solid $grid-cell-border-color;
    transform-style   : flat;
    width             : 0; // flex trick to get small widths correct

    // Blink-only right now. Layouts triggered inside the cell won't cause document layout.
    contain           : strict;

    .b-fill-last-column &:last-child,
    .b-fill-last-column.b-rowexpander-row-expanded &:nth-last-child(2) {
        border-inline-end-color : transparent;
    }

    > i:not(:last-child) {
        margin-inline-end : .5em;
    }

    .b-show-dirty &.b-cell-dirty:not(.b-editing):after,
    .b-show-dirty-during-edit &.b-cell-dirty:after {
        content          : "";
        clip-path        : polygon(0% 50%, 0% 0%, 50% 0%);
        z-index          : 2;
        position         : absolute;
        top              : 0;
        left             : 1px;
        background-color : red;
        width            : 1.2em;
        height           : 1.2em;

        .b-rtl & {
            left      : auto;
            right     : 0;
            clip-path : polygon(100% 50%, 50% 0%, 100% 0%);
        }
    }

    &.b-checkbox-selection {
        .b-gridbase:not(.b-panel-ui-plain) & {
            background-color : $checkbox-selection-background;
        }
    }

    &:focus, &:focus-within {
        transition : none !important;
        outline    : none;
    }

    &.b-auto-height {
        white-space : normal;
    }

    &.b-loading-cell {
        color : transparent;

        &::after {
            content       : '';
            background    : $grid-row-placeholder-color;
            position      : absolute;
            inset         : 1em;
            border-radius : 5px;
        }
    }

    &.b-measuring-auto-height {
        contain    : paint style layout; // Replaces strict, cannot use size since we want it to grow
        align-self : baseline;

        .b-firefox & {
            contain : paint layout; // FF does not allow style
        }
    }
}

// Only show focus outline when accessing grid cell with keyboard
body.b-using-keyboard,
.b-outer.b-using-keyboard {
    .b-grid-cell, .b-grid-header:not(.b-sch-timeaxiscolumn) {
        &:focus, &:focus-within {
            outline        : $grid-cell-focused-outline-width $grid-cell-focused-outline-style $grid-cell-focused-outline-color;
            outline-offset : -$grid-cell-focused-outline-width;
        }
    }
}

.b-readonly > .b-grid-cell {
    color : $grid-cell-readonly-color;
}


// TODO: Remove usage of left and right for alignment.
// Use start and end to be LTR/RTL neutral.
.b-grid-cell-align-right, .b-grid-cell-align-end {
    justify-content : flex-end;
    text-align      : end;
}

.b-grid-cell-align-center {
    justify-content : center;
    text-align      : center;
}

//endregion

.b-grid-subgrid {
    position            : relative;
    // Prevent bounce scrolling in Safari
    overscroll-behavior : none auto;

    &.b-grid-subgrid-collapsed {
        width     : $grid-region-collapsed-width;
        min-width : $grid-region-collapsed-width !important;
        overflow  : hidden !important;
    }

}

// Default to disabling scroll while playing demos, otherwise it is to easy for users to interfere
.b-playing-demo .b-grid-subgrid {
    overflow : hidden !important;
}

//region Expand & collapse
.b-animating {
    .b-grid-header-scroller,
    .b-grid-subgrid {
        transition-property : width, flex, min-width;
        transition-duration : .3s;
    }
}

//endregion

// NOTE: cannot use :hover since a row can be broken up between multiple subgrids and each need to be highlighted
// (and also :hover gives some visual artifacts when scroll reusing elements)
.b-gridbase:not(.b-moving-splitter) .b-grid-subgrid:not(.b-hide-row-hover) .b-grid-row:not(.b-group-row) {

    &.b-hover {
        background-color : $grid-row-hover-background-color;

        &.b-selected {
            background-color : $grid-row-selected-background-color;
        }

        // Highlight row and cell on hover
        .b-grid-cell {
            background-color : $grid-cell-hover-background-color;

            &.b-focused {
                background-color : $grid-cell-row-hover-background-color;
            }

            &.b-checkbox-selection {
                background-color : $checkbox-selection-hover-background;
            }
        }
    }

    .b-grid-cell.b-hover {
        background-color : $grid-cell-hover-background-color;

        &.b-selected {
            background-color : $grid-focus-row-selected-cell-background-color;
        }

        &.b-checkbox-selection {
            background-color : $checkbox-selection-hover-background;
        }
    }
}

// Rows that are detached and scheduled for removal will show through the rows that are moving upwards
// to replace them, so fade to opacity 0 in a slightly accelerated way to avoid a visual doubling
// of row content.
@keyframes row-removing {
    from {
        opacity : 1;
    }
    to {
        opacity : 0.3;
        height  : 0;
    }
}

// Rows that are added by splice are injected into the DOM. While the rows are animating their tops into place
// The new event block should fade in.
@keyframes row-adding {
    from {
        opacity : 0.3;
        height  : 0;
    }
    to {
        opacity : 1;
    }
}

// Support for cell / header ellipsis when text overflows
.b-supports-has.b-use-ellipsis:not(.b-grid-measuring) {
    .b-grid-row {
        height : var(--b-grid-row-height);

        .b-grid-cell:not(.b-auto-height,:has(*)) {
            display       : block;
            line-height   : var(--b-grid-row-height);
            text-overflow : ellipsis;
        }
    }
}

