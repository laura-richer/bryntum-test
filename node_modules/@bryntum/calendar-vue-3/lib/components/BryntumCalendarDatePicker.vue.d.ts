import type { AlignSpec, Base, CalendarDatePickerListeners, CalendarMixin, CalendarPanel, Container, ContainerItemConfig, ContainerLayoutConfig, DatePicker, DomConfig, EventModel, EventStore, KeyMapConfig, MaskConfig, MenuItemConfig, Model, Month, MonthConfig, PagingToolbarConfig, Panel, PanelCollapserConfig, PanelCollapserOverlayConfig, PanelHeader, Rectangle, ResourceModel, Scroller, ScrollerConfig, StateProvider, TabConfig, Tool, ToolConfig, ToolbarConfig, ToolbarItems, TooltipConfig, VueConfig, Widget } from '@bryntum/calendar';
import { CalendarDatePicker } from '@bryntum/calendar';
declare const _default: import("vue").DefineComponent<__VLS_TypePropsToRuntimeProps<{
    /**
     * The date that the user has navigated to using the UI *prior* to setting the widget's
     * value by selecting. The initial default is today's date. Can also be supplied as a `YYYY-MM-DD` date
     * string.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-activeDate)
     */
    activeDate?: string | Date | undefined;
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-adopt)
     */
    adopt?: string | HTMLElement | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-align)
     */
    align?: string | AlignSpec | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: Boolean | undefined;
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-animateTimeShift)
     */
    animateTimeShift?: Boolean | undefined;
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: string | HTMLElement | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ariaDescription)
     */
    ariaDescription?: string | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ariaLabel)
     */
    ariaLabel?: string | undefined;
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string | undefined;
    /**
     * Update assigned [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord?: Boolean | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-bbar)
     */
    bbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-bodyCls)
     */
    bodyCls?: string | object | undefined;
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-bubbleEvents)
     */
    bubbleEvents?: object | undefined;
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-callOnFunctions)
     */
    callOnFunctions?: Boolean | undefined;
    /**
     * A function (or the name of a function) which creates content in, and may mutate a day cell element.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cell The header element
     * @param {Date} renderData.date The date for the cell
     * @param {number} renderData.day The day for the cell (`0` to `6` for Sunday to Saturday)
     * @param {number[]} renderData.rowIndex The row index, 0 to month row count (6 if [sixWeeks](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-sixWeeks) is `true`)
     * @param {HTMLElement} renderData.row The row element encapsulating the week which the cell is a part of
     * @param {Core.widget.CalendarPanel} renderData.source The widget being rendered
     * @param {number[]} renderData.cellIndex The cell index in the whole panel. May be from `0` to up to `42`
     * @param {number[]} renderData.columnIndex The column index, `0` to `6`
     * @param {number[]} renderData.visibleColumnIndex The visible column index taking hidden non working days into account
     * @returns {string,DomConfig,void}
     */
    cellRenderer?: string | ((renderData: {
        cell: HTMLElement;
        date: Date;
        day: number;
        rowIndex: number[];
        row: HTMLElement;
        source: CalendarPanel;
        cellIndex: number[];
        columnIndex: number[];
        visibleColumnIndex: number[];
    }) => string | DomConfig | void) | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: Boolean | undefined;
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-cls)
     */
    cls?: string | object | undefined;
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: Boolean | undefined;
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-collapsible)
     */
    collapsible?: Boolean | PanelCollapserConfig | PanelCollapserOverlayConfig | undefined;
    config?: object | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: Widget | HTMLElement | Rectangle | undefined;
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content?: string | undefined;
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-contentElementCls)
     */
    contentElementCls?: string | object | undefined;
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string> | undefined;
    /**
     * The initially selected date (or a `YYYY-MM-DD` date string).
     */
    date?: string | Date | undefined;
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names.
     */
    dayNameFormat?: string | undefined;
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string | undefined;
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: string | ((widget: Widget) => Boolean) | undefined;
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: ContainerItemConfig | undefined;
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-disabled)
     */
    disabled?: Boolean | "inert" | undefined;
    /**
     * The class name to add to disabled calendar cells.
     */
    disabledCls?: string | undefined;
    /**
     * Either an array of `Date` objects which are to be disabled (or date strings), or
     * a function (or the name of a function), which, when passed a `Date` returns `true` if the
     * date is disabled.
     * @param {Date} date Date to check
     * @returns {boolean} Returns `true` if the provided date is disabled
     */
    disabledDates?: string | string[] | Date[] | ((date: Date) => Boolean) | undefined;
    /**
     * Configure as `true` to render non working days as [disabledDates](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-disabledDates).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-disableNonWorkingDays)
     */
    disableNonWorkingDays?: Boolean | undefined;
    /**
     * Configure this as true to disable pointer interaction with cells which are outside the
     * range of the current month.
     */
    disableOtherMonthCells?: Boolean | undefined;
    /**
     * Configure as `true` to render Saturdays and Sundays as [disabledDates](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-disabledDates).
     */
    disableWeekends?: Boolean | undefined;
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-dock)
     */
    dock?: object | "top" | "bottom" | "left" | "right" | "start" | "end" | "header" | "pre-header" | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-draggable)
     */
    draggable?: Boolean | {
        handleSelector?: string | undefined;
    } | undefined;
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: Boolean | {
        side?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        size?: string | number | undefined;
        inline?: Boolean | undefined;
    } | undefined;
    /**
     * By default, the month and year are editable. Configure this as `false` to prevent that.
     */
    editMonth?: Boolean | undefined;
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-elementAttributes)
     */
    elementAttributes?: Record<string, string | null> | undefined;
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is <strong>not</strong> `'count'`, setting this to
     * `true` means that a tooltip containing the event count will be shown on hover of
     * a day cell.
     */
    eventCountTip?: Boolean | undefined;
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is `'dots'`, this controls the layout of the dots
     * below the day number.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventDots)
     */
    eventDots?: {
        marginTop?: number | undefined;
        max?: number | undefined;
        gap?: number | undefined;
        size?: number | undefined;
        stripe?: Boolean | undefined;
    } | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventFilter)
     * @param {Scheduler.model.EventModel} event Event for filtering
     * @returns {boolean} Return `true` to include the passed event
     */
    eventFilter?: string | ((event: EventModel) => Boolean) | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: string | ((detail: {
        view: typeof CalendarMixin;
        eventRecord: EventModel;
        resourceRecord: ResourceModel;
        renderData: {
            style: object;
            cls: object;
            iconStyle: object;
            iconCls: object;
            eventColor: string;
            dataset: object;
            solidBar: Boolean;
            bodyColor: string;
        };
        showBullet: Boolean;
    }) => DomConfig | DomConfig[] | string | void) | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: string | ((detail: {
        view: typeof CalendarMixin;
        eventRecord: EventModel;
        resourceRecord: ResourceModel;
        renderData: {
            style: object;
            cls: object;
            iconStyle: object;
            iconCls: object;
            eventColor: string;
            dataset: object;
            solidBar: Boolean;
            bodyColor: string;
            showBullet: Boolean;
        };
    }) => DomConfig | DomConfig[] | string | void) | undefined;
    /**
     * The [event store](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore) from which the in-cell event presence
     * indicators are drawn.
     */
    eventStore?: EventStore | undefined;
    extraData?: any;
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-filterEventResources)
     */
    filterEventResources?: Boolean | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: string | number | undefined;
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: Boolean | undefined;
    /**
     * By default, disabled dates cannot be navigated to, and they are skipped over
     * during keyboard navigation. Configure this as `true` to enable navigation to
     * disabled dates.
     */
    focusDisabledDates?: Boolean | undefined;
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-footer)
     */
    footer?: string | {
        dock?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        html?: string | undefined;
        cls?: string | undefined;
    } | undefined;
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: string | ((eventRecord: EventModel) => ResourceModel) | undefined;
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-header)
     */
    header?: string | Boolean | PanelHeader | undefined;
    /**
     * A function (or the name of a function) which creates content in, and may mutate a day header element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-headerRenderer)
     * @param {HTMLElement} cell The header element
     * @param {number} columnIndex The day column. Will be in the range `0` to `6`
     * @param {number} weekDay The canonical day number where Monday is `0` and Sunday is `6`
     * @returns {string,DomConfig,void}
     */
    headerRenderer?: string | ((cell: HTMLElement, columnIndex: number, weekDay: number) => string | DomConfig | void) | undefined;
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string | number | undefined;
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: Boolean | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-hideAnimation)
     */
    hideAnimation?: object | Boolean | undefined;
    /**
     * Configure this as `true` to hide cells which are outside the range of the current month.
     */
    hideOtherMonthCells?: Boolean | undefined;
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-hideWhenEmpty)
     */
    hideWhenEmpty?: Boolean | undefined;
    /**
     * Configure as `true` to add a highlighted border and background to the week row which
     * encapsulates the selected date.
     */
    highlightSelectedWeek?: Boolean | undefined;
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-html)
     * @param {Core.widget.Widget} widget The calling Widget
     * @returns {string}
     */
    html?: string | VueConfig | DomConfig | DomConfig[] | ((widget: Widget) => string) | undefined;
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls?: string | object | undefined;
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string | undefined;
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: Boolean | undefined;
    /**
     * By default, the year is visible. Configure this as `false` to prevent that.
     */
    includeYear?: Boolean | undefined;
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: string | HTMLElement | undefined;
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: string | HTMLElement | undefined;
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string | undefined;
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-items)
     */
    items?: (Widget | ContainerItemConfig | MenuItemConfig)[] | Record<string, Boolean | ContainerItemConfig | MenuItemConfig | null> | undefined;
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig> | undefined;
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-layout)
     */
    layout?: string | ContainerLayoutConfig | undefined;
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-layoutStyle)
     */
    layoutStyle?: object | undefined;
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-lazyItems)
     */
    lazyItems?: Record<string, ContainerItemConfig> | Widget[] | ContainerItemConfig[] | undefined;
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-listeners)
     */
    listeners?: CalendarDatePickerListeners | undefined;
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-localeClass)
     */
    localeClass?: typeof Base | undefined;
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: Boolean | undefined;
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-localizableProperties)
     */
    localizableProperties?: string[] | undefined;
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: string | number | undefined;
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig | undefined;
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: string | Boolean | MaskConfig | undefined;
    /**
     * The maximum selectable date. Selection of and navigation to dates after
     * this date will not be possible.
     */
    maxDate?: Date | undefined;
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is `'dots'`, this is the maximum number of dots to show
     * below the date number in the cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-maxDots)
     * @deprecated 6.1.2 Use [eventDots](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#property-eventDots) instead.
     */
    maxDots?: number | undefined;
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string | number | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-maximizeOnMobile)
     */
    maximizeOnMobile?: string | number | undefined;
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string | number | undefined;
    /**
     * By default, day cells flex to share available Panel width equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-minColumnWidth)
     */
    minColumnWidth?: number | undefined;
    /**
     * The minimum selectable date. Selection of and navigation to dates prior
     * to this date will not be possible.
     */
    minDate?: Date | undefined;
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string | number | undefined;
    /**
     * By default, week rows flex to share available Panel height equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-minRowHeight)
     */
    minRowHeight?: string | number | undefined;
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string | number | undefined;
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-monitorResize)
     */
    monitorResize?: Boolean | undefined;
    /**
     * A [Month](https://bryntum.com/products/calendar/docs/api/Core/util/Month) Month utility object which encapsulates this Panel's month
     * and provides contextual information and navigation services.
     */
    month?: Month | MonthConfig | undefined;
    /**
     * Configure as `true` to enable selecting multiple discontiguous date ranges using
     * click and Shift+click to create ranges and Ctrl+click to select/deselect individual dates.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-multiSelect)
     */
    multiSelect?: Boolean | "range" | "simple" | undefined;
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-namedItems)
     */
    namedItems?: Record<string, ContainerItemConfig> | undefined;
    /**
     * The class name to add to calendar cells which are [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-nonWorkingDays).
     */
    nonWorkingDayCls?: string | undefined;
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, Boolean> | undefined;
    /**
     * The class name to add to calendar cells which are in the previous or next month.
     */
    otherMonthCls?: string | undefined;
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-owner)
     */
    owner?: Widget | undefined;
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-positioned)
     */
    positioned?: Boolean | undefined;
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: Boolean | undefined;
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-readOnly)
     */
    readOnly?: Boolean | undefined;
    /**
     * [Record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-record)
     */
    record?: Model | undefined;
    relayStoreEvents?: Boolean | undefined;
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ripple)
     */
    ripple?: Boolean | {
        delegate?: string | undefined;
        color?: string | undefined;
        radius?: number | undefined;
        clip?: string | undefined;
    } | undefined;
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: HTMLElement | ShadowRoot | undefined;
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-rtl)
     */
    rtl?: Boolean | undefined;
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-scrollable)
     */
    scrollable?: Boolean | ScrollerConfig | Scroller | undefined;
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: "hide" | "realign" | null | undefined;
    /**
     * If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is configured as `true`, this is an array of dates
     * which are selected. There may be multiple, discontiguous date ranges.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-selection)
     */
    selection?: string[] | Date[] | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showAnimation)
     */
    showAnimation?: object | Boolean | undefined;
    /**
     * How to show presence of events in the configured [eventStore](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventStore) in the
     * day cells. Values may be:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents)
     */
    showEvents?: Boolean | "count" | "dots" | "heatmap" | undefined;
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: Boolean | undefined;
    /**
     * Configure as `true` to show a week number column at the start of the calendar block.
     */
    showWeekColumn?: Boolean | undefined;
    /**
     * Configure as `true` to always show a six-week calendar.
     */
    sixWeeks?: Boolean | undefined;
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-stateful)
     */
    stateful?: object | Boolean | string[] | undefined;
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-statefulEvents)
     */
    statefulEvents?: object | string[] | undefined;
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-stateId)
     */
    stateId?: string | undefined;
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-stateProvider)
     */
    stateProvider?: StateProvider | undefined;
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: Boolean | undefined;
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-strips)
     */
    strips?: Record<string, ContainerItemConfig> | undefined;
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tab)
     */
    tab?: Boolean | TabConfig | undefined;
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[] | Widget[] | undefined;
    /**
     * The tag name of this Widget's root element
     */
    tag?: string | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tbar)
     */
    tbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-textAlign)
     */
    textAlign?: "left" | "right" | "start" | "end" | "center" | undefined;
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-textContent)
     */
    textContent?: Boolean | undefined;
    /**
     * A config object to create a tooltip which will show on hover of a date cell including disabled, weekend,
     * and "other month" cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tip)
     */
    tip?: TooltipConfig | undefined;
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-title)
     */
    title?: string | undefined;
    /**
     * The class name to add to the calendar cell which contains today's date.
     */
    todayCls?: string | undefined;
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tools)
     */
    tools?: Record<string, ToolConfig> | null | undefined;
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tooltip)
     */
    tooltip?: string | TooltipConfig | null | undefined;
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: Boolean | undefined;
    type?: "datepicker" | undefined;
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ui)
     */
    ui?: string | object | undefined;
    /**
     * The class name to add to calendar cells which are weekend dates.
     */
    weekendCls?: string | undefined;
    /**
     * A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-weekRenderer)
     * @param {HTMLElement} weekCell The header element
     * @param {number[]} week An array containing `[year, weekNumber]`
     * @returns {string,DomConfig,void}
     */
    weekRenderer?: string | ((weekCell: HTMLElement, week: number[]) => string | DomConfig | void) | undefined;
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number | undefined;
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number | undefined;
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string | number | undefined;
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-x)
     */
    x?: number | undefined;
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-y)
     */
    y?: number | undefined;
}>, {
    instance: {
        value?: CalendarDatePicker | undefined;
    };
    refElement: import("vue").Ref<HTMLDivElement | undefined>;
    teleports: import("vue").Ref<Map<any, any>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    beforeDestroy: (params: string | ((event: {
        source: Base;
    }) => void)) => void;
    beforeHide: (params: string | ((event: {
        source: Widget;
    }) => boolean | void | Promise<boolean>)) => void;
    beforeRefresh: (params: string | ((event: {
        source: DatePicker;
    }) => void)) => void;
    beforeSetRecord: (params: string | ((event: {
        source: Container;
        record: Model;
    }) => void)) => void;
    beforeShow: (params: string | ((event: {
        source: any;
    }) => boolean | void | Promise<boolean>)) => void;
    beforeStateApply: (params: string | ((event: {
        event: {
            state: object;
        };
    }) => boolean | void | Promise<boolean>)) => void;
    beforeStateSave: (params: string | ((event: {
        event: {
            state: object;
        };
    }) => boolean | void | Promise<boolean>)) => void;
    catchAll: (params: string | ((event: {
        [key: string]: any;
        type: string;
    }) => void)) => void;
    collapse: (params: string | ((event: {
        source: Panel;
    }) => void)) => void;
    dateChange: (params: string | ((event: {
        value: Date;
        oldValue: Date;
        changes: {
            d: boolean;
            w: boolean;
            m: boolean;
            y: boolean;
        };
    }) => void)) => void;
    destroy: (params: string | ((event: {
        source: Base;
    }) => void)) => void;
    dirtyStateChange: (params: string | ((event: {
        source: Container;
        dirty: boolean;
    }) => void)) => void;
    expand: (params: string | ((event: {
        source: Panel;
    }) => void)) => void;
    focusIn: (params: string | ((event: {
        source: Widget;
        fromElement: HTMLElement;
        toElement: HTMLElement;
        fromWidget: Widget;
        toWidget: Widget;
        backwards: boolean;
    }) => void)) => void;
    focusOut: (params: string | ((event: {
        source: Widget;
        fromElement: HTMLElement;
        toElement: HTMLElement;
        fromWidget: Widget;
        toWidget: Widget;
        backwards: boolean;
    }) => void)) => void;
    hide: (params: string | ((event: {
        source: Widget;
    }) => void)) => void;
    paint: (params: string | ((event: {
        source: Widget;
        firstPaint: boolean;
    }) => void)) => void;
    readOnly: (params: string | ((event: {
        readOnly: boolean;
    }) => void)) => void;
    recompose: (params: string | (() => void)) => void;
    refresh: (params: string | (() => void)) => void;
    resize: (params: string | ((event: {
        source: Widget;
        width: number;
        height: number;
        oldWidth: number;
        oldHeight: number;
    }) => void)) => void;
    selectionChange: (params: string | ((event: {
        selection: Date[];
        oldSelection: Date[];
        userAction: boolean;
    }) => void)) => void;
    show: (params: string | ((event: {
        source: Widget;
    }) => void)) => void;
    toolClick: (params: string | ((event: {
        source: Tool;
        tool: Tool;
    }) => void)) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<{
    /**
     * The date that the user has navigated to using the UI *prior* to setting the widget's
     * value by selecting. The initial default is today's date. Can also be supplied as a `YYYY-MM-DD` date
     * string.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-activeDate)
     */
    activeDate?: string | Date | undefined;
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-adopt)
     */
    adopt?: string | HTMLElement | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-align)
     */
    align?: string | AlignSpec | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*
     * `true` to show a connector arrow pointing to the align target.
     */
    anchor?: Boolean | undefined;
    /**
     * By default, when navigating through time, the next time
     * block will be animated in from the appropriate direction.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-animateTimeShift)
     */
    animateTimeShift?: Boolean | undefined;
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: string | HTMLElement | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ariaDescription)
     */
    ariaDescription?: string | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ariaLabel)
     */
    ariaLabel?: string | undefined;
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string | undefined;
    /**
     * Update assigned [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record) automatically on field changes
     */
    autoUpdateRecord?: Boolean | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-bbar)
     */
    bbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-bodyCls)
     */
    bodyCls?: string | object | undefined;
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-bubbleEvents)
     */
    bubbleEvents?: object | undefined;
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-callOnFunctions)
     */
    callOnFunctions?: Boolean | undefined;
    /**
     * A function (or the name of a function) which creates content in, and may mutate a day cell element.
     * @param {object} renderData
     * @param {HTMLElement} renderData.cell The header element
     * @param {Date} renderData.date The date for the cell
     * @param {number} renderData.day The day for the cell (`0` to `6` for Sunday to Saturday)
     * @param {number[]} renderData.rowIndex The row index, 0 to month row count (6 if [sixWeeks](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-sixWeeks) is `true`)
     * @param {HTMLElement} renderData.row The row element encapsulating the week which the cell is a part of
     * @param {Core.widget.CalendarPanel} renderData.source The widget being rendered
     * @param {number[]} renderData.cellIndex The cell index in the whole panel. May be from `0` to up to `42`
     * @param {number[]} renderData.columnIndex The column index, `0` to `6`
     * @param {number[]} renderData.visibleColumnIndex The visible column index taking hidden non working days into account
     * @returns {string,DomConfig,void}
     */
    cellRenderer?: string | ((renderData: {
        cell: HTMLElement;
        date: Date;
        day: number;
        rowIndex: number[];
        row: HTMLElement;
        source: CalendarPanel;
        cellIndex: number[];
        columnIndex: number[];
        visibleColumnIndex: number[];
    }) => string | DomConfig | void) | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to centre the Widget in browser viewport space.
     */
    centered?: Boolean | undefined;
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-cls)
     */
    cls?: string | object | undefined;
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: Boolean | undefined;
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-collapsible)
     */
    collapsible?: Boolean | PanelCollapserConfig | PanelCollapserOverlayConfig | undefined;
    config?: object | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*
     * Element, Widget or Rectangle to which this Widget is constrained.
     */
    constrainTo?: Widget | HTMLElement | Rectangle | undefined;
    /**
     * The HTML content that coexists with sibling elements which may have been added to the
     * [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.
     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-htmlCls)
     * class added to its classList, to allow targeted styling.
     */
    content?: string | undefined;
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-contentElementCls)
     */
    contentElementCls?: string | object | undefined;
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string> | undefined;
    /**
     * The initially selected date (or a `YYYY-MM-DD` date string).
     */
    date?: string | Date | undefined;
    /**
     * The [DateHelper](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper) format string to format the day names.
     */
    dayNameFormat?: string | undefined;
    /**
     * The name of the property to set when a single value is to be applied to this Widget. Such as when used
     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
     */
    defaultBindProperty?: string | undefined;
    /**
     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which
     * focus should be directed by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-defaultFocus)
     * @param {Core.widget.Widget} widget Widget passed to method
     * @returns {boolean} truthy value if widget is the default one
     */
    defaultFocus?: string | ((widget: Widget) => Boolean) | undefined;
    /**
     * A config object containing default settings to apply to all child widgets.
     */
    defaults?: ContainerItemConfig | undefined;
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-disabled)
     */
    disabled?: Boolean | "inert" | undefined;
    /**
     * The class name to add to disabled calendar cells.
     */
    disabledCls?: string | undefined;
    /**
     * Either an array of `Date` objects which are to be disabled (or date strings), or
     * a function (or the name of a function), which, when passed a `Date` returns `true` if the
     * date is disabled.
     * @param {Date} date Date to check
     * @returns {boolean} Returns `true` if the provided date is disabled
     */
    disabledDates?: string | string[] | Date[] | ((date: Date) => Boolean) | undefined;
    /**
     * Configure as `true` to render non working days as [disabledDates](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-disabledDates).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-disableNonWorkingDays)
     */
    disableNonWorkingDays?: Boolean | undefined;
    /**
     * Configure this as true to disable pointer interaction with cells which are outside the
     * range of the current month.
     */
    disableOtherMonthCells?: Boolean | undefined;
    /**
     * Configure as `true` to render Saturdays and Sundays as [disabledDates](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-disabledDates).
     */
    disableWeekends?: Boolean | undefined;
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-dock)
     */
    dock?: object | "top" | "bottom" | "left" | "right" | "start" | "end" | "header" | "pre-header" | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´
     * property which controls when a drag should start.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-draggable)
     */
    draggable?: Boolean | {
        handleSelector?: string | undefined;
    } | undefined;
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: Boolean | {
        side?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        size?: string | number | undefined;
        inline?: Boolean | undefined;
    } | undefined;
    /**
     * By default, the month and year are editable. Configure this as `false` to prevent that.
     */
    editMonth?: Boolean | undefined;
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-elementAttributes)
     */
    elementAttributes?: Record<string, string | null> | undefined;
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is <strong>not</strong> `'count'`, setting this to
     * `true` means that a tooltip containing the event count will be shown on hover of
     * a day cell.
     */
    eventCountTip?: Boolean | undefined;
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is `'dots'`, this controls the layout of the dots
     * below the day number.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventDots)
     */
    eventDots?: {
        marginTop?: number | undefined;
        max?: number | undefined;
        gap?: number | undefined;
        size?: number | undefined;
        stripe?: Boolean | undefined;
    } | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy to filter which events
     * are collected into the day cell data blocks.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventFilter)
     * @param {Scheduler.model.EventModel} event Event for filtering
     * @returns {boolean} Return `true` to include the passed event
     */
    eventFilter?: string | ((event: EventModel) => Boolean) | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventHeaderRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventHeaderRenderer?: string | ((detail: {
        view: typeof CalendarMixin;
        eventRecord: EventModel;
        resourceRecord: ResourceModel;
        renderData: {
            style: object;
            cls: object;
            iconStyle: object;
            iconCls: object;
            eventColor: string;
            dataset: object;
            solidBar: Boolean;
            bodyColor: string;
        };
        showBullet: Boolean;
    }) => DomConfig | DomConfig[] | string | void) | undefined;
    /**
     * A function, or the name of a function in the ownership hierarchy which you
     * can specify to customize event DOM content.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventRenderer)
     * @param {object} detail An object that contains data about the event being rendered
     * @param {Calendar.widget.mixin.CalendarMixin} detail.view The view rendering the event
     * @param {Scheduler.model.EventModel} detail.eventRecord The event record
     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The event record
     * @param {object} detail.renderData A data object containing properties that will be used to create the event element
     * @param {object} detail.renderData.style The style property is an object containing style properties for the event element
     * @param {object} detail.renderData.cls The cls property is an object whose property names will be added to the event element if the property value is truthy
     * @param {object} detail.renderData.iconStyle The iconStyle property is an object containing style properties for the icon element if an icon element is to be used
     * @param {object} detail.renderData.iconCls The iconCls property is an object whose property names will be added to the icon element. Initially set from the event record's [iconCls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/EventModel#field-iconCls). Can be mutated by the renderer. If null, or no properties are set, no icon will be rendered
     * @param {string} detail.renderData.eventColor Color to be applied to the event
     * @param {object} detail.renderData.dataset An object which produces the `dataset` of the resulting event bar
     * @param {boolean} detail.renderData.solidBar This is valid for views which create event bars. This is set to `true` by default for all day and interday events so that these appear as a solid block of background color. An eventRenderer may mutate this flag to change in what manner the event bar is coloured - as a solid bar of colour, or using the foreground colour (text and icons) such as the MonthView, the CalendarRow (all day events in a DayView), and OverflowPopups
     * @param {string} detail.renderData.bodyColor When used in a [DayView](https://bryntum.com/products/calendar/docs/api/Calendar/widget/DayView), this color is applied to the body of the event element. Note that this must be light enough that the text colour (From the SASS variable `$dayview-event-color`) is visible
     * @param {boolean} detail.renderData.showBullet If there is no `iconCls`, and the event is not recurring, then by default a "bullet" circular icon is shown if the view's [showBullet](https://bryntum.com/products/calendar/docs/api/Calendar/widget/mixin/CalendarMixin#config-showBullet) if set. Setting this property in an event renderer overrides this behaviour.
     * @returns {DomConfig,DomConfig[],string,void}
     */
    eventRenderer?: string | ((detail: {
        view: typeof CalendarMixin;
        eventRecord: EventModel;
        resourceRecord: ResourceModel;
        renderData: {
            style: object;
            cls: object;
            iconStyle: object;
            iconCls: object;
            eventColor: string;
            dataset: object;
            solidBar: Boolean;
            bodyColor: string;
            showBullet: Boolean;
        };
    }) => DomConfig | DomConfig[] | string | void) | undefined;
    /**
     * The [event store](https://bryntum.com/products/calendar/docs/api/Scheduler/data/EventStore) from which the in-cell event presence
     * indicators are drawn.
     */
    eventStore?: EventStore | undefined;
    extraData?: any;
    /**
     * If this is set to `true`, then when determining which assigned resource of a multi assigned event
     * to use to create the event UI, the first resource which is still selected in the
     * [resourceFilter](https://bryntum.com/products/calendar/docs/api/Calendar/widget/Sidebar#property-resourceFilter) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-filterEventResources)
     */
    filterEventResources?: Boolean | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: string | number | undefined;
    /**
     * Set to `true` to move the widget out of the document flow and position it
     * absolutely in browser viewport space.
     */
    floating?: Boolean | undefined;
    /**
     * By default, disabled dates cannot be navigated to, and they are skipped over
     * during keyboard navigation. Configure this as `true` to enable navigation to
     * disabled dates.
     */
    focusDisabledDates?: Boolean | undefined;
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-footer)
     */
    footer?: string | {
        dock?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        html?: string | undefined;
        cls?: string | undefined;
    } | undefined;
    /**
     * A Function (or name of a function in the ownership hierarchy) which returns the
     * [resource record](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ResourceModel) to use to create the UI for an event.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-getPrimaryResource)
     * @param {Scheduler.model.EventModel} eventRecord The event from which to extract the primary resource.
     * @returns {Scheduler.model.ResourceModel} The resource to be used to render the event.
     */
    getPrimaryResource?: string | ((eventRecord: EventModel) => ResourceModel) | undefined;
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-header)
     */
    header?: string | Boolean | PanelHeader | undefined;
    /**
     * A function (or the name of a function) which creates content in, and may mutate a day header element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-headerRenderer)
     * @param {HTMLElement} cell The header element
     * @param {number} columnIndex The day column. Will be in the range `0` to `6`
     * @param {number} weekDay The canonical day number where Monday is `0` and Sunday is `6`
     * @returns {string,DomConfig,void}
     */
    headerRenderer?: string | ((cell: HTMLElement, columnIndex: number, weekDay: number) => string | DomConfig | void) | undefined;
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string | number | undefined;
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: Boolean | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-hideAnimation)
     */
    hideAnimation?: object | Boolean | undefined;
    /**
     * Configure this as `true` to hide cells which are outside the range of the current month.
     */
    hideOtherMonthCells?: Boolean | undefined;
    /**
     * Specify `true` to make this container hide when it has no visible children (Either empty
     * or all children hidden).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-hideWhenEmpty)
     */
    hideWhenEmpty?: Boolean | undefined;
    /**
     * Configure as `true` to add a highlighted border and background to the week row which
     * encapsulates the selected date.
     */
    highlightSelectedWeek?: Boolean | undefined;
    /**
     * The HTML to display initially or a function returning the markup (called at widget construction time).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-html)
     * @param {Core.widget.Widget} widget The calling Widget
     * @returns {string}
     */
    html?: string | VueConfig | DomConfig | DomConfig[] | ((widget: Widget) => string) | undefined;
    /**
     * The CSS class(es) to add when HTML content is being applied to this widget.
     */
    htmlCls?: string | object | undefined;
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string | undefined;
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: Boolean | undefined;
    /**
     * By default, the year is visible. Configure this as `false` to prevent that.
     */
    includeYear?: Boolean | undefined;
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: string | HTMLElement | undefined;
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: string | HTMLElement | undefined;
    /**
     * An optional CSS class to add to child items of this container.
     */
    itemCls?: string | undefined;
    /**
     * An object containing typed child widget config objects or Widgets. May also be specified
     * as an array.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-items)
     */
    items?: (Widget | ContainerItemConfig | MenuItemConfig)[] | Record<string, Boolean | ContainerItemConfig | MenuItemConfig | null> | undefined;
    /**
     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name
     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values
     * are the name of the instance method to call when the keystroke is received.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-keyMap)
     */
    keyMap?: Record<string, KeyMapConfig> | undefined;
    /**
     * The short name of a helper class which manages rendering and styling of child items.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-layout)
     */
    layout?: string | ContainerLayoutConfig | undefined;
    /**
     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-layoutStyle)
     */
    layoutStyle?: object | undefined;
    /**
     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into
     * instances only when this Container is rendered, rather than eagerly at construct time.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-lazyItems)
     */
    lazyItems?: Record<string, ContainerItemConfig> | Widget[] | ContainerItemConfig[] | undefined;
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-listeners)
     */
    listeners?: CalendarDatePickerListeners | undefined;
    /**
     * A class translations of which are used for translating this entity.
     * This is often used when translations of an item are defined on its container class.
     * For example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-localeClass)
     */
    localeClass?: typeof Base | undefined;
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: Boolean | undefined;
    /**
     * List of properties which values should be translated automatically upon a locale applying.
     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),
     * you could use 'localeKey' meta configuration.
     * Example:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-localizableProperties)
     */
    localizableProperties?: string[] | undefined;
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: string | number | undefined;
    /**
     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the
     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these
     * values.
     */
    maskDefaults?: MaskConfig | undefined;
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: string | Boolean | MaskConfig | undefined;
    /**
     * The maximum selectable date. Selection of and navigation to dates after
     * this date will not be possible.
     */
    maxDate?: Date | undefined;
    /**
     * When [showEvents](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents) is `'dots'`, this is the maximum number of dots to show
     * below the date number in the cell.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-maxDots)
     * @deprecated 6.1.2 Use [eventDots](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#property-eventDots) instead.
     */
    maxDots?: number | undefined;
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string | number | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-maximizeOnMobile)
     */
    maximizeOnMobile?: string | number | undefined;
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string | number | undefined;
    /**
     * By default, day cells flex to share available Panel width equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-minColumnWidth)
     */
    minColumnWidth?: number | undefined;
    /**
     * The minimum selectable date. Selection of and navigation to dates prior
     * to this date will not be possible.
     */
    minDate?: Date | undefined;
    /**
     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    minHeight?: string | number | undefined;
    /**
     * By default, week rows flex to share available Panel height equally.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-minRowHeight)
     */
    minRowHeight?: string | number | undefined;
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string | number | undefined;
    /**
     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)
     * is used to monitor this element for size changes caused by either style manipulation, or by CSS
     * layout.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-monitorResize)
     */
    monitorResize?: Boolean | undefined;
    /**
     * A [Month](https://bryntum.com/products/calendar/docs/api/Core/util/Month) Month utility object which encapsulates this Panel's month
     * and provides contextual information and navigation services.
     */
    month?: Month | MonthConfig | undefined;
    /**
     * Configure as `true` to enable selecting multiple discontiguous date ranges using
     * click and Shift+click to create ranges and Ctrl+click to select/deselect individual dates.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-multiSelect)
     */
    multiSelect?: Boolean | "range" | "simple" | undefined;
    /**
     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)
     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default
     * value defined like this:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-namedItems)
     */
    namedItems?: Record<string, ContainerItemConfig> | undefined;
    /**
     * The class name to add to calendar cells which are [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/widget/CalendarPanel#config-nonWorkingDays).
     */
    nonWorkingDayCls?: string | undefined;
    /**
     * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.
     * Defaults to [nonWorkingDays](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-nonWorkingDays-static).
     */
    nonWorkingDays?: Record<number, Boolean> | undefined;
    /**
     * The class name to add to calendar cells which are in the previous or next month.
     */
    otherMonthCls?: string | undefined;
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-owner)
     */
    owner?: Widget | undefined;
    /**
     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must
     * not participate in the standard layout of that widget, and must be positioned relatively to that
     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-positioned)
     */
    positioned?: Boolean | undefined;
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: Boolean | undefined;
    /**
     * Whether this widget is read-only.  This is only valid if the widget is an input
     * field, <strong>or contains input fields at any depth</strong>.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-readOnly)
     */
    readOnly?: Boolean | undefined;
    /**
     * [Record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) whose values will be used to populate fields in the container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-record)
     */
    record?: Model | undefined;
    relayStoreEvents?: Boolean | undefined;
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ripple)
     */
    ripple?: Boolean | {
        delegate?: string | undefined;
        color?: string | undefined;
        radius?: number | undefined;
        clip?: string | undefined;
    } | undefined;
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: HTMLElement | ShadowRoot | undefined;
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-rtl)
     */
    rtl?: Boolean | undefined;
    /**
     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll
     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are
     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to
     * CSS overflow properties thus:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-scrollable)
     */
    scrollable?: Boolean | ScrollerConfig | Scroller | undefined;
    /**
     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).
     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
     */
    scrollAction?: "hide" | "realign" | null | undefined;
    /**
     * If [multiSelect](https://bryntum.com/products/calendar/docs/api/Core/widget/DatePicker#config-multiSelect) is configured as `true`, this is an array of dates
     * which are selected. There may be multiple, discontiguous date ranges.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-selection)
     */
    selection?: string[] | Date[] | undefined;
    /**
     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showAnimation)
     */
    showAnimation?: object | Boolean | undefined;
    /**
     * How to show presence of events in the configured [eventStore](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-eventStore) in the
     * day cells. Values may be:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-showEvents)
     */
    showEvents?: Boolean | "count" | "dots" | "heatmap" | undefined;
    /**
     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)
     */
    showTooltipWhenDisabled?: Boolean | undefined;
    /**
     * Configure as `true` to show a week number column at the start of the calendar block.
     */
    showWeekColumn?: Boolean | undefined;
    /**
     * Configure as `true` to always show a six-week calendar.
     */
    sixWeeks?: Boolean | undefined;
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-stateful)
     */
    stateful?: object | Boolean | string[] | undefined;
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-statefulEvents)
     */
    statefulEvents?: object | string[] | undefined;
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-stateId)
     */
    stateId?: string | undefined;
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-stateProvider)
     */
    stateProvider?: StateProvider | undefined;
    /**
     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),
     * without falling back to `ref`.
     */
    strictRecordMapping?: Boolean | undefined;
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-strips)
     */
    strips?: Record<string, ContainerItemConfig> | undefined;
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tab)
     */
    tab?: Boolean | TabConfig | undefined;
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[] | Widget[] | undefined;
    /**
     * The tag name of this Widget's root element
     */
    tag?: string | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tbar)
     */
    tbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-textAlign)
     */
    textAlign?: "left" | "right" | "start" | "end" | "center" | undefined;
    /**
     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`
     * which specifies a default max-width that makes long text more readable.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-textContent)
     */
    textContent?: Boolean | undefined;
    /**
     * A config object to create a tooltip which will show on hover of a date cell including disabled, weekend,
     * and "other month" cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tip)
     */
    tip?: TooltipConfig | undefined;
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-title)
     */
    title?: string | undefined;
    /**
     * The class name to add to the calendar cell which contains today's date.
     */
    todayCls?: string | undefined;
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tools)
     */
    tools?: Record<string, ToolConfig> | null | undefined;
    /**
     * Tooltip for the widget, either as a string or as a Tooltip config object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-tooltip)
     */
    tooltip?: string | TooltipConfig | null | undefined;
    /**
     * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
     * forwards or backwards.
     * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
     */
    trapFocus?: Boolean | undefined;
    type?: "datepicker" | undefined;
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-ui)
     */
    ui?: string | object | undefined;
    /**
     * The class name to add to calendar cells which are weekend dates.
     */
    weekendCls?: string | undefined;
    /**
     * A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-weekRenderer)
     * @param {HTMLElement} weekCell The header element
     * @param {number[]} week An array containing `[year, weekNumber]`
     * @returns {string,DomConfig,void}
     */
    weekRenderer?: string | ((weekCell: HTMLElement, week: number[]) => string | DomConfig | void) | undefined;
    /**
     * The week start day, 0 meaning Sunday, 6 meaning Saturday.
     * Defaults to [weekStartDay](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#property-weekStartDay-static).
     */
    weekStartDay?: number | undefined;
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number | undefined;
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string | number | undefined;
    /**
     * The x position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-x)
     */
    x?: number | undefined;
    /**
     * The y position for the widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Calendar/widget/CalendarDatePicker#config-y)
     */
    y?: number | undefined;
}>>> & {
    onBeforeDestroy?: ((params: string | ((event: {
        source: Base;
    }) => void)) => any) | undefined;
    onBeforeHide?: ((params: string | ((event: {
        source: Widget;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onBeforeSetRecord?: ((params: string | ((event: {
        source: Container;
        record: Model;
    }) => void)) => any) | undefined;
    onBeforeShow?: ((params: string | ((event: {
        source: any;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onBeforeStateApply?: ((params: string | ((event: {
        event: {
            state: object;
        };
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onBeforeStateSave?: ((params: string | ((event: {
        event: {
            state: object;
        };
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onCatchAll?: ((params: string | ((event: {
        [key: string]: any;
        type: string;
    }) => void)) => any) | undefined;
    onCollapse?: ((params: string | ((event: {
        source: Panel;
    }) => void)) => any) | undefined;
    onDestroy?: ((params: string | ((event: {
        source: Base;
    }) => void)) => any) | undefined;
    onDirtyStateChange?: ((params: string | ((event: {
        source: Container;
        dirty: boolean;
    }) => void)) => any) | undefined;
    onExpand?: ((params: string | ((event: {
        source: Panel;
    }) => void)) => any) | undefined;
    onFocusIn?: ((params: string | ((event: {
        source: Widget;
        fromElement: HTMLElement;
        toElement: HTMLElement;
        fromWidget: Widget;
        toWidget: Widget;
        backwards: boolean;
    }) => void)) => any) | undefined;
    onFocusOut?: ((params: string | ((event: {
        source: Widget;
        fromElement: HTMLElement;
        toElement: HTMLElement;
        fromWidget: Widget;
        toWidget: Widget;
        backwards: boolean;
    }) => void)) => any) | undefined;
    onHide?: ((params: string | ((event: {
        source: Widget;
    }) => void)) => any) | undefined;
    onPaint?: ((params: string | ((event: {
        source: Widget;
        firstPaint: boolean;
    }) => void)) => any) | undefined;
    onReadOnly?: ((params: string | ((event: {
        readOnly: boolean;
    }) => void)) => any) | undefined;
    onRecompose?: ((params: string | (() => void)) => any) | undefined;
    onRefresh?: ((params: string | (() => void)) => any) | undefined;
    onResize?: ((params: string | ((event: {
        source: Widget;
        width: number;
        height: number;
        oldWidth: number;
        oldHeight: number;
    }) => void)) => any) | undefined;
    onSelectionChange?: ((params: string | ((event: {
        selection: Date[];
        oldSelection: Date[];
        userAction: boolean;
    }) => void)) => any) | undefined;
    onShow?: ((params: string | ((event: {
        source: Widget;
    }) => void)) => any) | undefined;
    onToolClick?: ((params: string | ((event: {
        source: Tool;
        tool: Tool;
    }) => void)) => any) | undefined;
    onDateChange?: ((params: string | ((event: {
        value: Date;
        oldValue: Date;
        changes: {
            d: boolean;
            w: boolean;
            m: boolean;
            y: boolean;
        };
    }) => void)) => any) | undefined;
    onBeforeRefresh?: ((params: string | ((event: {
        source: DatePicker;
    }) => void)) => any) | undefined;
}, {}, {}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
