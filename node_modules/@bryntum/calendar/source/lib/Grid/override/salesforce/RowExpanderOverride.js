import Override from '../../../Core/mixin/Override.js';
import RowExpander from '../../feature/RowExpander.js';
import ResizeMonitor from '../../../Core/helper/ResizeMonitor.js';

Override.apply(class RowExpanderOverride {
    static target = {
        class : RowExpander
    }

    observeResize(element){
        const
            me              = this,
            { _overridden } = me;

        if(globalThis.ResizeObserver){
            return _overridden.observeResize.call(me, element);
        }

        if (!me.$resizeObserved) {
            me.$resizeObserved = new Map();
        }
        // Need to scope the handler, and change params
        const handler = (el) => me.onExpanderBodyResize([{ target : el }]);

        // Save to be able to remove later
        me.$resizeObserved.set(element, handler);

        ResizeMonitor.addResizeListener(element, handler);
    }

    unobserveResize(element) {
        this._overridden.unobserveResize.call(this, element);

        const handler = this.$resizeObserved?.get(element);

        if (handler) {
            ResizeMonitor.removeResizeListener(element, handler);
            this.$resizeObserved.delete(element);
        }
    }

    doDestroy(){
        this._overridden.doDestroy.call(this);

        this.$resizeObserved?.forEach((handler, element) => ResizeMonitor.removeResizeListener(element, handler));
        delete this.$resizeObserved
    }


});
