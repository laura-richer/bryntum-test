import { defineComponent as h, ref as r, provide as f, onMounted as u, getCurrentInstance as y, toRaw as g, watch as b, onBeforeUnmount as C, createElementBlock as S, openBlock as w } from "vue";
import { Editor as x } from "@bryntum/calendar";
import { WrapperHelper as l } from "../helper/WrapperHelper.js";
const T = /* @__PURE__ */ h({
  __name: "BryntumEditor",
  props: {
    adopt: {},
    align: {},
    alignSelf: {},
    anchor: {},
    appendTo: {},
    appendToTargetParent: {},
    ariaDescription: {},
    ariaLabel: {},
    ariaLive: {},
    autoUpdateRecord: {},
    blurAction: {},
    bubbleEvents: {},
    callOnFunctions: {},
    cancelKey: {},
    centered: {},
    cls: {},
    completeKey: {},
    completeOnChange: {},
    config: {},
    constrainTo: {},
    content: {},
    contentElementCls: {},
    dataset: {},
    defaultBindProperty: {},
    defaultFocus: { type: [Function, String] },
    defaults: {},
    disabled: {},
    dock: {},
    draggable: {},
    elementAttributes: {},
    extraData: {},
    fitTargetContent: {},
    flex: {},
    floating: {},
    height: {},
    hidden: {},
    hideAnimation: {},
    hideTarget: {},
    hideWhenEmpty: {},
    html: { type: [String, Function, Array] },
    htmlCls: {},
    id: {},
    ignoreParentReadOnly: {},
    inputField: {},
    insertBefore: {},
    insertFirst: {},
    invalidAction: {},
    itemCls: {},
    items: {},
    keyMap: {},
    layout: {},
    layoutStyle: {},
    lazyItems: {},
    listeners: {},
    localeClass: {},
    localizable: {},
    localizableProperties: {},
    margin: {},
    maskDefaults: {},
    masked: {},
    matchFont: {},
    matchSize: {},
    maxHeight: {},
    maximizeOnMobile: {},
    maxWidth: {},
    minHeight: {},
    minWidth: {},
    monitorResize: {},
    namedItems: {},
    owner: {},
    positioned: {},
    preventTooltipOnTouch: {},
    readOnly: {},
    record: {},
    relayStoreEvents: {},
    ripple: {},
    rootElement: {},
    rtl: {},
    scrollable: {},
    scrollAction: {},
    showAnimation: {},
    showTooltipWhenDisabled: {},
    strictRecordMapping: {},
    tab: {},
    tabBarItems: {},
    tag: {},
    textAlign: {},
    textContent: {},
    title: {},
    tooltip: {},
    type: {},
    ui: {},
    weight: {},
    width: {},
    x: {},
    y: {}
  },
  emits: ["afterEdit", "beforeCancel", "beforeComplete", "beforeDestroy", "beforeHide", "beforeSetRecord", "beforeShow", "beforeStart", "cancel", "catchAll", "complete", "destroy", "dirtyStateChange", "focusIn", "focusOut", "hide", "keyDown", "paint", "readOnly", "recompose", "resize", "show", "start"],
  setup(A, { expose: s, emit: c }) {
    const d = c, a = {
      instanceClass: x,
      instanceName: "Editor",
      configNames: [
        "adopt",
        "align",
        "anchor",
        "appendToTargetParent",
        "ariaDescription",
        "ariaLabel",
        "autoUpdateRecord",
        "blurAction",
        "bubbleEvents",
        "callOnFunctions",
        "cancelKey",
        "centered",
        "completeKey",
        "completeOnChange",
        "config",
        "constrainTo",
        "contentElementCls",
        "defaultBindProperty",
        "defaultFocus",
        "defaults",
        "dock",
        "draggable",
        "elementAttributes",
        "fitTargetContent",
        "floating",
        "hideAnimation",
        "hideTarget",
        "hideWhenEmpty",
        "htmlCls",
        "ignoreParentReadOnly",
        "invalidAction",
        "itemCls",
        "lazyItems",
        "listeners",
        "localeClass",
        "localizable",
        "localizableProperties",
        "maskDefaults",
        "masked",
        "matchFont",
        "matchSize",
        "monitorResize",
        "namedItems",
        "owner",
        "positioned",
        "preventTooltipOnTouch",
        "relayStoreEvents",
        "ripple",
        "rootElement",
        "scrollAction",
        "showAnimation",
        "showTooltipWhenDisabled",
        "tab",
        "tabBarItems",
        "tag",
        "textAlign",
        "textContent",
        "title",
        "type",
        "ui",
        "weight"
      ],
      propertyConfigNames: [
        "alignSelf",
        "appendTo",
        "ariaLive",
        "cls",
        "content",
        "dataset",
        "disabled",
        "extraData",
        "flex",
        "height",
        "hidden",
        "html",
        "id",
        "inputField",
        "insertBefore",
        "insertFirst",
        "items",
        "keyMap",
        "layout",
        "layoutStyle",
        "margin",
        "maxHeight",
        "maximizeOnMobile",
        "maxWidth",
        "minHeight",
        "minWidth",
        "onAfterEdit",
        "onBeforeCancel",
        "onBeforeComplete",
        "onBeforeDestroy",
        "onBeforeHide",
        "onBeforeSetRecord",
        "onBeforeShow",
        "onBeforeStart",
        "onCancel",
        "onCatchAll",
        "onComplete",
        "onDestroy",
        "onDirtyStateChange",
        "onFocusIn",
        "onFocusOut",
        "onHide",
        "onKeyDown",
        "onPaint",
        "onReadOnly",
        "onRecompose",
        "onResize",
        "onShow",
        "onStart",
        "readOnly",
        "record",
        "rtl",
        "scrollable",
        "strictRecordMapping",
        "tooltip",
        "width",
        "x",
        "y"
      ],
      propertyNames: [
        "anchorSize",
        "focusVisible",
        "hasChanges",
        "isSettingValues",
        "isValid",
        "parent",
        "values"
      ],
      eventNames: [
        "afterEdit",
        "beforeCancel",
        "beforeComplete",
        "beforeDestroy",
        "beforeHide",
        "beforeSetRecord",
        "beforeShow",
        "beforeStart",
        "cancel",
        "catchAll",
        "complete",
        "destroy",
        "dirtyStateChange",
        "focusIn",
        "focusOut",
        "hide",
        "keyDown",
        "paint",
        "readOnly",
        "recompose",
        "resize",
        "show",
        "start"
      ]
    }, o = {}, n = r(), i = r(/* @__PURE__ */ new Map());
    return f("teleports", i), u(() => {
      const e = y();
      o.value = l.createWidget({
        me: e,
        widgetData: a,
        emit: d,
        element: n.value,
        toRaw: g
      });
      const t = (m, p) => b(() => e.props[m], p);
      l.watchProps(o.value, a, t);
    }), C(() => {
      var e, t;
      (t = (e = o.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), s({
      instance: o,
      refElement: n,
      teleports: i
    }), (e, t) => (w(), S("div", {
      ref_key: "refElement",
      ref: n
    }, null, 512));
  }
});
export {
  T as _
};
//# sourceMappingURL=C3X17UXb.js.map
