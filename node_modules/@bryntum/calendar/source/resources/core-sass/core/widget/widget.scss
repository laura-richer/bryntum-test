@use "sass:math";
@import '../../variables';

.b-widget {
    --color-indigo      : #{$indigo};
    --color-blue        : #{$blue};
    --color-cyan        : #{$cyan};
    --color-red         : #{$red};
    --color-deep-orange : #{$deep-orange};
    --color-orange      : #{$orange};
    --color-amber       : #{$amber};
    --color-yellow      : #{$yellow};
    --color-green       : #{$green};
    --color-teal        : #{$teal};
    --color-light-green : #{$light-green};
    --color-lime        : #{$lime};
    --color-purple      : #{$purple};
    --color-pink        : #{$pink};
    --color-violet      : #{$violet};
    --color-gray        : #{$gray};
    --color-light-gray  : #{$light-gray};
    --color-dark-gray   : #{$dark-gray};
    --color-white       : #{$white};
    --color-black       : #{$black};

    display             : inline-flex;
    overflow            : hidden;
    line-height         : initial; // protect against CSS from outside world influencing us
    font-weight         : $widget-font-weight;
    font-size           : 1em;
    box-sizing          : border-box;
    color-scheme        : $widget-color-scheme;

    // During construction, widgets must not animate
    &.b-initializing * {
        transition : none!important;
    }

    // To make measurable, we have to override hidden display :none
    &.b-measure {
        display : block !important;
    }

    // Floating and positioned widgets which show an anchor need the anchor to appear outside bounds.
    &.b-anchored {
        overflow : visible;
    }

    &.b-maximized {
        position           : fixed;
        transform          : none !important;
        width              : 100% !important;
        height             : 100% !important;
        max-width          : 100% !important;
        max-height         : 100% !important;
        top                : 0 !important;
        inset-inline-start : 0 !important;

        &.b-mobile {
            // Move bottom toolbar to the top
            .b-bottom-toolbar {
                order      : -1;
                min-height : 3.5em;

                .b-toolbar-content {
                    padding-block        : 0.5em 0;
                    padding-inline-start : 1em !important;
                }
            }
        }
    }

    *,
    &:before,
    &:after,
    *:before,
    *:after {
        box-sizing : border-box;
    }

    // Widgets which are positioned: true are like floating, but they are rendered inside another widget's
    // contentElement, and positioned relative to that element. For example Editors.
    &.b-positioned {
        position           : absolute;
        top                : 0;
        inset-inline-start : 0;
    }

    &.b-positionable {
        position : absolute;
    }

    &.b-floating {
        box-shadow : $float-box-shadow;
    }

    // Floating and positioned widgets which are centered are absolutely positioned in the center.
    // Cannot use flexbox centering in case multiple centered floaters are displayed.
    &.b-floating,
    &.b-positioned {
        &.b-centered:not(.b-maximized) {
            inset-inline-start : 50%;
            top                : 50%;
            &:not(.b-rtl) {
                transform          : translate(-50%, -50%);
            }
            &.b-rtl {
                transform          : translate(50%, -50%);
            }
        }
    }

    > .b-focus-trap {
        // By default, these are not tabbable and use no resource.
        position : absolute;
        display  : none;

        // When given layout, they are accessible but invisible.
        clip     : rect(0, 0, 0, 0);
    }

    // Only make tabbable if the widget is tagged with the
    // focus-trapped class *and* it contains focus.
    &.b-focus-trapped.b-contains-focus > .b-focus-trap {
        display : inherit;
    }

    &.b-hidden {
        &.b-hide-mode-clip {
            clip : rect(0, 0, 0, 0) !important;
        }

        &.b-hide-mode-opacity {
            opacity        : 0 !important;
            pointer-events : none;
        }

        &.b-hide-mode-display {
            display : none !important; // ugly but needed since subclasses override display with more specificity
        }
    }

    // During an animated hide, the element must not be interactive
    &.b-hiding {
        pointer-events : none;
    }

    .b-aria-desc-element {
        position  : absolute;
        clip-path : polygon(0 0);
        contain   : strict;
    }

    .b-widget-inner {
        width    : 100%;
        position : relative;
        flex     : 1;
    }

    // The .b-anchor element is a bar which covers the full edge length of its aligned edge
    // and occupies the gap between the aligned widget and its target.
    // This means that moving between the target and the aligned widget
    // immediately moves into the widget with no gap.
    .b-anchor {
        position : absolute;
        z-index  : -1; // content element must occlude line ends.

        svg {
            width    : $widget-anchor-width;
            height   : $widget-anchor-height;
            position : absolute;
            overflow : visible // So that the shadow is visible
        }

        // Top and bottom, it's a full width strip
        &.b-anchor-top, &.b-anchor-bottom {
            inset-inline-start : 0;
            height             : #{$widget-anchor-height};
            width              : 100%;
        }

        &.b-anchor-top {
            bottom : calc(100% - 1px);

            svg {
                bottom : 0;
            }
        }

        &.b-anchor-bottom {
            top : calc(100% - 1px);

            svg {
                top    : 0;
                rotate : 180deg;
            }
        }

        // Left and right, it's a full height strip.
        &.b-anchor-start, &.b-anchor-end {
            top    : 0;
            width  : #{$widget-anchor-height};
            height : 100%;
        }

        &.b-anchor-start {
            inset-inline-end : calc(100% - 1px);

            svg {
                right            : 0;
                width            : $widget-anchor-height;
                height           : $widget-anchor-width;
                rotate           : 270deg;
                transform-origin : $widget-anchor-height $widget-anchor-height;
            }
        }

        &.b-anchor-end {
            inset-inline-end : -$widget-anchor-pointer-width;

            svg {
                rotate           : 90deg;
                width            : $widget-anchor-height;
                height           : $widget-anchor-width;
                transform-origin : math.div($widget-anchor-height, 2) math.div($widget-anchor-height, 2);
            }
        }
    }

    // If the widget is being used as a sub-menu, anchor bars are wider to allow more diagonal mouse movement.
    &.b-sub-menu {
        .b-anchor {
            &.b-anchor-start,
            &.b-anchor-end {
                width : ($widget-anchor-height + 1);
            }
        }
    }
}

.b-slidingcontent-content {
    display          : flex;
    flex-flow        : row nowrap !important;
    align-items      : stretch;
    scroll-snap-type : x mandatory;

    .b-carousel-item {
        flex : 1 0 100%;
    }
}

.b-widget-scroller {
    overflow                   : hidden; // overridden inline by the Scroller
    -webkit-overflow-scrolling : touch;
    overflow-anchor            : none; /* without this we see weird issues in Mac Chrome <= 63 with no scrollbar, covered in Tree.t.js */
    position                   : relative;
}

// This section is for handling overflowX/Y : 'hidden-scroll` in the Scroller utility class.
// We hide scrollbars. This is only done if the other axis is either overflow:hidden or also hidden-scroll
// because it hides *both* scrollbars.
.b-hide-scroll {
    // Firefox support: https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width
    scrollbar-width : none;

    // Blink and WebKit support: https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar
    &::-webkit-scrollbar {
        display : none;
    }
}

.b-scroller-stretcher {
    position           : absolute;
    height             : 1px;
    width              : 1px;
    top                : 0;
    inset-inline-start : 0;
}

.b-text-align-start,
.b-text-align-left {
    text-align : start;
}

.b-text-align-center {
    text-align : center;
}

.b-text-align-end,
.b-text-align-right {
    text-align : end;
}

.b-rtl {
    direction : rtl;

    .b-anchor {
        &.b-anchor-start svg {
            rotate           : 90deg;
            transform-origin : math.div($widget-anchor-height, 2) math.div($widget-anchor-height, 2);
        }

        &.b-anchor-end svg {
            rotate           : 270deg;
            transform-origin : $widget-anchor-height $widget-anchor-height;
        }
    }
}

.b-ltr {
    direction : ltr;
}

.b-arialive-el {
    clip     : rect(0, 0, 0, 0);
    position : absolute;
}

// <remove-on-release>
// Intentionally left-based
// TODO: make direction neutral after TO-DO in Widget#alignTo has been made neutral
// </remove-on-release>
.b-firefox .b-anchor-end .b-pointer-el {
    margin-left : calc(var(--rtl-negate) * -1px);
}
