import { AnyConstructor, Mixin } from '../../../../ChronoGraph/class/BetterMixin.js'
import { CalculationIterator } from "../../../../ChronoGraph/primitives/Calculation.js"
import { calculate } from "../../../../ChronoGraph/replica/Entity.js"
import { DateInterval } from "../../../scheduling/DateInterval.js"
import { ConstrainedScheduleMixin } from "./ConstrainedScheduleMixin.js"
import { DelayFromParentMixin } from "./DelayFromParentMixin.js"

/**
 * This mixin implements scheduling children by a delay from their parent event.
 */
export class DelayFromParentScheduleMixin extends Mixin(
    [
        ConstrainedScheduleMixin
    ],
    (base : AnyConstructor<
        ConstrainedScheduleMixin
        ,
        typeof ConstrainedScheduleMixin
    >) => {

    const superProto : InstanceType<typeof base> = base.prototype

    class DelayFromParentScheduleMixin extends base {
        event : DelayFromParentMixin

        // need to have at least one "entity" decorator in the class, otherwise the entity infrastructure won't be setup
        @calculate('endDateConstraintIntervals')
        * calculateEndDateConstraintIntervals () : CalculationIterator<DateInterval[]> {
            const intervals : DateInterval[]                   = yield* superProto.calculateEndDateConstraintIntervals.call(this)

            if (this.event.delayFromParent != null) {
                const parentEvent                              = yield this.event.$.parentEvent
                const parentEarlyEndConstraints                = yield parentEvent.earlySchedule.$.endDateConstraintIntervals

                intervals.push(...parentEarlyEndConstraints)
            }

            return intervals
        }
    }

    return DelayFromParentScheduleMixin
}){}
