import Combo from '../../Core/widget/Combo.js';
import ObjectHelper from '../../Core/helper/ObjectHelper.js';
import DomClassList from '../../Core/helper/util/DomClassList.js';

/**
 * @module Grid/widget/ChecklistFilterCombo
 */

export const VALUE_COUNT = Symbol('valueCount');

/**
 * A specialized {@link Core/widget/Combo} box that displays its items as a list of checkboxes with a search field and
 * "remove all" button, used for filtering data in Grid columns.
 *
 * {@inlineexample Grid/widget/ChecklistFilterCombo.js}
 *
 * To customize its contents you can:
 *
 * - Supply {@link #config-listItemPillTpl} to render additional information in a pill alongside search results
 * - Override {@link #config-listItemTpl} to fully control item rendering
 * - Configure {@link #config-showApplyButton} to control when `change` events are fired
 * - Reconfigure built-in widgets by providing override configs in the {@link #config-picker} config's `tbar`, `bbar`,
 *   and `items`
 * - Configure the {@link #config-store} to change sorting of results
 *
 *  * ## Built-in widgets
 *
 * The built-in `tbar` widgets are:
 *
 * | Widget ref    | Type                          | Weight | Description                   |
 * |---------------|-------------------------------|--------|-------------------------------|
 * | `searchField` | {@link Core.widget.TextField} | 100    | Search the list (in tbar)     |
 *
 * The built-in `items` widgets are:
 *
 * | Widget ref | Type                     | Weight | Description                   |
 * |------------|--------------------------|--------|-------------------------------|
 * | `list`     | {@link Core.widget.List} | 100    | List of selectable options    |
 *
 * The built-in `bbar` buttons are:
 *
 * | Widget ref        | Type                       | Weight | Description                                                        |
 * |-------------------|----------------------------|--------|--------------------------------------------------------------------|
 * | `applyButton`     | {@link Core.widget.Button} | 100    | Apply button, on the bbar, updates field value from list selection |
 * | `selectAllButton` | {@link Core.widget.Button} | 200    | Select All button, on the bbar, selects all list items             |
 * | `removeAllButton` | {@link Core.widget.Button} | 300    | Remove All button, on the bbar, clears all list selections         |
 *
 * ## Removing a built-in item
 *
 * To remove a built-in widget, specify its `ref` as `null` in the `items`, `tbar.items`, or `bbar.items` config:
 *
 * ```javascript
 * {
 *     type : 'checklistfiltercombo',
 *     bbar : {
 *         items : {
 *             selectAllButton : null   // Remove the selectAllButton
 *         }
 *     }
 * }
 * ```
 *
 * ## Customizing a built-in widget
 *
 * To customize a built-in widget, use its `ref` as the key in the `items` config and specify the configs you want
 * to change (they will merge with the widgets default configs):
 *
 * ```javascript
 * {
 *     type : 'checklistfiltercombo',
 *     tbar : {
 *         items : {
 *             searchField : {
 *                 placeholder : 'Search items...'
 *             }
 *         }
 *     }
 * }
 * ```
 *
 * ## Use with the FilterBar feature
 *
 * To use a ChecklistFilterCombo as the filtering UI for a Grid column when using the {@link Grid/feature/FilterBar} feature,
 * specify it using `type` in the `filterField` config inside the column's {@link Grid/column/Column#config-filterable} config:
 *
 * ```
 * {
 *     text       : 'City',
 *     field      : 'city',
 *     filterable : {
 *         filterField : {
 *             type     : 'checklistfiltercombo',
 *             operator : 'isIncludedIn'
 *             // ...any further ChecklistFilterCombo configs
 *         }
 *     }
 * },
 * ```
 *
 * Note the use of the 'isIncludedIn' operator on the `filterField` to get the expected "or" behavior.
 *
 * @extends Core/widget/Combo
 * @classtype checklistfiltercombo
 * @inputfield
 */
export default class ChecklistFilterCombo extends Combo {
    static $name = 'ChecklistFilterCombo';

    static type = 'checklistfiltercombo';

    /**
     * @hideconfigs multiSelect
     */

    static configurable = {
        multiSelect : true,

        listItemTpl : 'up.renderListItem',

        /**
         * Template to render optional content next to list items.
         * @prp {Function}
         * @param {Core.data.Model} record The list item's backing record
         * @returns {String}
         */
        listItemPillTpl : null,

        /**
         * When `true`, shows an "Apply" button in place of the "Select All" button, and does not
         * raise `change` events until the Apply button is clicked.
         * @prp {Boolean}
         * @default false
         */
        showApplyButton : false,

        picker : {
            type : 'panel',
            flex : 1,
            tbar : {
                items : {
                    searchField : {
                        type              : 'textfield',
                        placeholder       : 'L{ChecklistFilterCombo.search}',
                        clearable         : true,
                        weight            : 100,
                        internalListeners : {
                            input : 'up.onSearchInput',
                            clear : 'up.onSearchClear'
                        }
                    }
                }
            },
            items : {
                list : {
                    type              : 'list',
                    multiSelect       : true,
                    emptyText         : 'L{ChecklistFilterCombo.noItems}',
                    weight            : 100,
                    internalListeners : {
                        selectionChange : 'up.onListSelectionChange'
                    }
                }
            },
            bbar : {
                items : {
                    applyButton : {
                        type              : 'button',
                        text              : 'L{ChecklistFilterCombo.apply}',
                        cls               : 'b-transparent',
                        textAlign         : 'left',
                        weight            : 100,
                        visible           : false,
                        internalListeners : {
                            click : 'up.onApplyClick'
                        }
                    },
                    selectAllButton : {
                        type              : 'button',
                        text              : 'L{ChecklistFilterCombo.selectAll}',
                        cls               : 'b-transparent',
                        textAlign         : 'left',
                        weight            : 200,
                        internalListeners : {
                            click : 'up.onSelectAllClick'
                        }
                    },
                    removeAllButton : {
                        type              : 'button',
                        text              : 'L{ChecklistFilterCombo.removeAll}',
                        cls               : 'b-transparent',
                        textAlign         : 'left',
                        weight            : 300,
                        internalListeners : {
                            click : 'up.onRemoveAllClick'
                        }
                    }
                }
            }
        },

        chipView : null,

        store : {
            data : []
        },

        editable : false,

        placeholder : 'L{placeholder}',

        /**
         * The text in the search box, which will filter the list to matching records only. See also {@link #config-filterOperator}.
         * @prp {String}
         */
        searchText : null,

        searchFilterId : 'search',

        /**
         * The initial value of this Combo box. An array of record ids.
         * @config {String[]|Number[]}
         */
        value : []
    };

    changePicker(picker, oldPicker) {
        const merged = picker ? ObjectHelper.merge(
            {
                items : {
                    list : {
                        store   : this.store,
                        itemTpl : this.listItemTpl
                    }
                }
            },
            picker,
            {
                selectedRecordCollection : this.valueCollection,
                cls                      : new DomClassList('b-checklistfiltercombo-picker', picker.cls)
            }
        ) : picker;
        return super.changePicker(merged, oldPicker);
    }

    updateReadOnly(readOnly) {
        super.updateReadOnly(...arguments);
        if (this._picker) {
            this.picker.readOnly = readOnly;
        }
    }

    updateStore(store) {
        const me = this;
        me.detachListeners('storeChange');
        if (store) {
            store.ion({
                name    : 'storeChange',
                change  : me.updateListSelection,
                thisObj : me
            });
        }
        if (me.picker) {
            me.picker.widgetMap.list.store = store;
        }
        me.updateListSelection();
    }

    onListSelectionChange() {
        if (!this.showApplyButton) {
            this.applyListSelection();
        }
        this.picker.widgetMap.list.refresh();
        this.syncInputFieldValue();
    }

    applyListSelection() {
        const { selected } = this.picker.widgetMap.list;
        this.value = selected.map(m => m[this.valueField]);
    }

    onSearchInput({ value }) {
        this.searchText = value;
    }

    onSearchClear() {
        this.searchText = null;
    }

    updateSearchText(searchText) {
        const me = this;

        if (searchText?.trim().length > 0) {
            me.store.filter({
                id            : me.searchFilterId,
                property      : me.displayField,
                operator      : me.filterOperator,
                value         : searchText,
                caseSensitive : false
            });
        }
        else {
            me.store.removeFilter(me.searchFilterId);
        }

        me.picker.widgetMap.searchField.value = searchText;
    }

    changeChipView() {
        return null;
    }

    onSelectAllClick() {
        this.searchText = null;
        this.picker.widgetMap.list.selectAll();
    }

    onRemoveAllClick() {
        this.clear();
        this.picker.widgetMap.list.deselectAll();
    }

    renderListItem(record) {
        const pillHtml = this.listItemPillTpl?.(record);
        return `<div class="b-checklistfiltercombo-item-text">${record.getValue(this.displayField)}</div>${pillHtml ? `<div class="b-checklistfiltercombo-item-pill">${pillHtml}</div>` : ''}`;
    }

    syncInputFieldValue(skipHighlight = true) {
        const me = this;
        if (me.picker) {
            const { values } = me.picker.widgetMap.list.selected;
            me.input.value = values.length > 0 ? me.L('L{filtersSet}', values.length, values) : '';
            if (!skipHighlight) {
                me.highlightChanged();
            }
        }
    }

    updateListSelection() {
        this.picker?.widgetMap.list.select(this.value?.map(id => this.store.find(record => record[this.valueField] === id, true)) ?? [], true);
    }

    set value(value) {
        super.value = value;
        this.updateListSelection();
    }

    get value() {
        return super.value;
    }

    updateShowApplyButton(showApplyButton) {
        this.picker.widgetMap.selectAllButton.hidden = showApplyButton;
        this.picker.widgetMap.applyButton.hidden = !showApplyButton;
    }

    onApplyClick() {
        this.applyListSelection();
    }

    showPicker() {
        super.showPicker(...arguments);
        this.picker.widgetMap.searchField.focus();
    }
}

ChecklistFilterCombo.initClass();
