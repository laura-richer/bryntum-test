import type { AjaxStore, AjaxStoreConfig, CellCopyPaste, CellCopyPasteConfig, CellEdit, CellEditConfig, CellMenu, CellMenuConfig, CellTooltip, CellTooltipConfig, Column, ColumnAutoWidth, ColumnAutoWidthConfig, ColumnDragToolbar, ColumnDragToolbarConfig, ColumnPicker, ColumnPickerConfig, ColumnRename, ColumnRenameConfig, ColumnReorder, ColumnReorderConfig, ColumnResize, ColumnResizeConfig, ColumnStore, ColumnStoreConfig, ContainerItemConfig, DomConfig, Editor, FileDrop, FileDropConfig, FillHandle, FillHandleConfig, Filter, FilterBar, FilterBarConfig, FilterConfig, FormulaProviderConfig, Grid, GridBaseListeners, GridColumnConfig, GridExcelExporter, GridExcelExporterConfig, GridGroupSummary, GridGroupSummaryConfig, GridLocation, GridLockRows, GridLockRowsConfig, GridPdfExport, GridPdfExportConfig, GridPrint, GridPrintConfig, GridRowReorder, GridRowReorderConfig, GridRowResize, GridRowResizeConfig, GridSelectionMode, GridSplit, GridSplitConfig, GridSummary, GridSummaryConfig, Group, GroupConfig, HeaderMenu, HeaderMenuConfig, KeyMapConfig, Mask, MaskConfig, Menu, MenuItem, MenuItemConfig, MergeCells, MergeCellsConfig, Model, ModelConfig, PagingToolbarConfig, Panel, PanelCollapserConfig, PanelCollapserOverlayConfig, PanelHeader, PreserveScrollOptions, QuickFind, QuickFindConfig, RecordPositionContext, RegionResize, RegionResizeConfig, Row, RowCopyPaste, RowCopyPasteConfig, RowEdit, RowEditConfig, RowExpander, RowExpanderConfig, ScrollManager, ScrollManagerConfig, Scroller, ScrollerConfig, Search, SearchConfig, Sort, SortConfig, StateProvider, StickyCells, StickyCellsConfig, Store, StoreConfig, Stripe, StripeConfig, SubGrid, SubGridConfig, TabConfig, Tool, ToolConfig, ToolbarConfig, ToolbarItems, Tree, TreeConfig, TreeGroup, TreeGroupConfig, Widget } from '@bryntum/calendar';
import { GridBase } from '@bryntum/calendar';
declare const _default: import("vue").DefineComponent<__VLS_TypePropsToRuntimeProps<{
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-adopt)
     */
    adopt?: string | HTMLElement | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string | undefined;
    /**
     * Set to `true` to animate row removals caused by filtering.
     */
    animateFilterRemovals?: Boolean | undefined;
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows?: Boolean | undefined;
    /**
     * When the [Tree](https://bryntum.com/products/calendar/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle?: Boolean | undefined;
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: string | HTMLElement | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ariaDescription)
     */
    ariaDescription?: string | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ariaLabel)
     */
    ariaLabel?: string | undefined;
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string | undefined;
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight?: Boolean | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-bbar)
     */
    bbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-bodyCls)
     */
    bodyCls?: string | object | undefined;
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-bubbleEvents)
     */
    bubbleEvents?: object | undefined;
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-callOnFunctions)
     */
    callOnFunctions?: Boolean | undefined;
    /**
     * Set to `false` to crop text in grid cells without ellipsis (...). When enabled, cells containing pure
     * use `display : block`, instead of `display : flex` to allow ellipsis to work.
     * <strong>NOTE</strong> Only supported in browsers that support `:has()` CSS selector
     */
    cellEllipsis?: Boolean | undefined;
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-cls)
     */
    cls?: string | object | undefined;
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: Boolean | undefined;
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-collapsible)
     */
    collapsible?: Boolean | PanelCollapserConfig | PanelCollapserOverlayConfig | undefined;
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines?: Boolean | undefined;
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/calendar/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-columns)
     */
    columns?: ColumnStore | GridColumnConfig[] | ColumnStoreConfig | undefined;
    config?: object | undefined;
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-contentElementCls)
     */
    contentElementCls?: string | object | undefined;
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent?: "contextmenu" | "click" | "dblclick" | undefined;
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-data)
     */
    data?: object[] | Model[] | ModelConfig[] | undefined;
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string> | undefined;
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion?: string | undefined;
    /**
     * Set to `true` to destroy the store when the grid is destroyed.
     */
    destroyStore?: Boolean | undefined;
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-disabled)
     */
    disabled?: Boolean | "inert" | undefined;
    /**
     * Set to `true` to not get a warning when calling [getState](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#function-getState) when there is a column
     * configured without an `id`. But the recommended action is to always configure columns with an `id` when
     * using states.
     */
    disableGridColumnIdWarning?: Boolean | undefined;
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning?: Boolean | undefined;
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-dock)
     */
    dock?: object | "top" | "bottom" | "left" | "right" | "start" | "end" | "header" | "pre-header" | undefined;
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: Boolean | {
        side?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        size?: string | number | undefined;
        inline?: Boolean | undefined;
    } | undefined;
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-elementAttributes)
     */
    elementAttributes?: Record<string, string | null> | undefined;
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when there is no data to display in the grid
     */
    emptyText?: string | DomConfig | undefined;
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-enableSticky)
     */
    enableSticky?: Boolean | undefined;
    /**
     * Set to `true` to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection?: Boolean | undefined;
    /**
     * Set to `true` to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/calendar/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys?: Boolean | undefined;
    extraData?: any;
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn?: Boolean | undefined;
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-fixedRowHeight)
     */
    fixedRowHeight?: Boolean | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: string | number | undefined;
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-footer)
     */
    footer?: string | {
        dock?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        html?: string | undefined;
        cls?: string | undefined;
    } | undefined;
    /**
     * An object which names formula prefixes which will be applied to all columns configured with
     * `formula : true`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-formulaProviders)
     */
    formulaProviders?: Record<string, FormulaProviderConfig> | undefined;
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-fullRowRefresh)
     */
    fullRowRefresh?: Boolean | undefined;
    /**
     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) and
     * expected to return the desired height of that records row. If the function returns a falsy value, Grids
     * configured [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-rowHeight) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-getRowHeight)
     * @param {Core.data.Model} getRowHeight.record Record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight?: ((getRowHeight: {
        record: Model;
    }) => number) | undefined;
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-header)
     */
    header?: string | Boolean | PanelHeader | undefined;
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string | number | undefined;
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: Boolean | undefined;
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters?: Boolean | undefined;
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders?: Boolean | undefined;
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar?: Boolean | undefined;
    /**
     * A CSS class to add to hovered row elements
     */
    hoverCls?: string | undefined;
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string | undefined;
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: Boolean | undefined;
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: string | HTMLElement | undefined;
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: string | HTMLElement | undefined;
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#keyboard-shortcuts) for details
     */
    keyMap?: Record<string, KeyMapConfig> | undefined;
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-listeners)
     */
    listeners?: GridBaseListeners | undefined;
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask?: string | MaskConfig | null | undefined;
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/calendar/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-loadMaskDefaults)
     */
    loadMaskDefaults?: MaskConfig | undefined;
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-loadMaskError)
     */
    loadMaskError?: Boolean | MaskConfig | Mask | undefined;
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: Boolean | undefined;
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime?: number | undefined;
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: string | number | undefined;
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults?: MaskConfig | undefined;
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: string | Boolean | MaskConfig | undefined;
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string | number | undefined;
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string | number | undefined;
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-minHeight)
     */
    minHeight?: string | number | undefined;
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string | number | undefined;
    /**
     * Grid monitors window resize by default.
     */
    monitorResize?: Boolean | undefined;
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-owner)
     */
    owner?: Widget | undefined;
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins?: Function[] | undefined;
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange?: Boolean | undefined;
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll?: Boolean | PreserveScrollOptions | undefined;
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange?: Boolean | undefined;
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: Boolean | undefined;
    /**
     * Set to `true` to make the grid read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-readOnly)
     */
    readOnly?: Boolean | undefined;
    relayStoreEvents?: Boolean | undefined;
    /**
     * Configure this property to allow the widget/component to be resized. Pressing <kbd>Shift</kbd> while resizing will
     * constrain the aspect ratio.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-resizable)
     */
    resizable?: Boolean | {
        minWidth?: number | undefined;
        maxWidth?: number | undefined;
        minHeight?: number | undefined;
        maxHeight?: number | undefined;
        handles?: object | undefined;
    } | undefined;
    /**
     * Set to `false` to only measure cell contents when double-clicking the edge between column headers.
     */
    resizeToFitIncludesHeader?: Boolean | undefined;
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels?: Record<string, string | number> | undefined;
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ripple)
     */
    ripple?: Boolean | {
        delegate?: string | undefined;
        color?: string | undefined;
        radius?: number | undefined;
        clip?: string | undefined;
    } | undefined;
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: HTMLElement | ShadowRoot | undefined;
    /**
     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be
     * overriden by specifying a [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from
     * a column [renderer](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-renderer).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-rowHeight)
     */
    rowHeight?: number | undefined;
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines?: Boolean | undefined;
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-rtl)
     */
    rtl?: Boolean | undefined;
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [Scroller](https://bryntum.com/products/calendar/docs/api/Core/helper/util/Scroller).
     * See the [scrollerClass](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable?: Boolean | ScrollerConfig | Scroller | undefined;
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [Scroller](#Core/helper/util/Scroller).
     */
    scrollerClass?: typeof Scroller | undefined;
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/calendar/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/calendar/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager?: ScrollManagerConfig | ScrollManager | undefined;
    /**
     * Selection configuration settings, change these properties to control how selection works and what can be
     * selected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-selectionMode)
     */
    selectionMode?: GridSelectionMode | undefined;
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells whose
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-showDirty)
     */
    showDirty?: Boolean | {
        duringEdit?: Boolean | undefined;
    } | undefined;
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-stateful)
     */
    stateful?: object | Boolean | string[] | undefined;
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-statefulEvents)
     */
    statefulEvents?: object | string[] | undefined;
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-stateId)
     */
    stateId?: string | undefined;
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-stateProvider)
     */
    stateProvider?: StateProvider | undefined;
    /**
     * The properties of this settings object controls how grid is restored from state data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-stateSettings)
     */
    stateSettings?: {
        restoreUnconfiguredColumns?: Boolean | undefined;
    } | undefined;
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-store)
     */
    store?: Store | StoreConfig | AjaxStore | AjaxStoreConfig | undefined;
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-strips)
     */
    strips?: Record<string, ContainerItemConfig> | undefined;
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-subGridConfigs)
     */
    subGridConfigs?: Record<string, SubGridConfig> | undefined;
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-syncMask)
     */
    syncMask?: string | MaskConfig | null | undefined;
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-tab)
     */
    tab?: Boolean | TabConfig | undefined;
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[] | Widget[] | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-tbar)
     */
    tbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-title)
     */
    title?: string | undefined;
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-tools)
     */
    tools?: Record<string, ToolConfig> | null | undefined;
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration?: number | undefined;
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ui)
     */
    ui?: string | object | undefined;
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number | undefined;
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string | number | undefined;
    /**
     * Allows using `[Ctrl/CMD + C]`, `[Ctrl/CMD + X]` and `[Ctrl/CMD + V]` to cut, copy and paste cell or cell ranges. Also
     * makes cut, copy and paste actions available via the cell context menu.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellCopyPaste)
     */
    cellCopyPasteFeature?: string | object | Boolean | CellCopyPaste | CellCopyPasteConfig | undefined;
    /**
     * Adding this feature to the grid and other Bryntum products which are based on the Grid (i.e. Scheduler, SchedulerPro, and Gantt)
     * enables cell editing. Any subclass of [Field](https://bryntum.com/products/calendar/docs/api/Core/widget/Field) can be used
     * as editor for the [Column](https://bryntum.com/products/calendar/docs/api/Grid/column/Column). The most popular are:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit)
     */
    cellEditFeature?: string | object | Boolean | CellEdit | CellEditConfig | undefined;
    /**
     * Right click to display context menu for cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellMenu)
     */
    cellMenuFeature?: string | object | Boolean | CellMenu | CellMenuConfig | undefined;
    /**
     * Displays a tooltip when hovering cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellTooltip)
     */
    cellTooltipFeature?: string | object | Boolean | CellTooltip | CellTooltipConfig | undefined;
    /**
     * Enables the [autoWidth](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-autoWidth) config for a grid's columns.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnAutoWidth)
     */
    columnAutoWidthFeature?: string | object | Boolean | ColumnAutoWidth | ColumnAutoWidthConfig | undefined;
    /**
     * Displays a toolbar while dragging column headers. Drop on a button in the toolbar to activate a certain function,
     * for example to group by that column. This feature simplifies certain operations on touch devices.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnDragToolbar)
     */
    columnDragToolbarFeature?: string | object | Boolean | ColumnDragToolbar | ColumnDragToolbarConfig | undefined;
    /**
     * Displays a column picker (to show/hide columns) in the header context menu. Columns can be displayed in sub menus
     * by region or tag. Grouped headers are displayed as menu hierarchies.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnPicker)
     */
    columnPickerFeature?: string | object | Boolean | ColumnPicker | ColumnPickerConfig | undefined;
    /**
     * Allows user to rename columns by either right-clicking column header or using keyboard shortcuts when column header
     * is focused.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnRename)
     */
    columnRenameFeature?: string | object | Boolean | ColumnRename | ColumnRenameConfig | undefined;
    /**
     * Allows user to reorder columns by dragging headers. To get notified about column reorder listen to `change` event
     * on [columns](https://bryntum.com/products/calendar/docs/api/Grid/data/ColumnStore) store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnReorder)
     */
    columnReorderFeature?: string | object | Boolean | ColumnReorder | ColumnReorderConfig | undefined;
    /**
     * Enables user to resize columns by dragging a handle on the right hand side of the header. To get notified about column
     * resize listen to `change` event on [columns](https://bryntum.com/products/calendar/docs/api/Grid/data/ColumnStore) store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnResize)
     */
    columnResizeFeature?: string | object | Boolean | ColumnResize | ColumnResizeConfig | undefined;
    /**
     * A feature that allows exporting Grid data to Excel or CSV without involving the server. It uses
     * [TableExporter](https://bryntum.com/products/calendar/docs/api/Grid/util/TableExporter) class as data provider, 3rd party provider to generate XLS files, and
     * [Microsoft XML specification](https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.aspx).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/experimental/ExcelExporter)
     */
    excelExporterFeature?: string | object | Boolean | GridExcelExporter | GridExcelExporterConfig | undefined;
    /**
     * An experimental feature that lets users drop files on a Widget. The widget fires an event when a file is dropped onto it.
     * In the event, you get access to the raw files as strings, that were parsed by calling `readAsBinaryString`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/experimental/FileDrop)
     */
    fileDropFeature?: string | object | Boolean | FileDrop | FileDropConfig | undefined;
    /**
     * This feature adds a fill handle to a Grid range selection, which when dragged, fills the cells being dragged over
     * with values based on the values in the original selected range. This is similar to functionality normally seen in
     * various spreadsheet applications.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/FillHandle)
     */
    fillHandleFeature?: string | object | Boolean | FillHandle | FillHandleConfig | undefined;
    /**
     * Feature that allows filtering of the grid by settings filters on columns. The actual filtering is done by the store.
     * For info on programmatically handling filters, see [StoreFilter](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreFilter).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Filter)
     */
    filterFeature?: string | object | Boolean | Filter | FilterConfig | undefined;
    /**
     * Feature that allows filtering of the grid by entering filters on column headers.
     * The actual filtering is done by the store.
     * For info on programmatically handling filters, see [StoreFilter](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreFilter).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/FilterBar)
     */
    filterBarFeature?: string | object | Boolean | FilterBar | FilterBarConfig | undefined;
    /**
     * Enables rendering and handling of row groups. The actual grouping is done in the store, but triggered by `[shift]` +
     * clicking headers or by using two finger tap (one on header, one anywhere on grid). Use `[shift]` + `[alt]` + click to
     * remove a column grouper.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Group)
     */
    groupFeature?: string | object | Boolean | Group | GroupConfig | undefined;
    /**
     * Displays a summary row as a group footer in a grouped grid. Uses the same configuration options on columns as
     * [Summary](https://bryntum.com/products/calendar/docs/api/Grid/feature/Summary).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/GroupSummary)
     */
    groupSummaryFeature?: string | object | Boolean | GridGroupSummary | GridGroupSummaryConfig | undefined;
    /**
     * Right click column header or focus it and press SPACE key to show the context menu for headers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/HeaderMenu)
     */
    headerMenuFeature?: string | object | Boolean | HeaderMenu | HeaderMenuConfig | undefined;
    /**
     * This feature allows records which satisfy a certain condition to be locked at the top of the grid.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/LockRows)
     */
    lockRowsFeature?: string | object | Boolean | GridLockRows | GridLockRowsConfig | undefined;
    /**
     * This feature merges cells that have the same value in sorted (or [optionally](https://bryntum.com/products/calendar/docs/api/Grid/feature/MergeCells#config-sortedOnly) any) columns
     * configured to [mergeCells](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-mergeCells).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/MergeCells)
     */
    mergeCellsFeature?: string | object | Boolean | MergeCells | MergeCellsConfig | undefined;
    /**
     * Generates PDF/PNG files from the Grid component.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/export/PdfExport)
     */
    pdfExportFeature?: string | object | Boolean | GridPdfExport | GridPdfExportConfig | undefined;
    /**
     * Allows printing Grid contents using browser print dialog.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/export/GridPrint)
     */
    printFeature?: string | object | Boolean | GridPrint | GridPrintConfig | undefined;
    /**
     * Feature that allows the user to search in a column by focusing a cell and typing. Navigate between hits using the
     * keyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/QuickFind)
     */
    quickFindFeature?: string | object | Boolean | QuickFind | QuickFindConfig | undefined;
    /**
     * Makes the splitter between grid [sections](https://bryntum.com/products/calendar/docs/api/Grid/view/SubGrid) draggable, to let users resize, and
     * collapse/expand the sections.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RegionResize)
     */
    regionResizeFeature?: string | object | Boolean | RegionResize | RegionResizeConfig | undefined;
    /**
     * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut-and-paste rows. Also makes cut, copy and paste actions
     * available via the cell context menu.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowCopyPaste)
     */
    rowCopyPasteFeature?: string | object | Boolean | RowCopyPaste | RowCopyPasteConfig | undefined;
    /**
     * This feature allows editing of entire rows in a grid in a docked panel which by default slides out from the right.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowEdit)
     */
    rowEditFeature?: string | object | Boolean | RowEdit | RowEditConfig | undefined;
    /**
     * Enables expanding of Grid rows by either row click or double click, or by adding a separate Grid column which renders
     * a button that expands or collapses the row.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowExpander)
     */
    rowExpanderFeature?: string | object | Boolean | RowExpander | RowExpanderConfig | undefined;
    /**
     * Allows user to reorder rows by dragging them. To get notified about row reorder listen to `change` event
     * on the grid [store](https://bryntum.com/products/calendar/docs/api/Core/data/Store).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowReorder)
     */
    rowReorderFeature?: string | object | Boolean | GridRowReorder | GridRowReorderConfig | undefined;
    /**
     * Enables user to change row height by dragging the bottom row border. After a resize operation, the [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/data/GridRowModel#field-rowHeight)
     * field of the record is updated (when [applyToAllRows](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowResize#config-applyToAllRows) is `false`).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowResize)
     */
    rowResizeFeature?: string | object | Boolean | GridRowResize | GridRowResizeConfig | undefined;
    /**
     * <div class="external-example " data-file="Grid/feature/Search.js"></div>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Search)
     */
    searchFeature?: string | object | Boolean | Search | SearchConfig | undefined;
    /**
     * Allows sorting of grid by clicking (or tapping) headers, also displays which columns grid is sorted by (numbered if
     * using multisort). Use modifier keys for multisorting: [Ctrl/CMD + click] to add sorter, [Ctrl/CMD + Alt + click] to remove sorter.
     * The actual sorting is done by the store, see [Store.sort()](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreSort#function-sort).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Sort)
     */
    sortFeature?: string | object | Boolean | Sort | SortConfig | undefined;
    /**
     * This feature allows splitting the Grid into multiple views, either by using the cell context menu, or
     * programmatically by calling [split()](https://bryntum.com/products/calendar/docs/api/Grid/feature/Split#function-split).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Split)
     */
    splitFeature?: string | object | Boolean | GridSplit | GridSplitConfig | undefined;
    /**
     * A feature which pins configurable content from a grid row to the top of the grid
     * while the row scrolls off the top but is still visible.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/StickyCells)
     */
    stickyCellsFeature?: string | object | Boolean | StickyCells | StickyCellsConfig | undefined;
    /**
     * Stripes rows by adding alternating CSS classes to all row elements (`b-even` and `b-odd`).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Stripe)
     */
    stripeFeature?: string | object | Boolean | Stripe | StripeConfig | undefined;
    /**
     * Displays a summary row in the grid footer.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Summary)
     */
    summaryFeature?: string | object | Boolean | GridSummary | GridSummaryConfig | undefined;
    /**
     * Feature that makes the grid work more like a tree. Included by default in [TreeGrid](https://bryntum.com/products/calendar/docs/api/Grid/view/TreeGrid). Requires
     * exactly one [TreeColumn](https://bryntum.com/products/calendar/docs/api/Grid/column/TreeColumn) among grids columns. That column will have its renderer replaced with a
     * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and
     * also called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Tree)
     */
    treeFeature?: string | object | Boolean | Tree | TreeConfig | undefined;
    /**
     * A feature that allows transforming a flat dataset (or the leaves of a hierarchical) into a tree by specifying a
     * record field per parent level. Parents are generated based on each leaf's value for those fields.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/TreeGroup)
     */
    treeGroupFeature?: string | object | Boolean | TreeGroup | TreeGroupConfig | undefined;
}>, {
    instance: {
        value?: GridBase | undefined;
    };
    refElement: import("vue").Ref<HTMLDivElement | undefined>;
    teleports: import("vue").Ref<Map<any, any>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    focusOut: (params: any) => void;
    gridRowBeforeDragStart: (params: string | ((event: {
        source: GridBase;
        context: {
            records: Model[];
        };
        event: MouseEvent | TouchEvent;
    }) => boolean | void | Promise<boolean>)) => void;
    gridRowBeforeDropFinalize: (params: string | ((event: {
        source: GridBase;
        context: {
            valid: boolean;
            insertBefore: Model;
            parent: Model;
            records: Model[];
            oldPositionContext: RecordPositionContext[];
        };
        event: MouseEvent;
    }) => boolean | void | Promise<boolean>)) => void;
    gridRowDrag: (params: string | ((event: {
        source: GridBase;
        context: {
            valid: boolean;
            insertBefore: Model;
            parent: Model;
            records: Model[];
        };
        event: MouseEvent;
    }) => void)) => void;
    gridRowDragAbort: (params: string | ((event: {
        source: GridBase;
        context: {
            records: Model[];
        };
        event: MouseEvent;
    }) => void)) => void;
    gridRowDragStart: (params: string | ((event: {
        source: GridBase;
        context: {
            records: Model[];
        };
        event: MouseEvent | TouchEvent;
    }) => void)) => void;
    gridRowDrop: (params: string | ((event: {
        source: GridBase;
        context: {
            valid: boolean;
            insertBefore: Model;
            parent: Model;
            records: Model[];
            oldPositionContext: RecordPositionContext[];
        };
        event: MouseEvent;
    }) => void)) => void;
    headerClick: (params: string | ((event: {
        domEvent: Event;
        column: Column;
    }) => boolean | void | Promise<boolean>)) => void;
    headerMenuBeforeShow: (params: string | ((event: {
        source: Grid;
        menu: Menu;
        items: Record<string, MenuItemConfig>;
        column: Column;
    }) => boolean | void | Promise<boolean>)) => void;
    headerMenuItem: (params: string | ((event: {
        source: Grid;
        menu: Menu;
        item: MenuItem;
        column: Column;
    }) => void)) => void;
    headerMenuShow: (params: string | ((event: {
        source: Grid;
        menu: Menu;
        items: Record<string, MenuItemConfig>;
        column: Column;
    }) => void)) => void;
    headerMenuToggleItem: (params: string | ((event: {
        source: Grid;
        menu: Menu;
        item: MenuItem;
        column: Column;
        checked: boolean;
    }) => void)) => void;
    hide: (params: string | ((event: {
        source: Widget;
    }) => void)) => void;
    lockRows: (params: string | ((event: {
        clone: GridBase;
    }) => void)) => void;
    mouseOut: (params: string | ((event: {
        event: MouseEvent;
    }) => void)) => void;
    mouseOver: (params: string | ((event: {
        event: MouseEvent;
    }) => void)) => void;
    paint: (params: string | ((event: {
        source: Widget;
        firstPaint: boolean;
    }) => void)) => void;
    paste: (params: string | ((event: {
        source: Grid;
        clipboardData: string;
        modifiedRecords: Model[];
        targetCell: GridLocation;
        entityName: string;
    }) => void)) => void;
    pdfExport: (params: string | ((event: {
        response?: any;
        error?: Error | undefined;
    }) => void)) => void;
    readOnly: (params: string | ((event: {
        readOnly: boolean;
    }) => void)) => void;
    recompose: (params: string | (() => void)) => void;
    renderRow: (params: string | ((event: {
        source: Grid;
        row: Row;
        record: Model;
        recordIndex: number;
    }) => void)) => void;
    renderRows: (params: string | ((event: {
        source: Grid;
    }) => void)) => void;
    resize: (params: string | ((event: {
        source: Widget;
        width: number;
        height: number;
        oldWidth: number;
        oldHeight: number;
    }) => void)) => void;
    responsive: (params: string | ((event: {
        grid: Grid;
        level: string;
        width: number;
        oldLevel: string;
        oldWidth: number;
    }) => void)) => void;
    rowCollapse: (params: string | ((event: {
        record: Model;
    }) => void)) => void;
    rowExpand: (params: string | ((event: {
        record: Model;
        expandedElements: object;
        widget: Widget;
        widgets: object;
    }) => void)) => void;
    rowMouseEnter: (params: string | ((event: {
        source: Grid;
        record: Model;
        column: Column;
        cellElement: HTMLElement;
        event: MouseEvent;
    }) => void)) => void;
    rowMouseLeave: (params: string | ((event: {
        source: Grid;
        record: Model;
        cellElement: HTMLElement;
        event: MouseEvent;
    }) => void)) => void;
    scroll: (params: string | ((event: {
        source: Grid;
        scrollTop: number;
    }) => void)) => void;
    selectionChange: (params: string | ((event: {
        action: "select" | "deselect";
        mode: "row" | "cell";
        source: Grid;
        deselected: Model[];
        selected: Model[];
        selection: Model[];
        deselectedCells: GridLocation[];
        selectedCells: GridLocation[];
        cellSelection: GridLocation[];
    }) => void)) => void;
    selectionModeChange: (params: string | ((event: {
        selectionMode: object;
    }) => void)) => void;
    show: (params: string | ((event: {
        source: Widget;
    }) => void)) => void;
    split: (params: string | ((event: {
        subViews: GridBase[];
        options: {
            direction: "both" | "horizontal" | "vertical";
            atColumn: Column;
            atRecord: Model;
        };
    }) => void)) => void;
    splitterCollapseClick: (params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
        domEvent: Event;
    }) => boolean | void | Promise<boolean>)) => void;
    splitterDragEnd: (params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
        domEvent: Event;
    }) => void)) => void;
    splitterDragStart: (params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
        domEvent: Event;
    }) => void)) => void;
    splitterExpandClick: (params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
        domEvent: Event;
    }) => boolean | void | Promise<boolean>)) => void;
    startCellEdit: (params: string | ((event: {
        source: Grid;
        editorContext: {
            editor: Editor;
            column: Column;
            record: Model;
            cell: HTMLElement;
            value: any;
        };
    }) => void)) => void;
    startRowEdit: (params: string | ((event: {
        source: Grid;
        editorContext: {
            editor: Panel;
            column: Column;
            record: Model;
            cell: HTMLElement;
        };
    }) => void)) => void;
    subGridCollapse: (params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
    }) => void)) => void;
    subGridExpand: (params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
    }) => void)) => void;
    toggleGroup: (params: string | ((event: {
        groupRecord: Model;
        groupRecords: Model[];
        collapse: boolean;
        allRecords?: boolean | undefined;
    }) => void)) => void;
    toggleNode: (params: string | ((event: {
        record: Model;
        collapse: boolean;
    }) => void)) => void;
    toolClick: (params: string | ((event: {
        source: Tool;
        tool: Tool;
    }) => void)) => void;
    unlockRows: (params: string | ((event: {
        clone: GridBase;
    }) => void)) => void;
    unsplit: (params: string | (() => void)) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<{
    /**
     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's
     * content will be placed inside this element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-adopt)
     */
    adopt?: string | HTMLElement | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.
     */
    alignSelf?: string | undefined;
    /**
     * Set to `true` to animate row removals caused by filtering.
     */
    animateFilterRemovals?: Boolean | undefined;
    /**
     * Set to `false` to prevent remove row animation and remove the delay related to that.
     */
    animateRemovingRows?: Boolean | undefined;
    /**
     * When the [Tree](https://bryntum.com/products/calendar/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this
     * config may be set to `true` to visually animate branch node expand and collapse operations.
     * *This is not supported in Scheduler and Gantt*
     */
    animateTreeNodeToggle?: Boolean | undefined;
    /**
     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at
     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).
     */
    appendTo?: string | HTMLElement | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject
     * into an element which will be linked using the `aria-describedby` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ariaDescription)
     */
    ariaDescription?: string | undefined;
    /**
     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as
     * the `aria-label` attribute.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ariaLabel)
     */
    ariaLabel?: string | undefined;
    /**
     * The `aria-live` value for this widget.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ariaLive)
     * @deprecated Will be removed in 7.0
     */
    ariaLive?: string | undefined;
    /**
     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
     * in a larger grid is really bad for performance.
     */
    autoHeight?: Boolean | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-bbar)
     */
    bbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * Custom CSS classes to add to the panel's body element.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-bodyCls)
     */
    bodyCls?: string | object | undefined;
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-bubbleEvents)
     */
    bubbleEvents?: object | undefined;
    /**
     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-callOnFunctions)
     */
    callOnFunctions?: Boolean | undefined;
    /**
     * Set to `false` to crop text in grid cells without ellipsis (...). When enabled, cells containing pure
     * use `display : block`, instead of `display : flex` to allow ellipsis to work.
     * <strong>NOTE</strong> Only supported in browsers that support `:has()` CSS selector
     */
    cellEllipsis?: Boolean | undefined;
    /**
     * Custom CSS classes to add to element.
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-cls)
     */
    cls?: string | object | undefined;
    /**
     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is
     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).
     */
    collapsed?: Boolean | undefined;
    /**
     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-collapsible)
     */
    collapsible?: Boolean | PanelCollapserConfig | PanelCollapserOverlayConfig | undefined;
    /**
     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.
     */
    columnLines?: Boolean | undefined;
    /**
     * Accepts column definitions for the grid during initialization. They will be used to create
     * [Column](https://bryntum.com/products/calendar/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-columns)
     */
    columns?: ColumnStore | GridColumnConfig[] | ColumnStoreConfig | undefined;
    config?: object | undefined;
    /**
     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).
     * May be specified as a space separated string, or as an object in which property names
     * with truthy values are used as the class names:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-contentElementCls)
     */
    contentElementCls?: string | object | undefined;
    /**
     * Event which is used to show context menus.
     * Available options are: 'contextmenu', 'click', 'dblclick'.
     */
    contextMenuTriggerEvent?: "contextmenu" | "click" | "dblclick" | undefined;
    /**
     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be
     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using
     * the [store](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#property-store) property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-data)
     */
    data?: object[] | Model[] | ModelConfig[] | undefined;
    /**
     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
     */
    dataset?: Record<string, string> | undefined;
    /**
     * Region to which columns are added when they have none specified
     */
    defaultRegion?: string | undefined;
    /**
     * Set to `true` to destroy the store when the grid is destroyed.
     */
    destroyStore?: Boolean | undefined;
    /**
     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget
     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-disabled)
     */
    disabled?: Boolean | "inert" | undefined;
    /**
     * Set to `true` to not get a warning when calling [getState](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#function-getState) when there is a column
     * configured without an `id`. But the recommended action is to always configure columns with an `id` when
     * using states.
     */
    disableGridColumnIdWarning?: Boolean | undefined;
    /**
     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
     * in your model definition.
     */
    disableGridRowModelWarning?: Boolean | undefined;
    /**
     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)
     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,
     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's
     * body. Such widgets are called "edge strips".
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-dock)
     */
    dock?: object | "top" | "bottom" | "left" | "right" | "start" | "end" | "header" | "pre-header" | undefined;
    /**
     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-drawer)
     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.
     * @param {string,number} size The size of the drawer in its collapsible axis.
     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.
     */
    drawer?: Boolean | {
        side?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        size?: string | number | undefined;
        inline?: Boolean | undefined;
    } | undefined;
    /**
     * An object specifying attributes to assign to the root element of this widget.
     * Set `null` value to attribute to remove it.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-elementAttributes)
     */
    elementAttributes?: Record<string, string | null> | undefined;
    /**
     * Text or HTML, or a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when there is no data to display in the grid
     */
    emptyText?: string | DomConfig | undefined;
    /**
     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-enableSticky)
     */
    enableSticky?: Boolean | undefined;
    /**
     * Set to `true` to allow text selection in the grid cells. Note, this cannot be used simultaneously with the
     * `RowReorder` feature.
     */
    enableTextSelection?: Boolean | undefined;
    /**
     * Set to `true` to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is
     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/calendar/docs/api/Core/data/stm/StateTrackingManager).
     */
    enableUndoRedoKeys?: Boolean | undefined;
    extraData?: any;
    /**
     * Set to `true` to stretch the last column in a grid with all fixed width columns
     * to fill extra available space if the grid's width is wider than the sum of all
     * configured column widths.
     */
    fillLastColumn?: Boolean | undefined;
    /**
     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row
     * height, which sacrifices the ability to use rows with variable height to gain a fraction better
     * performance.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-fixedRowHeight)
     */
    fixedRowHeight?: Boolean | undefined;
    /**
     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a
     * flexbox layout. This config allows you to set this widget's
     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.
     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     */
    flex?: string | number | undefined;
    /**
     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,
     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-footer)
     */
    footer?: string | {
        dock?: "top" | "bottom" | "left" | "right" | "start" | "end" | undefined;
        html?: string | undefined;
        cls?: string | undefined;
    } | undefined;
    /**
     * An object which names formula prefixes which will be applied to all columns configured with
     * `formula : true`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-formulaProviders)
     */
    formulaProviders?: Record<string, FormulaProviderConfig> | undefined;
    /**
     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-fullRowRefresh)
     */
    fullRowRefresh?: Boolean | undefined;
    /**
     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) and
     * expected to return the desired height of that records row. If the function returns a falsy value, Grids
     * configured [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-rowHeight) is used.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-getRowHeight)
     * @param {Core.data.Model} getRowHeight.record Record to determine row height for
     * @returns {number} Desired row height
     */
    getRowHeight?: ((getRowHeight: {
        record: Model;
    }) => number) | undefined;
    /**
     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-header)
     */
    header?: string | Boolean | PanelHeader | undefined;
    /**
     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
     * this config is convenient.
     */
    height?: string | number | undefined;
    /**
     * Configure with true to make widget initially hidden.
     */
    hidden?: Boolean | undefined;
    /**
     * Set to `true` to hide the footer elements
     */
    hideFooters?: Boolean | undefined;
    /**
     * Set to `true` to hide the column header elements
     */
    hideHeaders?: Boolean | undefined;
    /**
     * Set to `true` to hide the Grid's horizontal scrollbar(s)
     */
    hideHorizontalScrollbar?: Boolean | undefined;
    /**
     * A CSS class to add to hovered row elements
     */
    hoverCls?: string | undefined;
    /**
     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById
     */
    id?: string | undefined;
    /**
     * Determines if the widgets read-only state should be controlled by its parent.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ignoreParentReadOnly)
     */
    ignoreParentReadOnly?: Boolean | undefined;
    /**
     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertBefore?: string | HTMLElement | undefined;
    /**
     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.
     */
    insertFirst?: string | HTMLElement | undefined;
    /**
     * See [Keyboard shortcuts](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#keyboard-shortcuts) for details
     */
    keyMap?: Record<string, KeyMapConfig> | undefined;
    /**
     * The listener set for this object.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-listeners)
     */
    listeners?: GridBaseListeners | undefined;
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote
     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.
     */
    loadMask?: string | MaskConfig | null | undefined;
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when data is loading. The message and optional configuration from the
     * [loadMask](https://bryntum.com/products/calendar/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do
     * for `maskDefaults`, respectively.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-loadMaskDefaults)
     */
    loadMaskDefaults?: MaskConfig | undefined;
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)
     * when an error occurs loading data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-loadMaskError)
     */
    loadMaskError?: Boolean | MaskConfig | Mask | undefined;
    /**
     * Set to `false` to disable localization of this object.
     */
    localizable?: Boolean | undefined;
    /**
     * Time in ms until a longpress is triggered
     */
    longPressTime?: number | undefined;
    /**
     * Widget's margin. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     */
    margin?: string | number | undefined;
    /**
     * Grids change the `maskDefaults` to cover only their `body` element.
     */
    maskDefaults?: MaskConfig | undefined;
    /**
     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a
     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.
     */
    masked?: string | Boolean | MaskConfig | undefined;
    /**
     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.
     */
    maxHeight?: string | number | undefined;
    /**
     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    maxWidth?: string | number | undefined;
    /**
     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is
     * inserted.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-minHeight)
     */
    minHeight?: string | number | undefined;
    /**
     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that
     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.
     */
    minWidth?: string | number | undefined;
    /**
     * Grid monitors window resize by default.
     */
    monitorResize?: Boolean | undefined;
    /**
     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the
     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case
     * the owner is <strong>always</strong> the encapsulating Container.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-owner)
     */
    owner?: Widget | undefined;
    /**
     * Specify plugins (an array of classes) in config
     */
    plugins?: Function[] | undefined;
    /**
     * True to preserve focused cell after loading new data
     */
    preserveFocusOnDatasetChange?: Boolean | undefined;
    /**
     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote
     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-syncDataOnLoad).
     */
    preserveScroll?: Boolean | PreserveScrollOptions | undefined;
    /**
     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,
     * such as loading new data and filtering.
     */
    preserveScrollOnDatasetChange?: Boolean | undefined;
    /**
     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
     * menu on click etc, since the tooltip would be displayed at the same time.
     */
    preventTooltipOnTouch?: Boolean | undefined;
    /**
     * Set to `true` to make the grid read-only, by disabling any UIs for modifying data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-readOnly)
     */
    readOnly?: Boolean | undefined;
    relayStoreEvents?: Boolean | undefined;
    /**
     * Configure this property to allow the widget/component to be resized. Pressing <kbd>Shift</kbd> while resizing will
     * constrain the aspect ratio.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-resizable)
     */
    resizable?: Boolean | {
        minWidth?: number | undefined;
        maxWidth?: number | undefined;
        minHeight?: number | undefined;
        maxHeight?: number | undefined;
        handles?: object | undefined;
    } | undefined;
    /**
     * Set to `false` to only measure cell contents when double-clicking the edge between column headers.
     */
    resizeToFitIncludesHeader?: Boolean | undefined;
    /**
     * "Break points" for which responsive config to use for columns and css.
     */
    responsiveLevels?: Record<string, string | number> | undefined;
    /**
     * Configure as `true` to have the component display a translucent ripple when its
     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the
     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ripple)
     */
    ripple?: Boolean | {
        delegate?: string | undefined;
        color?: string | undefined;
        radius?: number | undefined;
        clip?: string | undefined;
    } | undefined;
    /**
     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`
     */
    rootElement?: HTMLElement | ShadowRoot | undefined;
    /**
     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be
     * overriden by specifying a [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from
     * a column [renderer](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-renderer).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-rowHeight)
     */
    rowHeight?: number | undefined;
    /**
     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.
     */
    rowLines?: Boolean | undefined;
    /**
     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-rtl)
     */
    rtl?: Boolean | undefined;
    /**
     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [Scroller](https://bryntum.com/products/calendar/docs/api/Core/helper/util/Scroller).
     * See the [scrollerClass](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-scrollerClass) config option.
     */
    scrollable?: Boolean | ScrollerConfig | Scroller | undefined;
    /**
     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [Scroller](#Core/helper/util/Scroller).
     */
    scrollerClass?: typeof Scroller | undefined;
    /**
     * Configuration values for the [ScrollManager](https://bryntum.com/products/calendar/docs/api/Core/util/ScrollManager) class on initialization. Returns the
     * [ScrollManager](https://bryntum.com/products/calendar/docs/api/Core/util/ScrollManager) at runtime.
     */
    scrollManager?: ScrollManagerConfig | ScrollManager | undefined;
    /**
     * Selection configuration settings, change these properties to control how selection works and what can be
     * selected.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-selectionMode)
     */
    selectionMode?: GridSelectionMode | undefined;
    /**
     * Configure as `true` to have the grid show a red "changed" tag in cells whose
     * field value has changed and not yet been committed.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-showDirty)
     */
    showDirty?: Boolean | {
        duringEdit?: Boolean | undefined;
    } | undefined;
    /**
     * This value can be one of the following:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-stateful)
     */
    stateful?: object | Boolean | string[] | undefined;
    /**
     * The events that, when fired by this component, should trigger it to save its state by calling
     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-statefulEvents)
     */
    statefulEvents?: object | string[] | undefined;
    /**
     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is
     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)
     * (if explicitly specified) will be used as the `stateId`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-stateId)
     */
    stateId?: string | undefined;
    /**
     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`
     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-stateProvider)
     */
    stateProvider?: StateProvider | undefined;
    /**
     * The properties of this settings object controls how grid is restored from state data.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-stateSettings)
     */
    stateSettings?: {
        restoreUnconfiguredColumns?: Boolean | undefined;
    } | undefined;
    /**
     * Store that holds records to display in the grid, or a store config object. If the configuration contains
     * a `readUrl`, an `AjaxStore` will be created.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-store)
     */
    store?: Store | StoreConfig | AjaxStore | AjaxStoreConfig | undefined;
    /**
     * An object containing widgets keyed by name. By default (when no `type` is given), strips are
     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use
     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-strips)
     */
    strips?: Record<string, ContainerItemConfig> | undefined;
    /**
     * An object containing sub grid configuration objects keyed by a `region` property.
     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
     * The 'normal' region defaults to use `flex: 1`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-subGridConfigs)
     */
    subGridConfigs?: Record<string, SubGridConfig> | undefined;
    /**
     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager
     * is persisting changes on the server. Set to `null` to disable default sync mask.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-syncMask)
     */
    syncMask?: string | MaskConfig | null | undefined;
    /**
     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a
     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for
     * this widget:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-tab)
     */
    tab?: Boolean | TabConfig | undefined;
    /**
     * When this container is used as a tab in a TabPanel, these items are added to the
     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-tabBarItems)
     */
    tabBarItems?: ToolbarItems[] | Widget[] | undefined;
    /**
     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),
     * or array of config objects representing the child items of a Toolbar.
     * This creates a toolbar docked to the top of the panel immediately below the header.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-tbar)
     */
    tbar?: PagingToolbarConfig | ToolbarConfig | (string | ContainerItemConfig)[] | null | undefined;
    /**
     * A title to display in the header or owning TabPanel. Causes creation and docking of a header
     * to the top if no header is configured.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-title)
     */
    title?: string | undefined;
    /**
     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each
     * property name is the reference by which an instantiated tool may be retrieved from the live
     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-tools)
     */
    tools?: Record<string, ToolConfig> | null | undefined;
    /**
     * Animation transition duration in milliseconds.
     */
    transitionDuration?: number | undefined;
    /**
     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified
     * as a space separated string, an array of strings, or as an object in which property names with truthy
     * values are used as the class names.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-ui)
     */
    ui?: string | object | undefined;
    /**
     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).
     * Higher weights go further down.
     */
    weight?: number | undefined;
    /**
     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
     * this config is convenient.
     */
    width?: string | number | undefined;
    /**
     * Allows using `[Ctrl/CMD + C]`, `[Ctrl/CMD + X]` and `[Ctrl/CMD + V]` to cut, copy and paste cell or cell ranges. Also
     * makes cut, copy and paste actions available via the cell context menu.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellCopyPaste)
     */
    cellCopyPasteFeature?: string | object | Boolean | CellCopyPaste | CellCopyPasteConfig | undefined;
    /**
     * Adding this feature to the grid and other Bryntum products which are based on the Grid (i.e. Scheduler, SchedulerPro, and Gantt)
     * enables cell editing. Any subclass of [Field](https://bryntum.com/products/calendar/docs/api/Core/widget/Field) can be used
     * as editor for the [Column](https://bryntum.com/products/calendar/docs/api/Grid/column/Column). The most popular are:
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit)
     */
    cellEditFeature?: string | object | Boolean | CellEdit | CellEditConfig | undefined;
    /**
     * Right click to display context menu for cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellMenu)
     */
    cellMenuFeature?: string | object | Boolean | CellMenu | CellMenuConfig | undefined;
    /**
     * Displays a tooltip when hovering cells.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellTooltip)
     */
    cellTooltipFeature?: string | object | Boolean | CellTooltip | CellTooltipConfig | undefined;
    /**
     * Enables the [autoWidth](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-autoWidth) config for a grid's columns.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnAutoWidth)
     */
    columnAutoWidthFeature?: string | object | Boolean | ColumnAutoWidth | ColumnAutoWidthConfig | undefined;
    /**
     * Displays a toolbar while dragging column headers. Drop on a button in the toolbar to activate a certain function,
     * for example to group by that column. This feature simplifies certain operations on touch devices.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnDragToolbar)
     */
    columnDragToolbarFeature?: string | object | Boolean | ColumnDragToolbar | ColumnDragToolbarConfig | undefined;
    /**
     * Displays a column picker (to show/hide columns) in the header context menu. Columns can be displayed in sub menus
     * by region or tag. Grouped headers are displayed as menu hierarchies.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnPicker)
     */
    columnPickerFeature?: string | object | Boolean | ColumnPicker | ColumnPickerConfig | undefined;
    /**
     * Allows user to rename columns by either right-clicking column header or using keyboard shortcuts when column header
     * is focused.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnRename)
     */
    columnRenameFeature?: string | object | Boolean | ColumnRename | ColumnRenameConfig | undefined;
    /**
     * Allows user to reorder columns by dragging headers. To get notified about column reorder listen to `change` event
     * on [columns](https://bryntum.com/products/calendar/docs/api/Grid/data/ColumnStore) store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnReorder)
     */
    columnReorderFeature?: string | object | Boolean | ColumnReorder | ColumnReorderConfig | undefined;
    /**
     * Enables user to resize columns by dragging a handle on the right hand side of the header. To get notified about column
     * resize listen to `change` event on [columns](https://bryntum.com/products/calendar/docs/api/Grid/data/ColumnStore) store.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnResize)
     */
    columnResizeFeature?: string | object | Boolean | ColumnResize | ColumnResizeConfig | undefined;
    /**
     * A feature that allows exporting Grid data to Excel or CSV without involving the server. It uses
     * [TableExporter](https://bryntum.com/products/calendar/docs/api/Grid/util/TableExporter) class as data provider, 3rd party provider to generate XLS files, and
     * [Microsoft XML specification](https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.aspx).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/experimental/ExcelExporter)
     */
    excelExporterFeature?: string | object | Boolean | GridExcelExporter | GridExcelExporterConfig | undefined;
    /**
     * An experimental feature that lets users drop files on a Widget. The widget fires an event when a file is dropped onto it.
     * In the event, you get access to the raw files as strings, that were parsed by calling `readAsBinaryString`.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/experimental/FileDrop)
     */
    fileDropFeature?: string | object | Boolean | FileDrop | FileDropConfig | undefined;
    /**
     * This feature adds a fill handle to a Grid range selection, which when dragged, fills the cells being dragged over
     * with values based on the values in the original selected range. This is similar to functionality normally seen in
     * various spreadsheet applications.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/FillHandle)
     */
    fillHandleFeature?: string | object | Boolean | FillHandle | FillHandleConfig | undefined;
    /**
     * Feature that allows filtering of the grid by settings filters on columns. The actual filtering is done by the store.
     * For info on programmatically handling filters, see [StoreFilter](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreFilter).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Filter)
     */
    filterFeature?: string | object | Boolean | Filter | FilterConfig | undefined;
    /**
     * Feature that allows filtering of the grid by entering filters on column headers.
     * The actual filtering is done by the store.
     * For info on programmatically handling filters, see [StoreFilter](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreFilter).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/FilterBar)
     */
    filterBarFeature?: string | object | Boolean | FilterBar | FilterBarConfig | undefined;
    /**
     * Enables rendering and handling of row groups. The actual grouping is done in the store, but triggered by `[shift]` +
     * clicking headers or by using two finger tap (one on header, one anywhere on grid). Use `[shift]` + `[alt]` + click to
     * remove a column grouper.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Group)
     */
    groupFeature?: string | object | Boolean | Group | GroupConfig | undefined;
    /**
     * Displays a summary row as a group footer in a grouped grid. Uses the same configuration options on columns as
     * [Summary](https://bryntum.com/products/calendar/docs/api/Grid/feature/Summary).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/GroupSummary)
     */
    groupSummaryFeature?: string | object | Boolean | GridGroupSummary | GridGroupSummaryConfig | undefined;
    /**
     * Right click column header or focus it and press SPACE key to show the context menu for headers.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/HeaderMenu)
     */
    headerMenuFeature?: string | object | Boolean | HeaderMenu | HeaderMenuConfig | undefined;
    /**
     * This feature allows records which satisfy a certain condition to be locked at the top of the grid.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/LockRows)
     */
    lockRowsFeature?: string | object | Boolean | GridLockRows | GridLockRowsConfig | undefined;
    /**
     * This feature merges cells that have the same value in sorted (or [optionally](https://bryntum.com/products/calendar/docs/api/Grid/feature/MergeCells#config-sortedOnly) any) columns
     * configured to [mergeCells](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-mergeCells).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/MergeCells)
     */
    mergeCellsFeature?: string | object | Boolean | MergeCells | MergeCellsConfig | undefined;
    /**
     * Generates PDF/PNG files from the Grid component.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/export/PdfExport)
     */
    pdfExportFeature?: string | object | Boolean | GridPdfExport | GridPdfExportConfig | undefined;
    /**
     * Allows printing Grid contents using browser print dialog.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/export/GridPrint)
     */
    printFeature?: string | object | Boolean | GridPrint | GridPrintConfig | undefined;
    /**
     * Feature that allows the user to search in a column by focusing a cell and typing. Navigate between hits using the
     * keyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/QuickFind)
     */
    quickFindFeature?: string | object | Boolean | QuickFind | QuickFindConfig | undefined;
    /**
     * Makes the splitter between grid [sections](https://bryntum.com/products/calendar/docs/api/Grid/view/SubGrid) draggable, to let users resize, and
     * collapse/expand the sections.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RegionResize)
     */
    regionResizeFeature?: string | object | Boolean | RegionResize | RegionResizeConfig | undefined;
    /**
     * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut-and-paste rows. Also makes cut, copy and paste actions
     * available via the cell context menu.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowCopyPaste)
     */
    rowCopyPasteFeature?: string | object | Boolean | RowCopyPaste | RowCopyPasteConfig | undefined;
    /**
     * This feature allows editing of entire rows in a grid in a docked panel which by default slides out from the right.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowEdit)
     */
    rowEditFeature?: string | object | Boolean | RowEdit | RowEditConfig | undefined;
    /**
     * Enables expanding of Grid rows by either row click or double click, or by adding a separate Grid column which renders
     * a button that expands or collapses the row.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowExpander)
     */
    rowExpanderFeature?: string | object | Boolean | RowExpander | RowExpanderConfig | undefined;
    /**
     * Allows user to reorder rows by dragging them. To get notified about row reorder listen to `change` event
     * on the grid [store](https://bryntum.com/products/calendar/docs/api/Core/data/Store).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowReorder)
     */
    rowReorderFeature?: string | object | Boolean | GridRowReorder | GridRowReorderConfig | undefined;
    /**
     * Enables user to change row height by dragging the bottom row border. After a resize operation, the [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/data/GridRowModel#field-rowHeight)
     * field of the record is updated (when [applyToAllRows](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowResize#config-applyToAllRows) is `false`).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowResize)
     */
    rowResizeFeature?: string | object | Boolean | GridRowResize | GridRowResizeConfig | undefined;
    /**
     * <div class="external-example " data-file="Grid/feature/Search.js"></div>
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Search)
     */
    searchFeature?: string | object | Boolean | Search | SearchConfig | undefined;
    /**
     * Allows sorting of grid by clicking (or tapping) headers, also displays which columns grid is sorted by (numbered if
     * using multisort). Use modifier keys for multisorting: [Ctrl/CMD + click] to add sorter, [Ctrl/CMD + Alt + click] to remove sorter.
     * The actual sorting is done by the store, see [Store.sort()](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreSort#function-sort).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Sort)
     */
    sortFeature?: string | object | Boolean | Sort | SortConfig | undefined;
    /**
     * This feature allows splitting the Grid into multiple views, either by using the cell context menu, or
     * programmatically by calling [split()](https://bryntum.com/products/calendar/docs/api/Grid/feature/Split#function-split).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Split)
     */
    splitFeature?: string | object | Boolean | GridSplit | GridSplitConfig | undefined;
    /**
     * A feature which pins configurable content from a grid row to the top of the grid
     * while the row scrolls off the top but is still visible.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/StickyCells)
     */
    stickyCellsFeature?: string | object | Boolean | StickyCells | StickyCellsConfig | undefined;
    /**
     * Stripes rows by adding alternating CSS classes to all row elements (`b-even` and `b-odd`).
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Stripe)
     */
    stripeFeature?: string | object | Boolean | Stripe | StripeConfig | undefined;
    /**
     * Displays a summary row in the grid footer.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Summary)
     */
    summaryFeature?: string | object | Boolean | GridSummary | GridSummaryConfig | undefined;
    /**
     * Feature that makes the grid work more like a tree. Included by default in [TreeGrid](https://bryntum.com/products/calendar/docs/api/Grid/view/TreeGrid). Requires
     * exactly one [TreeColumn](https://bryntum.com/products/calendar/docs/api/Grid/column/TreeColumn) among grids columns. That column will have its renderer replaced with a
     * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and
     * also called.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Tree)
     */
    treeFeature?: string | object | Boolean | Tree | TreeConfig | undefined;
    /**
     * A feature that allows transforming a flat dataset (or the leaves of a hierarchical) into a tree by specifying a
     * record field per parent level. Parents are generated based on each leaf's value for those fields.
     * ...
     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/TreeGroup)
     */
    treeGroupFeature?: string | object | Boolean | TreeGroup | TreeGroupConfig | undefined;
}>>> & {
    onFocusOut?: ((params: any) => any) | undefined;
    onGridRowBeforeDragStart?: ((params: string | ((event: {
        source: GridBase;
        context: {
            records: Model[];
        };
        event: MouseEvent | TouchEvent;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onGridRowBeforeDropFinalize?: ((params: string | ((event: {
        source: GridBase;
        context: {
            valid: boolean;
            insertBefore: Model;
            parent: Model;
            records: Model[];
            oldPositionContext: RecordPositionContext[];
        };
        event: MouseEvent;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onGridRowDrag?: ((params: string | ((event: {
        source: GridBase;
        context: {
            valid: boolean;
            insertBefore: Model;
            parent: Model;
            records: Model[];
        };
        event: MouseEvent;
    }) => void)) => any) | undefined;
    onGridRowDragAbort?: ((params: string | ((event: {
        source: GridBase;
        context: {
            records: Model[];
        };
        event: MouseEvent;
    }) => void)) => any) | undefined;
    onGridRowDragStart?: ((params: string | ((event: {
        source: GridBase;
        context: {
            records: Model[];
        };
        event: MouseEvent | TouchEvent;
    }) => void)) => any) | undefined;
    onGridRowDrop?: ((params: string | ((event: {
        source: GridBase;
        context: {
            valid: boolean;
            insertBefore: Model;
            parent: Model;
            records: Model[];
            oldPositionContext: RecordPositionContext[];
        };
        event: MouseEvent;
    }) => void)) => any) | undefined;
    onHeaderClick?: ((params: string | ((event: {
        domEvent: Event;
        column: Column;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onHeaderMenuBeforeShow?: ((params: string | ((event: {
        source: Grid;
        menu: Menu;
        items: Record<string, MenuItemConfig>;
        column: Column;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onHeaderMenuItem?: ((params: string | ((event: {
        source: Grid;
        menu: Menu;
        item: MenuItem;
        column: Column;
    }) => void)) => any) | undefined;
    onHeaderMenuShow?: ((params: string | ((event: {
        source: Grid;
        menu: Menu;
        items: Record<string, MenuItemConfig>;
        column: Column;
    }) => void)) => any) | undefined;
    onHeaderMenuToggleItem?: ((params: string | ((event: {
        source: Grid;
        menu: Menu;
        item: MenuItem;
        column: Column;
        checked: boolean;
    }) => void)) => any) | undefined;
    onHide?: ((params: string | ((event: {
        source: Widget;
    }) => void)) => any) | undefined;
    onLockRows?: ((params: string | ((event: {
        clone: GridBase;
    }) => void)) => any) | undefined;
    onMouseOut?: ((params: string | ((event: {
        event: MouseEvent;
    }) => void)) => any) | undefined;
    onMouseOver?: ((params: string | ((event: {
        event: MouseEvent;
    }) => void)) => any) | undefined;
    onPaint?: ((params: string | ((event: {
        source: Widget;
        firstPaint: boolean;
    }) => void)) => any) | undefined;
    onPaste?: ((params: string | ((event: {
        source: Grid;
        clipboardData: string;
        modifiedRecords: Model[];
        targetCell: GridLocation;
        entityName: string;
    }) => void)) => any) | undefined;
    onPdfExport?: ((params: string | ((event: {
        response?: any;
        error?: Error | undefined;
    }) => void)) => any) | undefined;
    onReadOnly?: ((params: string | ((event: {
        readOnly: boolean;
    }) => void)) => any) | undefined;
    onRecompose?: ((params: string | (() => void)) => any) | undefined;
    onRenderRow?: ((params: string | ((event: {
        source: Grid;
        row: Row;
        record: Model;
        recordIndex: number;
    }) => void)) => any) | undefined;
    onRenderRows?: ((params: string | ((event: {
        source: Grid;
    }) => void)) => any) | undefined;
    onResize?: ((params: string | ((event: {
        source: Widget;
        width: number;
        height: number;
        oldWidth: number;
        oldHeight: number;
    }) => void)) => any) | undefined;
    onResponsive?: ((params: string | ((event: {
        grid: Grid;
        level: string;
        width: number;
        oldLevel: string;
        oldWidth: number;
    }) => void)) => any) | undefined;
    onRowCollapse?: ((params: string | ((event: {
        record: Model;
    }) => void)) => any) | undefined;
    onRowExpand?: ((params: string | ((event: {
        record: Model;
        expandedElements: object;
        widget: Widget;
        widgets: object;
    }) => void)) => any) | undefined;
    onRowMouseEnter?: ((params: string | ((event: {
        source: Grid;
        record: Model;
        column: Column;
        cellElement: HTMLElement;
        event: MouseEvent;
    }) => void)) => any) | undefined;
    onRowMouseLeave?: ((params: string | ((event: {
        source: Grid;
        record: Model;
        cellElement: HTMLElement;
        event: MouseEvent;
    }) => void)) => any) | undefined;
    onScroll?: ((params: string | ((event: {
        source: Grid;
        scrollTop: number;
    }) => void)) => any) | undefined;
    onSelectionChange?: ((params: string | ((event: {
        action: "select" | "deselect";
        mode: "row" | "cell";
        source: Grid;
        deselected: Model[];
        selected: Model[];
        selection: Model[];
        deselectedCells: GridLocation[];
        selectedCells: GridLocation[];
        cellSelection: GridLocation[];
    }) => void)) => any) | undefined;
    onSelectionModeChange?: ((params: string | ((event: {
        selectionMode: object;
    }) => void)) => any) | undefined;
    onShow?: ((params: string | ((event: {
        source: Widget;
    }) => void)) => any) | undefined;
    onSplit?: ((params: string | ((event: {
        subViews: GridBase[];
        options: {
            direction: "both" | "horizontal" | "vertical";
            atColumn: Column;
            atRecord: Model;
        };
    }) => void)) => any) | undefined;
    onSplitterCollapseClick?: ((params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
        domEvent: Event;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onSplitterDragEnd?: ((params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
        domEvent: Event;
    }) => void)) => any) | undefined;
    onSplitterDragStart?: ((params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
        domEvent: Event;
    }) => void)) => any) | undefined;
    onSplitterExpandClick?: ((params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
        domEvent: Event;
    }) => boolean | void | Promise<boolean>)) => any) | undefined;
    onStartCellEdit?: ((params: string | ((event: {
        source: Grid;
        editorContext: {
            editor: Editor;
            column: Column;
            record: Model;
            cell: HTMLElement;
            value: any;
        };
    }) => void)) => any) | undefined;
    onStartRowEdit?: ((params: string | ((event: {
        source: Grid;
        editorContext: {
            editor: Panel;
            column: Column;
            record: Model;
            cell: HTMLElement;
        };
    }) => void)) => any) | undefined;
    onSubGridCollapse?: ((params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
    }) => void)) => any) | undefined;
    onSubGridExpand?: ((params: string | ((event: {
        source: Grid;
        subGrid: SubGrid;
    }) => void)) => any) | undefined;
    onToggleGroup?: ((params: string | ((event: {
        groupRecord: Model;
        groupRecords: Model[];
        collapse: boolean;
        allRecords?: boolean | undefined;
    }) => void)) => any) | undefined;
    onToggleNode?: ((params: string | ((event: {
        record: Model;
        collapse: boolean;
    }) => void)) => any) | undefined;
    onToolClick?: ((params: string | ((event: {
        source: Tool;
        tool: Tool;
    }) => void)) => any) | undefined;
    onUnlockRows?: ((params: string | ((event: {
        clone: GridBase;
    }) => void)) => any) | undefined;
    onUnsplit?: ((params: string | (() => void)) => any) | undefined;
}, {}, {}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
