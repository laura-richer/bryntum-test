{"version":3,"file":"LMlo1aiy.js","sources":["../../src/components/BryntumButtonGroup.vue"],"sourcesContent":["<!-- Vue 3 wrapper for Bryntum ButtonGroup -->\n\n<template>\n    <div ref=\"refElement\">\n\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n/* eslint-disable no-undef */\n\nimport { getCurrentInstance, onBeforeUnmount, onMounted, provide, ref, watch, toRaw } from 'vue';\n\nimport type { AlignSpec, Base, Button, ButtonConfig, ButtonGroupListeners, Container, ContainerItemConfig, ContainerLayoutConfig, DomConfig, KeyMapConfig, MaskConfig, Model, Rectangle, Scroller, ScrollerConfig, TabConfig, ToolbarItems, TooltipConfig, VueConfig, Widget } from '@bryntum/calendar';\nimport { ButtonGroup } from '@bryntum/calendar';\n\nimport { WrapperHelper } from '../helper/WrapperHelper';\n\ndefineProps<{\n    // Configs\n    /**\n     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's\n     * content will be placed inside this element.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-adopt)\n     */\n    adopt ? : HTMLElement|string\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-align)\n     */\n    align ? : AlignSpec|string\n    /**\n     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a\n     * flexbox layout. This config allows you to set this widget's\n     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.\n     */\n    alignSelf ? : string\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) and being shown through [showBy](#Core/widget/Widget#function-showBy).*\n     * `true` to show a connector arrow pointing to the align target.\n     */\n    anchor ? : Boolean\n    /**\n     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at\n     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).\n     */\n    appendTo ? : HTMLElement|string\n    /**\n     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject\n     * into an element which will be linked using the `aria-describedby` attribute.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-ariaDescription)\n     */\n    ariaDescription ? : string\n    /**\n     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as\n     * the `aria-label` attribute.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-ariaLabel)\n     */\n    ariaLabel ? : string\n    /**\n     * The `aria-live` value for this widget.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-ariaLive)\n     * @deprecated Will be removed in 7.0\n     */\n    ariaLive ? : string\n    /**\n     * Update assigned [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record) automatically on field changes\n     */\n    autoUpdateRecord ? : Boolean\n    /**\n     * An object where property names with a truthy value indicate which events should bubble up the ownership\n     * hierarchy when triggered.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-bubbleEvents)\n     */\n    bubbleEvents ? : object\n    /**\n     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-callOnFunctions)\n     */\n    callOnFunctions ? : Boolean\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * Set to `true` to centre the Widget in browser viewport space.\n     */\n    centered ? : Boolean\n    /**\n     * Custom CSS class to add to element. When using raised buttons (cls 'b-raised' on the buttons), the group\n     * will look nicer if you also set that cls on the group.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-cls)\n     */\n    cls ? : string\n    /**\n     * Default color to apply to all contained buttons, see [Button#color](https://bryntum.com/products/calendar/docs/api/Core/widget/Button#config-color).\n     * Individual buttons can override the default.\n     */\n    color ? : string\n    config ? : object\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating) or [positioned](#Core/widget/Widget#config-positioned).*\n     * Element, Widget or Rectangle to which this Widget is constrained.\n     */\n    constrainTo ? : HTMLElement|Widget|Rectangle\n    /**\n     * The HTML content that coexists with sibling elements which may have been added to the\n     * [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement) by plugins and features.\n     * When specifying html, this widget's element will also have the [htmlCls](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-htmlCls)\n     * class added to its classList, to allow targeted styling.\n     */\n    content ? : string\n    /**\n     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).\n     * May be specified as a space separated string, or as an object in which property names\n     * with truthy values are used as the class names:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-contentElementCls)\n     */\n    contentElementCls ? : string|object\n    /**\n     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)\n     */\n    dataset ? : Record<string, string>\n    /**\n     * The name of the property to set when a single value is to be applied to this Widget. Such as when used\n     * in a grid WidgetColumn, this is the property to which the column's `field` is applied.\n     */\n    defaultBindProperty ? : string\n    /**\n     * A [query](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#function-query) selector function which can identify the descendant widget to which\n     * focus should be directed by default.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-defaultFocus)\n     * @param {Core.widget.Widget} widget Widget passed to method\n     * @returns {boolean} truthy value if widget is the default one\n     */\n    defaultFocus ? : ((widget: Widget) => Boolean)|string\n    /**\n     * A config object containing default settings to apply to all child widgets.\n     */\n    defaults ? : ContainerItemConfig\n    /**\n     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget\n     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-disabled)\n     */\n    disabled ? : Boolean|'inert'\n    /**\n     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)\n     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,\n     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's\n     * body. Such widgets are called \"edge strips\".\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-dock)\n     */\n    dock ? : 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´\n     * property which controls when a drag should start.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-draggable)\n     */\n    draggable ? : Boolean|{\n        handleSelector?: string\n    }\n    /**\n     * An object specifying attributes to assign to the root element of this widget.\n     * Set `null` value to attribute to remove it.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-elementAttributes)\n     */\n    elementAttributes ? : Record<string, string|null>\n    extraData ? : any\n    /**\n     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a\n     * flexbox layout. This config allows you to set this widget's\n     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.\n     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.\n     * numeric-only values are interpreted as the `flex-grow` value.\n     */\n    flex ? : number|string\n    /**\n     * Set to `true` to move the widget out of the document flow and position it\n     * absolutely in browser viewport space.\n     */\n    floating ? : Boolean\n    /**\n     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which\n     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases\n     * this config is convenient.\n     */\n    height ? : string|number\n    /**\n     * Configure with true to make widget initially hidden.\n     */\n    hidden ? : Boolean\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-hideAnimation)\n     */\n    hideAnimation ? : Boolean|object\n    /**\n     * Specify `true` to make this container hide when it has no visible children (Either empty\n     * or all children hidden).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-hideWhenEmpty)\n     */\n    hideWhenEmpty ? : Boolean\n    /**\n     * The HTML to display initially or a function returning the markup (called at widget construction time).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-html)\n     * @param {Core.widget.Widget} widget The calling Widget\n     * @returns {string}\n     */\n    html ? : string|((widget: Widget) => string)|DomConfig|DomConfig[]|VueConfig\n    /**\n     * The CSS class(es) to add when HTML content is being applied to this widget.\n     */\n    htmlCls ? : string|object\n    /**\n     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById\n     */\n    id ? : string\n    /**\n     * Determines if the widgets read-only state should be controlled by its parent.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-ignoreParentReadOnly)\n     */\n    ignoreParentReadOnly ? : Boolean\n    /**\n     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.\n     */\n    insertBefore ? : HTMLElement|string\n    /**\n     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.\n     */\n    insertFirst ? : HTMLElement|string\n    /**\n     * An optional CSS class to add to child items of this container.\n     */\n    itemCls ? : string\n    /**\n     * An array of Buttons or typed Button config objects.\n     */\n    items ? : ButtonConfig[]|Button[]\n    /**\n     * An object whose keys are the [key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) name\n     * and optional modifier prefixes: `'Ctrl+'`, `'Alt+'`, `'Meta+'`, and `'Shift+'` (case-insensitive). The values\n     * are the name of the instance method to call when the keystroke is received.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-keyMap)\n     */\n    keyMap ? : Record<string, KeyMapConfig>\n    /**\n     * The short name of a helper class which manages rendering and styling of child items.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-layout)\n     */\n    layout ? : string|ContainerLayoutConfig\n    /**\n     * The CSS style properties to apply to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-layoutStyle)\n     */\n    layoutStyle ? : object\n    /**\n     * An array of [child item](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items) *config objects* which is to be converted into\n     * instances only when this Container is rendered, rather than eagerly at construct time.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-lazyItems)\n     */\n    lazyItems ? : Record<string, ContainerItemConfig>|ContainerItemConfig[]|Widget[]\n    /**\n     * The listener set for this object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-listeners)\n     */\n    listeners ? : ButtonGroupListeners\n    /**\n     * A class translations of which are used for translating this entity.\n     * This is often used when translations of an item are defined on its container class.\n     * For example:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-localeClass)\n     */\n    localeClass ? : typeof Base\n    /**\n     * Set to `false` to disable localization of this object.\n     */\n    localizable ? : Boolean\n    /**\n     * List of properties which values should be translated automatically upon a locale applying.\n     * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),\n     * you could use 'localeKey' meta configuration.\n     * Example:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-localizableProperties)\n     */\n    localizableProperties ? : string[]\n    /**\n     * Widget's margin. This may be configured as a single number or a `TRBL` format string.\n     * numeric-only values are interpreted as pixels.\n     */\n    margin ? : number|string\n    /**\n     * This config object contains the defaults for the [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) created for the\n     * [masked](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-masked) config. Any properties specified in the `masked` config will override these\n     * values.\n     */\n    maskDefaults ? : MaskConfig\n    /**\n     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a\n     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.\n     */\n    masked ? : Boolean|string|MaskConfig\n    /**\n     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.\n     */\n    maxHeight ? : string|number\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-maximizeOnMobile)\n     */\n    maximizeOnMobile ? : number|string\n    /**\n     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.\n     */\n    maxWidth ? : string|number\n    /**\n     * The element's minHeight. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.\n     */\n    minHeight ? : string|number\n    /**\n     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.\n     */\n    minWidth ? : string|number\n    /**\n     * When this is configured as `true` a [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)\n     * is used to monitor this element for size changes caused by either style manipulation, or by CSS\n     * layout.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-monitorResize)\n     */\n    monitorResize ? : Boolean\n    /**\n     * An object containing default config objects which may be referenced by name in the [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items)\n     * config. For example, a specialized [Menu](https://bryntum.com/products/calendar/docs/api/Core/widget/Menu) subclass may have a `namedItems` default\n     * value defined like this:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-namedItems)\n     */\n    namedItems ? : Record<string, ContainerItemConfig>\n    /**\n     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the\n     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case\n     * the owner is <strong>always</strong> the encapsulating Container.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-owner)\n     */\n    owner ? : Widget\n    /**\n     * Set to `true` when a widget is rendered into another widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement), but must\n     * not participate in the standard layout of that widget, and must be positioned relatively to that\n     * widget's [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-positioned)\n     */\n    positioned ? : Boolean\n    /**\n     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a\n     * menu on click etc, since the tooltip would be displayed at the same time.\n     */\n    preventTooltipOnTouch ? : Boolean\n    /**\n     * Whether this widget is read-only.  This is only valid if the widget is an input\n     * field, <strong>or contains input fields at any depth</strong>.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-readOnly)\n     */\n    readOnly ? : Boolean\n    /**\n     * [Record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) whose values will be used to populate fields in the container.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-record)\n     */\n    record ? : Model\n    relayStoreEvents ? : Boolean\n    /**\n     * Configure as `true` to have the component display a translucent ripple when its\n     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the\n     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-ripple)\n     */\n    ripple ? : Boolean|{\n        delegate?: string\n        color?: string\n        radius?: number\n        clip?: string\n    }\n    /**\n     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`\n     */\n    rootElement ? : ShadowRoot|HTMLElement\n    /**\n     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-rtl)\n     */\n    rtl ? : Boolean\n    /**\n     * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget may scroll\n     * in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are\n     * applied to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated to\n     * CSS overflow properties thus:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-scrollable)\n     */\n    scrollable ? : Boolean|ScrollerConfig|Scroller\n    /**\n     * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to `true`).\n     * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.\n     */\n    scrollAction ? : 'hide'|'realign'|null\n    /**\n     * *Only valid if this Widget is [floating](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-floating).*\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-showAnimation)\n     */\n    showAnimation ? : Boolean|object\n    /**\n     * Set to `false` to not show the tooltip when this widget is [disabled](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-disabled)\n     */\n    showTooltipWhenDisabled ? : Boolean\n    /**\n     * Specify `true` to match fields by their `name` property only when assigning a [record](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-record),\n     * without falling back to `ref`.\n     */\n    strictRecordMapping ? : Boolean\n    /**\n     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a\n     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for\n     * this widget:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-tab)\n     */\n    tab ? : Boolean|TabConfig\n    /**\n     * When this container is used as a tab in a TabPanel, these items are added to the\n     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-tabBarItems)\n     */\n    tabBarItems ? : ToolbarItems[]|Widget[]\n    /**\n     * The tag name of this Widget's root element\n     */\n    tag ? : string\n    /**\n     * Text alignment: 'left', 'center' or 'right'. Also accepts direction neutral 'start' and 'end'.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-textAlign)\n     */\n    textAlign ? : 'left'|'center'|'right'|'start'|'end'\n    /**\n     * Specify `true` for a container used to show text markup. It will apply the CSS class `b-text-content`\n     * which specifies a default max-width that makes long text more readable.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-textContent)\n     */\n    textContent ? : Boolean\n    /**\n     * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)\n     */\n    title ? : string\n    /**\n     * A two-element array containing the minimum and maximum number of toggleable buttons. If a single number is\n     * specified, it is converted to an array using that given value as the maximum and 1 is used as the minimum.\n     * If `true` is specified, it is equivalent to `[0, Infinity]`, allowing any buttons to be toggled independently\n     * or all buttons to be untoggled.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-toggleable)\n     */\n    toggleable ? : Boolean|number|number[]\n    /**\n     * Set to `true` to turn the ButtonGroup into a toggle group, assigning a generated value to each contained\n     * buttons [toggleGroup config](https://bryntum.com/products/calendar/docs/api/Core/widget/Button#config-toggleGroup). Individual buttons can\n     * override the default.\n     */\n    toggleGroup ? : Boolean\n    /**\n     * Tooltip for the widget, either as a string or as a Tooltip config object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-tooltip)\n     */\n    tooltip ? : string|TooltipConfig|null\n    type ? : 'buttonGroup'|'buttongroup'\n    /**\n     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified\n     * as a space separated string, an array of strings, or as an object in which property names with truthy\n     * values are used as the class names.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-ui)\n     */\n    ui ? : string|object\n    /**\n     * If you use gaps between your buttons, set this to `true` (controls whether to use border-radius for the button\n     * elements)\n     */\n    useGap ? : Boolean\n    /**\n     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).\n     * Higher weights go further down.\n     */\n    weight ? : number\n    /**\n     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which\n     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases\n     * this config is convenient.\n     */\n    width ? : string|number\n    /**\n     * The x position for the widget.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-x)\n     */\n    x ? : number\n    /**\n     * The y position for the widget.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#config-y)\n     */\n    y ? : number\n\n}>();\n\nconst emit = defineEmits<{\n    /**\n     * Fires when the default action is performed on a button in the group (the button is clicked)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Button} params.event.source Clicked button\n     * @param {Event} params.event.event DOM event\n     */\n    (e: 'action', params: ((event: { source: Button, event: Event }) => void)|string): void\n    /**\n     * Fires before an object is destroyed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.Base} params.event.source The Object that is being destroyed.\n     */\n    (e: 'beforeDestroy', params: ((event: { source: Base }) => void)|string): void\n    /**\n     * Triggered before a widget is hidden. Return `false` to prevent the action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget being hidden.\n     */\n    (e: 'beforeHide', params: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before this container will load record values into its child fields. This is useful if you\n     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Container} params.event.source The container\n     * @param {Core.data.Model} params.event.record The record\n     */\n    (e: 'beforeSetRecord', params: ((event: { source: Container, record: Model }) => void)|string): void\n    /**\n     * Triggered before a widget is shown. Return `false` to prevent the action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget,any} params.event.source The widget being shown\n     */\n    (e: 'beforeShow', params: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires when any other event is fired from the object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#event-catchAll)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {{[key: string]: any, type: string}} params.event.event The Object that contains event details\n     * @param {string} params.event.event.type The type of the event which is caught by the listener\n     */\n    (e: 'catchAll', params: ((event: {[key: string]: any, type: string}) => void)|string): void\n    /**\n     * Fires when a button in the group is clicked\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Button} params.event.source Clicked button\n     * @param {Event} params.event.event DOM event\n     */\n    (e: 'click', params: ((event: { source: Button, event: Event }) => void)|string): void\n    /**\n     * Fires when an object is destroyed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.Base} params.event.source The Object that is being destroyed.\n     */\n    (e: 'destroy', params: ((event: { source: Base }) => void)|string): void\n    /**\n     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Container} params.event.source The container.\n     * @param {boolean} params.event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.\n     */\n    (e: 'dirtyStateChange', params: ((event: { source: Container, dirty: boolean }) => void)|string): void\n    /**\n     * Fired when focus enters this Widget.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source This Widget\n     * @param {HTMLElement} params.event.fromElement The element which lost focus.\n     * @param {HTMLElement} params.event.toElement The element which gained focus.\n     * @param {Core.widget.Widget} params.event.fromWidget The widget which lost focus.\n     * @param {Core.widget.Widget} params.event.toWidget The widget which gained focus.\n     * @param {boolean} params.event.backwards `true` if the `toElement` is before the `fromElement` in document order.\n     */\n    (e: 'focusIn', params: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string): void\n    /**\n     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.\n     * focus moving from within this Widget's ownership tree, even if there are floating widgets\n     * will not trigger this event. This is when focus exits this widget completely.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source This Widget\n     * @param {HTMLElement} params.event.fromElement The element which lost focus.\n     * @param {HTMLElement} params.event.toElement The element which gained focus.\n     * @param {Core.widget.Widget} params.event.fromWidget The widget which lost focus.\n     * @param {Core.widget.Widget} params.event.toWidget The widget which gained focus.\n     * @param {boolean} params.event.backwards `true` if the `toElement` is before the `fromElement` in document order.\n     */\n    (e: 'focusOut', params: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string): void\n    /**\n     * Triggered after a widget was hidden\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget\n     */\n    (e: 'hide', params: ((event: { source: Widget }) => void)|string): void\n    /**\n     * Triggered when a widget which had been in a non-visible state for any reason\n     * achieves visibility.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#event-paint)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget being painted.\n     * @param {boolean} params.event.firstPaint `true` if this is the first paint.\n     */\n    (e: 'paint', params: ((event: { source: Widget, firstPaint: boolean }) => void)|string): void\n    /**\n     * Fired when a Widget's read only state is toggled\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {boolean} params.event.readOnly Read only or not\n     */\n    (e: 'readOnly', params: ((event: { readOnly: boolean }) => void)|string): void\n    /**\n     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call\n     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.\n     */\n    (e: 'recompose', params: (() => void)|string): void\n    /**\n     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source This Widget\n     * @param {number} params.event.width The new width\n     * @param {number} params.event.height The new height\n     * @param {number} params.event.oldWidth The old width\n     * @param {number} params.event.oldHeight The old height\n     */\n    (e: 'resize', params: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string): void\n    /**\n     * Triggered after a widget is shown.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget\n     */\n    (e: 'show', params: ((event: { source: Widget }) => void)|string): void\n    /**\n     * Fires when a button in the group is toggled (the [pressed](https://bryntum.com/products/calendar/docs/api/Core/widget/Button#property-pressed) state is changed).\n     * If you need to process the pressed button only, consider using [click](https://bryntum.com/products/calendar/docs/api/Core/widget/ButtonGroup#event-click) event or [action](#Core/widget/ButtonGroup#event-action) event.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Button} params.event.source Toggled button\n     * @param {boolean} params.event.pressed New pressed state\n     * @param {Event} params.event.event DOM event\n     */\n    (e: 'toggle', params: ((event: { source: Button, pressed: boolean, event: Event }) => void)|string): void\n}>();\n\nconst widgetData = {\n    instanceClass : ButtonGroup,\n    instanceName  : 'ButtonGroup',\n\n    configNames   : [\n        'adopt',\n        'align',\n        'anchor',\n        'ariaDescription',\n        'ariaLabel',\n        'autoUpdateRecord',\n        'bubbleEvents',\n        'callOnFunctions',\n        'centered',\n        'color',\n        'config',\n        'constrainTo',\n        'contentElementCls',\n        'defaultBindProperty',\n        'defaultFocus',\n        'defaults',\n        'dock',\n        'draggable',\n        'elementAttributes',\n        'floating',\n        'hideAnimation',\n        'hideWhenEmpty',\n        'htmlCls',\n        'ignoreParentReadOnly',\n        'itemCls',\n        'lazyItems',\n        'listeners',\n        'localeClass',\n        'localizable',\n        'localizableProperties',\n        'maskDefaults',\n        'masked',\n        'monitorResize',\n        'namedItems',\n        'owner',\n        'positioned',\n        'preventTooltipOnTouch',\n        'relayStoreEvents',\n        'ripple',\n        'rootElement',\n        'scrollAction',\n        'showAnimation',\n        'showTooltipWhenDisabled',\n        'tab',\n        'tabBarItems',\n        'tag',\n        'textAlign',\n        'textContent',\n        'title',\n        'toggleGroup',\n        'type',\n        'ui',\n        'useGap',\n        'weight'\n    ],\n    propertyConfigNames : [\n        'alignSelf',\n        'appendTo',\n        'ariaLive',\n        'cls',\n        'content',\n        'dataset',\n        'disabled',\n        'extraData',\n        'flex',\n        'height',\n        'hidden',\n        'html',\n        'id',\n        'insertBefore',\n        'insertFirst',\n        'items',\n        'keyMap',\n        'layout',\n        'layoutStyle',\n        'margin',\n        'maxHeight',\n        'maximizeOnMobile',\n        'maxWidth',\n        'minHeight',\n        'minWidth',\n        'onAction',\n        'onBeforeDestroy',\n        'onBeforeHide',\n        'onBeforeSetRecord',\n        'onBeforeShow',\n        'onCatchAll',\n        'onClick',\n        'onDestroy',\n        'onDirtyStateChange',\n        'onFocusIn',\n        'onFocusOut',\n        'onHide',\n        'onPaint',\n        'onReadOnly',\n        'onRecompose',\n        'onResize',\n        'onShow',\n        'onToggle',\n        'readOnly',\n        'record',\n        'rtl',\n        'scrollable',\n        'strictRecordMapping',\n        'toggleable',\n        'tooltip',\n        'width',\n        'x',\n        'y'\n    ],\n    propertyNames : [\n        'anchorSize',\n        'focusVisible',\n        'hasChanges',\n        'isSettingValues',\n        'isValid',\n        'parent',\n        'values'\n    ],\n    eventNames : [\n        'action',\n        'beforeDestroy',\n        'beforeHide',\n        'beforeSetRecord',\n        'beforeShow',\n        'catchAll',\n        'click',\n        'destroy',\n        'dirtyStateChange',\n        'focusIn',\n        'focusOut',\n        'hide',\n        'paint',\n        'readOnly',\n        'recompose',\n        'resize',\n        'show',\n        'toggle'\n    ]\n};\n\nconst instance: {\n    value?: ButtonGroup\n} = {};\n\nconst refElement = ref<HTMLDivElement>()!;\n// Storage for teleports (in-cell Vue component instances) automatically renderer by template\nconst teleports = ref(new Map());\n\n// Provide teleports for processCellContent\nprovide('teleports', teleports);\n\nonMounted(() => {\n\n    const me = getCurrentInstance()!;\n\n    instance.value = WrapperHelper.createWidget<typeof ButtonGroup>({\n        me,\n        widgetData,\n        emit,\n        element : refElement.value!,\n        toRaw\n    });\n\n    const watcher = (prop: string, callback: any) => watch(() => me.props[prop], callback);\n    WrapperHelper.watchProps(instance.value, widgetData, watcher);\n});\n\nonBeforeUnmount(() => {\n    // @ts-ignore\n    instance.value?.destroy?.();\n});\n\ndefineExpose({\n    instance,\n    refElement,\n    teleports\n});\n\n</script>\n"],"names":["emit","__emit","widgetData","ButtonGroup","instance","refElement","ref","teleports","provide","onMounted","me","getCurrentInstance","WrapperHelper","toRaw","watcher","prop","callback","watch","onBeforeUnmount","_b","_a","__expose"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuiBA,UAAMA,IAAOC,GA+KPC,IAAa;AAAA,MACf,eAAgBC;AAAA,MAChB,cAAgB;AAAA,MAEhB,aAAgB;AAAA,QACZ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,qBAAsB;AAAA,QACleAAgB;AAAA,QACZ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,YAAa;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAAA,IAER,GAEMC,IAEF,CAAC,GAECC,IAAaC,EAAoB,GAEjCC,IAAYD,EAAQ,oBAAA,KAAK;AAG/B,WAAAE,EAAQ,aAAaD,CAAS,GAE9BE,EAAU,MAAM;AAEZ,YAAMC,IAAKC,EAAmB;AAErB,MAAAP,EAAA,QAAQQ,EAAc,aAAiC;AAAA,QAC5D,IAAAF;AAAA,QACA,YAAAR;AAAA,QACA,MAAAF;AAAA,QACA,SAAUK,EAAW;AAAA,QACrB,OAAAQ;AAAA,MAAA,CACH;AAEK,YAAAC,IAAU,CAACC,GAAcC,MAAkBC,EAAM,MAAMP,EAAG,MAAMK,CAAI,GAAGC,CAAQ;AACrF,MAAAJ,EAAc,WAAWR,EAAS,OAAOF,GAAYY,CAAO;AAAA,IAAA,CAC/D,GAEDI,EAAgB,MAAM;;AAElB,OAAAC,KAAAC,IAAAhB,EAAS,UAAT,gBAAAgB,EAAgB,YAAhB,QAAAD,EAAA,KAAAC;AAAA,IAA0B,CAC7B,GAEYC,EAAA;AAAA,MACT,UAAAjB;AAAA,MACA,YAAAC;AAAA,MACA,WAAAE;AAAA,IAAA,CACH;;;;;;"}