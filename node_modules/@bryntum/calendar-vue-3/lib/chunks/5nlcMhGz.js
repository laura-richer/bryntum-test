import { defineComponent as p, ref as r, provide as C, onMounted as g, getCurrentInstance as S, toRaw as R, watch as D, onBeforeUnmount as v, createElementBlock as y, openBlock as h } from "vue";
import { ProjectModel as M } from "@bryntum/calendar";
import { WrapperHelper as i } from "../helper/WrapperHelper.js";
const x = /* @__PURE__ */ p({
  __name: "BryntumCalendarProjectModel",
  props: {
    adjustDurationToDST: {},
    assignmentModelClass: {},
    assignments: {},
    assignmentsData: {},
    assignmentStore: {},
    assignmentStoreClass: {},
    children: {},
    dependencies: {},
    dependenciesData: {},
    dependencyModelClass: {},
    dependencyStore: {},
    dependencyStoreClass: {},
    eventModelClass: {},
    events: {},
    eventsData: {},
    eventStore: {},
    eventStoreClass: {},
    expanded: {},
    id: {},
    json: {},
    orderedParentIndex: {},
    parentId: {},
    parentIndex: {},
    readOnly: {},
    remoteChildCount: {},
    resourceModelClass: {},
    resources: {},
    resourcesData: {},
    resourceStore: {},
    resourceStoreClass: {},
    resourceTimeRanges: {},
    resourceTimeRangesData: {},
    resourceTimeRangeStore: {},
    resourceTimeRangeStoreClass: {},
    shouldSyncDataOnLoad: { type: Function },
    silenceInitialCommit: {},
    stm: {},
    timeRangeModelClass: {},
    timeRanges: {},
    timeRangesData: {},
    timeRangeStore: {},
    timeRangeStoreClass: {},
    timeZone: {},
    toJSONResultFormat: {},
    useRawData: {}
  },
  emits: ["change", "dataReady"],
  setup(f, { expose: d, emit: l }) {
    const c = l, a = {
      instanceClass: M,
      instanceName: "ProjectModel",
      configNames: [
        "adjustDurationToDST",
        "assignmentModelClass",
        "assignmentsData",
        "assignmentStoreClass",
        "children",
        "dependenciesData",
        "dependencyModelClass",
        "dependencyStoreClass",
        "eventModelClass",
        "eventsData",
        "eventStoreClass",
        "expanded",
        "orderedParentIndex",
        "parentId",
        "parentIndex",
        "resourceModelClass",
        "resourcesData",
        "resourceStoreClass",
        "resourceTimeRangesData",
        "resourceTimeRangeStoreClass",
        "silenceInitialCommit",
        "timeRangeModelClass",
        "timeRangesData",
        "timeRangeStoreClass",
        "toJSONResultFormat",
        "useRawData"
      ],
      propertyConfigNames: [
        "assignments",
        "assignmentStore",
        "dependencies",
        "dependencyStore",
        "events",
        "eventStore",
        "id",
        "json",
        "onChange",
        "onDataReady",
        "readOnly",
        "remoteChildCount",
        "resources",
        "resourceStore",
        "resourceTimeRanges",
        "resourceTimeRangeStore",
        "shouldSyncDataOnLoad",
        "stm",
        "timeRanges",
        "timeRangeStore",
        "timeZone"
      ],
      propertyNames: [
        "allChildren",
        "allUnfilteredChildren",
        "descendantCount",
        "hasGeneratedId",
        "inlineData",
        "internalId",
        "isCommitting",
        "isCreating",
        "isValid",
        "previousSiblingsTotalCount",
        "visibleDescendantCount"
      ],
      eventNames: [
        "change",
        "dataReady"
      ]
    }, n = {}, s = r(), o = r(/* @__PURE__ */ new Map());
    return C("teleports", o), g(() => {
      const e = S();
      n.value = i.createWidget({
        me: e,
        widgetData: a,
        emit: c,
        element: s.value,
        toRaw: R
      });
      const t = (m, u) => D(() => e.props[m], u);
      i.watchProps(n.value, a, t);
    }), v(() => {
      var e, t;
      (t = (e = n.value) == null ? void 0 : e.destroy) == null || t.call(e);
    }), d({
      instance: n,
      refElement: s,
      teleports: o
    }), (e, t) => (h(), y("div", {
      ref_key: "refElement",
      ref: s
    }, null, 512));
  }
});
export {
  x as _
};
//# sourceMappingURL=5nlcMhGz.js.map
