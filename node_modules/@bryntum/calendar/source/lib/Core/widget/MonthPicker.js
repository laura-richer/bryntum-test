import Panel from './Panel.js';
import EventHelper from '../helper/EventHelper.js';
import ObjectHelper from '../helper/ObjectHelper.js';
import DateHelper from '../helper/DateHelper.js';

/**
 * @module Core/widget/MonthPicker
 */

/**
 * A Panel subclass which allows the selection of a month.
 *
 * The {@link #property-month} indicates and sets the currently selected month.
 *
 * The {@link #event-select} event is fired with a 0-indexed value when a different month is selected.
 *
 * The {@link #event-titleClick} event is fired when the panel title is clicked.
 *
 * {@inlineexample Core/widget/MonthPicker.js}
 *
 * @extends Core/widget/Panel
 * @classtype monthpicker
 * @widget
 */
export default class MonthPicker extends Panel {

    static $name = 'MonthPicker';

    static type = 'monthpicker';

    static configurable = {
        textContent : false,

        tbar : {
            overflow : null,
            items    : {
                title : {
                    type     : 'button',
                    cls      : 'b-monthpicker-title',
                    onAction : 'up.handleTitleClick'
                }
            }
        },

        itemCls : 'b-month-container',

        /**
         * The month to use as the selected month (zero-based, 0-11). Defaults to the current month.
         * @prp {Number} month
         **/
        month : null
    };

    construct(config) {
        super.construct({
            month : new Date().getMonth(),
            ...config
        });

        EventHelper.on({
            element  : this.contentElement,
            click    : 'onMonthClick',
            delegate : '.b-monthpicker-month',
            thisObj  : this
        });
    }

    get focusElement() {
        return this.getMonthButton(this.month);
    }

    getMonthButton(month) {
        return this.contentElement.querySelector(`.b-monthpicker-month[data-month="${month}"]`);
    }

    onMonthClick({ target }) {
        const clickedMonth = parseInt(target.getAttribute('data-month'));

        // The updater won't run, so fire the select event here.
        if (this.month === clickedMonth) {
            this.trigger('select', { oldValue : clickedMonth, value : clickedMonth });
        }
        else {
            this.month = clickedMonth;
        }
    }

    handleTitleClick(event) {
        /**
         * Fires when the month title of this Panel is clicked.
         * @event titleClick
         * @param {Core.widget.Button} source The clicked button
         * @param {Event} event DOM event
         */
        this.trigger('titleClick', event);
    }

    changeMonth(month) {
        if (!isNaN(month)) {
            return ObjectHelper.isDate(month)
                ? month.getMonth()
                : month >= 0 && month <= 11
                    ? month
                    : undefined;
        }
    }

    updateMonth(month, oldValue) {
        if (!this.isConfiguring) {
            /**
             * Fired when a month is selected.
             * @event select
             * @param {Number} value The previously selected month.
             * @param {Core.widget.MonthPicker} source This MonthPicker
             */
            this.trigger('select', { oldValue, value : month });
        }
    }

    composeBody() {
        // Must be ingested before first compose.
        this.getConfig('month');

        const
            result   = super.composeBody(),
            children = result.children[this.tbar ? 1 : 0].children = [];

        this.widgetMap.title.text = DateHelper.getMonthName(this.month);

        for (let month = 0; month <= 11; month++) {
            children.push({
                tag     : 'button',
                dataset : { month },
                class   : {
                    'b-monthpicker-month' : 1,
                    'b-selected'          : month === this.month
                },
                text : DateHelper.getMonthShortName(month)
            });
        }

        return result;
    }

    async updateLocalization() {
        if (!this.isConfiguring) {
            await this.recompose();
        }

        super.updateLocalization();
    }
}

// Register this widget type with its Factory
MonthPicker.initClass();
