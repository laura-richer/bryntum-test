{"version":3,"file":"CSUHdc3F.js","sources":["../../src/components/BryntumTimelineHistogram.vue"],"sourcesContent":["<!-- Vue 3 wrapper for Bryntum TimelineHistogram -->\n\n<template>\n    <div ref=\"refElement\">\n\n        <!-- Container for Vue components used in cells, hidden from view -->\n        <div\n            ref=\"teleportsHolder\"\n            style=\"display: none\"\n        >\n            <!-- Vue components rendered in the grid cells -->\n            <teleport\n                v-for=\"item in teleports.values()\"\n                :key=\"item.key\"\n                :to=\"item.to\"\n            >\n                <component\n                    :is=\"item.is\"\n                    :ref=\"item.key\"\n                    :data-key=\"item.key\"\n                    :data-generation=\"item.generation\"\n                    v-bind=\"item.bind\"\n                    data-vue\n                    v-on=\"item.on\"\n                />\n            </teleport>\n        </div>\n\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n/* eslint-disable no-undef */\n\nimport { getCurrentInstance, onBeforeUnmount, onMounted, provide, ref, watch, toRaw } from 'vue';\n\nimport type { AjaxStore, AjaxStoreConfig, AssignmentModel, Base, CellCopyPaste, CellCopyPasteConfig, CellEdit, CellEditConfig, CellMenu, CellMenuConfig, CellTooltip, CellTooltipConfig, Column, ColumnAutoWidth, ColumnAutoWidthConfig, ColumnDragToolbar, ColumnDragToolbarConfig, ColumnLines, ColumnLinesConfig, ColumnPicker, ColumnPickerConfig, ColumnRename, ColumnRenameConfig, ColumnReorder, ColumnReorderConfig, ColumnResize, ColumnResizeConfig, ColumnStore, ColumnStoreConfig, Container, ContainerItemConfig, DomConfig, DurationUnit, Editor, EventColor, EventModel, ExportConfig, Field, FileDrop, FileDropConfig, FillHandle, FillHandleConfig, Filter, FilterBar, FilterBarConfig, FilterConfig, FormulaProviderConfig, Grid, GridBase, GridColumnConfig, GridExcelExporter, GridExcelExporterConfig, GridLocation, GridLocationConfig, GridLockRows, GridLockRowsConfig, GridPdfExport, GridPdfExportConfig, GridPrint, GridPrintConfig, GridRowResize, GridRowResizeConfig, GridSelectionMode, Group, GroupConfig, GroupSummary, GroupSummaryConfig, HeaderMenu, HeaderMenuConfig, HeaderZoom, HeaderZoomConfig, Histogram, HistogramConfig, HistogramRenderData, HistogramSeries, KeyMapConfig, Mask, MaskConfig, Menu, MenuItem, MenuItemConfig, MergeCells, MergeCellsConfig, Model, ModelConfig, NonWorkingTime, NonWorkingTimeConfig, PagingToolbarConfig, Pan, PanConfig, Panel, PanelCollapserConfig, PanelCollapserOverlayConfig, PanelHeader, PreserveScrollOptions, QuickFind, QuickFindConfig, RecordPositionContext, RecurrenceConfirmationPopup, RecurrenceConfirmationPopupConfig, RegionResize, RegionResizeConfig, ResourceMenu, ResourceMenuConfig, ResourceModel, ResourceTimeRangeModel, ResourceTimeRanges, ResourceTimeRangesConfig, Row, RowCopyPaste, RowCopyPasteConfig, RowEdit, RowEditConfig, RowExpander, RowExpanderConfig, RowReorder, RowReorderConfig, ScaleColumnConfig, ScalePoint, Scheduler, SchedulerScheduleTooltip, SchedulerScheduleTooltipConfig, SchedulerTimeRanges, SchedulerTimeRangesConfig, ScrollManager, ScrollManagerConfig, Scroller, ScrollerConfig, Search, SearchConfig, Sort, SortConfig, Split, SplitConfig, StateProvider, StickyCells, StickyCellsConfig, Store, StoreConfig, Stripe, StripeConfig, SubGrid, SubGridConfig, Summary, SummaryConfig, TabConfig, TimeAxis, TimeAxisColumn, TimeAxisConfig, TimeAxisHeaderMenu, TimeAxisHeaderMenuConfig, TimeSpan, TimelineBase, TimelineContext, TimelineHistogramListeners, Tool, ToolConfig, ToolbarConfig, ToolbarItems, Tooltip, TooltipConfig, Tree, TreeConfig, TreeGroup, TreeGroupConfig, VerticalTimeAxisColumn, ViewPreset, ViewPresetConfig, VisibleDate, Widget, XLSColumn } from '@bryntum/calendar';\nimport { TimelineHistogram } from '@bryntum/calendar';\n\nimport { WrapperHelper } from '../helper/WrapperHelper';\n\ndefineProps<{\n    // Configs\n    /**\n     * Element (or element id) to adopt as this Widget's encapsulating element. The widget's\n     * content will be placed inside this element.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-adopt)\n     */\n    adopt ? : HTMLElement|string\n    /**\n     * A function used for aggregating child records histogram data entries to their parent entry.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-aggregateDataEntry)\n     * @param {object} aggregateDataEntry.aggregated Target parent data entry to aggregate the entry into.\n     * @param {object} aggregateDataEntry.entry Current entry to aggregate into `aggregated`.\n     * @param {number} aggregateDataEntry.arrayIndex Index of current array (index of the record among other records being aggregated).\n     * @param {object[]} aggregateDataEntry.entryIndex Index of `entry` in the current array.\n     * @returns {object} Return value becomes the value of the `aggregated` parameter on the next invocation of this function.\n     */\n    aggregateDataEntry ? : ((aggregateDataEntry: { aggregated: object, entry: object, arrayIndex: number, entryIndex: object[] }) => object)|string\n    /**\n     * When `true` the component will automatically calculate data for group records\n     * based on the groups members data by calling [getGroupRecordHistogramData](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineHistogramGrouping#function-getGroupRecordHistogramData) method.\n     */\n    aggregateHistogramDataForGroups ? : Boolean\n    /**\n     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a\n     * flexbox layout. This config allows you to set this widget's\n     * [align-self](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self) style.\n     */\n    alignSelf ? : string\n    /**\n     * Set to `true` to animate row removals caused by filtering.\n     */\n    animateFilterRemovals ? : Boolean\n    /**\n     * Set to `false` to prevent remove row animation and remove the delay related to that.\n     */\n    animateRemovingRows ? : Boolean\n    /**\n     * When the [Tree](https://bryntum.com/products/calendar/docs/api/Grid/feature/Tree) feature is in use and the Store is a tree store, this\n     * config may be set to `true` to visually animate branch node expand and collapse operations.\n     * *This is not supported in Scheduler and Gantt*\n     */\n    animateTreeNodeToggle ? : Boolean\n    /**\n     * Element (or the id of an element) to append this widget's element to. Can be configured, or set once at\n     * runtime. To access the element of a rendered widget, see [element](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-element).\n     */\n    appendTo ? : HTMLElement|string\n    /**\n     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject\n     * into an element which will be linked using the `aria-describedby` attribute.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-ariaDescription)\n     */\n    ariaDescription ? : string\n    /**\n     * A localizable string (May contain `'L{}'` tokens which resolve in the locale file) to inject as\n     * the `aria-label` attribute.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-ariaLabel)\n     */\n    ariaLabel ? : string\n    /**\n     * The `aria-live` value for this widget.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-ariaLive)\n     * @deprecated Will be removed in 7.0\n     */\n    ariaLive ? : string\n    /**\n     * You can set this option to `false` to make the timeline panel start and end on the exact provided\n     * [startDate](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineBase#config-startDate)/[endDate](#Scheduler/view/TimelineBase#config-endDate) w/o adjusting them.\n     */\n    autoAdjustTimeAxis ? : Boolean\n    /**\n     * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid\n     * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which\n     * in a larger grid is really bad for performance.\n     */\n    autoHeight ? : Boolean\n    /**\n     * Controls how much space to leave between stacked event bars in px.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-barMargin)\n     */\n    barMargin ? : number\n    /**\n     * A Function which returns the tooltip text to display when hovering a bar.\n     * The following parameters are passed:\n     * @param {object} context The tooltip context info\n     * @param {object} context.datum The histogram bar being hovered info\n     * @param {Core.widget.Tooltip} context.tip The tooltip instance\n     * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement\n     * @param {HTMLElement} context.activeTarget The target element that triggered the show\n     * @param {Event} context.event The raw DOM event\n     * @param {Core.data.Model} data.record The record which value the hovered bar displays.\n     * @returns {string} Tooltip HTML content\n     */\n    barTooltipTemplate ? : (context: { datum: object, tip: Tooltip, element: HTMLElement, activeTarget: HTMLElement, event: Event }, data: { record: Model }) => string\n    /**\n     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),\n     * or array of config objects representing the child items of a Toolbar. Another way to add a bbar is to use [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-bbar)\n     */\n    bbar ? : (ContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null\n    /**\n     * Custom CSS classes to add to the panel's body element.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-bodyCls)\n     */\n    bodyCls ? : string|object\n    /**\n     * An object where property names with a truthy value indicate which events should bubble up the ownership\n     * hierarchy when triggered.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-bubbleEvents)\n     */\n    bubbleEvents ? : object\n    /**\n     * This config defines the size of the start and end invisible parts of the timespan when [infiniteScroll](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineScroll#config-infiniteScroll) set to `true`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-bufferCoef)\n     */\n    bufferCoef ? : number\n    /**\n     * This config defines the scroll limit, which, when exceeded will cause a timespan shift.\n     * The limit is calculated as the `panelWidth * [bufferCoef](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineScroll#config-bufferCoef) * bufferThreshold`. During scrolling, if the left or right side\n     * has less than that of the rendered content - a shift is triggered.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-bufferThreshold)\n     */\n    bufferThreshold ? : number\n    /**\n     * Set to `false` to not call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-callOnFunctions)\n     */\n    callOnFunctions ? : Boolean\n    /**\n     * Set to `false` to crop text in grid cells without ellipsis (...). When enabled, cells containing pure\n     * use `display : block`, instead of `display : flex` to allow ellipsis to work.\n     * <strong>NOTE</strong> Only supported in browsers that support `:has()` CSS selector\n     */\n    cellEllipsis ? : Boolean\n    /**\n     * Custom CSS classes to add to element.\n     * May be specified as a space separated string, or as an object in which property names\n     * with truthy values are used as the class names:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-cls)\n     */\n    cls ? : string|object\n    /**\n     * Controls whether the panel is collapsed (the body of the panel is hidden while only the header is\n     * visible). Only valid if the panel is [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible).\n     */\n    collapsed ? : Boolean\n    /**\n     * This config enables collapsibility for the panel. See [collapsed](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsed).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-collapsible)\n     */\n    collapsible ? : Boolean|PanelCollapserConfig|PanelCollapserOverlayConfig\n    /**\n     * Set to `false` to not show column lines. End result might be overruled by/differ between themes.\n     */\n    columnLines ? : Boolean\n    /**\n     * Accepts column definitions for the grid during initialization. They will be used to create\n     * [Column](https://bryntum.com/products/calendar/docs/api/Grid/column/Column) instances that are added to a [ColumnStore](#Grid/data/ColumnStore).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-columns)\n     */\n    columns ? : ColumnStore|GridColumnConfig[]|ColumnStoreConfig\n    config ? : object\n    /**\n     * Custom CSS classes to add to the [contentElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-contentElement).\n     * May be specified as a space separated string, or as an object in which property names\n     * with truthy values are used as the class names:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-contentElementCls)\n     */\n    contentElementCls ? : string|object\n    /**\n     * Event which is used to show context menus.\n     * Available options are: 'contextmenu', 'click', 'dblclick'.\n     */\n    contextMenuTriggerEvent ? : 'contextmenu'|'click'|'dblclick'\n    /**\n     * Convenient shortcut to set data in grids store both during initialization and at runtime. Can also be\n     * used to retrieve data at runtime, although we do recommend interacting with Grids store instead using\n     * the [store](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#property-store) property.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-data)\n     */\n    data ? : object[]|Model[]|ModelConfig[]\n    /**\n     * Record field from which the histogram data will be collected.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-dataModelField)\n     */\n    dataModelField ? : string\n    /**\n     * Object to apply to elements dataset (each key will be used as a data-attribute on the element)\n     */\n    dataset ? : Record<string, string>\n    /**\n     * Region to which columns are added when they have none specified\n     */\n    defaultRegion ? : string\n    /**\n     * Set to `true` to destroy the store when the grid is destroyed.\n     */\n    destroyStore ? : Boolean\n    /**\n     * Disable or enable the widget. It is similar to [readOnly](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-readOnly) except a disabled widget\n     * cannot be focused, uses a different rendition (usually greyish) and does not allow selecting its value.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-disabled)\n     */\n    disabled ? : Boolean|'inert'\n    /**\n     * Set to `true` to not get a warning when calling [getState](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#function-getState) when there is a column\n     * configured without an `id`. But the recommended action is to always configure columns with an `id` when\n     * using states.\n     */\n    disableGridColumnIdWarning ? : Boolean\n    /**\n     * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If\n     * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel\n     * in your model definition.\n     */\n    disableGridRowModelWarning ? : Boolean\n    /**\n     * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the\n     * view preset. For allowed values see [format](https://bryntum.com/products/calendar/docs/api/Core/helper/DateHelper#function-format-static).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-displayDateFormat)\n     */\n    displayDateFormat ? : string\n    /**\n     * Controls the placement of this widget when it is added to a [panel's ](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel)\n     * [strips collection](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips). Typical values for this config are `'top'`,\n     * `'bottom'`, `'left'`, or `'right'`, which cause the widget to be placed on that side of the panel's\n     * body. Such widgets are called \"edge strips\".\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-dock)\n     */\n    dock ? : 'top'|'bottom'|'left'|'right'|'start'|'end'|'header'|'pre-header'|object\n    /**\n     * Make this Panel a docked drawer which slides out from one side of the browser viewport by default.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-drawer)\n     * @param {'start','left','end','right','top','bottom'} side The side of the viewport to dock the drawer to.  * `'start'` means the `inline-start` side. * `'end'` means the `inline-end` side.\n     * @param {string,number} size The size of the drawer in its collapsible axis.\n     * @param {boolean} inline If using the [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-appendTo) config to place the drawer inside a host widget, set may be set to `true` to make the drawer inline within that host. Note that, if using this, the layout of the host element must have `flex-direction` set appropriately.\n     */\n    drawer ? : Boolean|{side?: 'start'|'left'|'end'|'right'|'top'|'bottom', size?: string|number, inline?: Boolean}\n    /**\n     * Decimal precision used when displaying durations, used by tooltips and DurationColumn.\n     * Specify `false` to use raw value\n     */\n    durationDisplayPrecision ? : number|Boolean\n    /**\n     * An object specifying attributes to assign to the root element of this widget.\n     * Set `null` value to attribute to remove it.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-elementAttributes)\n     */\n    elementAttributes ? : Record<string, string|null>\n    /**\n     * Text or HTML, or a [DomConfig](https://bryntum.com/products/calendar/docs/api/Core/helper/DomHelper#typedef-DomConfig) block to display when there is no data to display in the grid\n     */\n    emptyText ? : string|DomConfig\n    /**\n     * Set to `false` if you don't want event bar DOM updates to animate.\n     */\n    enableEventAnimations ? : Boolean\n    /**\n     * Enables showing occurrences of recurring events across the scheduler's time axis. If you want to disable\n     * the recurrence popup, you can choose set the `defaultAction` to `future` to affect all future\n     * occurrences, or `single` to just affect the currently selected event.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-enableRecurringEvents)\n     */\n    enableRecurringEvents ? : Boolean|{\n        defaultAction?: 'single'|'future'\n    }\n    /**\n     * Configure this as `true` to allow elements within cells to be styled as `position: sticky`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-enableSticky)\n     */\n    enableSticky ? : Boolean\n    /**\n     * Set to `true` to allow text selection in the grid cells. Note, this cannot be used simultaneously with the\n     * `RowReorder` feature.\n     */\n    enableTextSelection ? : Boolean\n    /**\n     * Set to `true` to listen for CTRL-Z (CMD-Z on Mac OS) keyboard event and trigger undo (redo when SHIFT is\n     * pressed). Only applicable when using a [StateTrackingManager](https://bryntum.com/products/calendar/docs/api/Core/data/stm/StateTrackingManager).\n     */\n    enableUndoRedoKeys ? : Boolean\n    /**\n     * The end date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-endDate)\n     */\n    endDate ? : Date|string\n    /**\n     * Event color used by default. Events and resources can specify their own color, with priority order being:\n     * Event -&gt; Resource -&gt; Scheduler default.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-eventColor)\n     */\n    eventColor ? : EventColor\n    /**\n     * Event style used by default. Events and resources can specify their own style, with priority order being:\n     * Event -&gt; Resource -&gt; Scheduler default. Determines the appearance of the event by assigning a CSS class\n     * to it. Available styles are:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-eventStyle)\n     */\n    eventStyle ? : 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null\n    extraData ? : any\n    /**\n     * Set to `true` to stretch the last column in a grid with all fixed width columns\n     * to fill extra available space if the grid's width is wider than the sum of all\n     * configured column widths.\n     */\n    fillLastColumn ? : Boolean\n    /**\n     * Specify `true` to force rendered events/tasks to fill entire ticks. This only affects rendering, start\n     * and end dates retain their value on the data level.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-fillTicks)\n     */\n    fillTicks ? : Boolean\n    /**\n     * Use fixed row height. Setting this to `true` will configure the underlying RowManager to use fixed row\n     * height, which sacrifices the ability to use rows with variable height to gain a fraction better\n     * performance.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-fixedRowHeight)\n     */\n    fixedRowHeight ? : Boolean\n    /**\n     * When this widget is a child of a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container), it will by default be participating in a\n     * flexbox layout. This config allows you to set this widget's\n     * [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) style.\n     * This may be configured as a single number or a `&lt;flex-grow&gt; &lt;flex-shrink&gt; &lt;flex-basis&gt;` format string.\n     * numeric-only values are interpreted as the `flex-grow` value.\n     */\n    flex ? : number|string\n    /**\n     * Config object of a footer. May contain a `dock`, `html` and a `cls` property. A footer is not a widget,\n     * but rather plain HTML that follows the last element of the panel's body and [strips](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-strips).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-footer)\n     */\n    footer ? : {\n        dock?: 'top'|'right'|'bottom'|'left'|'start'|'end'\n        html?: string\n        cls?: string\n    }|string\n    /**\n     * Set to `true` to force the time columns to fit to the available space (horizontal or vertical depends on mode).\n     * Note that setting [suppressFit](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineBase#config-suppressFit) to `true`, will disable `forceFit` functionality. Zooming\n     * cannot be used when `forceFit` is set.\n     */\n    forceFit ? : Boolean\n    /**\n     * An object which names formula prefixes which will be applied to all columns configured with\n     * `formula : true`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-formulaProviders)\n     */\n    formulaProviders ? : Record<string, FormulaProviderConfig>\n    /**\n     * Refresh entire row when a record changes (`true`) or, if possible, only the cells affected (`false`).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-fullRowRefresh)\n     */\n    fullRowRefresh ? : Boolean\n    /**\n     * A Function which returns a CSS class name to add to a rectangle element.\n     * The following parameters are passed:\n     * @param {HistogramSeries} series The series being rendered\n     * @param {DomConfig} domConfig The rectangle configuration object\n     * @param {object} datum The datum being rendered\n     * @param {number} index The index of the datum being rendered\n     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell being rendered.\n     * @returns {string} CSS classes of the rectangle element\n     */\n    getBarClass ? : (series: HistogramSeries, domConfig: DomConfig, datum: object, index: number, renderData: HistogramRenderData) => string\n    /**\n     * A Function which if provided should return a DOM configuration object for a bar\n     * (a `RECT` element representing a single \"bar\"-type value).\n     * The function is passed a default prepared DOM configuration\n     * in an argument which then can be processed and returned.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-getBarDOMConfig)\n     * @param {HistogramSeries} series The series being rendered\n     * @param {DomConfig} domConfig The rectangle DOM configuration object\n     * @param {object} datum The datum being rendered\n     * @param {number} index The index of the datum being rendered\n     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell being rendered.\n     * @returns {object} Resulting DOM configuration object. If no value returned the bar is not displayed.\n     */\n    getBarDOMConfig ? : (series: HistogramSeries, domConfig: DomConfig, datum: object, index: number, renderData: HistogramRenderData) => object\n    /**\n     * A Function which returns the text to render inside a bar.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-getBarText)\n     * @param {object} datum The datum being rendered\n     * @param {number} index The index of the datum being rendered\n     * @param {HistogramSeries} series The series (provided if histogram widget [singleTextForAllBars](https://bryntum.com/products/calendar/docs/api/Core/widget/graph/Histogram#config-singleTextForAllBars) is `false`)\n     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell being rendered.\n     * @returns {string} Text to render inside the bar\n     */\n    getBarText ? : (datum: object, index: number, series: HistogramSeries, renderData: HistogramRenderData) => string\n    /**\n     * A Function which returns a DOM configuration object for text elements.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-getBarTextDOMConfig)\n     * @param {DomConfig} domConfig The `TEXT` element DOM configuration object\n     * @param {object} datum The datum being rendered\n     * @param {number} index The index of the datum being rendered\n     * @param {HistogramSeries} series The series (provided if histogram widget [singleTextForAllBars](https://bryntum.com/products/calendar/docs/api/Core/widget/graph/Histogram#config-singleTextForAllBars) is `false`)\n     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell being rendered.\n     * @returns {object} The `TEXT` element DOM configuration object. If no value returned the text element is not displayed.\n     */\n    getBarTextDOMConfig ? : (domConfig: DomConfig, datum: object, index: number, series: HistogramSeries, renderData: HistogramRenderData) => object\n    /**\n     * Function that extracts a record histogram data entry for aggregating.\n     * By default it returns the entry as is. Override the function if you need a more complex way\n     * to retrieve the value for aggregating.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-getDataEntryForAggregating)\n     * @param {object} getDataEntryForAggregating.entry Current data entry.\n     * @returns {object} Entry to aggregate\n     */\n    getDataEntryForAggregating ? : ((getDataEntryForAggregating: { entry: object }) => object)|string\n    /**\n     * A Function which returns a CSS class name to add to a path element\n     * built for an `outline` type series.\n     * The following parameters are passed:\n     * @param {HistogramSeries} series The series being rendered\n     * @param {object[]} data The series data\n     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell being rendered.\n     * @returns {string} CSS class name of the path element\n     */\n    getOutlineClass ? : (series: HistogramSeries, data: object[], renderData: HistogramRenderData) => string\n    /**\n     * A Function which if provided should return a DOM configuration object for\n     * a `path` element built for an `outline` type series.\n     * The function accepts a default prepared DOM configuration\n     * in an argument which then can be processed and returned.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-getOutlineDOMConfig)\n     * @param {HistogramSeries} series The series being rendered\n     * @param {DomConfig} domConfig The `path` element DOM configuration object\n     * @param {object[]} data The series data\n     * @returns {object} Resulting DOM configuration object. If no value returned the path is not displayed.\n     */\n    getOutlineDOMConfig ? : (series: HistogramSeries, domConfig: DomConfig, data: object[]) => object\n    /**\n     * A function, or name of a function which builds histogram data for the provided record.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-getRecordData)\n     * @param {Core.data.Model} getRecordData.record Record to get histogram data for.\n     * @param {object} aggregationContext Context object passed in case the data is being retrieved as a part of some parent record data collecting.\n     * @returns {object} Histogram data.\n     */\n    getRecordData ? : ((getRecordData: { record: Model }, aggregationContext?: object) => object)|string\n    /**\n     * A function called for each row to determine its height. It is passed a [record](https://bryntum.com/products/calendar/docs/api/Core/data/Model) and\n     * expected to return the desired height of that records row. If the function returns a falsy value, Grids\n     * configured [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-rowHeight) is used.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-getRowHeight)\n     * @param {Core.data.Model} getRowHeight.record Record to determine row height for\n     * @returns {number} Desired row height\n     */\n    getRowHeight ? : (getRowHeight: { record: Model }) => number\n    /**\n     * When set to `true` (default) the component reacts on time axis changes\n     * (zooming or changing the displayed time span), clears the histogram data cache of the records\n     * and then refreshes the view.\n     */\n    hardRefreshOnTimeAxisReconfigure ? : Boolean\n    /**\n     * A config [object](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#typedef-PanelHeader) for the panel's header or a string in place of a `title`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-header)\n     */\n    header ? : string|Boolean|PanelHeader\n    /**\n     * Widget's height, used to set element style.height. Either specify a valid height string or a number, which\n     * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases\n     * this config is convenient.\n     */\n    height ? : string|number\n    /**\n     * Configure with true to make widget initially hidden.\n     */\n    hidden ? : Boolean\n    /**\n     * Set to `true` to hide the footer elements\n     */\n    hideFooters ? : Boolean\n    /**\n     * Set to `true` to hide the column header elements\n     */\n    hideHeaders ? : Boolean\n    /**\n     * Set to `true` to hide the Grid's horizontal scrollbar(s)\n     */\n    hideHorizontalScrollbar ? : Boolean\n    /**\n     * By default the row hover effect is not visible in the Scheduler part of the grid.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-hideRowHover)\n     */\n    hideRowHover ? : Boolean\n    /**\n     * An instance or a configuration object of the underlying [Histogram](https://bryntum.com/products/calendar/docs/api/Core/widget/graph/Histogram)\n     * component that is used under the hood to render actual charts.\n     * In case a configuration object is provided the built class is defined with\n     * [histogramWidgetClass](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogramBase#config-histogramWidgetClass) config.\n     */\n    histogramWidget ? : Histogram|HistogramConfig\n    /**\n     * The class used for building the [histogram widget](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogramBase#property-histogramWidget)\n     */\n    histogramWidgetClass ? : Histogram\n    /**\n     * A CSS class to add to hovered row elements\n     */\n    hoverCls ? : string\n    /**\n     * Widget id, if not specified one will be generated. Also used for lookups through Widget.getById\n     */\n    id ? : string\n    /**\n     * Set to `true` to ignore reacting to DOM events (mouseover/mouseout etc) while scrolling. Useful if you\n     * want to maximize scroll performance.\n     */\n    ignoreDomEventsWhileScrolling ? : Boolean\n    /**\n     * Determines if the widgets read-only state should be controlled by its parent.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-ignoreParentReadOnly)\n     */\n    ignoreParentReadOnly ? : Boolean\n    /**\n     * Set to `true` to automatically adjust the panel timespan during scrolling in the time dimension,\n     * when the scroller comes close to the start/end edges.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-infiniteScroll)\n     */\n    infiniteScroll ? : Boolean\n    /**\n     * A function that initializes a target group record entry.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-initAggregatedDataEntry)\n     * @returns {object} Target aggregated entry\n     */\n    initAggregatedDataEntry ? : (() => object)|string\n    /**\n     * Element (or element id) to insert this widget before. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.\n     */\n    insertBefore ? : HTMLElement|string\n    /**\n     * Element (or element id) to append this widget element to, as a first child. If provided, [appendTo](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-appendTo) config is ignored.\n     */\n    insertFirst ? : HTMLElement|string\n    /**\n     * See [Keyboard shortcuts](https://bryntum.com/products/calendar/docs/api/Grid/view/Grid#keyboard-shortcuts) for details\n     */\n    keyMap ? : Record<string, KeyMapConfig>\n    /**\n     * The listener set for this object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-listeners)\n     */\n    listeners ? : TimelineHistogramListeners\n    /**\n     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when a store is performing a remote\n     * operation, or Crud Manager is loading data from the sever. Set to `null` to disable default load mask.\n     */\n    loadMask ? : string|MaskConfig|null\n    /**\n     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)\n     * when data is loading. The message and optional configuration from the\n     * [loadMask](https://bryntum.com/products/calendar/docs/api/Core/mixin/LoadMaskable#config-loadMask) config take priority over these options, just as they do\n     * for `maskDefaults`, respectively.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-loadMaskDefaults)\n     */\n    loadMaskDefaults ? : MaskConfig\n    /**\n     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object to adjust the [maskDefaults](#Core/widget/Widget#config-maskDefaults)\n     * when an error occurs loading data.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-loadMaskError)\n     */\n    loadMaskError ? : MaskConfig|Mask|Boolean\n    /**\n     * Set to `false` to disable localization of this object.\n     */\n    localizable ? : Boolean\n    /**\n     * Time in ms until a longpress is triggered\n     */\n    longPressTime ? : number\n    /**\n     * When `true`, events are sized and positioned based on rowHeight, resourceMargin and barMargin settings.\n     * Set this to `false` if you want to control height and vertical position using CSS instead.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-managedEventSizing)\n     */\n    managedEventSizing ? : Boolean\n    /**\n     * Widget's margin. This may be configured as a single number or a `TRBL` format string.\n     * numeric-only values are interpreted as pixels.\n     */\n    margin ? : number|string\n    /**\n     * Grids change the `maskDefaults` to cover only their `body` element.\n     */\n    maskDefaults ? : MaskConfig\n    /**\n     * Set to `true` to apply the default mask to the widget. Alternatively, this can be the mask message or a\n     * [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object.\n     */\n    masked ? : Boolean|string|MaskConfig\n    /**\n     * Get/set end date limit of the timeline. Actions such as timeline scrolling, all types of timeline zooms and shifts will respect this limit.\n     */\n    maxDate ? : Date|string\n    /**\n     * The element's maxHeight. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [height](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-height), *reading* the value will return the numeric value in pixels.\n     */\n    maxHeight ? : string|number\n    /**\n     * The maximum time axis unit to display non-working ranges for ('hour' or 'day' etc).\n     * When zooming to a view with a larger unit, no non-working time elements will be rendered.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-maxTimeAxisUnit)\n     */\n    maxTimeAxisUnit ? : DurationUnit\n    /**\n     * The elements maxWidth. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.\n     */\n    maxWidth ? : string|number\n    /**\n     * The maximum zoom level to which [zoomIn](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomIn) will work. Defaults to the number of\n     * [ViewPresets](https://bryntum.com/products/calendar/docs/api/Scheduler/preset/ViewPreset) available, see [presets](#Scheduler/view/mixin/TimelineViewPresets#property-presets)\n     * for information. Unless you have modified the collection of available presets, the max zoom level is\n     * milliseconds.\n     */\n    maxZoomLevel ? : number\n    /**\n     * Get/set start date limit of the timeline. Actions such as timeline scrolling, all types of timeline zooms and shifts will respect this limit.\n     */\n    minDate ? : Date|string\n    /**\n     * Grid's `min-height`. Defaults to `10em` to be sure that the Grid always has a height wherever it is\n     * inserted.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-minHeight)\n     */\n    minHeight ? : string|number\n    /**\n     * The elements minWidth. Can be either a String or a Number (which will have 'px' appended). Note that\n     * like [width](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-width), *reading* the value will return the numeric value in pixels.\n     */\n    minWidth ? : string|number\n    /**\n     * The minimum zoom level to which [zoomOut](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomOut) will work. Defaults to 0 (year ticks)\n     */\n    minZoomLevel ? : number\n    /**\n     * Grid monitors window resize by default.\n     */\n    monitorResize ? : Boolean\n    /**\n     * The owning Widget of this Widget. If this Widget is directly contained (that is, it is one of the\n     * [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-items) of a Container), this config will be ignored. In this case\n     * the owner is <strong>always</strong> the encapsulating Container.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-owner)\n     */\n    owner ? : Widget\n    /**\n     * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),\n     * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-partner)\n     */\n    partner ? : TimelineBase\n    /**\n     * Specify plugins (an array of classes) in config\n     */\n    plugins ? : Function[]\n    /**\n     * True to preserve focused cell after loading new data\n     */\n    preserveFocusOnDatasetChange ? : Boolean\n    /**\n     * Preserve the grid's vertical scroll position when changesets are applied, as in the case of remote\n     * changes, or when stores are configured with [syncDataOnLoad](https://bryntum.com/products/calendar/docs/api/Core/data/Store#config-syncDataOnLoad).\n     */\n    preserveScroll ? : PreserveScrollOptions|Boolean\n    /**\n     * Specify `true` to preserve vertical scroll position after store actions that trigger a `refresh` event,\n     * such as loading new data and filtering.\n     */\n    preserveScrollOnDatasetChange ? : Boolean\n    /**\n     * An array of [ViewPreset](https://bryntum.com/products/calendar/docs/api/Scheduler/preset/ViewPreset) config objects\n     * which describes the available timeline layouts for this scheduler.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-presets)\n     */\n    presets ? : ViewPresetConfig[]\n    /**\n     * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a\n     * menu on click etc, since the tooltip would be displayed at the same time.\n     */\n    preventTooltipOnTouch ? : Boolean\n    /**\n     * Set to `true` to make the grid read-only, by disabling any UIs for modifying data.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-readOnly)\n     */\n    readOnly ? : Boolean\n    /**\n     * The confirmation dialog shown when a recurring event is edited.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-recurrenceConfirmationPopup)\n     */\n    recurrenceConfirmationPopup ? : RecurrenceConfirmationPopupConfig|RecurrenceConfirmationPopup\n    relayStoreEvents ? : Boolean\n    /**\n     * Configure this property to allow the widget/component to be resized. Pressing <kbd>Shift</kbd> while resizing will\n     * constrain the aspect ratio.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-resizable)\n     */\n    resizable ? : Boolean|{\n        minWidth?: number\n        maxWidth?: number\n        minHeight?: number\n        maxHeight?: number\n        handles?: object\n    }\n    /**\n     * Set to `false` to only measure cell contents when double-clicking the edge between column headers.\n     */\n    resizeToFitIncludesHeader ? : Boolean\n    /**\n     * An empty function by default, but provided so that you can override it. This function is called each time\n     * a resource time range is rendered into the schedule. It's called with `resourceTimeRangeRecord`, `resourceRecord`,\n     * and `renderData` params.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-resourceTimeRangeRenderer)\n     * @param {object} detail An object containing the information needed to render a ResourceTimeRangeModel.\n     * @param {Scheduler.model.ResourceTimeRangeModel} detail.resourceTimeRangeRecord The resource time range record.\n     * @param {Scheduler.model.ResourceModel} detail.resourceRecord The resource record.\n     * @param {object} detail.renderData An object containing details about the event rendering.\n     * @returns {string,DomConfig,DomConfig[]} A simple string, or a DomConfig object describing the markup\n     */\n    resourceTimeRangeRenderer ? : (detail: { resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: ResourceModel, renderData: object }) => string|DomConfig|DomConfig[]\n    /**\n     * \"Break points\" for which responsive config to use for columns and css.\n     */\n    responsiveLevels ? : Record<string, number|string>\n    /**\n     * Configure as `true` to have the component display a translucent ripple when its\n     * [focusElement](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#property-focusElement), or [element](#Core/widget/Widget#property-element) is tapped <em>if the\n     * current theme supports ripples</em>. Out of the box, only the Material theme supports ripples.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-ripple)\n     */\n    ripple ? : Boolean|{\n        delegate?: string\n        color?: string\n        radius?: number\n        clip?: string\n    }\n    /**\n     * If you are rendering this widget to a shadow root inside a web component, set this config to the shadowRoot. If not inside a web component, set it to `document.body`\n     */\n    rootElement ? : ShadowRoot|HTMLElement\n    /**\n     * Row height in pixels. This allows the default height for rows to be controlled. Note that it may be\n     * overriden by specifying a [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/data/GridRowModel#field-rowHeight) on a per record basis, or from\n     * a column [renderer](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-renderer).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-rowHeight)\n     */\n    rowHeight ? : number\n    /**\n     * Set to `false` to not show row lines. End result might be overruled by/differ between themes.\n     */\n    rowLines ? : Boolean\n    /**\n     * This may be configured as `true` to make the widget's element use the `direction:rtl` style.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-rtl)\n     */\n    rtl ? : Boolean\n    /**\n     * An object with configuration for the [ScaleColumn](https://bryntum.com/products/calendar/docs/api/Scheduler/column/ScaleColumn).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-scaleColumn)\n     */\n    scaleColumn ? : ScaleColumnConfig\n    /**\n     * Array of objects representing the [scale column](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineHistogramScaleColumn#config-scaleColumn) scale points.\n     * The config basically is a mapping to the column [scalePoints](https://bryntum.com/products/calendar/docs/api/Scheduler/column/ScaleColumn#config-scalePoints)\n     * config.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-scalePoints)\n     */\n    scalePoints ? : ScalePoint[]\n    /**\n     * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a [Scroller](https://bryntum.com/products/calendar/docs/api/Core/helper/util/Scroller).\n     * See the [scrollerClass](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-scrollerClass) config option.\n     */\n    scrollable ? : Boolean|ScrollerConfig|Scroller\n    /**\n     * The class to instantiate to use as the [scrollable](https://bryntum.com/products/calendar/docs/api/Grid/view/GridBase#config-scrollable). Defaults to [Scroller](#Core/helper/util/Scroller).\n     */\n    scrollerClass ? : typeof Scroller\n    /**\n     * Configuration values for the [ScrollManager](https://bryntum.com/products/calendar/docs/api/Core/util/ScrollManager) class on initialization. Returns the\n     * [ScrollManager](https://bryntum.com/products/calendar/docs/api/Core/util/ScrollManager) at runtime.\n     */\n    scrollManager ? : ScrollManagerConfig|ScrollManager\n    /**\n     * Selection configuration settings, change these properties to control how selection works and what can be\n     * selected.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-selectionMode)\n     */\n    selectionMode ? : GridSelectionMode\n    /**\n     * Object enumerating data series for the histogram.\n     * The object keys are treated as the series identifiers and values are objects that\n     * must contain two properties:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-series)\n     */\n    series ? : Record<string, HistogramSeries>\n    /**\n     * Set to `true` if you want to display a tooltip when hovering an allocation bar. You can also pass a\n     * [Tooltip#configs](https://bryntum.com/products/calendar/docs/api/Core/widget/Tooltip#configs) config object.\n     * Please use [barTooltipTemplate](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogramBase#config-barTooltipTemplate) function to customize the tooltip contents.\n     */\n    showBarTip ? : Boolean|TooltipConfig\n    /**\n     * Configure as `true` to have the grid show a red \"changed\" tag in cells whose\n     * field value has changed and not yet been committed.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-showDirty)\n     */\n    showDirty ? : Boolean|{\n        duringEdit?: Boolean\n    }\n    /**\n     * Set to `true` to snap to the current time resolution increment while interacting with scheduled events.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-snap)\n     */\n    snap ? : Boolean\n    /**\n     * Affects drag drop and resizing of events when [snap](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineDateMapper#config-snap)\n     * is enabled.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-snapRelativeToEventStartDate)\n     */\n    snapRelativeToEventStartDate ? : Boolean\n    /**\n     * The start date of the timeline (if not configure with [infiniteScroll](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineBase#config-infiniteScroll)).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-startDate)\n     */\n    startDate ? : Date|string\n    /**\n     * This value can be one of the following:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-stateful)\n     */\n    stateful ? : Boolean|object|string[]\n    /**\n     * The events that, when fired by this component, should trigger it to save its state by calling\n     * [saveState](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#function-saveState).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-statefulEvents)\n     */\n    statefulEvents ? : object|string[]\n    /**\n     * The key to use when saving this object's state in the [stateProvider](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateProvider). If this config is\n     * not assigned, and [stateful](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#config-stateful) is not set to `false`, the [id](#Core/widget/Widget#config-id)\n     * (if explicitly specified) will be used as the `stateId`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-stateId)\n     */\n    stateId ? : string\n    /**\n     * The `StateProvider` to use to save and restore this object's [state](https://bryntum.com/products/calendar/docs/api/Core/mixin/State#property-state). By default, `state`\n     * will be saved using the [default state provider](https://bryntum.com/products/calendar/docs/api/Core/state/StateProvider#property-instance-static).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-stateProvider)\n     */\n    stateProvider ? : StateProvider\n    /**\n     * The properties of this settings object controls how grid is restored from state data.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-stateSettings)\n     */\n    stateSettings ? : {\n        restoreUnconfiguredColumns?: Boolean\n    }\n    /**\n     * When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.\n     */\n    stickyHeaders ? : Boolean\n    /**\n     * Store that holds records to display in the grid, or a store config object. If the configuration contains\n     * a `readUrl`, an `AjaxStore` will be created.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-store)\n     */\n    store ? : Store|StoreConfig|AjaxStore|AjaxStoreConfig\n    /**\n     * An object containing widgets keyed by name. By default (when no `type` is given), strips are\n     * [toolbars](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar). If you want to pass an array, you can use\n     * the toolbar's [items](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#config-items).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-strips)\n     */\n    strips ? : Record<string, ContainerItemConfig>\n    /**\n     * An object containing sub grid configuration objects keyed by a `region` property.\n     * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.\n     * The 'normal' region defaults to use `flex: 1`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-subGridConfigs)\n     */\n    subGridConfigs ? : Record<string, SubGridConfig>\n    /**\n     * Set to `true` to prevent auto calculating of a minimal [tickSize](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineEventRendering#property-tickSize)\n     * to always fit the content to the screen size. Setting this property on `true` will disable [forceFit](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineBase#config-forceFit) behaviour.\n     */\n    suppressFit ? : Boolean\n    /**\n     * A [Mask](https://bryntum.com/products/calendar/docs/api/Core/widget/Mask) config object, or a message to be shown when Crud Manager\n     * is persisting changes on the server. Set to `null` to disable default sync mask.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-syncMask)\n     */\n    syncMask ? : string|MaskConfig|null\n    /**\n     * A configuration for the [tab](https://bryntum.com/products/calendar/docs/api/Core/widget/Tab) created for this widget when it is placed in a\n     * [TabPanel](https://bryntum.com/products/calendar/docs/api/Core/widget/TabPanel). For example, this config can be used to control the icon of the `tab` for\n     * this widget:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-tab)\n     */\n    tab ? : Boolean|TabConfig\n    /**\n     * When this container is used as a tab in a TabPanel, these items are added to the\n     * [TabBar](https://bryntum.com/products/calendar/docs/api/Core/widget/TabBar) when this container is the active tab.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-tabBarItems)\n     */\n    tabBarItems ? : ToolbarItems[]|Widget[]\n    /**\n     * A Config object representing the configuration of a [Toolbar](https://bryntum.com/products/calendar/docs/api/Core/widget/Toolbar),\n     * or array of config objects representing the child items of a Toolbar.\n     * This creates a toolbar docked to the top of the panel immediately below the header.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-tbar)\n     */\n    tbar ? : (ContainerItemConfig|string)[]|ToolbarConfig|PagingToolbarConfig|null\n    /**\n     * The width/height (depending on vertical / horizontal mode) of all the time columns.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-tickSize)\n     */\n    tickSize ? : number\n    /**\n     * A [TimeAxis](https://bryntum.com/products/calendar/docs/api/Scheduler/data/TimeAxis) config object or instance, used to create a backing data store of\n     * 'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none\n     * supplied.\n     */\n    timeAxis ? : TimeAxisConfig|TimeAxis\n    /**\n     * Gets/sets the current time resolution object, which contains a unit identifier and an increment count\n     * `{ unit, increment }`. This value means minimal task duration you can create using UI.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-timeResolution)\n     */\n    timeResolution ? : object|number\n    /**\n     * Set to a time zone or a UTC offset. This will set the projects\n     * [timeZone](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#config-timeZone) config accordingly. As this config is only a referer,\n     * please see project's config [documentation](https://bryntum.com/products/calendar/docs/api/Scheduler/model/ProjectModel#config-timeZone) for more\n     * information.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-timeZone)\n     */\n    timeZone ? : string|number\n    /**\n     * A title to display in the header or owning TabPanel. Causes creation and docking of a header\n     * to the top if no header is configured.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-title)\n     */\n    title ? : string\n    /**\n     * The [tools](https://bryntum.com/products/calendar/docs/api/Core/widget/Tool) to add either before or after the `title` in the Panel header. Each\n     * property name is the reference by which an instantiated tool may be retrieved from the live\n     * `[tools](https://bryntum.com/products/calendar/docs/api/Core/widget/mixin/Toolable#property-tools)` property.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-tools)\n     */\n    tools ? : Record<string, ToolConfig>|null\n    /**\n     * Animation transition duration in milliseconds.\n     */\n    transitionDuration ? : number\n    type ? : 'timelinehistogram'\n    /**\n     * Custom CSS class name suffixes to apply to the elements rendered by this widget. This may be specified\n     * as a space separated string, an array of strings, or as an object in which property names with truthy\n     * values are used as the class names.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-ui)\n     */\n    ui ? : 'plain'|'toolbar'|string|object\n    /**\n     * A string key used to lookup a predefined [ViewPreset](https://bryntum.com/products/calendar/docs/api/Scheduler/preset/ViewPreset) (e.g. 'weekAndDay', 'hourAndDay'),\n     * managed by [PresetManager](https://bryntum.com/products/calendar/docs/api/Scheduler/preset/PresetManager). See [PresetManager](#Scheduler/preset/PresetManager) for more information.\n     * Or a config object for a viewPreset.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-viewPreset)\n     */\n    viewPreset ? : string|ViewPresetConfig\n    /**\n     * A date to bring into view initially on the scrollable timeline.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-visibleDate)\n     */\n    visibleDate ? : Date|VisibleDate\n    /**\n     * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make\n     * the scrolling area `visibleZoomFactor` times wider than the timeline area itself. Used in\n     * [zoomToSpan](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineZoomable#function-zoomToSpan) and [zoomToLevel](#Scheduler/view/mixin/TimelineZoomable#function-zoomToLevel) functions.\n     */\n    visibleZoomFactor ? : number\n    /**\n     * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.\n     * When omitted, the week start day is retrieved from the active locale class.\n     */\n    weekStartDay ? : number\n    /**\n     * A widgets weight determines its position among siblings when added to a [Container](https://bryntum.com/products/calendar/docs/api/Core/widget/Container).\n     * Higher weights go further down.\n     */\n    weight ? : number\n    /**\n     * Widget's width, used to set element style.width. Either specify a valid width string or a number, which\n     * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases\n     * this config is convenient.\n     */\n    width ? : string|number\n    /**\n     * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.\n     * This object will be used to populate TimeAxis [include](https://bryntum.com/products/calendar/docs/api/Scheduler/data/TimeAxis#config-include) property.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#config-workingTime)\n     */\n    workingTime ? : {\n        fromDay?: number\n        toDay?: number\n        fromHour?: number\n        toHour?: number\n    }\n    /**\n     * Whether the originally rendered timespan should be preserved while zooming. By default, it is set to `false`,\n     * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to\n     * render. When setting this option to `true`, be careful not to allow to zoom a big timespan in seconds\n     * resolution for example. That will cause <strong>a lot</strong> of HTML content to be rendered and affect performance. You\n     * can use [minZoomLevel](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineZoomable#config-minZoomLevel) and [maxZoomLevel](#Scheduler/view/mixin/TimelineZoomable#config-maxZoomLevel) config options for that.\n     */\n    zoomKeepsOriginalTimespan ? : Boolean\n    /**\n     * If true, you can zoom in and out on the time axis using CTRL-key + mouse wheel.\n     */\n    zoomOnMouseWheel ? : Boolean\n    /**\n     * True to zoom to time span when double-clicking a time axis cell.\n     */\n    zoomOnTimeAxisDoubleClick ? : Boolean\n\n    // Features\n    /**\n     * Allows using `[Ctrl/CMD + C]`, `[Ctrl/CMD + X]` and `[Ctrl/CMD + V]` to cut, copy and paste cell or cell ranges. Also\n     * makes cut, copy and paste actions available via the cell context menu.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellCopyPaste)\n     */\n    cellCopyPasteFeature ? : object|Boolean|string|CellCopyPaste|CellCopyPasteConfig\n    /**\n     * Adding this feature to the grid and other Bryntum products which are based on the Grid (i.e. Scheduler, SchedulerPro, and Gantt)\n     * enables cell editing. Any subclass of [Field](https://bryntum.com/products/calendar/docs/api/Core/widget/Field) can be used\n     * as editor for the [Column](https://bryntum.com/products/calendar/docs/api/Grid/column/Column). The most popular are:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit)\n     */\n    cellEditFeature ? : object|Boolean|string|CellEdit|CellEditConfig\n    /**\n     * Right click to display context menu for cells.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellMenu)\n     */\n    cellMenuFeature ? : object|Boolean|string|CellMenu|CellMenuConfig\n    /**\n     * Displays a tooltip when hovering cells.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellTooltip)\n     */\n    cellTooltipFeature ? : object|Boolean|string|CellTooltip|CellTooltipConfig\n    /**\n     * Enables the [autoWidth](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-autoWidth) config for a grid's columns.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnAutoWidth)\n     */\n    columnAutoWidthFeature ? : object|Boolean|string|ColumnAutoWidth|ColumnAutoWidthConfig\n    /**\n     * Displays a toolbar while dragging column headers. Drop on a button in the toolbar to activate a certain function,\n     * for example to group by that column. This feature simplifies certain operations on touch devices.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnDragToolbar)\n     */\n    columnDragToolbarFeature ? : object|Boolean|string|ColumnDragToolbar|ColumnDragToolbarConfig\n    /**\n     * Displays column lines for ticks, with a different styling for major ticks (by default they are darker). If this\n     * feature is disabled, no lines are shown. If it's enabled, line are shown for the tick level which is set in current\n     * ViewPreset. Please see [columnLinesFor](https://bryntum.com/products/calendar/docs/api/Scheduler/preset/ViewPreset#field-columnLinesFor) config for details.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/ColumnLines)\n     */\n    columnLinesFeature ? : object|Boolean|string|ColumnLines|ColumnLinesConfig\n    /**\n     * Displays a column picker (to show/hide columns) in the header context menu. Columns can be displayed in sub menus\n     * by region or tag. Grouped headers are displayed as menu hierarchies.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnPicker)\n     */\n    columnPickerFeature ? : object|Boolean|string|ColumnPicker|ColumnPickerConfig\n    /**\n     * Allows user to rename columns by either right-clicking column header or using keyboard shortcuts when column header\n     * is focused.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnRename)\n     */\n    columnRenameFeature ? : object|Boolean|string|ColumnRename|ColumnRenameConfig\n    /**\n     * Allows user to reorder columns by dragging headers. To get notified about column reorder listen to `change` event\n     * on [columns](https://bryntum.com/products/calendar/docs/api/Grid/data/ColumnStore) store.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnReorder)\n     */\n    columnReorderFeature ? : object|Boolean|string|ColumnReorder|ColumnReorderConfig\n    /**\n     * Enables user to resize columns by dragging a handle on the right hand side of the header. To get notified about column\n     * resize listen to `change` event on [columns](https://bryntum.com/products/calendar/docs/api/Grid/data/ColumnStore) store.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/ColumnResize)\n     */\n    columnResizeFeature ? : object|Boolean|string|ColumnResize|ColumnResizeConfig\n    /**\n     * A feature that allows exporting Grid data to Excel or CSV without involving the server. It uses\n     * [TableExporter](https://bryntum.com/products/calendar/docs/api/Grid/util/TableExporter) class as data provider, 3rd party provider to generate XLS files, and\n     * [Microsoft XML specification](https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.aspx).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/experimental/ExcelExporter)\n     */\n    excelExporterFeature ? : object|Boolean|string|GridExcelExporter|GridExcelExporterConfig\n    /**\n     * An experimental feature that lets users drop files on a Widget. The widget fires an event when a file is dropped onto it.\n     * In the event, you get access to the raw files as strings, that were parsed by calling `readAsBinaryString`.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/experimental/FileDrop)\n     */\n    fileDropFeature ? : object|Boolean|string|FileDrop|FileDropConfig\n    /**\n     * This feature adds a fill handle to a Grid range selection, which when dragged, fills the cells being dragged over\n     * with values based on the values in the original selected range. This is similar to functionality normally seen in\n     * various spreadsheet applications.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/FillHandle)\n     */\n    fillHandleFeature ? : object|Boolean|string|FillHandle|FillHandleConfig\n    /**\n     * Feature that allows filtering of the grid by settings filters on columns. The actual filtering is done by the store.\n     * For info on programmatically handling filters, see [StoreFilter](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreFilter).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Filter)\n     */\n    filterFeature ? : object|Boolean|string|Filter|FilterConfig\n    /**\n     * Feature that allows filtering of the grid by entering filters on column headers.\n     * The actual filtering is done by the store.\n     * For info on programmatically handling filters, see [StoreFilter](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreFilter).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/FilterBar)\n     */\n    filterBarFeature ? : object|Boolean|string|FilterBar|FilterBarConfig\n    /**\n     * Enables rendering and handling of row groups. The actual grouping is done in the store, but triggered by `[shift]` +\n     * clicking headers or by using two finger tap (one on header, one anywhere on grid). Use `[shift]` + `[alt]` + click to\n     * remove a column grouper.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Group)\n     */\n    groupFeature ? : object|Boolean|string|Group|GroupConfig\n    /**\n     * A special version of the Grid GroupSummary feature that enables summaries within scheduler. To use a single summary\n     * it is easiest to configure [renderer](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/GroupSummary#config-renderer), for multiple summaries see [summaries](#Scheduler/feature/GroupSummary#config-summaries).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/GroupSummary)\n     */\n    groupSummaryFeature ? : object|Boolean|string|GroupSummary|GroupSummaryConfig\n    /**\n     * Right click column header or focus it and press SPACE key to show the context menu for headers.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/HeaderMenu)\n     */\n    headerMenuFeature ? : object|Boolean|string|HeaderMenu|HeaderMenuConfig\n    /**\n     * Enables users to click and drag to zoom to a date range in Scheduler's header time axis. Only supported in horizontal\n     * mode.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/HeaderZoom)\n     */\n    headerZoomFeature ? : object|Boolean|string|HeaderZoom|HeaderZoomConfig\n    /**\n     * This feature allows records which satisfy a certain condition to be locked at the top of the grid.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/LockRows)\n     */\n    lockRowsFeature ? : object|Boolean|string|GridLockRows|GridLockRowsConfig\n    /**\n     * This feature merges cells that have the same value in sorted (or [optionally](https://bryntum.com/products/calendar/docs/api/Grid/feature/MergeCells#config-sortedOnly) any) columns\n     * configured to [mergeCells](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-mergeCells).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/MergeCells)\n     */\n    mergeCellsFeature ? : object|Boolean|string|MergeCells|MergeCellsConfig\n    /**\n     * Feature that allows styling of weekends (and other non-working time) by adding timeRanges for those days.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/NonWorkingTime)\n     */\n    nonWorkingTimeFeature ? : object|Boolean|string|NonWorkingTime|NonWorkingTimeConfig\n    /**\n     * Makes the scheduler's timeline pannable by dragging with the mouse. Try it out in the demo below.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/Pan)\n     */\n    panFeature ? : object|Boolean|string|Pan|PanConfig\n    /**\n     * Generates PDF/PNG files from the Grid component.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/export/PdfExport)\n     */\n    pdfExportFeature ? : object|Boolean|string|GridPdfExport|GridPdfExportConfig\n    /**\n     * Allows printing Grid contents using browser print dialog.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/export/GridPrint)\n     */\n    printFeature ? : object|Boolean|string|GridPrint|GridPrintConfig\n    /**\n     * Feature that allows the user to search in a column by focusing a cell and typing. Navigate between hits using the\n     * keyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/QuickFind)\n     */\n    quickFindFeature ? : object|Boolean|string|QuickFind|QuickFindConfig\n    /**\n     * Makes the splitter between grid [sections](https://bryntum.com/products/calendar/docs/api/Grid/view/SubGrid) draggable, to let users resize, and\n     * collapse/expand the sections.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RegionResize)\n     */\n    regionResizeFeature ? : object|Boolean|string|RegionResize|RegionResizeConfig\n    /**\n     * Applicable only for Scheduler in `vertical` mode. Right click resource header cells to display a context menu.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/ResourceMenu)\n     */\n    resourceMenuFeature ? : object|Boolean|string|ResourceMenu|ResourceMenuConfig\n    /**\n     * Feature that draws resource time ranges, shaded areas displayed behind events. These zones are similar to events in\n     * that they have a start and end date but different in that they do not take part in the event layout, and they always\n     * occupy full row height.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/ResourceTimeRanges)\n     */\n    resourceTimeRangesFeature ? : object|Boolean|string|ResourceTimeRanges|ResourceTimeRangesConfig\n    /**\n     * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut-and-paste rows. Also makes cut, copy and paste actions\n     * available via the cell context menu.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowCopyPaste)\n     */\n    rowCopyPasteFeature ? : object|Boolean|string|RowCopyPaste|RowCopyPasteConfig\n    /**\n     * This feature allows editing of entire rows in a grid in a docked panel which by default slides out from the right.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowEdit)\n     */\n    rowEditFeature ? : object|Boolean|string|RowEdit|RowEditConfig\n    /**\n     * Enables expanding of Grid rows by either row click or double click, or by adding a separate Grid column which renders\n     * a button that expands or collapses the row.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowExpander)\n     */\n    rowExpanderFeature ? : object|Boolean|string|RowExpander|RowExpanderConfig\n    /**\n     * This feature implements support for project transactions and used by default in Gantt. For general RowReorder feature\n     * documentation see [RowReorder](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowReorder).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/RowReorder)\n     */\n    rowReorderFeature ? : object|Boolean|string|RowReorder|RowReorderConfig\n    /**\n     * Enables user to change row height by dragging the bottom row border. After a resize operation, the [rowHeight](https://bryntum.com/products/calendar/docs/api/Grid/data/GridRowModel#field-rowHeight)\n     * field of the record is updated (when [applyToAllRows](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowResize#config-applyToAllRows) is `false`).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/RowResize)\n     */\n    rowResizeFeature ? : object|Boolean|string|GridRowResize|GridRowResizeConfig\n    /**\n     * Feature that displays a tooltip containing the time at the mouse position when hovering empty parts of the schedule.\n     * To hide the schedule tooltip, just disable this feature:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/ScheduleTooltip)\n     */\n    scheduleTooltipFeature ? : object|Boolean|string|SchedulerScheduleTooltip|SchedulerScheduleTooltipConfig\n    /**\n     * <div class=\"external-example \" data-file=\"Grid/feature/Search.js\"></div>\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Search)\n     */\n    searchFeature ? : object|Boolean|string|Search|SearchConfig\n    /**\n     * Allows sorting of grid by clicking (or tapping) headers, also displays which columns grid is sorted by (numbered if\n     * using multisort). Use modifier keys for multisorting: [Ctrl/CMD + click] to add sorter, [Ctrl/CMD + Alt + click] to remove sorter.\n     * The actual sorting is done by the store, see [Store.sort()](https://bryntum.com/products/calendar/docs/api/Core/data/mixin/StoreSort#function-sort).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Sort)\n     */\n    sortFeature ? : object|Boolean|string|Sort|SortConfig\n    /**\n     * This feature allows splitting the Scheduler into multiple views, either by using the cell context menu, or\n     * programmatically by calling [split()](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/Split#function-split).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/Split)\n     */\n    splitFeature ? : object|Boolean|string|Split|SplitConfig\n    /**\n     * A feature which pins configurable content from a grid row to the top of the grid\n     * while the row scrolls off the top but is still visible.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/StickyCells)\n     */\n    stickyCellsFeature ? : object|Boolean|string|StickyCells|StickyCellsConfig\n    /**\n     * Stripes rows by adding alternating CSS classes to all row elements (`b-even` and `b-odd`).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Stripe)\n     */\n    stripeFeature ? : object|Boolean|string|Stripe|StripeConfig\n    /**\n     * A special version of the Grid Summary feature. This feature displays a summary row in the grid footer.\n     * For regular columns in the locked section - specify type of summary on columns, available types are:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/Summary)\n     */\n    summaryFeature ? : object|Boolean|string|Summary|SummaryConfig\n    /**\n     * Adds scheduler specific menu items to the timeline header context menu.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/TimeAxisHeaderMenu)\n     */\n    timeAxisHeaderMenuFeature ? : object|Boolean|string|TimeAxisHeaderMenu|TimeAxisHeaderMenuConfig\n    /**\n     * Feature that renders global ranges of time in the timeline. Use this feature to visualize a `range` like a 1 hr lunch\n     * or some important point in time (a `line`, i.e. a range with 0 duration). This feature can also show a current time\n     * indicator if you set [showCurrentTimeLine](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/TimeRanges#config-showCurrentTimeLine) to true. To style the rendered elements, use the\n     * [cls](https://bryntum.com/products/calendar/docs/api/Scheduler/model/TimeSpan#field-cls) field of the `TimeSpan` class.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/TimeRanges)\n     */\n    timeRangesFeature ? : object|Boolean|string|SchedulerTimeRanges|SchedulerTimeRangesConfig\n    /**\n     * Feature that makes the grid work more like a tree. Included by default in [TreeGrid](https://bryntum.com/products/calendar/docs/api/Grid/view/TreeGrid). Requires\n     * exactly one [TreeColumn](https://bryntum.com/products/calendar/docs/api/Grid/column/TreeColumn) among grids columns. That column will have its renderer replaced with a\n     * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and\n     * also called.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/Tree)\n     */\n    treeFeature ? : object|Boolean|string|Tree|TreeConfig\n    /**\n     * A feature that allows transforming a flat dataset (or the leaves of a hierarchical) into a tree by specifying a\n     * record field per parent level. Parents are generated based on each leaf's value for those fields.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Grid/feature/TreeGroup)\n     */\n    treeGroupFeature ? : object|Boolean|string|TreeGroup|TreeGroupConfig\n\n}>();\n\nconst emit = defineEmits<{\n    /**\n     * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or\n     * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which\n     * case records should be \"manually\" removed after confirmation:\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-beforeAssignmentDelete)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source The Scheduler instance\n     * @param {Scheduler.model.AssignmentModel[]} params.event.assignmentRecords The assignment records about to be deleted\n     * @param {object} params.event.context Additional removal context:\n     * @param {Function} params.event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.\n     * @param {boolean} params.event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.\n     */\n    (e: 'beforeAssignmentDelete', params: ((event: { source: Scheduler, assignmentRecords: AssignmentModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before the cell editing is canceled, return `false` to prevent cancellation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {Grid.util.GridLocation} params.event.editorContext Editing context\n     */\n    (e: 'beforeCancelCellEdit', params: ((event: { source: Grid, editorContext: GridLocation }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before the row editing is canceled, return false to signal that the value is invalid and editing should not be finalized.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-beforeCancelRowEdit)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid Target grid\n     * @param {Core.widget.Panel} params.event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.\n     * @param {Core.data.Model} params.event.recordThe record being edited\n     */\n    (e: 'beforeCancelRowEdit', params: ((event: { grid: Grid, editorContext: { editor: Panel }, recordThe: Model }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before deleting a range of selected cell values by pressing `Backspace` or `Del`\n     * buttons while [autoEdit](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellEdit#config-autoEdit) is set to `true`. Return `false` to prevent editing.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {(Grid.util.GridLocation|Core.data.Model)[]} params.event.gridSelection An array of cell selectors or records that will have their values deleted (the records themselves will not get deleted, only visible column values).\n     */\n    (e: 'beforeCellDelete', params: ((event: { source: Grid, gridSelection: (GridLocation|Model)[] }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before editing starts, return `false` to prevent editing\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {Grid.util.GridLocation} params.event.editorContext Editing context\n     * @param {Grid.column.Column} params.event.editorContext.column Target column\n     * @param {Core.data.Model} params.event.editorContext.record Target record\n     * @param {HTMLElement} params.event.editorContext.cell Target cell\n     * @param {Core.widget.Field} params.event.editorContext.editor The input field that the column is configured with (see [field](https://bryntum.com/products/calendar/docs/api/Grid/column/Column#config-field)). This property may be replaced to be a different [field](https://bryntum.com/products/calendar/docs/api/Core/widget/Field) in the handler, to take effect just for the impending edit.\n     * @param {Function} params.event.editorContext.finalize An async function may be injected into this property which performs asynchronous finalization tasks such as complex validation of confirmation. The value `true` or `false` must be returned.\n     * @param {object} params.event.editorContext.finalize.context An object describing the editing context upon requested completion of the edit.\n     * @param {any} params.event.editorContext.value Cell value\n     */\n    (e: 'beforeCellEditStart', params: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field, finalize: { context?: object }, value: any } }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * This event is fired prior to starting a column drag gesture. The drag is canceled if a listener returns `false`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance.\n     * @param {Grid.column.Column} params.event.column The dragged column.\n     * @param {Event} params.event.event The browser event.\n     */\n    (e: 'beforeColumnDragStart', params: ((event: { source: Grid, column: Column, event: Event }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * This event is fired when a column is dropped, and you can return false from a listener to abort the operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance.\n     * @param {Grid.column.Column} params.event.column The dragged column.\n     * @param {Grid.column.Column} params.event.insertBefore The column before which the dragged column will be inserted.\n     * @param {Grid.column.Column} params.event.newParent The new parent column.\n     * @param {Event} params.event.event The browser event.\n     * @param {string} params.event.region The region where the column was dropped.\n     */\n    (e: 'beforeColumnDropFinalize', params: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, event: Event, region: string }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * This event is fired prior to starting a column resize gesture. The resize is canceled if a listener returns\n     * `false`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance\n     * @param {Grid.column.Column} params.event.column The column\n     * @param {Event} params.event.domEvent The browser event\n     */\n    (e: 'beforeColumnResize', params: ((event: { source: Grid, column: Column, domEvent: Event }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {Grid.util.GridLocation[]} params.event.cells The cells about to be copied or cut\n     * @param {string} params.event.data The string data about to be copied or cut\n     * @param {boolean} params.event.isCut `true` if this is a cut action\n     * @param {string} params.event.entityName 'cell' to distinguish this event from other beforeCopy events\n     */\n    (e: 'beforeCopy', params: ((event: { source: Grid, cells: GridLocation[], data: string, isCut: boolean, entityName: string }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before CSV export starts. Return `false` to cancel the export.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {ExportConfig} params.event.config Export config\n     * @param {Grid.column.Column[]} params.event.columns An array of columns to export\n     * @param {Core.data.Model[]} params.event.rows An array of records to export\n     * @param {string} params.event.lineDelimiter The CSV delimiter to separate lines\n     * @param {string} params.event.columnDelimiter The CSV delimiter to separate values on one line\n     */\n    (e: 'beforeCSVExport', params: ((event: { config: ExportConfig, columns: Column[], rows: Model[], lineDelimiter: string, columnDelimiter: string }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires before an object is destroyed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.Base} params.event.source The Object that is being destroyed.\n     */\n    (e: 'beforeDestroy', params: ((event: { source: Base }) => void)|string): void\n    /**\n     * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the\n     * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`\n     * for async vetoing).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-beforeEventDelete)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler,any} params.event.source The Scheduler instance\n     * @param {Scheduler.model.EventModel[]} params.event.eventRecords The records about to be deleted\n     * @param {object} params.event.context Additional removal context:\n     * @param {Function} params.event.context.finalize Function to call to finalize the removal. Used to asynchronously decide to remove the records or not. Provide `false` to the function to prevent the removal.\n     * @param {boolean} params.event.context.finalize.removeRecords Provide `false` to the function to prevent the removal.\n     */\n    (e: 'beforeEventDelete', params: ((event: { source: Scheduler|any, eventRecords: EventModel[], context: { finalize: { removeRecords?: boolean } } }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before Excel export starts. Return `false` to cancel the export.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {ExportConfig} params.event.config Export config\n     * @param {XLSColumn[]} params.event.columns An array of columns to export\n     * @param {any[][]} params.event.rows An array of records to export\n     */\n    (e: 'beforeExcelExport', params: ((event: { config: ExportConfig, columns: XLSColumn[], rows: any[] }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before dragging of the FillHandle starts, return `false` to prevent the drag operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.util.GridLocation} params.event.cell Information about the column / record\n     * @param {MouseEvent} params.event.domEvent The raw DOM event\n     */\n    (e: 'beforeFillHandleDragStart', params: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid Target grid\n     * @param {Grid.util.GridLocation} params.event.editorContext Editing context\n     * @param {Core.widget.Editor} params.event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.\n     * @param {Grid.column.Column} params.event.editorContext.column Target column\n     * @param {Core.data.Model} params.event.editorContext.record Target record\n     * @param {HTMLElement} params.event.editorContext.cell Target cell\n     * @param {any} params.event.editorContext.value The cell value\n     * @param {any} params.event.editorContext.oldValue The old value\n     */\n    (e: 'beforeFinishCellEdit', params: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any, oldValue: any } }) => void)|string): void\n    /**\n     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-beforeFinishRowEdit)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid Target grid\n     * @param {Core.widget.Panel} params.event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.\n     * @param {Core.data.Model} params.event.record The record being edited\n     */\n    (e: 'beforeFinishRowEdit', params: ((event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Triggered before a widget is hidden. Return `false` to prevent the action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget being hidden.\n     */\n    (e: 'beforeHide', params: ((event: { source: Widget }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires before the component stores a record's histogram data into the cache.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-beforeHistogramDataCacheSet)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.TimelineHistogram} params.event.source The component instance\n     * @param {Core.data.Model} params.event.record Record the histogram data of which is ready.\n     * @param {object} params.event.data The record histogram data.\n     */\n    (e: 'beforeHistogramDataCacheSet', params: ((event: { source: TimelineHistogram, record: Model, data: object }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler or Gantt widget before pan starts. Return `false` to prevent the operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Event} params.event.event The native browser DOM event\n     */\n    (e: 'beforePan', params: ((event: { event: Event }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {string} params.event.clipboardData The clipboardData about to be pasted\n     * @param {Grid.util.GridLocation} params.event.targetCell The cell from which the paste will be started\n     * @param {string} params.event.entityName 'cell' to distinguish this event from other beforePaste events\n     */\n    (e: 'beforePaste', params: ((event: { source: Grid, clipboardData: string, targetCell: GridLocation, entityName: string }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before export started. Return `false` to cancel the export.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {object} params.event.config Export config\n     */\n    (e: 'beforePdfExport', params: ((event: { config: object }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before the [viewPreset](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) is changed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler instance.\n     * @param {Date} params.event.startDate The new start date of the timeline.\n     * @param {Date} params.event.endDate The new end date of the timeline.\n     * @param {Scheduler.preset.ViewPreset} params.event.from The outgoing ViewPreset.\n     * @param {Scheduler.preset.ViewPreset} params.event.to The ViewPreset being switched to.\n     */\n    (e: 'beforePresetChange', params: ((event: { source: Scheduler, startDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires before the component renders a row.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-beforeRenderHistogramRow)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.TimelineHistogram} params.event.source The component instance\n     * @param {Core.data.Model} params.event.record Record the histogram data of which is ready.\n     * @param {HistogramConfig} params.event.histogramConfig Configuration object that will be applied to `histogramWidget`.\n     * @param {Core.widget.graph.Histogram} params.event.histogramWidget The underlying widget that is used to render a chart.\n     */\n    (e: 'beforeRenderHistogramRow', params: ((event: { source: TimelineHistogram, record: Model, histogramConfig: HistogramConfig, histogramWidget: Histogram }) => void)|string): void\n    /**\n     * Fires before the component renders a histogram in a cell.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.TimelineHistogram} params.event.source The component instance\n     * @param {Core.data.Model} params.event.record Record the histogram data of which is ready.\n     * @param {HistogramConfig} params.event.histogramConfig Configuration object that will be applied to `histogramWidget`.\n     * @param {Core.widget.graph.Histogram} params.event.histogramWidget The underlying widget that is used to render a chart.\n     */\n    (e: 'beforeRenderRecordHistogram', params: ((event: { source: TimelineHistogram, record: Model, histogramConfig: HistogramConfig, histogramWidget: Histogram }) => void)|string): void\n    /**\n     * Fires before a row is rendered.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The firing Grid instance.\n     * @param {Grid.row.Row} params.event.row The row about to be rendered.\n     * @param {Core.data.Model} params.event.record The record for the row.\n     * @param {number} params.event.recordIndex The zero-based index of the record.\n     */\n    (e: 'beforeRenderRow', params: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string): void\n    /**\n     * Grid rows are about to be rendered\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source This grid.\n     */\n    (e: 'beforeRenderRows', params: ((event: { source: Grid }) => void)|string): void\n    /**\n     * This event fires before row collapse is started.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-beforeRowCollapse)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.data.Model} params.event.record Record\n     */\n    (e: 'beforeRowCollapse', params: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * This event fires before row expand is started.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-beforeRowExpand)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.data.Model} params.event.record Record\n     */\n    (e: 'beforeRowExpand', params: ((event: { record: Model }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires before the selection changes. Returning `false` from a listener prevents the change\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {string} params.event.action `'select'`/`'deselect'`\n     * @param {'row','cell'} params.event.mode `'row'`/`'cell'`\n     * @param {Grid.view.Grid} params.event.source\n     * @param {Core.data.Model[]} params.event.deselected The records to be deselected in this operation.\n     * @param {Core.data.Model[]} params.event.selected The records to be selected in this operation.\n     * @param {Core.data.Model[]} params.event.selection The records in the current selection, before applying `selected` and `deselected`\n     * @param {Grid.util.GridLocation[]} params.event.deselectedCells The cells to be deselected in this operation.\n     * @param {Grid.util.GridLocation[]} params.event.selectedCells The cells to be selected in this operation.\n     * @param {Grid.util.GridLocation[]} params.event.cellSelection The cells in the current selection, before applying `selectedCells` and `deselectedCells`\n     */\n    (e: 'beforeSelectionChange', params: ((event: { action: string, mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before this container will load record values into its child fields. This is useful if you\n     * want to modify the UI before data is loaded (e.g. set some input field to be readonly)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Container} params.event.source The container\n     * @param {Core.data.Model} params.event.record The record\n     */\n    (e: 'beforeSetRecord', params: ((event: { source: Container, record: Model }) => void)|string): void\n    /**\n     * Triggered before a widget is shown. Return `false` to prevent the action.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget,any} params.event.source The widget being shown\n     */\n    (e: 'beforeShow', params: ((event: { source: Widget|any }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid before editing starts, return `false` to prevent editing\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {Grid.util.GridLocation} params.event.editorContext Editing context\n     * @param {Grid.column.Column} params.event.editorContext.column Target column\n     * @param {Core.data.Model} params.event.editorContext.record Target record\n     * @param {HTMLElement} params.event.editorContext.cell Target cell\n     * @param {Core.widget.Field} params.event.editorContext.editor The [Panel](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel) instance which contains the editor fields.\n     */\n    (e: 'beforeStartRowEdit', params: ((event: { source: Grid, editorContext: { column: Column, record: Model, cell: HTMLElement, editor: Field } }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before state is applied to the source. Allows editing the state object or preventing the operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {object} params.event.event The Bryntum event object\n     * @param {object} params.event.event.state State object config\n     */\n    (e: 'beforeStateApply', params: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before state is saved by the StateProvider. Allows editing the state object or preventing the operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {object} params.event.event The Bryntum event object\n     * @param {object} params.event.event.state State object config\n     */\n    (e: 'beforeStateSave', params: ((event: { event: { state: object } }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired when a group is going to be expanded or collapsed using the UI.\n     * Returning `false` from a listener prevents the operation\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.data.Model} params.event.groupRecord [DEPRECATED] Use `groupRecords` param instead\n     * @param {Core.data.Model[]} params.event.groupRecords The group records being toggled\n     * @param {boolean} params.event.collapse Collapsed (true) or expanded (false)\n     * @param {Event} params.event.domEvent The user interaction event (eg a `click` event) if the toggle request was instigated by user interaction.\n     */\n    (e: 'beforeToggleGroup', params: ((event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, domEvent: Event }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before a parent node record toggles its collapsed state.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The firing Grid instance.\n     * @param {Core.data.Model} params.event.record The record being toggled.\n     * @param {boolean} params.event.collapse `true` if the node is being collapsed.\n     */\n    (e: 'beforeToggleNode', params: ((event: { source: Grid, record: Model, collapse: boolean }) => void)|string): void\n    /**\n     * Fires on the owning Grid when editing is cancelled\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {Grid.util.GridLocation} params.event.editorContext Editing context\n     * @param {Event} params.event.event Included if the cancellation was triggered by a DOM event\n     */\n    (e: 'cancelCellEdit', params: ((event: { source: Grid, editorContext: GridLocation, event: Event }) => void)|string): void\n    /**\n     * Fires when any other event is fired from the object.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-catchAll)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {{[key: string]: any, type: string}} params.event.event The Object that contains event details\n     * @param {string} params.event.event.type The type of the event which is caught by the listener\n     */\n    (e: 'catchAll', params: ((event: {[key: string]: any, type: string}) => void)|string): void\n    /**\n     * Fired when user clicks in a grid cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid The grid instance\n     * @param {Core.data.Model} params.event.record The record representing the row\n     * @param {Grid.column.Column} params.event.column The column to which the cell belongs\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {HTMLElement} params.event.target The target element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellClick', params: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when user activates contextmenu in a grid cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid The grid instance\n     * @param {Core.data.Model} params.event.record The record representing the row\n     * @param {Grid.column.Column} params.event.column The column to which the cell belongs\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {HTMLElement} params.event.target The target element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellContextMenu', params: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when user double clicks a grid cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid The grid instance\n     * @param {Core.data.Model} params.event.record The record representing the row\n     * @param {Grid.column.Column} params.event.column The column to which the cell belongs\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {HTMLElement} params.event.target The target element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellDblClick', params: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * This event fires on the owning grid before the context menu is shown for a cell.\n     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/CellMenu#config-processItems).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-cellMenuBeforeShow)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Grid.column.Column} params.event.column Column\n     * @param {Core.data.Model} params.event.record Record\n     */\n    (e: 'cellMenuBeforeShow', params: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * This event fires on the owning grid when an item is selected in the cell context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Core.widget.MenuItem} params.event.item Selected menu item\n     * @param {Grid.column.Column} params.event.column Column\n     * @param {Core.data.Model} params.event.record Record\n     */\n    (e: 'cellMenuItem', params: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model }) => void)|string): void\n    /**\n     * This event fires on the owning grid after the context menu is shown for a cell.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Grid.column.Column} params.event.column Column\n     * @param {Core.data.Model} params.event.record Record\n     */\n    (e: 'cellMenuShow', params: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, record: Model }) => void)|string): void\n    /**\n     * This event fires on the owning grid when a check item is toggled in the cell context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Core.widget.MenuItem} params.event.item Selected menu item\n     * @param {Grid.column.Column} params.event.column Column\n     * @param {Core.data.Model} params.event.record Record\n     * @param {boolean} params.event.checked Checked or not\n     */\n    (e: 'cellMenuToggleItem', params: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, record: Model, checked: boolean }) => void)|string): void\n    /**\n     * Fired when the mouse enters a cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance\n     * @param {Core.data.Model} params.event.record The record representing the hovered cell\n     * @param {Grid.column.Column} params.event.column The column currently hovered\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellMouseEnter', params: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when the mouse leaves a cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance\n     * @param {Core.data.Model} params.event.record The record representing the cell that the mouse left\n     * @param {Grid.column.Column} params.event.column The column representing the cell that the mouse left\n     * @param {HTMLElement} params.event.cellElement The cell HTML element that the mouse left\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellMouseLeave', params: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when a user moves the mouse out of a grid cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid The grid instance\n     * @param {Core.data.Model} params.event.record The record representing the row\n     * @param {Grid.column.Column} params.event.column The column to which the cell belongs\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {HTMLElement} params.event.target The target element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellMouseOut', params: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when user moves the mouse over a grid cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid The grid instance\n     * @param {Core.data.Model} params.event.record The record representing the row\n     * @param {Grid.column.Column} params.event.column The column to which the cell belongs\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {HTMLElement} params.event.target The target element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'cellMouseOver', params: ((event: { grid: Grid, record: Model, column: Column, cellElement: HTMLElement, target: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fires when a Panel is collapsed using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Panel} params.event.source This Panel.\n     */\n    (e: 'collapse', params: ((event: { source: Panel }) => void)|string): void\n    /**\n     * Fired before a parent node record is collapsed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The firing Grid instance.\n     * @param {Core.data.Model} params.event.record The record which has been collapsed.\n     */\n    (e: 'collapseNode', params: ((event: { source: Grid, record: Model }) => void)|string): void\n    /**\n     * This event is fired when a column is being dragged, and you can set the `valid` flag on t\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance.\n     * @param {Grid.column.Column} params.event.column The dragged column.\n     * @param {Grid.column.Column} params.event.insertBefore The column before which the dragged column will be inserted.\n     * @param {Event} params.event.event The browser event.\n     * @param {object} params.event.context\n     * @param {boolean} params.event.context.valid Set this to true or false to indicate whether the drop position is valid.\n     */\n    (e: 'columnDrag', params: ((event: { source: Grid, column: Column, insertBefore: Column, event: Event, context: { valid: boolean } }) => void)|string): void\n    /**\n     * This event is fired when a column drag gesture has started.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance.\n     * @param {Grid.column.Column} params.event.column The dragged column.\n     * @param {Event} params.event.event The browser event.\n     */\n    (e: 'columnDragStart', params: ((event: { source: Grid, column: Column, event: Event }) => void)|string): void\n    /**\n     * This event is always fired after a column is dropped. The `valid` param is true if the operation was not\n     * vetoed and the column was moved in the column store.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance.\n     * @param {Grid.column.Column} params.event.column The dragged column.\n     * @param {Grid.column.Column} params.event.insertBefore The column before which the dragged column will be inserted.\n     * @param {Grid.column.Column} params.event.newParent The new parent column.\n     * @param {boolean} params.event.valid true if the operation was not vetoed.\n     * @param {Event} params.event.event The browser event.\n     * @param {string} params.event.region The region where the column was dropped.\n     */\n    (e: 'columnDrop', params: ((event: { source: Grid, column: Column, insertBefore: Column, newParent: Column, valid: boolean, event: Event, region: string }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * This event is fired after a resize gesture is completed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance\n     * @param {Grid.column.Column} params.event.column The resized column\n     * @param {Event} params.event.domEvent The browser event\n     */\n    (e: 'columnResize', params: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string): void\n    /**\n     * This event is fired when a column resize gesture starts.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance\n     * @param {Grid.column.Column} params.event.column The column\n     * @param {Event} params.event.domEvent The browser event\n     */\n    (e: 'columnResizeStart', params: ((event: { source: Grid, column: Column, domEvent: Event }) => void)|string): void\n    /**\n     * This event fires on the owning widget when an item is selected in the context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The owning widget\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Core.widget.MenuItem} params.event.item Selected menu item\n     */\n    (e: 'contextMenuItem', params: ((event: { source: Widget, menu: Menu, item: MenuItem }) => void)|string): void\n    /**\n     * This event fires on the owning widget when a check item is toggled in the context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The owning widget\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Core.widget.MenuItem} params.event.item Selected menu item\n     * @param {boolean} params.event.checked Checked or not\n     */\n    (e: 'contextMenuToggleItem', params: ((event: { source: Widget, menu: Menu, item: MenuItem, checked: boolean }) => void)|string): void\n    /**\n     * Fires on the owning Grid after a copy action is performed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {Grid.util.GridLocation[]} params.event.cells The cells about to be copied or cut\n     * @param {string} params.event.copiedDataString The concatenated data string that was copied or cut\n     * @param {boolean} params.event.isCut `true` if this was a cut action\n     * @param {string} params.event.entityName 'cell' to distinguish this event from other copy events\n     */\n    (e: 'copy', params: ((event: { source: Grid, cells: GridLocation[], copiedDataString: string, isCut: boolean, entityName: string }) => void)|string): void\n    /**\n     * Fires on the owning Scheduler/Gantt when the line indicating the current time is updated (see [currentTimeLineUpdateInterval](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/TimeRanges#config-currentTimeLineUpdateInterval)).\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source The scheduler\n     * @param {Date} params.event.date The current date\n     */\n    (e: 'currentTimelineUpdate', params: ((event: { source: Scheduler, date: Date }) => void)|string): void\n    /**\n     * Fired when data in the store changes.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-dataChange)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owning grid\n     * @param {Core.data.Store} params.event.store The originating store\n     * @param {'remove','removeAll','add','clearchanges','filter','update','dataset','replace'} params.event.action Name of action which triggered the change. May be one of:  * `'remove'` * `'removeAll'` * `'add'` * `'clearchanges'` * `'filter'` * `'update'` * `'dataset'` * `'replace'`\n     * @param {Core.data.Model} params.event.record Changed record, for actions that affects exactly one record (`'update'`)\n     * @param {Core.data.Model[]} params.event.records Changed records, passed for all actions except `'removeAll'`\n     * @param {object} params.event.changes Passed for the `'update'` action, info on which record fields changed\n     */\n    (e: 'dataChange', params: ((event: { source: Grid, store: Store, action: 'remove'|'removeAll'|'add'|'clearchanges'|'filter'|'update'|'dataset'|'replace', record: Model, records: Model[], changes: object }) => void)|string): void\n    /**\n     * Fired when the range of dates encapsulated by the UI changes. This will be when\n     * moving a view in time by reconfiguring its [timeAxis](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineBase#config-timeAxis). This will happen\n     * when zooming, or changing [viewPreset](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineBase#config-viewPreset).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-dateRangeChange)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.TimelineBase} params.event.source This Scheduler/Gantt instance.\n     * @param {object} params.event.old The old date range\n     * @param {Date} params.event.old.startDate the old start date.\n     * @param {Date} params.event.old.endDate the old end date.\n     * @param {object} params.event.new The new date range\n     * @param {Date} params.event.new.startDate the new start date.\n     * @param {Date} params.event.new.endDate the new end date.\n     */\n    (e: 'dateRangeChange', params: ((event: { source: TimelineBase, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string): void\n    /**\n     * Fires when an object is destroyed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.Base} params.event.source The Object that is being destroyed.\n     */\n    (e: 'destroy', params: ((event: { source: Base }) => void)|string): void\n    /**\n     * Fires when a field is mutated and the state of the [hasChanges](https://bryntum.com/products/calendar/docs/api/Core/widget/Container#property-hasChanges) property changes\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Container} params.event.source The container.\n     * @param {boolean} params.event.dirty The dirty state of the Container - `true` if there are any fields which have been changed since initial load.\n     */\n    (e: 'dirtyStateChange', params: ((event: { source: Container, dirty: boolean }) => void)|string): void\n    /**\n     * Fires while drag selecting. UI will update with current range, but the cells will not be selected until\n     * mouse up. This event can be listened for to perform actions while drag selecting.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source\n     * @param {GridLocationConfig[],Grid.util.GridLocation[]} params.event.selectedCells The cells that is currently being dragged over\n     * @param {Core.data.Model[]} params.event.selectedRecords The records that is currently being dragged over\n     */\n    (e: 'dragSelecting', params: ((event: { source: Grid, selectedCells: GridLocationConfig[]|GridLocation[], selectedRecords: Model[] }) => void)|string): void\n    /**\n     * Fires when a Panel is expanded using the [collapsible](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-collapsible) setting.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Panel} params.event.source This Panel.\n     */\n    (e: 'expand', params: ((event: { source: Panel }) => void)|string): void\n    /**\n     * Fired after a parent node record is expanded.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The firing Grid instance.\n     * @param {Core.data.Model} params.event.record The record which has been expanded.\n     */\n    (e: 'expandNode', params: ((event: { source: Grid, record: Model }) => void)|string): void\n    /**\n     * Fired when a file is dropped on the widget element\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The owning Grid instance\n     * @param {DataTransferItem} params.event.file The dropped file descriptor\n     * @param {DragEvent} params.event.domEvent The native DragEvent\n     */\n    (e: 'fileDrop', params: ((event: { source: Grid, file: DataTransferItem, domEvent: DragEvent }) => void)|string): void\n    /**\n     * Fired before the FillHandle dragging is finalized and values are applied to cells, return `false` to prevent the\n     * drag operation from applying data changes.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.util.GridLocation} params.event.from The from cell\n     * @param {Grid.util.GridLocation} params.event.to The to cell\n     * @param {MouseEvent} params.event.domEvent The raw DOM event\n     */\n    (e: 'fillHandleBeforeDragFinalize', params: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired while dragging the FillHandle.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.util.GridLocation} params.event.from The from cell\n     * @param {Grid.util.GridLocation} params.event.to The to cell\n     * @param {MouseEvent} params.event.domEvent The raw DOM event\n     */\n    (e: 'fillHandleDrag', params: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired when a FillHandle drag operation is aborted.\n     */\n    (e: 'fillHandleDragAbort', params: (() => void)|string): void\n    /**\n     * Fired after a FillHandle drag operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.util.GridLocation} params.event.from The from cell\n     * @param {Grid.util.GridLocation} params.event.to The to cell\n     * @param {MouseEvent} params.event.domEvent The raw DOM event\n     */\n    (e: 'fillHandleDragEnd', params: ((event: { from: GridLocation, to: GridLocation, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired when dragging of the FillHandle starts.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.util.GridLocation} params.event.cell Information about the column / record\n     * @param {MouseEvent} params.event.domEvent The raw DOM event\n     */\n    (e: 'fillHandleDragStart', params: ((event: { cell: GridLocation, domEvent: MouseEvent }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid when cell editing is finished\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid Target grid\n     * @param {Grid.util.GridLocation} params.event.editorContext Editing context\n     * @param {Core.widget.Editor} params.event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.\n     * @param {Grid.column.Column} params.event.editorContext.column Target column\n     * @param {Core.data.Model} params.event.editorContext.record Target record\n     * @param {HTMLElement} params.event.editorContext.cell Target cell\n     * @param {any} params.event.editorContext.value Cell value\n     */\n    (e: 'finishCellEdit', params: ((event: { grid: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string): void\n    /**\n     * Fires on the owning Grid before the row editing is finished, return false to signal that the value is invalid and editing should not be finalized.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-finishRowEdit)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid Target grid\n     * @param {Core.widget.Panel} params.event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.\n     * @param {Core.data.Model} params.event.record The record that has been edited\n     */\n    (e: 'finishRowEdit', params: ((event: { grid: Grid, editorContext: { editor: Panel }, record: Model }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired when focus enters this Widget.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source This Widget\n     * @param {HTMLElement} params.event.fromElement The element which lost focus.\n     * @param {HTMLElement} params.event.toElement The element which gained focus.\n     * @param {Core.widget.Widget} params.event.fromWidget The widget which lost focus.\n     * @param {Core.widget.Widget} params.event.toWidget The widget which gained focus.\n     * @param {boolean} params.event.backwards `true` if the `toElement` is before the `fromElement` in document order.\n     */\n    (e: 'focusIn', params: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string): void\n    /**\n     * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.\n     * focus moving from within this Widget's ownership tree, even if there are floating widgets\n     * will not trigger this event. This is when focus exits this widget completely.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source This Widget\n     * @param {HTMLElement} params.event.fromElement The element which lost focus.\n     * @param {HTMLElement} params.event.toElement The element which gained focus.\n     * @param {Core.widget.Widget} params.event.fromWidget The widget which lost focus.\n     * @param {Core.widget.Widget} params.event.toWidget The widget which gained focus.\n     * @param {boolean} params.event.backwards `true` if the `toElement` is before the `fromElement` in document order.\n     */\n    (e: 'focusOut', params: ((event: { source: Widget, fromElement: HTMLElement, toElement: HTMLElement, fromWidget: Widget, toWidget: Widget, backwards: boolean }) => void)|string): void\n    /**\n     * Fired before dragging starts, return false to prevent the drag operation.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {Core.data.Model[]} params.event.context.records The dragged row records\n     * @param {MouseEvent,TouchEvent} params.event.event\n     */\n    (e: 'gridRowBeforeDragStart', params: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a\n     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {boolean} params.event.context.valid Set this to true or false to indicate whether the drop position is valid\n     * @param {Core.data.Model} params.event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} params.event.context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} params.event.context.records The dragged row records\n     * @param {RecordPositionContext[]} params.event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the `record`, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'gridRowBeforeDropFinalize', params: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /\n     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is\n     * valid or invalid by setting `context.valid = false;`\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {boolean} params.event.context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {Core.data.Model} params.event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} params.event.context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} params.event.context.records The dragged row records\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'gridRowDrag', params: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[] }, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when a row drag operation is aborted\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {Core.data.Model[]} params.event.context.records The dragged row records\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'gridRowDragAbort', params: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when dragging starts.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {Core.data.Model[]} params.event.context.records The dragged row records\n     * @param {MouseEvent,TouchEvent} params.event.event\n     */\n    (e: 'gridRowDragStart', params: ((event: { source: GridBase, context: { records: Model[] }, event: MouseEvent|TouchEvent }) => void)|string): void\n    /**\n     * Fired after the row drop operation has completed, regardless of validity\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.GridBase} params.event.source\n     * @param {object} params.event.context\n     * @param {boolean} params.event.context.valid true or false depending on whether the drop position was valid\n     * @param {Core.data.Model} params.event.context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} params.event.context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} params.event.context.records The dragged row records\n     * @param {RecordPositionContext[]} params.event.context.oldPositionContext An array of objects with information about the previous tree position. Objects contain the record, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} params.event.event\n     */\n    (e: 'gridRowDrop', params: ((event: { source: GridBase, context: { valid: boolean, insertBefore: Model, parent: Model, records: Model[], oldPositionContext: RecordPositionContext[] }, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when a grid header is clicked on.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-headerClick)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Event} params.event.domEvent The triggering DOM event.\n     * @param {Grid.column.Column} params.event.column The column clicked on.\n     */\n    (e: 'headerClick', params: ((event: { domEvent: Event, column: Column }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * This event fires on the owning Grid before the context menu is shown for a header.\n     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Grid/feature/HeaderMenu#config-processItems).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-headerMenuBeforeShow)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Grid.column.Column} params.event.column Column\n     */\n    (e: 'headerMenuBeforeShow', params: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * This event fires on the owning Grid when an item is selected in the header context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Core.widget.MenuItem} params.event.item Selected menu item\n     * @param {Grid.column.Column} params.event.column Column\n     */\n    (e: 'headerMenuItem', params: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column }) => void)|string): void\n    /**\n     * This event fires on the owning Grid after the context menu is shown for a header\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Grid.column.Column} params.event.column Column\n     */\n    (e: 'headerMenuShow', params: ((event: { source: Grid, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => void)|string): void\n    /**\n     * This event fires on the owning Grid when a check item is toggled in the header context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Core.widget.MenuItem} params.event.item Selected menu item\n     * @param {Grid.column.Column} params.event.column Column\n     * @param {boolean} params.event.checked Checked or not\n     */\n    (e: 'headerMenuToggleItem', params: ((event: { source: Grid, menu: Menu, item: MenuItem, column: Column, checked: boolean }) => void)|string): void\n    /**\n     * Triggered after a widget was hidden\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget\n     */\n    (e: 'hide', params: ((event: { source: Widget }) => void)|string): void\n    /**\n     * Fires after the component retrieves a record's histogram data and stores\n     * it into the cache.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-histogramDataCacheSet)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.TimelineHistogram} params.event.source The component instance\n     * @param {Core.data.Model} params.event.record Record the histogram data of which is ready.\n     * @param {object} params.event.data The record histogram data.\n     */\n    (e: 'histogramDataCacheSet', params: ((event: { source: TimelineHistogram, record: Model, data: object }) => void)|string): void\n    /**\n     * Fires when row locking is enabled.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.GridBase} params.event.clone The created clone\n     */\n    (e: 'lockRows', params: ((event: { clone: GridBase }) => void)|string): void\n    /**\n     * Mouse moved out from element in grid\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {MouseEvent} params.event.event The native browser event\n     */\n    (e: 'mouseOut', params: ((event: { event: MouseEvent }) => void)|string): void\n    /**\n     * Mouse moved in over element in grid\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {MouseEvent} params.event.event The native browser event\n     */\n    (e: 'mouseOver', params: ((event: { event: MouseEvent }) => void)|string): void\n    /**\n     * Triggered when a widget which had been in a non-visible state for any reason\n     * achieves visibility.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-paint)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget being painted.\n     * @param {boolean} params.event.firstPaint `true` if this is the first paint.\n     */\n    (e: 'paint', params: ((event: { source: Widget, firstPaint: boolean }) => void)|string): void\n    /**\n     * Fires on the owning Grid after a paste action is performed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {string} params.event.clipboardData The clipboardData that was pasted\n     * @param {Core.data.Model[]} params.event.modifiedRecords The records which have been modified due to the paste action\n     * @param {Grid.util.GridLocation} params.event.targetCell The cell from which the paste will be started\n     * @param {string} params.event.entityName 'cell' to distinguish this event from other paste events\n     */\n    (e: 'paste', params: ((event: { source: Grid, clipboardData: string, modifiedRecords: Model[], targetCell: GridLocation, entityName: string }) => void)|string): void\n    /**\n     * Fires on the owning Grid when export has finished\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Response} params.event.response Optional response, if received\n     * @param {Error} params.event.error Optional error, if exception occurred\n     */\n    (e: 'pdfExport', params: ((event: { response?: any, error?: Error }) => void)|string): void\n    /**\n     * Fired after the [viewPreset](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineViewPresets#config-viewPreset) has changed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler instance.\n     * @param {Date} params.event.startDate The new start date of the timeline.\n     * @param {Date} params.event.centerDate The new center date of the timeline.\n     * @param {Date} params.event.endDate The new end date of the timeline.\n     * @param {Scheduler.preset.ViewPreset} params.event.from The outgoing ViewPreset.\n     * @param {Scheduler.preset.ViewPreset} params.event.to The ViewPreset being switched to.\n     */\n    (e: 'presetChange', params: ((event: { source: Scheduler, startDate: Date, centerDate: Date, endDate: Date, from: ViewPreset, to: ViewPreset }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired when a Widget's read only state is toggled\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {boolean} params.event.readOnly Read only or not\n     */\n    (e: 'readOnly', params: ((event: { readOnly: boolean }) => void)|string): void\n    /**\n     * This event is fired after a widget's elements have been synchronized due to a direct or indirect call\n     * to [recompose](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#function-recompose), if this results in some change to the widget's rendered DOM elements.\n     */\n    (e: 'recompose', params: (() => void)|string): void\n    /**\n     * Fires after a row is rendered.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The firing Grid instance.\n     * @param {Grid.row.Row} params.event.row The row that has been rendered.\n     * @param {Core.data.Model} params.event.record The record for the row.\n     * @param {number} params.event.recordIndex The zero-based index of the record.\n     */\n    (e: 'renderRow', params: ((event: { source: Grid, row: Row, record: Model, recordIndex: number }) => void)|string): void\n    /**\n     * Grid rows have been rendered\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source This grid.\n     */\n    (e: 'renderRows', params: ((event: { source: Grid }) => void)|string): void\n    /**\n     * Fired when the encapsulating element of a Widget resizes *only when [monitorResize](https://bryntum.com/products/calendar/docs/api/Core/widget/Widget#config-monitorResize) is `true`*.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source This Widget\n     * @param {number} params.event.width The new width\n     * @param {number} params.event.height The new height\n     * @param {number} params.event.oldWidth The old width\n     * @param {number} params.event.oldHeight The old height\n     */\n    (e: 'resize', params: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string): void\n    /**\n     * This event fires on the owning scheduler before the context menu is shown for a resource.\n     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/ResourceMenu#config-processItems).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-resourceMenuBeforeShow)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Grid.column.Column} params.event.column Column\n     * @param {Scheduler.model.ResourceModel} params.event.resourceRecord Record\n     */\n    (e: 'resourceMenuBeforeShow', params: ((event: { source: Scheduler, menu: Menu, items: Record<string, MenuItemConfig>, column: Column, resourceRecord: ResourceModel }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * This event fires on the owning scheduler when an item is selected in the context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Core.widget.MenuItem} params.event.item Selected menu item\n     * @param {Scheduler.model.ResourceModel} params.event.record Record\n     */\n    (e: 'resourceMenuItem', params: ((event: { source: Scheduler, menu: Menu, item: MenuItem, record: ResourceModel }) => void)|string): void\n    /**\n     * This event fires on the owning scheduler after the context menu is shown for a resource.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Scheduler.model.ResourceModel} params.event.record Record\n     */\n    (e: 'resourceMenuShow', params: ((event: { source: Scheduler, menu: Menu, items: Record<string, MenuItemConfig>, record: ResourceModel }) => void)|string): void\n    /**\n     * This event fires on the owning grid when a check item is toggled in the context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source The grid\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Core.widget.MenuItem} params.event.item Selected menu item\n     * @param {Scheduler.model.ResourceModel} params.event.resourceRecord Record\n     * @param {boolean} params.event.checked Checked or not\n     */\n    (e: 'resourceMenuToggleItem', params: ((event: { source: Scheduler, menu: Menu, item: MenuItem, resourceRecord: ResourceModel, checked: boolean }) => void)|string): void\n    /**\n     * Triggered for click on a resource time range. Only triggered if the ResourceTimeRange feature is configured with\n     * `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeClick', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: ResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for right-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeContextMenu', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: ResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for double-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeDblClick', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: ResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse down ona resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeMouseDown', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: ResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse out of a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeMouseOut', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: ResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse over on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeMouseOver', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: ResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Triggered for mouse up ona resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} params.event.feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} params.event.resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} params.event.resourceRecord Resource record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'resourceTimeRangeMouseUp', params: ((event: { source: Scheduler, feature: ResourceTimeRanges, resourceTimeRangeRecord: ResourceTimeRangeModel, resourceRecord: ResourceModel, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Grid resize lead to a new responsive level being applied\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.grid Grid that was resized\n     * @param {string} params.event.level New responsive level (small, large, etc)\n     * @param {number} params.event.width New width in px\n     * @param {string} params.event.oldLevel Old responsive level\n     * @param {number} params.event.oldWidth Old width in px\n     */\n    (e: 'responsive', params: ((event: { grid: Grid, level: string, width: number, oldLevel: string, oldWidth: number }) => void)|string): void\n    /**\n     * This event fires when a row has finished collapsing.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.data.Model} params.event.record Record\n     */\n    (e: 'rowCollapse', params: ((event: { record: Model }) => void)|string): void\n    /**\n     * This event fires when a row expand has finished expanding.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-rowExpand)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.data.Model} params.event.record Record\n     * @param {object} params.event.expandedElements An object with the Grid region name as property and the expanded body element as value\n     * @param {Core.widget.Widget} params.event.widget In case of expanding a Widget, this will be a reference to the instance created by the actual expansion. If there is multiple Grid regions, use the `widgets` param instead.\n     * @param {object} params.event.widgets In case of expanding a Widget, this will be an object with the Grid region name as property and the reference to the widget instance created by the actual expansion\n     */\n    (e: 'rowExpand', params: ((event: { record: Model, expandedElements: object, widget: Widget, widgets: object }) => void)|string): void\n    /**\n     * Fired when the mouse enters a row\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance\n     * @param {Core.data.Model} params.event.record The record representing the hovered row\n     * @param {Grid.column.Column} params.event.column The column currently hovered\n     * @param {HTMLElement} params.event.cellElement The cell HTML element\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'rowMouseEnter', params: ((event: { source: Grid, record: Model, column: Column, cellElement: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Fired when the mouse leaves a row\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The grid instance\n     * @param {Core.data.Model} params.event.record The record representing the row that the mouse left\n     * @param {HTMLElement} params.event.cellElement The cell HTML element that the mouse left\n     * @param {MouseEvent} params.event.event The native DOM event\n     */\n    (e: 'rowMouseLeave', params: ((event: { source: Grid, record: Model, cellElement: HTMLElement, event: MouseEvent }) => void)|string): void\n    /**\n     * Grid has scrolled vertically\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The firing Grid instance.\n     * @param {number} params.event.scrollTop The vertical scroll position.\n     */\n    (e: 'scroll', params: ((event: { source: Grid, scrollTop: number }) => void)|string): void\n    /**\n     * The selection has been changed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {'select','deselect'} params.event.action `'select'`/`'deselect'`\n     * @param {'row','cell'} params.event.mode `'row'`/`'cell'`\n     * @param {Grid.view.Grid} params.event.source\n     * @param {Core.data.Model[]} params.event.deselected The records deselected in this operation.\n     * @param {Core.data.Model[]} params.event.selected The records selected in this operation.\n     * @param {Core.data.Model[]} params.event.selection The records in the new selection.\n     * @param {Grid.util.GridLocation[]} params.event.deselectedCells The cells deselected in this operation.\n     * @param {Grid.util.GridLocation[]} params.event.selectedCells The cells selected in this operation.\n     * @param {Grid.util.GridLocation[]} params.event.cellSelection The cells in the new selection.\n     */\n    (e: 'selectionChange', params: ((event: { action: 'select'|'deselect', mode: 'row'|'cell', source: Grid, deselected: Model[], selected: Model[], selection: Model[], deselectedCells: GridLocation[], selectedCells: GridLocation[], cellSelection: GridLocation[] }) => void)|string): void\n    /**\n     * The selectionMode configuration has been changed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {object} params.event.selectionMode The new [selectionMode](https://bryntum.com/products/calendar/docs/api/Grid/view/mixin/GridSelection#config-selectionMode)\n     */\n    (e: 'selectionModeChange', params: ((event: { selectionMode: object }) => void)|string): void\n    /**\n     * Triggered after a widget is shown.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source The widget\n     */\n    (e: 'show', params: ((event: { source: Widget }) => void)|string): void\n    /**\n     * Fires when splitting the Grid.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.GridBase[]} params.event.subViews The sub views created by the split\n     * @param {object} params.event.options The options passed to the split call\n     * @param {'horizontal','vertical','both'} params.event.options.direction The direction of the split\n     * @param {Grid.column.Column} params.event.options.atColumn The column to split at\n     * @param {Core.data.Model} params.event.options.atRecord The record to split at\n     */\n    (e: 'split', params: ((event: { subViews: GridBase[], options: { direction: 'horizontal'|'vertical'|'both', atColumn: Column, atRecord: Model } }) => void)|string): void\n    /**\n     * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,\n     * if you want to implement your own behavior.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The Grid instance.\n     * @param {Grid.view.SubGrid} params.event.subGrid The subgrid\n     * @param {Event} params.event.domEvent The native DOM event\n     */\n    (e: 'splitterCollapseClick', params: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fired by the Grid after a sub-grid has been resized using the splitter\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The Grid instance.\n     * @param {Grid.view.SubGrid} params.event.subGrid The resized subgrid\n     * @param {Event} params.event.domEvent The native DOM event\n     */\n    (e: 'splitterDragEnd', params: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string): void\n    /**\n     * Fired by the Grid when a sub-grid resize gesture starts\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The Grid instance.\n     * @param {Grid.view.SubGrid} params.event.subGrid The subgrid about to be resized\n     * @param {Event} params.event.domEvent The native DOM event\n     */\n    (e: 'splitterDragStart', params: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => void)|string): void\n    /**\n     * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,\n     * if you want to implement your own behavior.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The Grid instance.\n     * @param {Grid.view.SubGrid} params.event.subGrid The subgrid\n     * @param {Event} params.event.domEvent The native DOM event\n     */\n    (e: 'splitterExpandClick', params: ((event: { source: Grid, subGrid: SubGrid, domEvent: Event }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * Fires on the owning Grid when editing starts\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {Grid.util.GridLocation} params.event.editorContext Editing context\n     * @param {Core.widget.Editor} params.event.editorContext.editor The Editor being used. Will contain an `inputField` property which is the field being used to perform the editing.\n     * @param {Grid.column.Column} params.event.editorContext.column Target column\n     * @param {Core.data.Model} params.event.editorContext.record Target record\n     * @param {HTMLElement} params.event.editorContext.cell Target cell\n     * @param {any} params.event.editorContext.value Cell value\n     */\n    (e: 'startCellEdit', params: ((event: { source: Grid, editorContext: { editor: Editor, column: Column, record: Model, cell: HTMLElement, value: any } }) => void)|string): void\n    /**\n     * Fires on the owning Grid when editing starts\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source Owner grid\n     * @param {Grid.util.GridLocation} params.event.editorContext Editing context\n     * @param {Core.widget.Panel} params.event.editorContext.editor The Panel being used. Will contain an `inputField` property which is the field being used to perform the editing.\n     * @param {Grid.column.Column} params.event.editorContext.column Target column\n     * @param {Core.data.Model} params.event.editorContext.record Target record\n     * @param {HTMLElement} params.event.editorContext.cell Target cell\n     */\n    (e: 'startRowEdit', params: ((event: { source: Grid, editorContext: { editor: Panel, column: Column, record: Model, cell: HTMLElement } }) => void)|string): void\n    /**\n     * Fires after a sub grid is collapsed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The firing Grid instance\n     * @param {Grid.view.SubGrid} params.event.subGrid The sub grid instance\n     */\n    (e: 'subGridCollapse', params: ((event: { source: Grid, subGrid: SubGrid }) => void)|string): void\n    /**\n     * Fires after a sub grid is expanded.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.Grid} params.event.source The firing Grid instance\n     * @param {Grid.view.SubGrid} params.event.subGrid The sub grid instance\n     */\n    (e: 'subGridExpand', params: ((event: { source: Grid, subGrid: SubGrid }) => void)|string): void\n    /**\n     * Fired when the tick size changes.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-tickSizeChange)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler instance.\n     * @param {number} params.event.tickSize The tick size in pixels\n     */\n    (e: 'tickSizeChange', params: ((event: { source: Scheduler, tickSize: number }) => void)|string): void\n    /**\n     * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler\n     * @param {object} params.event.config Config object used to reconfigure the time axis.\n     * @param {Date} params.event.config.startDate New start date (if supplied)\n     * @param {Date} params.event.config.endDate New end date (if supplied)\n     */\n    (e: 'timeAxisChange', params: ((event: { source: Scheduler, config: { startDate: Date, endDate: Date } }) => void)|string): void\n    /**\n     * Fires after a click on a time axis cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.column.TimeAxisColumn,Scheduler.column.VerticalTimeAxisColumn} params.event.source The column object\n     * @param {Date} params.event.startDate The start date of the header cell\n     * @param {Date} params.event.endDate The end date of the header cell\n     * @param {Event} params.event.event The event object\n     */\n    (e: 'timeAxisHeaderClick', params: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string): void\n    /**\n     * Fires after a right click on a time axis cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.column.TimeAxisColumn,Scheduler.column.VerticalTimeAxisColumn} params.event.source The column object\n     * @param {Date} params.event.startDate The start date of the header cell\n     * @param {Date} params.event.endDate The end date of the header cell\n     * @param {Event} params.event.event The event object\n     */\n    (e: 'timeAxisHeaderContextMenu', params: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string): void\n    /**\n     * Fires after a double click on a time axis cell\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.column.TimeAxisColumn,Scheduler.column.VerticalTimeAxisColumn} params.event.source The column object\n     * @param {Date} params.event.startDate The start date of the header cell\n     * @param {Date} params.event.endDate The end date of the header cell\n     * @param {Event} params.event.event The event object\n     */\n    (e: 'timeAxisHeaderDblClick', params: ((event: { source: TimeAxisColumn|VerticalTimeAxisColumn, startDate: Date, endDate: Date, event: Event }) => void)|string): void\n    /**\n     * This event fires on the owning Scheduler or Gantt widget before the context menu is shown for the time axis header.\n     * Allows manipulation of the items to show in the same way as in the [processItems](https://bryntum.com/products/calendar/docs/api/Scheduler/feature/TimeAxisHeaderMenu#config-processItems).\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-timeAxisHeaderMenuBeforeShow)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source The scheduler\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Grid.column.Column} params.event.column Time axis column\n     */\n    (e: 'timeAxisHeaderMenuBeforeShow', params: ((event: { source: Scheduler, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => Promise<boolean>|boolean|void)|string): Promise<boolean>|boolean|void\n    /**\n     * This event fires on the owning Scheduler or Gantt widget when an item is selected in the header context menu.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source The scheduler\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Core.widget.MenuItem} params.event.item Selected menu item\n     * @param {Grid.column.Column} params.event.column Time axis column\n     */\n    (e: 'timeAxisHeaderMenuItem', params: ((event: { source: Scheduler, menu: Menu, item: MenuItem, column: Column }) => void)|string): void\n    /**\n     * This event fires on the owning Scheduler or Gantt widget after the context menu is shown for a header\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source The scheduler\n     * @param {Core.widget.Menu} params.event.menu The menu\n     * @param {Record<string, MenuItemConfig>} params.event.items Menu item configs\n     * @param {Grid.column.Column} params.event.column Time axis column\n     */\n    (e: 'timeAxisHeaderMenuShow', params: ((event: { source: Scheduler, menu: Menu, items: Record<string, MenuItemConfig>, column: Column }) => void)|string): void\n    /**\n     * Fired when the pointer-activated [timelineContext](https://bryntum.com/products/calendar/docs/api/Scheduler/view/mixin/TimelineDomEvents#property-timelineContext) has changed.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {TimelineContext} params.event.oldContext The tick/resource context being deactivated.\n     * @param {TimelineContext} params.event.context The tick/resource context being activated.\n     */\n    (e: 'timelineContextChange', params: ((event: { oldContext: TimelineContext, context: TimelineContext }) => void)|string): void\n    /**\n     * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.\n     * This happens when the grid changes height, or when the subgrid which encapsulates the\n     * scheduler column changes width.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Widget} params.event.source This Scheduler\n     * @param {number} params.event.width The new width\n     * @param {number} params.event.height The new height\n     * @param {number} params.event.oldWidth The old width\n     * @param {number} params.event.oldHeight The old height\n     */\n    (e: 'timelineViewportResize', params: ((event: { source: Widget, width: number, height: number, oldWidth: number, oldHeight: number }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler or Gantt widget when a click happens on a time range header element\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source Scheduler instance\n     * @param {Scheduler.model.TimeSpan} params.event.timeRangeRecord The record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'timeRangeHeaderClick', params: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler or Gantt widget when a right click happens on a time range header element\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source Scheduler instance\n     * @param {Scheduler.model.TimeSpan} params.event.timeRangeRecord The record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'timeRangeHeaderContextMenu', params: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired on the owning Scheduler or Gantt widget when a double click happens on a time range header element\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source Scheduler instance\n     * @param {Scheduler.model.TimeSpan} params.event.timeRangeRecord The record\n     * @param {MouseEvent} params.event.domEvent Browser event\n     */\n    (e: 'timeRangeHeaderDblClick', params: ((event: { source: Scheduler, timeRangeRecord: TimeSpan, domEvent: MouseEvent }) => void)|string): void\n    /**\n     * Fired when one or more groups are expanded or collapsed\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.data.Model} params.event.groupRecord [DEPRECATED] Use `groupRecords` param instead\n     * @param {Core.data.Model[]} params.event.groupRecords The group records being toggled\n     * @param {boolean} params.event.collapse Collapsed (true) or expanded (false)\n     * @param {boolean} params.event.allRecords True if this event is part of toggling all groups\n     */\n    (e: 'toggleGroup', params: ((event: { groupRecord: Model, groupRecords: Model[], collapse: boolean, allRecords?: boolean }) => void)|string): void\n    /**\n     * Fired after a parent node record toggles its collapsed state.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.data.Model} params.event.record The record being toggled.\n     * @param {boolean} params.event.collapse `true` if the node is being collapsed.\n     */\n    (e: 'toggleNode', params: ((event: { record: Model, collapse: boolean }) => void)|string): void\n    /**\n     * A header [tool](https://bryntum.com/products/calendar/docs/api/Core/widget/Panel#config-tools) has been clicked.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Core.widget.Tool} params.event.source This Panel.\n     * @param {Core.widget.Tool} params.event.tool The tool which is being clicked.\n     */\n    (e: 'toolClick', params: ((event: { source: Tool, tool: Tool }) => void)|string): void\n    /**\n     * Fires when row locking is disabled.\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Grid.view.GridBase} params.event.clone The locked clone that will be destroyed\n     */\n    (e: 'unlockRows', params: ((event: { clone: GridBase }) => void)|string): void\n    /**\n     * Fires when un-splitting the Grid.\n     */\n    (e: 'unsplit', params: (() => void)|string): void\n    /**\n     * Fired when the range of dates visible within the viewport changes. This will be when\n     * scrolling along a time axis.\n     * ...\n     * [View online docs...](https://bryntum.com/products/calendar/docs/api/Scheduler/view/TimelineHistogram#event-visibleDateRangeChange)\n     * @param {string} e Event name\n     * @param {object} params Event parameters\n     * @param {object} params.event Event object\n     * @param {Scheduler.view.Scheduler} params.event.source This Scheduler instance.\n     * @param {object} params.event.old The old date range\n     * @param {Date} params.event.old.startDate the old start date.\n     * @param {Date} params.event.old.endDate the old end date.\n     * @param {object} params.event.new The new date range\n     * @param {Date} params.event.new.startDate the new start date.\n     * @param {Date} params.event.new.endDate the new end date.\n     */\n    (e: 'visibleDateRangeChange', params: ((event: { source: Scheduler, old: { startDate: Date, endDate: Date }, new: { startDate: Date, endDate: Date } }) => void)|string): void\n}>();\n\nconst widgetData = {\n    instanceClass : TimelineHistogram,\n    instanceName  : 'TimelineHistogram',\n\n    isView : true,\n    dataStores : {\n        'originalStore': 'originals'\n     },\n    projectStores : false,\n    featureNames : [\n        'cellCopyPasteFeature',\n        'cellEditFeature',\n        'cellMenuFeature',\n        'cellTooltipFeature',\n        'columnAutoWidthFeature',\n        'columnDragToolbarFeature',\n        'columnLinesFeature',\n        'columnPickerFeature',\n        'columnRenameFeature',\n        'columnReorderFeature',\n        'columnResizeFeature',\n        'excelExporterFeature',\n        'fileDropFeature',\n        'fillHandleFeature',\n        'filterFeature',\n        'filterBarFeature',\n        'groupFeature',\n        'groupSummaryFeature',\n        'headerMenuFeature',\n        'headerZoomFeature',\n        'lockRowsFeature',\n        'mergeCellsFeature',\n        'nonWorkingTimeFeature',\n        'panFeature',\n        'pdfExportFeature',\n        'printFeature',\n        'quickFindFeature',\n        'regionResizeFeature',\n        'resourceMenuFeature',\n        'resourceTimeRangesFeature',\n        'rowCopyPasteFeature',\n        'rowEditFeature',\n        'rowExpanderFeature',\n        'rowReorderFeature',\n        'rowResizeFeature',\n        'scheduleTooltipFeature',\n        'searchFeature',\n        'sortFeature',\n        'splitFeature',\n        'stickyCellsFeature',\n        'stripeFeature',\n        'summaryFeature',\n        'timeAxisHeaderMenuFeature',\n        'timeRangesFeature',\n        'treeFeature',\n        'treeGroupFeature'\n    ],\n\n    configNames   : [\n        'adopt',\n        'aggregateDataEntry',\n        'aggregateHistogramDataForGroups',\n        'animateFilterRemovals',\n        'animateRemovingRows',\n        'animateTreeNodeToggle',\n        'ariaDescription',\n        'ariaLabel',\n        'autoAdjustTimeAxis',\n        'autoHeight',\n        'barTooltipTemplate',\n        'bbar',\n        'bodyCls',\n        'bubbleEvents',\n        'bufferCoef',\n        'bufferThreshold',\n        'callOnFunctions',\n        'collapsible',\n        'config',\n        'contentElementCls',\n        'contextMenuTriggerEvent',\n        'dataModelField',\n        'defaultRegion',\n        'destroyStore',\n        'disableGridColumnIdWarning',\n        'disableGridRowModelWarning',\n        'dock',\n        'drawer',\n        'durationDisplayPrecision',\n        'elementAttributes',\n        'enableRecurringEvents',\n        'enableSticky',\n        'enableTextSelection',\n        'fillLastColumn',\n        'fixedRowHeight',\n        'footer',\n        'formulaProviders',\n        'fullRowRefresh',\n        'getBarClass',\n        'getBarDOMConfig',\n        'getBarText',\n        'getBarTextDOMConfig',\n        'getDataEntryForAggregating',\n        'getOutlineClass',\n        'getOutlineDOMConfig',\n        'getRecordData',\n        'getRowHeight',\n        'hardRefreshOnTimeAxisReconfigure',\n        'header',\n        'hideHorizontalScrollbar',\n        'histogramWidgetClass',\n        'hoverCls',\n        'ignoreDomEventsWhileScrolling',\n        'ignoreParentReadOnly',\n        'initAggregatedDataEntry',\n        'listeners',\n        'loadMask',\n        'loadMaskDefaults',\n        'loadMaskError',\n        'localizable',\n        'managedEventSizing',\n        'maskDefaults',\n        'masked',\n        'maxDate',\n        'maxTimeAxisUnit',\n        'minDate',\n        'monitorResize',\n        'owner',\n        'partner',\n        'plugins',\n        'preserveFocusOnDatasetChange',\n        'preserveScrollOnDatasetChange',\n        'preventTooltipOnTouch',\n        'relayStoreEvents',\n        'resizable',\n        'resizeToFitIncludesHeader',\n        'resourceTimeRangeRenderer',\n        'responsiveLevels',\n        'ripple',\n        'rootElement',\n        'scaleColumn',\n        'scalePoints',\n        'scrollerClass',\n        'scrollManager',\n        'series',\n        'showDirty',\n        'snapRelativeToEventStartDate',\n        'stateful',\n        'statefulEvents',\n        'stateId',\n        'stateProvider',\n        'stickyHeaders',\n        'strips',\n        'subGridConfigs',\n        'syncMask',\n        'tab',\n        'tabBarItems',\n        'tbar',\n        'timeAxis',\n        'type',\n        'ui',\n        'visibleZoomFactor',\n        'weekStartDay',\n        'weight',\n        'zoomKeepsOriginalTimespan',\n        'zoomOnMouseWheel',\n        'zoomOnTimeAxisDoubleClick'\n    ],\n    propertyConfigNames : [\n        'alignSelf',\n        'appendTo',\n        'ariaLive',\n        'barMargin',\n        'cellEllipsis',\n        'cls',\n        'collapsed',\n        'columnLines',\n        'columns',\n        'data',\n        'dataset',\n        'disabled',\n        'displayDateFormat',\n        'emptyText',\n        'enableEventAnimations',\n        'enableUndoRedoKeys',\n        'endDate',\n        'eventColor',\n        'eventStyle',\n        'extraData',\n        'fillTicks',\n        'flex',\n        'forceFit',\n        'height',\n        'hidden',\n        'hideFooters',\n        'hideHeaders',\n        'hideRowHover',\n        'histogramWidget',\n        'id',\n        'infiniteScroll',\n        'insertBefore',\n        'insertFirst',\n        'keyMap',\n        'longPressTime',\n        'margin',\n        'maxHeight',\n        'maxWidth',\n        'maxZoomLevel',\n        'minHeight',\n        'minWidth',\n        'minZoomLevel',\n        'onBeforeAssignmentDelete',\n        'onBeforeCancelCellEdit',\n        'onBeforeCancelRowEdit',\n        'onBeforeCellDelete',\n        'onBeforeCellEditStart',\n        'onBeforeColumnDragStart',\n        'onBeforeColumnDropFinalize',\n        'onBeforeColumnResize',\n        'onBeforeCopy',\n        'onBeforeCSVExport',\n        'onBeforeDestroy',\n        'onBeforeEventDelete',\n        'onBeforeExcelExport',\n        'onBeforeFillHandleDragStart',\n        'onBeforeFinishCellEdit',\n        'onBeforeFinishRowEdit',\n        'onBeforeHide',\n        'onBeforeHistogramDataCacheSet',\n        'onBeforePan',\n        'onBeforePaste',\n        'onBeforePdfExport',\n        'onBeforePresetChange',\n        'onBeforeRenderHistogramRow',\n        'onBeforeRenderRecordHistogram',\n        'onBeforeRenderRow',\n        'onBeforeRenderRows',\n        'onBeforeRowCollapse',\n        'onBeforeRowExpand',\n        'onBeforeSelectionChange',\n        'onBeforeSetRecord',\n        'onBeforeShow',\n        'onBeforeStartRowEdit',\n        'onBeforeStateApply',\n        'onBeforeStateSave',\n        'onBeforeToggleGroup',\n        'onBeforeToggleNode',\n        'onCancelCellEdit',\n        'onCatchAll',\n        'onCellClick',\n        'onCellContextMenu',\n        'onCellDblClick',\n        'onCellMenuBeforeShow',\n        'onCellMenuItem',\n        'onCellMenuShow',\n        'onCellMenuToggleItem',\n        'onCellMouseEnter',\n        'onCellMouseLeave',\n        'onCellMouseOut',\n        'onCellMouseOver',\n        'onCollapse',\n        'onCollapseNode',\n        'onColumnDrag',\n        'onColumnDragStart',\n        'onColumnDrop',\n        'onColumnResize',\n        'onColumnResizeStart',\n        'onContextMenuItem',\n        'onContextMenuToggleItem',\n        'onCopy',\n        'onCurrentTimelineUpdate',\n        'onDataChange',\n        'onDateRangeChange',\n        'onDestroy',\n        'onDirtyStateChange',\n        'onDragSelecting',\n        'onExpand',\n        'onExpandNode',\n        'onFileDrop',\n        'onFillHandleBeforeDragFinalize',\n        'onFillHandleDrag',\n        'onFillHandleDragAbort',\n        'onFillHandleDragEnd',\n        'onFillHandleDragStart',\n        'onFinishCellEdit',\n        'onFinishRowEdit',\n        'onFocusIn',\n        'onFocusOut',\n        'onGridRowBeforeDragStart',\n        'onGridRowBeforeDropFinalize',\n        'onGridRowDrag',\n        'onGridRowDragAbort',\n        'onGridRowDragStart',\n        'onGridRowDrop',\n        'onHeaderClick',\n        'onHeaderMenuBeforeShow',\n        'onHeaderMenuItem',\n        'onHeaderMenuShow',\n        'onHeaderMenuToggleItem',\n        'onHide',\n        'onHistogramDataCacheSet',\n        'onLockRows',\n        'onMouseOut',\n        'onMouseOver',\n        'onPaint',\n        'onPaste',\n        'onPdfExport',\n        'onPresetChange',\n        'onReadOnly',\n        'onRecompose',\n        'onRenderRow',\n        'onRenderRows',\n        'onResize',\n        'onResourceMenuBeforeShow',\n        'onResourceMenuItem',\n        'onResourceMenuShow',\n        'onResourceMenuToggleItem',\n        'onResourceTimeRangeClick',\n        'onResourceTimeRangeContextMenu',\n        'onResourceTimeRangeDblClick',\n        'onResourceTimeRangeMouseDown',\n        'onResourceTimeRangeMouseOut',\n        'onResourceTimeRangeMouseOver',\n        'onResourceTimeRangeMouseUp',\n        'onResponsive',\n        'onRowCollapse',\n        'onRowExpand',\n        'onRowMouseEnter',\n        'onRowMouseLeave',\n        'onScroll',\n        'onSelectionChange',\n        'onSelectionModeChange',\n        'onShow',\n        'onSplit',\n        'onSplitterCollapseClick',\n        'onSplitterDragEnd',\n        'onSplitterDragStart',\n        'onSplitterExpandClick',\n        'onStartCellEdit',\n        'onStartRowEdit',\n        'onSubGridCollapse',\n        'onSubGridExpand',\n        'onTickSizeChange',\n        'onTimeAxisChange',\n        'onTimeAxisHeaderClick',\n        'onTimeAxisHeaderContextMenu',\n        'onTimeAxisHeaderDblClick',\n        'onTimeAxisHeaderMenuBeforeShow',\n        'onTimeAxisHeaderMenuItem',\n        'onTimeAxisHeaderMenuShow',\n        'onTimelineContextChange',\n        'onTimelineViewportResize',\n        'onTimeRangeHeaderClick',\n        'onTimeRangeHeaderContextMenu',\n        'onTimeRangeHeaderDblClick',\n        'onToggleGroup',\n        'onToggleNode',\n        'onToolClick',\n        'onUnlockRows',\n        'onUnsplit',\n        'onVisibleDateRangeChange',\n        'preserveScroll',\n        'presets',\n        'readOnly',\n        'recurrenceConfirmationPopup',\n        'rowHeight',\n        'rowLines',\n        'rtl',\n        'scrollable',\n        'selectionMode',\n        'showBarTip',\n        'snap',\n        'startDate',\n        'stateSettings',\n        'store',\n        'suppressFit',\n        'tickSize',\n        'timeResolution',\n        'timeZone',\n        'title',\n        'tools',\n        'transitionDuration',\n        'viewPreset',\n        'visibleDate',\n        'width',\n        'workingTime'\n    ],\n    propertyNames : [\n        'focusVisible',\n        'hasChanges',\n        'originalStore',\n        'parent',\n        'scrollLeft',\n        'scrollTop',\n        'scrollX',\n        'selectedCell',\n        'selectedCells',\n        'selectedRecord',\n        'selectedRecords',\n        'selectedRows',\n        'state',\n        'tooltip',\n        'zoomLevel'\n    ],\n    eventNames : [\n        'beforeAssignmentDelete',\n        'beforeCancelCellEdit',\n        'beforeCancelRowEdit',\n        'beforeCellDelete',\n        'beforeCellEditStart',\n        'beforeColumnDragStart',\n        'beforeColumnDropFinalize',\n        'beforeColumnResize',\n        'beforeCopy',\n        'beforeCSVExport',\n        'beforeDestroy',\n        'beforeEventDelete',\n        'beforeExcelExport',\n        'beforeFillHandleDragStart',\n        'beforeFinishCellEdit',\n        'beforeFinishRowEdit',\n        'beforeHide',\n        'beforeHistogramDataCacheSet',\n        'beforePan',\n        'beforePaste',\n        'beforePdfExport',\n        'beforePresetChange',\n        'beforeRenderHistogramRow',\n        'beforeRenderRecordHistogram',\n        'beforeRenderRow',\n        'beforeRenderRows',\n        'beforeRowCollapse',\n        'beforeRowExpand',\n        'beforeSelectionChange',\n        'beforeSetRecord',\n        'beforeShow',\n        'beforeStartRowEdit',\n        'beforeStateApply',\n        'beforeStateSave',\n        'beforeToggleGroup',\n        'beforeToggleNode',\n        'cancelCellEdit',\n        'catchAll',\n        'cellClick',\n        'cellContextMenu',\n        'cellDblClick',\n        'cellMenuBeforeShow',\n        'cellMenuItem',\n        'cellMenuShow',\n        'cellMenuToggleItem',\n        'cellMouseEnter',\n        'cellMouseLeave',\n        'cellMouseOut',\n        'cellMouseOver',\n        'collapse',\n        'collapseNode',\n        'columnDrag',\n        'columnDragStart',\n        'columnDrop',\n        'columnResize',\n        'columnResizeStart',\n        'contextMenuItem',\n        'contextMenuToggleItem',\n        'copy',\n        'currentTimelineUpdate',\n        'dataChange',\n        'dateRangeChange',\n        'destroy',\n        'dirtyStateChange',\n        'dragSelecting',\n        'expand',\n        'expandNode',\n        'fileDrop',\n        'fillHandleBeforeDragFinalize',\n        'fillHandleDrag',\n        'fillHandleDragAbort',\n        'fillHandleDragEnd',\n        'fillHandleDragStart',\n        'finishCellEdit',\n        'finishRowEdit',\n        'focusIn',\n        'focusOut',\n        'gridRowBeforeDragStart',\n        'gridRowBeforeDropFinalize',\n        'gridRowDrag',\n        'gridRowDragAbort',\n        'gridRowDragStart',\n        'gridRowDrop',\n        'headerClick',\n        'headerMenuBeforeShow',\n        'headerMenuItem',\n        'headerMenuShow',\n        'headerMenuToggleItem',\n        'hide',\n        'histogramDataCacheSet',\n        'lockRows',\n        'mouseOut',\n        'mouseOver',\n        'paint',\n        'paste',\n        'pdfExport',\n        'presetChange',\n        'readOnly',\n        'recompose',\n        'renderRow',\n        'renderRows',\n        'resize',\n        'resourceMenuBeforeShow',\n        'resourceMenuItem',\n        'resourceMenuShow',\n        'resourceMenuToggleItem',\n        'resourceTimeRangeClick',\n        'resourceTimeRangeContextMenu',\n        'resourceTimeRangeDblClick',\n        'resourceTimeRangeMouseDown',\n        'resourceTimeRangeMouseOut',\n        'resourceTimeRangeMouseOver',\n        'resourceTimeRangeMouseUp',\n        'responsive',\n        'rowCollapse',\n        'rowExpand',\n        'rowMouseEnter',\n        'rowMouseLeave',\n        'scroll',\n        'selectionChange',\n        'selectionModeChange',\n        'show',\n        'split',\n        'splitterCollapseClick',\n        'splitterDragEnd',\n        'splitterDragStart',\n        'splitterExpandClick',\n        'startCellEdit',\n        'startRowEdit',\n        'subGridCollapse',\n        'subGridExpand',\n        'tickSizeChange',\n        'timeAxisChange',\n        'timeAxisHeaderClick',\n        'timeAxisHeaderContextMenu',\n        'timeAxisHeaderDblClick',\n        'timeAxisHeaderMenuBeforeShow',\n        'timeAxisHeaderMenuItem',\n        'timeAxisHeaderMenuShow',\n        'timelineContextChange',\n        'timelineViewportResize',\n        'timeRangeHeaderClick',\n        'timeRangeHeaderContextMenu',\n        'timeRangeHeaderDblClick',\n        'toggleGroup',\n        'toggleNode',\n        'toolClick',\n        'unlockRows',\n        'unsplit',\n        'visibleDateRangeChange'\n    ]\n};\n\nconst instance: {\n    value?: TimelineHistogram\n} = {};\n\nconst refElement = ref<HTMLDivElement>()!;\n// Storage for teleports (in-cell Vue component instances) automatically renderer by template\nconst teleports = ref(new Map());\n\n// Provide teleports for processCellContent\nprovide('teleports', teleports);\n\nonMounted(() => {\n\n    const me = getCurrentInstance()!;\n\n    instance.value = WrapperHelper.createWidget<typeof TimelineHistogram>({\n        me,\n        widgetData,\n        emit,\n        element              : refElement.value!,\n        processCellContent   : WrapperHelper.processCellContent,\n        processEventContent  : WrapperHelper.processEventContent,\n        processWidgetContent : WrapperHelper.processWidgetContent,\n        hasFrameworkRenderer : WrapperHelper.hasFrameworkRenderer,\n        toRaw\n    });\n    WrapperHelper.relayStores(me.data, instance.value);\n\n    const watcher = (prop: string, callback: any) => watch(() => me.props[prop], callback);\n    WrapperHelper.watchProps(instance.value, widgetData, watcher);\n});\n\nonBeforeUnmount(() => {\n    // @ts-ignore\n    instance.value?.destroy?.();\n});\n\ndefineExpose({\n    instance,\n    refElement,\n    teleports\n});\n\n</script>\n"],"names":["emit","__emit","widgetData","TimelineHistogram","instance","refElement","ref","teleports","provide","onMounted","me","getCurrentInstance","WrapperHelper","toRaw","watcher","prop","callback","watch","onBeforeUnmount","_b","_a","__expose"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAy8CA,UAAMA,IAAOC,GAgpDPC,IAAa;AAAA,MACf,eAAgBC;AAAA,MAChB,cAAgB;AAAA,MAEhB,QAAS;AAAA,MACT,YAAa;AAAA,QACT,eAAiB;AAAA,MACpB;AAAA,MACD,eAAgB;AAAA,MAChB,cAAe;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MAEA,aAAgqBAAsB;AAAA,QACleAAgB;AAAA,QACZ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA,YAAaaC,EAAoB,GAEjCC,IAAYD,EAAQ,oBAAA,KAAK;AAG/B,WAAAE,EAAQ,aAAaD,CAAS,GAE9BE,EAAU,MAAM;AAEZ,YAAMC,IAAKC,EAAmB;AAErB,MAAAP,EAAA,QAAQQ,EAAc,aAAuC;AAAA,QAClE,IAAAF;AAAA,QACA,YAAAR;AAAA,QACA,MAAAF;AAAA,QACA,SAAuBK,EAAW;AAAA,QAClC,oBAAuBO,EAAc;AAAA,QACrC,qBAAuBA,EAAc;AAAA,QACrC,sBAAuBA,EAAc;AAAA,QACrC,sBAAuBA,EAAc;AAAA,QACrC,OAAAC;AAAA,MAAA,CACH,GACDD,EAAc,YAAYF,EAAG,MAAMN,EAAS,KAAK;AAE3C,YAAAU,IAAU,CAACC,GAAcC,MAAkBC,EAAM,MAAMP,EAAG,MAAMK,CAAI,GAAGC,CAAQ;AACrF,MAAAJ,EAAc,WAAWR,EAAS,OAAOF,GAAYY,CAAO;AAAA,IAAA,CAC/D,GAEDI,EAAgB,MAAM;;AAElB,OAAAC,KAAAC,IAAAhB,EAAS,UAAT,gBAAAgB,EAAgB,YAAhB,QAAAD,EAAA,KAAAC;AAAA,IAA0B,CAC7B,GAEYC,EAAA;AAAA,MACT,UAAAjB;AAAA,MACA,YAAAC;AAAA,MACA,WAAAE;AAAA,IAAA,CACH;;;;;;;;;;;;;;;;;;;;"}